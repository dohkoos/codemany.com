<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ListView | 乐者为王]]></title>
  <link href="http://codemany.com/tags/listview/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-09-12T23:56:52+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[给ListView添加卸载功能的Button]]></title>
    <link href="http://codemany.com/blog/2011/06/06/adding-uninstall-button-to-the-listview/"/>
    <updated>2011-06-06T09:25:43+08:00</updated>
    <id>http://codemany.com/blog/2011/06/06/adding-uninstall-button-to-the-listview</id>
    <content type="html"><![CDATA[<p>修改main.xml，添加Button控件：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>"</p>

<pre><code>android:orientation="vertical"
android:layout_width="fill_parent"
android:layout_height="fill_parent"&gt;
&lt;LinearLayout
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_weight="1.0"&gt;
    &lt;ListView
        android:id="@+id/list_view"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" /&gt;
&lt;/LinearLayout&gt;
&lt;LinearLayout
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"&gt;
    &lt;Button
        android:id="@+id/uninstall_button"
        android:text="Uninstall Selected Apps"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>然后在MainActivity类中添加卸载应用的代码：</p>

<p>```
private UninstallReceiver mUninstallReceiver;</p>

<p>@Override
public void onCreate(Bundle savedInstanceState) {</p>

<pre><code>Button btn = (Button)findViewById(R.id.uninstall_button);
btn.setOnClickListener(new OnClickListener() {
    @Override
    public void onClick(View v) {
        for (int i = 0; i &lt; mListData.size(); i++) {
            HashMap&lt;String, Object&gt; map = mListData.get(i);
            boolean isSelected = (Boolean)map.get("app_select");
            if (isSelected) {
                Uri packageUri = Uri.parse("package:" + map.get("app_package"));
                Intent intent = new Intent(Intent.ACTION_DELETE, packageUri);
                startActivity(intent);
            }
        }
    }
});

// 监听卸载广播
mUninstallReceiver = new UninstallReceiver();
IntentFilter filter = new IntentFilter(Intent.ACTION_PACKAGE_REMOVED);
filter.addDataScheme("package");
registerReceiver(mUninstallReceiver, filter);
</code></pre>

<p>}</p>

<p>// 有时选择移除的程序在确认时被取消了，因此要用BroadcastReceiver监听应用是否被真正地卸载
private class UninstallReceiver extends BroadcastReceiver {</p>

<pre><code>@Override
public void onReceive(Context ctx, Intent intent) {
    Log.d("UninstallReceiver.onReceive()", intent.getDataString());

    for (int i = 0; i &lt; mListData.size(); i++) {
        HashMap&lt;String, Object&gt; map = mListData.get(i);
        String packageUri = "package:" + map.get("app_package");
        if (packageUri.equals(intent.getDataString())) {
            mListData.remove(map);
        }
    }
    mHandler.sendEmptyMessage(0);
}
</code></pre>

<p>}</p>

<p>@Override
public void onDestroy() {</p>

<pre><code>super.onDestroy();
unregisterReceiver(mUninstallReceiver);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向ListView中添加CheckBox]]></title>
    <link href="http://codemany.com/blog/2011/06/03/adding-checkbox-to-the-listview/"/>
    <updated>2011-06-03T14:30:01+08:00</updated>
    <id>http://codemany.com/blog/2011/06/03/adding-checkbox-to-the-listview</id>
    <content type="html"><![CDATA[<p>修改list_item.xml文件，添加CheckBox控件：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>"</p>

<pre><code>android:layout_width="fill_parent"
android:layout_height="wrap_content"&gt;
&lt;ImageView
    android:id="@+id/app_icon"
    android:layout_gravity="center_vertical"
    android:layout_width="32.0dip"
    android:layout_height="32.0dip"
    android:layout_marginLeft="3.0dip"
    android:layout_marginRight="3.0dip" /&gt;
&lt;LinearLayout
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_weight="1.0"&gt;
    &lt;TextView
        android:id="@+id/app_title"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="16.0dip"
        android:textStyle="bold" /&gt;
    &lt;TextView
        android:id="@+id/app_package"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="13.0dip" /&gt;
&lt;/LinearLayout&gt;
&lt;CheckBox
    android:id="@+id/app_select"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:focusable="false"
    android:focusableInTouchMode="false"
    android:clickable="false"
    android:checkMark="?android:attr/listChoiceIndicatorMultiple" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>这三行代码很重要，如果不加会出现一些奇怪的错误。</p>

<p><code>
android:focusable="false"
android:focusableInTouchMode="false"
android:clickable="false"
</code></p>

<p>加入CheckBox后，在程序运行过程中会发现整个ListView无法响应onItemClick、onItemLongClick或onCreateContextMenu事件。原因在于CheckBox是拥有焦点的，它的优先级比ListItem的焦点优先级更高，于是ListItem的点击事件被屏蔽了。解决方法是让CheckBox不能获得焦点。android:focusable="false"就是做这个的。</p>

<p>修改整个SimpleIconAdapter类为以下内容：</p>

<p>```
public class SimpleIconAdapter extends BaseAdapter {</p>

<pre><code>private LayoutInflater mInflater;
private List&lt;? extends Map&lt;String, ?&gt;&gt; mData;

public SimpleIconAdapter(Context context, List&lt;? extends Map&lt;String, ?&gt;&gt; data) {
    mInflater = LayoutInflater.from(context);
    mData = data;
}

@Override
public int getCount() {
    return mData.size();
}

@Override
public Object getItem(int position) {
    return mData.get(position);
}

@Override
public long getItemId(int position) {
    return position;
}

@SuppressWarnings({ "rawtypes", "unchecked" })
@Override
public View getView(int position, View convertView, ViewGroup parent) {
    View view;
    if (convertView != null) {
        view = convertView;
    } else {
        view = mInflater.inflate(R.layout.list_item, parent, false);
    }

    Map map = (Map)getItem(position);
    TextView tv = (TextView)view.findViewById(R.id.app_title);
    tv.setText((String)map.get("app_title"));

    tv = (TextView)view.findViewById(R.id.app_package);
    tv.setText((String)map.get("app_package"));

    ImageView iv = (ImageView)view.findViewById(R.id.app_icon);
    iv.setImageDrawable((Drawable)map.get("app_icon"));

    CheckBox cb = (CheckBox)view.findViewById(R.id.app_select);
    if ((Boolean)map.get("app_select") ==  null) {
        map.put("app_select", false);
    }
    cb.setChecked((Boolean)map.get("app_select"));

    return view;
}
</code></pre>

<p>}
```</p>

<p>再就是修改MainActivity文件：</p>

<p>```
public class MainActivity extends Activity {</p>

<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    mListView = (ListView)findViewById(R.id.list_view);
    mListData = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();
    mAdapter = new SimpleIconAdapter(this, mListData);
    mListView.setAdapter(mAdapter);
    mListView.setItemsCanFocus(false);
    mListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
    mListView.setOnItemClickListener(new OnItemClickListener() {
        @SuppressWarnings({ "unchecked", "rawtypes" })
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
            // 这里如此处理是因为当选中CheckBox，滚动ListView的时候，会出现一些
            // CheckBox选择错位的现象，所以在选择CheckBox时，记下其状态，然后在
            // getView方法中进行设置。
            //
            // 原因：
            // ListView中的getChildCount()并不总是等于Adapter中的数据行数。当手
            // 机一屏显示不了所有数据时（需要翻页），getChildCount()就等于一屏
            // 所显示的行数（一般为10），小于Adapter中的数据行数。而ListView的
            // getCount()与Adapter中的数据行数相等。
            // 当光标下移到屏幕最底部，新显示出来的View，在调用Adapter的getView
            // 方法中，会判断convertView为null，而再有新的View显示就会发现
            // convertView不为空，所以新显示的View其实使用了之前某个View的对象。
            // 这就造成了状态可能混乱。比如第一行的CheckBox点选时，第11行的也同
            // 时会被点选。
            CheckBox cb = (CheckBox)view.findViewById(R.id.app_select);
            cb.toggle();
            ((Map)mListData.get(position)).put("app_select", cb.isChecked());
        }
    });

    mProgressDialog = ProgressDialog.show(this, "Wait", "loading...");
    new Thread() {
        @Override
        public void run() {
            mListData.addAll(getInstalledApps(false));
            mHandler.sendEmptyMessage(0);
        }
    }.start();
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现带Icon的ListView（改进版）]]></title>
    <link href="http://codemany.com/blog/2011/06/02/implement-listview-with-icon-improved/"/>
    <updated>2011-06-02T02:47:58+08:00</updated>
    <id>http://codemany.com/blog/2011/06/02/implement-listview-with-icon-improved</id>
    <content type="html"><![CDATA[<p>带Icon的ListView工作起来还不错，但是如果手机里安装的软件比较多的话就有问题了。在程序启动时会黑屏一段时间，就好像程序挂起了一样。所以这时需要显示一个对话框，告诉用户正在加载数据，最好还能准确告诉用户加载的进度。</p>

<p>显示对话框用ProgressDialog，它有两种样式：HORIZONTAL和SPINNER。这里暂时选择SPINNER，等以后有机会再改成HORIZONTAL。</p>

<p>我们在加载数据前显示ProgressDialog，在之后关闭对话框。示例代码如下：</p>

<p>```
ProgressDialog pd = ProgressDialog.show(this, "Wait", "loading...");</p>

<p>ListView lv = (ListView)findViewById(R.id.list_view);
adapter = new SimpleIconAdapter(this,</p>

<pre><code>    getInstalledApps(false),
    R.layout.list_item,
    new String[] {APP_ICON, APP_TITLE, APP_PACKAGE},
    new int[] {R.id.app_icon, R.id.app_title, R.id.app_package});
</code></pre>

<p>lv.setAdapter(adapter);</p>

<p>pd.dismiss();
```</p>

<p>但结果ProgressDialog没有显示出来，因为加载数据的代码也执行在UI线程中，所以对话框的显示被阻塞了。怎么办呢？可以试着创建一个新线程，然后把加载数据这个耗时的操作放到这个非UI线程中去执行，这样不就可以了么：</p>

<p>```
ProgressDialog pd = ProgressDialog.show(this, "Wait", "loading...");</p>

<p>new Thread() {</p>

<pre><code>@Override
public void run() {
    ListView lv = (ListView)findViewById(R.id.list_view);
    adapter = new SimpleIconAdapter(Main.this,
            getInstalledApps(false),
            R.layout.list_item,
            new String[] {APP_ICON, APP_TITLE, APP_PACKAGE},
            new int[] {R.id.app_icon, R.id.app_title, R.id.app_package});
    lv.setAdapter(adapter);
}
</code></pre>

<p>}.start();</p>

<p>pd.dismiss();
```</p>

<p>这下更惨了，直接报Runtime异常，连界面都打不开了。</p>

<p>深入研究一下Android的线程模型，看看Android到底是怎么处理UI线程和其它线程的交互的，为什么上面的代码会报异常?</p>

<blockquote><p>When an application is launched, the system creates a thread called "main" for the application. The main thread, also called the UI thread, is very important because it is in charge of dispatching the events to the appropriate widgets, including drawing events. It is also the thread where your application interacts with running components of the Android UI toolkit.</p>

<p>For instance, if you touch the a button on screen, the UI thread dispatches the touch event to the widget, which in turn sets its pressed state and posts an invalidate request to the event queue. The UI thread dequeues the request and notifies the widget to redraw itself.</p>

<p>This single-thread model can yield poor performance unless your application is implemented properly. Specifically, if everything is happening in a single thread, performing long operations such as network access or database queries on the UI thread will block the whole user interface. No event can be dispatched, including drawing events, while the long operation is underway. From the user's perspective, the application appears hung. Even worse, if the UI thread is blocked for more than a few seconds (about 5 seconds currently) the user is presented with the infamous "application not responding" (ANR) dialog.</p></blockquote>

<p>看了上面这段话可以知道为啥程序一打开就黑屏，像挂掉了一样。</p>

<p>那为什么用新建线程来执行耗时操作的代码也有问题呢？这是因为它虽然没有阻塞UI线程，但它违背了单线程模型，Android的UI操作并不是线程安全的，并且这些操作必须在UI线程中执行。在这段代码片段中，在另一个线程中执行数据加载绑定，这会引起一些古怪的问题。</p>

<p>Andriod提供了几种在其它线程中访问UI线程的方法：</p>

<ul>
<li><a href="http://developer.android.com/reference/android/app/Activity.html#runOnUiThread(java.lang.Runnable)">Activity.runOnUiThread(Runnable)</a></li>
<li><a href="http://developer.android.com/reference/android/view/View.html#post(java.lang.Runnable)">View.post(Runnable)</a></li>
<li><a href="http://developer.android.com/reference/android/view/View.html#postDelayed(java.lang.Runnable,%20long)">View.postDelayed(Runnable, long)</a></li>
<li><a href="http://developer.android.com/reference/android/os/Handler.html">Hanlder</a></li>
</ul>


<p>上面的任何一个类或方法都可以修复我们前面代码中遇到的问题，很不幸的是这些类或方法同样会使你的代码变的很复杂很难理解。而且当你需要实现一些很复杂的操作并需要频繁地更新UI时会变得更糟糕。为了解决这个问题，Android 1.5提供了一个工具类AsyncTask，它使创建需要与用户界面交互的长时间运行的任务变得更简单。在Android 1.0和1.1中具有与AsyncTask相同功能的类UserTask，它提供了完全一样的API，你需要做的只是把它的代码拷贝的你的程序中。</p>

<p>其实这些方案背后采用的都是Handler。所以这里仍然使用旧有的，复杂的Handler来修复上述问题。</p>

<p>```
package com.codemany.apkmgt;</p>

<p>import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;</p>

<p>import android.app.Activity;
import android.app.ProgressDialog;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.widget.ListView;</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>private static final String APP_ICON = "app_icon";
private static final String APP_TITLE = "app_title";
private static final String APP_PACKAGE = "app_package";

private SimpleIconAdapter adapter;
private List&lt;HashMap&lt;String, Object&gt;&gt; listData;
private ProgressDialog pd;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    ListView lv = (ListView)findViewById(R.id.list_view);
    listData = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();
    adapter = new SimpleIconAdapter(this,
            listData,
            R.layout.list_item,
            new String[] {APP_ICON, APP_TITLE, APP_PACKAGE},
            new int[] {R.id.app_icon, R.id.app_title, R.id.app_package});
    lv.setAdapter(adapter);

    pd = ProgressDialog.show(this, "Wait", "loading...");

    new Thread() {
        @Override
        public void run() {
            // 耗时操作，加载数据
            listData.addAll(getInstalledApps(false));
            handler.sendEmptyMessage(0);
        }
    }.start();
}

private Handler handler = new Handler() {
    @Override
    public void handleMessage(Message msg) {
        // 通知UI更新。必须要放在这里
        adapter.notifyDataSetChanged();

        pd.dismiss();
    }
};
</code></pre>

<p>}
```</p>

<p>参考资料：<br />
<a href="http://developer.android.com/resources/articles/painless-threading.html">http://developer.android.com/resources/articles/painless-threading.html</a><br />
<a href="http://kiminotes.iteye.com/blog/382683">http://kiminotes.iteye.com/blog/382683</a> 这个实际上是上面文章的译文</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现带Icon的ListView]]></title>
    <link href="http://codemany.com/blog/2011/05/26/implement-listview-with-icon/"/>
    <updated>2011-05-26T08:26:55+08:00</updated>
    <id>http://codemany.com/blog/2011/05/26/implement-listview-with-icon</id>
    <content type="html"><![CDATA[<p><img src="/uploads/apkmgt-screenshot.png" title="apkmgt-screenshot" ></p>

<p>main.xml不需要修改，还是用原来的那个：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>"</p>

<pre><code>android:orientation="vertical"
android:layout_width="fill_parent"
android:layout_height="wrap_content"&gt;
&lt;ListView
    android:id="@+id/list_view"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>在list_item.xml中添加ImageView控件，设置高度和宽度分别为32dip，这是因为有些应用Icon尺寸比较大的缘故，如果不设置的话有些行就会撑大：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>"</p>

<pre><code>android:layout_width="fill_parent"
android:layout_height="wrap_content"&gt;
&lt;ImageView
    android:id="@+id/app_icon"
    android:layout_gravity="center_vertical"
    android:layout_width="32.0dip"
    android:layout_height="32.0dip"
    android:layout_marginLeft="3.0dip"
    android:layout_marginRight="3.0dip" /&gt;
&lt;LinearLayout
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_weight="1.0"&gt;
    &lt;TextView
        android:id="@+id/app_title"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="16.0dip"
        android:textStyle="bold" /&gt;
    &lt;TextView
        android:id="@+id/app_package"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="13.0dip" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>新建SimpleIconAdapter类，继承SimpleAdapter适配器：</p>

<p>```
package com.codemany.apkmgt;</p>

<p>import java.util.List;
import java.util.Map;</p>

<p>import android.content.Context;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.SimpleAdapter;</p>

<p>public class SimpleIconAdapter extends SimpleAdapter {</p>

<pre><code>public SimpleIconAdapter(Context context, List&lt;? extends Map&lt;String, ?&gt;&gt; data,
        int resource, String[] from, int[] to) {
    super(context, data, resource, from, to);
}

@SuppressWarnings("rawtypes")
@Override
public View getView(int position, View convertView, ViewGroup parent) {
    View view = super.getView(position, convertView, parent);
    ImageView iv = (ImageView)view.findViewById(R.id.app_icon);
    iv.setImageDrawable((Drawable)((Map)getItem(position)).get("app_icon"));
    return view;
}
</code></pre>

<p>}
```</p>

<p>修改MainActivity文件，更换绑定的适配器：</p>

<p>```
package com.codemany.apkmgt;</p>

<p>import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;</p>

<p>import android.app.Activity;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.widget.ListView;
import android.widget.SimpleAdapter;</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>private static final String APP_ICON = "app_icon";
private static final String APP_TITLE = "app_title";
private static final String APP_PACKAGE = "app_package";

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    ListView listView = (ListView)findViewById(R.id.list_view);
    SimpleAdapter adapter = new SimpleIconAdapter(this,
            getInstalledApps(false),
            R.layout.list_item,
            new String[] {APP_ICON, APP_TITLE, APP_PACKAGE},
            new int[] {R.id.app_icon, R.id.app_title, R.id.app_package});
    listView.setAdapter(adapter);
}

private List&lt;HashMap&lt;String, Object&gt;&gt; getInstalledApps(boolean getSysPackages) {
    List&lt;HashMap&lt;String, Object&gt;&gt; listItem = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();

    List&lt;PackageInfo&gt; pkgs = getPackageManager().getInstalledPackages(0);
    for (int i = 0; i&lt; pkgs.size(); i++) {
        PackageInfo pkg = pkgs.get(i);
        if (!getSysPackages &amp;&amp; (pkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) &gt; 0) {
            continue;
        }
        Drawable icon = pkg.applicationInfo.loadIcon(getPackageManager());
        String label = pkg.applicationInfo.loadLabel(getPackageManager()).toString();
        String version = pkg.versionName;
        String pkgName = pkg.packageName;

        HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(APP_ICON, icon);
        map.put(APP_TITLE, label + " " + version);
        map.put(APP_PACKAGE, pkgName);
        listItem.add(map);
    }
    return listItem;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不使用ListActivity实现ListView]]></title>
    <link href="http://codemany.com/blog/2011/05/25/implement-listview-without-listactivity/"/>
    <updated>2011-05-25T05:29:57+08:00</updated>
    <id>http://codemany.com/blog/2011/05/25/implement-listview-without-listactivity</id>
    <content type="html"><![CDATA[<p>main.xml</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>"</p>

<pre><code>android:orientation="vertical"
android:layout_width="fill_parent"
android:layout_height="wrap_content"&gt;
&lt;ListView
    android:id="@+id/list_view"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>list_item.xml</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>"</p>

<pre><code>android:layout_width="fill_parent"
android:layout_height="wrap_content"&gt;
&lt;LinearLayout
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_weight="1.0"&gt;
    &lt;TextView
        android:id="@+id/app_title"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="16dip" /&gt;
    &lt;TextView
        android:id="@+id/app_package"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>创建一个继承自Activitiy的类，重写onCreate方法：</p>

<p>```
package com.codemany.apkmgt;</p>

<p>import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;</p>

<p>import android.app.Activity;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.os.Bundle;
import android.widget.ListView;
import android.widget.SimpleAdapter;</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    ListView listView = (ListView)findViewById(R.id.list_view);
    SimpleAdapter adapter = new SimpleAdapter(this,
            getInstalledApps(false),
            R.layout.list_item,
            new String[] {"app_title", "app_package"},
            new int[] {R.id.app_title, R.id.app_package});
    listView.setAdapter(adapter);
}

private List&lt;HashMap&lt;String, Object&gt;&gt; getInstalledApps(boolean getSysPackages) {
    List&lt;HashMap&lt;String, Object&gt;&gt; listItem = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();

    List&lt;PackageInfo&gt; pkgs = getPackageManager().getInstalledPackages(0);
    for (int i = 0; i&lt; pkgs.size(); i++) {
        PackageInfo pkg = pkgs.get(i);
        if (!getSysPackages &amp;&amp; (pkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) &gt; 0) {
            continue;
        }
        String label = pkg.applicationInfo.loadLabel(getPackageManager()).toString();
        String version = pkg.versionName;
        String pkgName = pkg.packageName;

        HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put("app_title", label + " " + version);
        map.put("app_package", pkgName);
        listItem.add(map);
    }
    return listItem;
}
</code></pre>

<p>}
```</p>

<p>至此，一个不使用ListActivity的ListView就完成了。</p>
]]></content>
  </entry>
  
</feed>
