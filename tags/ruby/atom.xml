<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | 乐者为王]]></title>
  <link href="http://codemany.com/tags/ruby/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-01-15T22:53:00+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[带权随机函数]]></title>
    <link href="http://codemany.com/blog/random-with-weight-function/"/>
    <updated>2015-11-18T18:51:05+08:00</updated>
    <id>http://codemany.com/blog/random-with-weight-function</id>
    <content type="html"><![CDATA[<ul>
<li>设计抽奖活动时，我们总是要控制抽奖物品出现的概率，让好的东西很难被抽到；</li>
<li>设计游戏打怪时，我们要控制打怪时的命中概率，要控制宝物掉出的概率；</li>
<li>网站的置顶广告，我们也要根据广告主的广告费用控制广告的出现时间；</li>
<li>设计负载均衡算法时，我们要根据服务器的性能控制服务器被选中的可能。</li>
</ul>

<p>深入思考这些需求，你会发现它们都有相通的概念：每次从多个候选项中随机选取其中一项，要求每个候选项的出现都有一定的概率。</p>

<p>假设有这样的候选项和对应概率：a:20%，b:25%，c:40%，d:15%。现在，把每个候选项的概率用一个称之为权重的正整数表示（最简单的方法是把百分符号去掉）。那么，</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">实际概率 = 候选项权重 / 权重总和 * 100%
</code></pre></div>
<p>事实上，权重的总和不一定要等于100，可以是任意大小。</p>

<h3 id="算法描述">算法描述</h3>

<p>依次将各候选项的权重从原点开始放在x轴坐标上首尾相连。这样，每个候选项对应一个取值区间，在总区间范围内随机选取一个值，该值所在区间就对应了选中的项。</p>

<p><img src="/uploads/random-with-weight.png" title="random-with-weight" ></p>

<h3 id="ruby代码实现">Ruby代码实现</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">def random(weight)
  # 获取所有候选项的权重总和
  total_weight = weight.inject { |r, e| r + e }

  # 随机选取一个介于0到权重总和之间的整数
  rand_value = rand(total_weight)  # [0, total_weight)

  # 扫描所有候选项，并且保留候选项权重的累积数。
  # 每当随机数小于累积数时，就停止并选出当前项。
  weight_barrier = 0
  weight.each_index do |i|
    weight_barrier += weight[i]

    break i if rand_value &lt; weight_barrier
  end
end
</code></pre></div>
<p>该实现不能保证每个候选项都恰好按正确的比例被选中，但当次数足够多时，应该会十分接近预先设定的比例。</p>

<h3 id="实际案例">实际案例</h3>

<p>要求写int[] get_weight(int[] weight)函数，返回的是权重的索引。其中weight是权重的数字数组，最终的结果是要大概保证按照给定的比例。</p>

<ul>
<li>比如weight为[1, 2, 2]，那么权重比例为1:2:2，执行10次后，大概的输出是0 1 1 0 1 1 2 2 2 2；</li>
<li>比如weight为[100, 0]，那么权重比例为100:0，执行10次后，大概的输出是0 0 0 0 0 0 0 0 0 0；</li>
<li>比如weight为[1, 1]，那么权重比例为1:1，执行10次后，大概的输出是0 1 0 1 0 0 1 1 0 1。</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">def get_weight(weight)
  10.times.map { random(weight) }
end

weight = [1, 2, 2]
puts get_weight(weight).join(&#39; &#39;)

weight = [100, 0]
puts get_weight(weight).join(&#39; &#39;)

weight = [1, 1]
puts get_weight(weight).join(&#39; &#39;)
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逻辑题-共打了多少鱼]]></title>
    <link href="http://codemany.com/blog/logic-problems-how-many-fish/"/>
    <updated>2015-11-03T15:07:14+08:00</updated>
    <id>http://codemany.com/blog/logic-problems-how-many-fish</id>
    <content type="html"><![CDATA[<p>abcde五人打渔，打完睡觉，a先醒来，扔掉1条鱼，把剩下的分成5份，拿1份走了；b再醒来，也扔掉1条，把剩下的分成5份，拿1份走了；然后cde都按上面的方法取鱼。问他们最少打了多少条鱼？</p>

<table><thead>
<tr>
<th>渔民</th>
<th>醒来时鱼的总数</th>
<th>取走的鱼数</th>
</tr>
</thead><tbody>
<tr>
<td>a</td>
<td>x1 = x</td>
<td>(x1 - 1) / 5</td>
</tr>
<tr>
<td>b</td>
<td>x2 = 4 * (x1 - 1) / 5</td>
<td>(x2 - 1) / 5</td>
</tr>
<tr>
<td>c</td>
<td>x3 = 4 * (x2 - 1) / 5</td>
<td>(x3 - 1) / 5</td>
</tr>
<tr>
<td>d</td>
<td>x4 = 4 * (x3 - 1) / 5</td>
<td>(x4 - 1) / 5</td>
</tr>
<tr>
<td>e</td>
<td>x5 = 4 * (x4 - 1) / 5</td>
<td>(x5 - 1) / 5</td>
</tr>
</tbody></table>

<p>由于扔掉1条鱼后，还能被分成5份，设渔民醒来时鱼的总数为remain，那么(remain - 1) % 5的值为0，即remain % 5的值为1。</p>

<p>最简单的方法就是枚举，最小值从1开始：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">fishmen = [0, 0, 0, 0, 0]  # 渔民取走的鱼数
total = 1

while true do
  remain = total  # 渔民a醒来时鱼的总数
  5.times do |i|  # 5个渔民轮流取鱼
    break if remain % 5 != 1  # 如果不符合扔掉1条鱼后还能分成5份的条件，就枚举下个值
    fishmen[i] = (remain - 1) / 5  # 渔民取走的鱼数
    remain = 4 * fishmen[i]  # 渔民取走鱼后剩下的鱼数
  end
  break if fishmen[4] != 0  # 如果渔民e也取到了鱼，那么就得到了鱼的总数
  total += 1
end

puts total  # 结果是3121条鱼
</code></pre></div>
<p>上面的代码总过做了3901次循环，下面来做进一步的优化。</p>

<p>从表格可以看出，因为(x5 - 1) % 5 == 0，推导出x5 &gt;= 6；又x1 % 5 == 1，因此x1的个位数必须是1或者6。所以，枚举的最小值可以从11开始，每次步进为5。优化后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">fishmen = Array.new(n, 0)
total = 11

while true do
  remain = total
  5.times do |i|
    break if remain % 5 != 1
    fishmen[i] = (remain - 1) / 5
    remain = 4 * fishmen[i]
  end
  break if fishmen[4] != 0
  total += 5
end

puts total
</code></pre></div>
<p>总的循环次数减少到1401次，减少了整整64%的循环。</p>

<p>推而广之：n个渔民打渔，每个渔民依次扔掉1条鱼后，把鱼分成n份，然后拿走其中一份，求最少打了多少条鱼？</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">fishmen = Array.new(n, 0)
total = 2 * n + 1

while true do
  remain = total
  n.times do |i|
    break if remain % n != 1
    fishmen[i] = (remain - 1) / n
    remain = remain - 1 - fishmen[i]
  end
  break if fishmen[n - 1] != 0
  total += n
end

puts total
</code></pre></div>
<p>这下子无论多少个渔民打渔都可以用这段代码搞定了。我试了试9个渔民，发现竟然可以打近3.9亿条鱼，那得有多少鱼啊！另外，计算时间也明显开始变长了。不知道还能不能做更进一步的优化。如果你有更好的算法，请快点告诉我吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby调试工具概览]]></title>
    <link href="http://codemany.com/blog/ruby-debugger-overview/"/>
    <updated>2015-10-19T10:50:09+08:00</updated>
    <id>http://codemany.com/blog/ruby-debugger-overview</id>
    <content type="html"><![CDATA[<p>调试Ruby代码最简单的方式就是使用puts或p方法。当有很多变量需要查看时，到处添加puts或p方法就可能变的不那么实际。幸好，Ruby社区提供了许多强大的调试工具。</p>

<h3 id="ruby-1-8-时代">Ruby 1.8+时代</h3>

<p>调试Ruby代码使用<a href="https://github.com/ruby-debug/ruby-debug">ruby-debug</a>。调试Rails代码则是<a href="https://github.com/nixme/pry-nav">pry-nav</a>。不过在Ruby 1.9出来后ruby-debug就有问题了，于是就有了<a href="https://github.com/mark-moseley/ruby-debug">ruby-debug19</a>，一个针对Ruby 1.9的ruby-debug移植版本。</p>

<h3 id="ruby-1-9-2-时代">Ruby 1.9.2+时代</h3>

<p>等到Ruby 1.9.2发布，ruby-debug彻底歇菜，然后<a href="https://github.com/cldwalker/debugger">debugger</a>就出现了。pry-nav也不好使了，还好有<a href="https://github.com/nixme/pry-debugger">pry-debugger</a>。</p>

<h3 id="ruby-2-时代">Ruby 2+时代</h3>

<p>新的Ruby调试工具<a href="https://github.com/deivid-rodriguez/byebug">byebug</a>来了。虽然byebug也能调试Rails应用，但它不提供语法高亮，所以使用<a href="https://github.com/deivid-rodriguez/pry-byebug">pry-byebug</a>是个更好的选择。</p>

<table><thead>
<tr>
<th></th>
<th>Ruby 1.8+</th>
<th>Ruby 1.9</th>
<th>Ruby 1.9.2+</th>
<th>Ruby 2+</th>
</tr>
</thead><tbody>
<tr>
<td>Ruby</td>
<td>ruby-debug</td>
<td>ruby-debug19</td>
<td>debugger</td>
<td>byebug</td>
</tr>
<tr>
<td>Rails</td>
<td>pry-nav</td>
<td>pry-nav</td>
<td>pry-debugger</td>
<td>pry-byebug</td>
</tr>
</tbody></table>

<h3 id="其它">其它</h3>

<p><a href="https://github.com/pry/pry">Pry</a>其实不是纯粹的调试工具，它只是IRB的替代品，所以缺乏必要的调试指令。pry-nav、pry-debugger和pry-byebug做的只是分别把ruby-debug、debugger和byebug中的step、next、continue等指令添加到Pry中。</p>

<ul>
<li>pry-nav = Pry + ruby-debug</li>
<li>pry-debugger = Pry + debugger</li>
<li>pry-byebug = Pry + byebug</li>
</ul>

<p>如果要调试view怎么办？可以使用<a href="https://github.com/rails/web-console">Web Console</a>。在view里面加上&lt;%= console %&gt;，当view出现异常时，就会在异常界面下方，出现一个网页版的IRB，方便调试。Web Console默认只接受localhost的请求，假如需要让别的IP也能访问的话，可以这样做：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Application &lt; Rails::Application
  config.web_console.whitelisted_ips = &#39;192.168.0.100&#39;
end
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据Exif时间信息归类照片]]></title>
    <link href="http://codemany.com/blog/move-photos-to-folders-based-on-exif-date/"/>
    <updated>2014-11-20T22:52:37+08:00</updated>
    <id>http://codemany.com/blog/move-photos-to-folders-based-on-exif-date</id>
    <content type="html"><![CDATA[<p>先要把Exif中的信息解析出来，得到其中的时间，有个<a href="https://github.com/remvee/exifr">exif</a>的gem很不错。然后再根据时间创建目录，把照片移动到对应的目录中。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">require &#39;rubygems&#39;
require &#39;exifr&#39;
require &#39;fileutils&#39;

root = ARGV[0] || Dir.pwd

Dir.foreach(root) do |file|
  next if File.extname(file) != &#39;.jpg&#39;

  obj = EXIFR::JPEG.new(file)
  date_time_original = obj.exif.date_time_original if obj.exif?
  next if date_time_original.nil?

  dir = date_time_original.year.to_s
  Dir.mkdir(dir) unless Dir.exist?(dir)
  FileUtils.move(file, dir)
end
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中读二进制文件时大小错误]]></title>
    <link href="http://codemany.com/blog/read-binary-file-give-wrong-size-in-ruby/"/>
    <updated>2014-10-09T23:37:59+08:00</updated>
    <id>http://codemany.com/blog/read-binary-file-give-wrong-size-in-ruby</id>
    <content type="html"><![CDATA[<p>经常会遇到这类场景，要把文件内容一次性全部读取出来。使用IO.read(&#39;example.bin&#39;)读取二进制文件时，发现读出来的大小与实际结果不符合。原来默认不加参数时仅限于读文本文件，需要指定mode为b。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">IO.read(&#39;example.bin&#39;, { mode: &#39;rb&#39; })
</code></pre></div>
<p>还有种简洁的读取方式是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">File.open(&#39;example.bin&#39;, &#39;rb&#39;).readlines.join
</code></pre></div>]]></content>
  </entry>
  
</feed>
