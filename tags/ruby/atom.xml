<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | 乐者为王]]></title>
  <link href="http://codemany.com/tags/ruby/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-24T18:55:48+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nokogiri抓取页面URL含有中文参数的问题]]></title>
    <link href="http://codemany.com/blog/2014/07/17/problem-with-nokogiri-when-url-containing-chinese-character/"/>
    <updated>2014-07-17T22:48:00+08:00</updated>
    <id>http://codemany.com/blog/2014/07/17/problem-with-nokogiri-when-url-containing-chinese-character</id>
    <content type="html"><![CDATA[<p>使用Nokogiri抓取某网站的长江现货数据，被抓取页面的URL中含有中文参数，使用以下的代码抓取数据失败：</p>

<p><code>
url = 'http://example.com/search.asp?type=长江有色&amp;sort=asc'
doc = Nokogiri::HTML(open(url))
</code></p>

<p>据 <a href="http://dingr.iteye.com/blog/647244">http://dingr.iteye.com/blog/647244</a> 讲是因为浏览器给服务器发送参数的时候是经过编码的，按照该文的意思试着也给URL里的中文编了下码：</p>

<p><code>
url = 'http://example.com/search.asp?type=长江有色&amp;sort=asc'
url = URI.escape(url)
doc = Nokogiri::HTML(open(url))
</code></p>

<p>结果还是抓取失败。查看URL的编码信息：</p>

<p><code>
puts url.encoding  # 输出utf-8
</code></p>

<p>网站页面采用的是GB2132编码，猜测网站后台处理数据时很有可能也是采用的GB2132。做个实验就清楚了，将URL转成GB2132后再编码：</p>

<p><code>
url = 'http://example.com/search.asp?type=长江有色&amp;sort=asc'
url = url.encode('gbk', 'utf-8')
url = URI.escape(url)
doc = Nokogiri::HTML(open(url))
</code></p>

<p>发现果然OK了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Pry调试Rails项目]]></title>
    <link href="http://codemany.com/blog/2014/07/07/debugging-rails-with-pry/"/>
    <updated>2014-07-07T23:26:08+08:00</updated>
    <id>http://codemany.com/blog/2014/07/07/debugging-rails-with-pry</id>
    <content type="html"><![CDATA[<p>调试Rails程序的工具有ruby-debug、irb、rails-console等，不过现在这些工具都可以歇着了，因为有了Pry。</p>

<p>首先，在Gemfile中申明gem包：</p>

<p><code>
gem 'pry', group: :development
</code></p>

<p>然后执行</p>

<p><code>
bundle install
</code></p>

<p>用Pry代替irb，直接运行：</p>

<p><code>
pry
</code></p>

<p>用Pry代替rails console，运行：</p>

<p><code>
pry -r ./config/environment.rb
</code></p>

<p>调试Rails项目时，在需要调试的地方添加binding.pry，当rails server运行到这行代码时会自动调出一个pry终端，可以在这里进行交互，退出调试用exit-all。例如：</p>

<p><code>
def index
  @articles = Article.all
  binding.pry
end
</code></p>

<p>可以使用exit-program命令无条件地退出循环。</p>

<p><code>
(1..100).each do |i|
  binding.pry
  puts i
end
</code></p>

<p>Pry默认没有调试中经常用到的上一步，下一步等命令，可以安装pry-nav，然后就可以使用step, next, continue跳来跳去了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin not found]]></title>
    <link href="http://codemany.com/blog/2010/09/17/plugin-not-found/"/>
    <updated>2010-09-17T03:24:50+08:00</updated>
    <id>http://codemany.com/blog/2010/09/17/plugin-not-found</id>
    <content type="html"><![CDATA[<p>使用Ruby 1.8.7和Rails 2.3.5，每次执行script/plugin install命令都出现：</p>

<p><code>
Plugin not found: [...]
</code></p>

<p>无论是使用http或https协议，还是在末尾添加斜杠都不起作用。</p>

<p>出现这个问题的原因是因为Ruby 1.8.7是用mingw32编译的，可以通过ruby -v查看：</p>

<p><code>
ruby 1.8.7 (2010-08-16 patchlevel 302) [i386-mingw32]
</code></p>

<p>RUBY_PLATFORM的值是i386-mingw32-xxx，而许多库在判断当前操作系统时是这么做的：</p>

<p><code>
file.open(RUBY_PLATFORM.match(/mswin/) ? 'NUL', '/dev/null')
</code></p>

<p>这些库只判断了RUBY_PLATFORM里是否含有mswin，如果没有就认为是*nix平台，从而使用/dev/null，结果可想而知，文件必然打开失败，于是就会出现上述错误。</p>

<p>解决方式（推荐使用第4种方式）:</p>

<p>方法1：打开script/plugin文件加入一行RUBY_PLATFORM = 'mswin'，运行时会打印一条警告说常量重新赋值，不过不影响使用。</p>

<p>方法2：卸载掉1.8.7，重新安装Ruby 1.8.6-p26，这个版本是使用VC6编译的，RUBY_PLATFORM的值是mswin，不会出现平台判断错误。</p>

<p>方法3：使用VC自己编译Ruby 1.8.7，确保RUBY_PLATFORM的值是mswin即可。</p>

<p>方法4：打开RUBY_GEMS/activesupport-2.3.5/lib/active_support/core_ext/kernel/reporting.rb，找到</p>

<p><code>
stream.reopen(RUBY_PLATFORM =~ /mswin/ ? 'NUL:' : '/dev/null')
</code></p>

<p>将之修改以下代码即可</p>

<p><code>
stream.reopen(RUBY_PLATFORM =~ /mswin|mingw/ ? 'NUL:' : '/dev/null')
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby DBI的安装和使用]]></title>
    <link href="http://codemany.com/blog/2007/09/04/install-and-use-ruby-dbi/"/>
    <updated>2007-09-04T22:35:15+08:00</updated>
    <id>http://codemany.com/blog/2007/09/04/install-and-use-ruby-dbi</id>
    <content type="html"><![CDATA[<p>Ruby DBI是一个为Ruby程序访问数据库提供的与数据库无关的统一数据库编程接口。结构层次上可以分为两层：</p>

<ol>
<li>Database Interface 数据库接口层，与数据库无关，提供与数据库无关的标准接口</li>
<li>Database Driver 数据库驱动，与数据库相关</li>
</ol>


<p>Ruby DBI模块可以从 <a href="http://ruby-dbi.sourceforge.net/">http://ruby-dbi.sourceforge.net/</a> 取得，下载后解压缩，配置，然后安装：</p>

<p><code>
ruby setup.rb config --with=dbi,dbd_mysql
ruby setup.rb setup
ruby setup.rb install
</code></p>

<p>注意：<code>--with</code>参数必须根据你所安装的数据库类型来选择。可以配置多个，但不能选择没有安装在你机器上的数据库类型。记得刚开始的时候我使用ruby setup.rb config来配置（我机器上只安装了MySQL和SQL Server），结果在ruby setup.rb setup时一直出现像下面这样的错误信息：</p>

<p><img src="/uploads/ruby-dbi.png" title="ruby-dbi" ></p>

<p>下面是一个完整的例子</p>

<p>```</p>

<h1>testdbi.rb</h1>

<p>require 'dbi'</p>

<h1>Connect to a database</h1>

<p>dbh = DBI.connect('dbi:Mysql:rubydbi:localhost', 'root', '123456')</p>

<p>dbh.do('DROP TABLE IF EXISTS people')
dbh.do('CREATE TABLE people (id INT, name VARCHAR(30))')</p>

<h1>Insert some rows, use placeholders</h1>

<p>sql = 'INSERT INTO people VALUES (?, ?)'
dbh.prepare(sql) do |sth|</p>

<pre><code>sth.execute('100', 'Michael')
sth.execute('200', 'John')
</code></pre>

<p>end</p>

<h1>Select all rows</h1>

<p>sth = dbh.prepare('select * from people')
sth.execute</p>

<h1>Print out each row</h1>

<p>while row = sth.fetch do</p>

<pre><code>p row
</code></pre>

<p>end</p>

<h1>Close the statement handle when done</h1>

<p>sth.finish</p>

<p>dbh.do('DROP TABLE people')</p>

<h1>Finally, disconnect</h1>

<p>dbh.disconnect
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双色球（Union Lotto）模拟摇奖器]]></title>
    <link href="http://codemany.com/blog/2007/05/30/union-lotto-simulation-ernie/"/>
    <updated>2007-05-30T02:26:49+08:00</updated>
    <id>http://codemany.com/blog/2007/05/30/union-lotto-simulation-ernie</id>
    <content type="html"><![CDATA[<p>双色球基本规则：</p>

<ol>
<li>彩票投注区分为红色球号码区和蓝色球号码区；</li>
<li>每注投注号码由6个红色球号码和1个蓝色球号码组成。红色球号码从1-33中选择；蓝色球号码从1-16中选择；</li>
<li>摇奖时先摇出6个红色球号码，再摇出1个蓝色球号码，摇出的红色球号码按从小到大的顺序和蓝色球号码一起公布。</li>
</ol>


<p>双色球模拟摇奖器代码：</p>

<p>```</p>

<h1>union_lotto.rb</h1>

<p>red_balls = Array.new(33) {|i| i + 1}
blue_balls = Array.new(16) {|i| i + 1}
1.upto(6) do
  print red_balls.delete_at(rand(red_balls.length)), ' '
end
puts '- ' + blue_balls.delete_at(rand(blue_balls.length)).to_s
```</p>
]]></content>
  </entry>
  
</feed>
