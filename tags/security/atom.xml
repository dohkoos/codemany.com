<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Security | 乐者为王]]></title>
  <link href="http://codemany.com/tags/security/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-06-16T00:11:21+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails的不安全默认配置——需要知道的13个安全陷阱]]></title>
    <link href="http://codemany.com/blog/rails-insecure-defaults/"/>
    <updated>2013-07-02T18:19:40+08:00</updated>
    <id>http://codemany.com/blog/rails-insecure-defaults</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://blog.codeclimate.com/blog/2013/03/27/rails-insecure-defaults/">http://blog.codeclimate.com/blog/2013/03/27/rails-insecure-defaults/</a></p>

<p>安全的默认配置是构建安全系统的关键。如果开发者必须采取明确的行动来执行安全行为，即使是有经验的开发者最终也会忘记这样做。为此，安全专家说：</p>

<blockquote>
<p>不安全的默认配置是不安全的。</p>
</blockquote>

<p>Rails作为相对安全的Web框架实至名归。对于许多常见的攻击它都有开箱即用的防护：跨站脚本（XSS）、跨站请求伪造（CSRF）和SQL注入。Rails的核心成员知识渊博，真正关心安全。</p>

<p>然而，有些地方的默认行为可以做得更安全。这篇文章探讨了在Rails 4中修复的Rails 3中的潜在安全性问题，以及那些仍存在风险的安全性问题。我希望这篇文章可以帮助你保护自己的应用程序，同时启发Rails本身的修改。</p>

<h3 id="rails-3的问题">Rails 3的问题</h3>

<p>让我们从主干中已修复的某些Rails 3的问题开始。对于这些问题的解决，Rails团队值得称赞，但它们却毫无价值，因为许多应用程序在未来很多年里仍将运行在Rails 2和3上。</p>

<h4 id="1-通过有漏洞的-match路由进行csrf攻击">1. 通过有漏洞的#match路由进行CSRF攻击</h4>

<p>这里是直接取自于Rails 3生成的config/routes.rb文件的一个示例：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">WebStore::Application.routes.draw do
  # Sample of named route:
  match &#39;products/:id/purchase&#39; =&gt; &#39;catalog#purchase&#39;,
    :as =&gt; :purchase
  # This route can be invoked with
  # purchase_url(:id =&gt; product.id)
end
</code></pre></div>
<p>这样做的后果是，对于任何HTTP动词（GET、POST等），/products/:id/purchase路径都将路由到CatalogController#purchase方法。问题是Rails的跨站请求伪造（CSRF）防护不适用于GET请求。你可以在实施CSRF防护的方法中看到这点：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def verified_request?
  !protect_against_forgery? ||
  request.get? ||
  form_authenticity_token ==
    params[request_forgery_protection_token] ||
  form_authenticity_token ==
    request.headers[&#39;X-CSRF-Token&#39;]
end
</code></pre></div>
<p>第2行短路CSRF检查：这意味着如果request.get?为true，请求会被认为是“验证过的”，并且CSRF检查将被跳过。事实上，在Rails的源代码中，该方法前面就有注释说：</p>

<blockquote>
<p>Get应该是安全和幂等的。</p>
</blockquote>

<p>在你的应用程序中，你可能总是使用POST向/products/:id/purchase提出请求。但是由于路由器允许GET请求，对于通过#match帮助器路由的任何方法，攻击者都可以轻松地绕过CSRF防护。如果你的应用程序使用旧的通配符路由（不推荐），则CSRF防护完全无效。</p>

<p><strong>最佳实践：</strong>不要对不安全的动作使用GET。不要使用#match来添加路由（而是使用#post、#put等）。确保没有通配符路由。</p>

<p><strong>修复：</strong>当使用#match添加路由时，Rails现在需要你指定明确的HTTP动词或via: :all。生成的config/routes.rb不再包含已注释掉的#match路由。（通配符路由也已被删除。）</p>

<h4 id="2-格式验证中的正则表达式锚点">2. 格式验证中的正则表达式锚点</h4>

<p>考虑以下验证：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">validates_format_of :name, with: /^[a-z ]+$/i
</code></pre></div>
<p>这段代码有个不易察觉的缺陷。开发者可能想强制整个名字属性仅由字母和空格组成。然而相反的是，这只会强制名字中至少有一行由字母和空格组成。正则表达式匹配的一些示例可以使这个缺陷更加清晰：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt;&gt; /^[a-z ]+$/i =~ &quot;Joe User&quot;
=&gt; 0 # Match

&gt;&gt; /^[a-z ]+$/i =~ &quot; &#39;); -- foo&quot;
=&gt; nil # No match

&gt;&gt; /^[a-z ]+$/i =~ &quot;a\n &#39;); -- foo&quot;
=&gt; 0 # Match
</code></pre></div>
<p>开发者应该使用\A（字符串的开始）和\z（字符串的结尾）锚点替代&Hat;（行的开始）和$（行的结尾）。正确的代码是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">validates_format_of :name, with: /\A[a-z ]+\z/i
</code></pre></div>
<p>你可以认为开发者有错，而你是对的。然而，正则表达式锚点的行为不一定是明显的，特别是对于没有考虑多行值的开发者。（可能该属性仅被暴露在文本输入字段，而不是文本区域。）</p>

<p>Rails在拯救开发者方面做得不错，这正是Rails 4所做的工作。</p>

<p><strong>最佳实践：</strong>尽可能使用\A和\z来锚定正则表达式，而不是&Hat;和$。</p>

<p><strong>修复：</strong>Rails 4为validates_format_of引入了一个多行选项。如果你的正则表达式使用&Hat;和$而不是\A和\z进行锚定，并且没有传递multiline: true，则Rails将引发异常。这是创建更安全的默认行为的一个很好的例子，同时仍然提供控制以在必要的地方覆盖它。</p>

<h4 id="3-点击劫持">3. 点击劫持</h4>

<p>点击劫持或“用户界面伪装攻击”涉及在不可见的页帧中呈现目标站点，并诱骗受害者在点击时执行出乎意料的动作。如果一个站点很容易被点击劫持攻击，攻击者可能会诱骗用户执行不必要的动作，例如单击购买，在Twitter上跟随某人，或更改他们的隐私设置。</p>

<p>为防御点击劫持攻击，站点必须阻止自己被呈现在frame或不受控制的站点的iframe中。较老的浏览器需要丑陋的“页帧破解”JavaScript，但现代浏览器支持<a href="https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options">X-Frame-Options HTTP报头</a>，它告知浏览器是否允许站点被页帧。这个报头很容易包含，也不可能破坏大多数的网站，所以Rails应该默认包含它。</p>

<p><strong>最佳实践：</strong>使用Twitter的<a href="https://github.com/twitter/secureheaders">secure_headers</a>添加一个X-Frame-Options报头，其值为SAMEORIGIN或DENY。</p>

<p><strong>修复：</strong>默认情况下，Rails 4现在发送带有SAMEORIGIN值的X-Frame-Options报头：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">X-Frame-Options: SAMEORIGIN
</code></pre></div>
<p>这告诉浏览器你的应用程序只能由源自同一个域的页面构成。</p>

<h4 id="4-用户可读的会话">4. 用户可读的会话</h4>

<p>默认的Rails 3会话存储使用已签名的未加密Cookie。虽然这样可以保护会话免遭篡改，但攻击者可以很容易对会话Cookie的内容进行解码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">session_cookie = &lt;&lt;-STR.strip.gsub(/\n/, &#39;&#39;)
BAh7CEkiD3Nlc3Npb25faWQGOgZFRkkiJTkwYThmZmQ3Zm
dAY7AEZJIgtzZWtyaXQGO…--4c50026d340abf222…
STR

Marshal.load(Base64.decode64(session_cookie.split(&quot;--&quot;)[0]))
# =&gt; {
#   &quot;session_id&quot;  =&gt; &quot;90a8f...&quot;,
#   &quot;_csrf_token&quot; =&gt; &quot;iUoXA...&quot;,
#   &quot;secret&quot;      =&gt; &quot;sekrit&quot;
# }
</code></pre></div>
<p>在会话中存储任何敏感信息是不安全的。希望这是众所周知的，但即使用户的会话不包含敏感数据，它仍然可能会产生风险。通过解码会话数据，攻击者可以获得在攻击中可以利用的有关应用程序内部的有用信息。例如，可以得知哪个认证系统正在使用（Authlogic、Devise等）。</p>

<p>虽然这不会自行创建漏洞，但它可以帮助攻击者。关于应用程序如何工作的任何信息都可以被用于磨蚀攻击，并且在某些情况下，可以避免触发那些会给开发者提供正在被攻击的早期警告的异常或者绊网。</p>

<p>用户可读会话违反了最低权限原则，因为即使会话数据必须传递给访问者的浏览器，访问者也无需能够读取数据。</p>

<p><strong>最佳实践：</strong>不要将任何你不希望攻击者访问的信息放入会话中。</p>

<p><strong>修复：</strong>Rails 4将默认会话存储更改为加密的。没有解密密钥，用户在客户端将不再能够解码会话的内容。</p>

<h3 id="尚未解决的问题">尚未解决的问题</h3>

<p>这篇文章的剩余部分讨论Rails在发布时仍然存在的安全风险。希望至少有些会被修复，如果是这样，我将更新这篇文章。</p>

<h4 id="1-详细的服务器报头">1. 详细的服务器报头</h4>
]]></content>
  </entry>
  
</feed>
