<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Rails | 乐者为王]]></title>
  <link href="http://codemany.com/tags/rails/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-12-10T19:34:36+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby调试工具概览]]></title>
    <link href="http://codemany.com/blog/ruby-debugger-overview/"/>
    <updated>2015-10-19T10:50:09+08:00</updated>
    <id>http://codemany.com/blog/ruby-debugger-overview</id>
    <content type="html"><![CDATA[<p>调试Ruby代码最简单的方式就是使用puts或p方法。当有很多变量需要查看时，到处添加puts或p方法就可能变的不那么实际。幸好，Ruby社区提供了许多强大的调试工具。</p>

<h3 id="ruby-1-8-时代">Ruby 1.8+时代</h3>

<p>调试Ruby代码使用<a href="https://github.com/ruby-debug/ruby-debug">ruby-debug</a>。调试Rails代码则是<a href="https://github.com/nixme/pry-nav">pry-nav</a>。不过在Ruby 1.9出来后ruby-debug就有问题了，于是就有了<a href="https://github.com/mark-moseley/ruby-debug">ruby-debug19</a>，一个针对Ruby 1.9的ruby-debug移植版本。</p>

<h3 id="ruby-1-9-2-时代">Ruby 1.9.2+时代</h3>

<p>等到Ruby 1.9.2发布，ruby-debug彻底歇菜，然后<a href="https://github.com/cldwalker/debugger">debugger</a>就出现了。pry-nav也不好使了，还好有<a href="https://github.com/nixme/pry-debugger">pry-debugger</a>。</p>

<h3 id="ruby-2-时代">Ruby 2+时代</h3>

<p>新的Ruby调试工具<a href="https://github.com/deivid-rodriguez/byebug">byebug</a>来了。虽然byebug也能调试Rails应用，但它不提供语法高亮，所以使用<a href="https://github.com/deivid-rodriguez/pry-byebug">pry-byebug</a>是个更好的选择。</p>

<table><thead>
<tr>
<th></th>
<th>Ruby 1.8+</th>
<th>Ruby 1.9</th>
<th>Ruby 1.9.2+</th>
<th>Ruby 2+</th>
</tr>
</thead><tbody>
<tr>
<td>Ruby</td>
<td>ruby-debug</td>
<td>ruby-debug19</td>
<td>debugger</td>
<td>byebug</td>
</tr>
<tr>
<td>Rails</td>
<td>pry-nav</td>
<td>pry-nav</td>
<td>pry-debugger</td>
<td>pry-byebug</td>
</tr>
</tbody></table>

<h3 id="其它">其它</h3>

<p><a href="https://github.com/pry/pry">Pry</a>其实不是纯粹的调试工具，它只是IRB的替代品，所以缺乏必要的调试指令。pry-nav、pry-debugger和pry-byebug做的只是分别把ruby-debug、debugger和byebug中的step、next、continue等指令添加到Pry中。</p>

<ul>
<li>pry-nav = Pry + ruby-debug</li>
<li>pry-debugger = Pry + debugger</li>
<li>pry-byebug = Pry + byebug</li>
</ul>

<p>如果要调试view怎么办？可以使用<a href="https://github.com/rails/web-console">Web Console</a>。在view里面加上&lt;%= console %&gt;，当view出现异常时，就会在异常界面下方，出现一个网页版的IRB，方便调试。Web Console默认只接受localhost的请求，假如需要让别的IP也能访问的话，可以这样做：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Application &lt; Rails::Application
  config.web_console.whitelisted_ips = &#39;192.168.0.100&#39;
end
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Rails 4.2+ 测试异步邮件]]></title>
    <link href="http://codemany.com/blog/testing-async-emails-rails-42/"/>
    <updated>2015-07-09T13:05:08+08:00</updated>
    <id>http://codemany.com/blog/testing-async-emails-rails-42</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://blog.engineyard.com/2015/testing-async-emails-rails-42">https://blog.engineyard.com/2015/testing-async-emails-rails-42</a></p>

<p>如果你正在构建的应用需要发送邮件，我们都赞同绝不能阻塞控制器，因此异步发送必不可少。为了实现这一点，我们需要借助可以在后台处理任务的异步处理库将邮件发送代码从原始请求/响应周期中移出。</p>

<p>我们如何确信我们的代码在进行此更改时会如预期的那样行事？在这篇博文中，我们将研究测试它的一种方法。我们将使用MiniTest（因为Rails内置了这个框架），但是这里介绍的概念可以很容易地转换为RSpec。</p>

<p>好消息是从Rails 4.2开始，<a href="http://guides.rubyonrails.org/4_2_release_notes.html#asynchronous-mails">异步发送邮件</a>比以前更容易。我们将在我们的示例中使用<a href="https://github.com/mperham/sidekiq">Sidekiq</a>作为队列系统，但是由于ActionMailer＃deliver_later构建在Active Job之上，该接口很干净，使得异步处理库的使用不可知。这意味着如果我刚才没有提到它，作为开发者或者用户的你将不会知情。设置队列系统是另一个话题，你可以在<a href="https://blog.engineyard.com/2014/getting-started-with-active-job">Getting Started With Active Job</a>了解更多。</p>

<h3 id="不要依赖具体">不要依赖具体</h3>

<p>在我们的示例中，我们假设Sidekiq和它的依赖关系已经正确配置，因此特定于此场景的唯一一段代码是声明Active Job将使用哪个队列适配器：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># config/application.rb

module OurApp
  class Application &lt; Rails::Application
    ...
    config.active_job.queue_adapter = :sidekiq
  end
end
</code></pre></div>
<p>Active Job在隐藏所有的实质的队列实现细节上做得很好，使得它对于Resque、Delayed Job或其它队列可以用同样的方式工作。所以如果我们要换用<a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a>，唯一要做的更改就是在引用相应的依赖包后，将队列适配器从:sidekiq切换到:sucker_punch。</p>

<h3 id="基于active-job">基于Active Job</h3>

<p>如果你刚开始使用Rails 4.2，或者对<a href="http://guides.rubyonrails.org/4_2_release_notes.html#active-job">Active Job</a>不太了解，<a href="https://blog.engineyard.com/2014/getting-started-with-active-job">Ben Lewis’ intro to Active Job</a>是一个很好的起点。不过，这篇文章还留给我一个细节去<a href="https://twitter.com/mariusbutuc/status/578585047059599361">盼望</a>，即找到一个干净的、地道的方法来测试一切都如预期的那样工作。</p>

<p>根据本文的目标，我们假设你有：</p>

<ul>
<li>Rails 4.2+</li>
<li>已经设置好使用队列后端的Active Job（例如Sidekiq、Resque等）</li>
<li>一个Mailer</li>
</ul>

<p>任何Mailer都应该使用这里描述的概念，我们将用以下这封“欢迎邮件”来使我们的示例更实际：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#app/mailers/user_mailer.rb

class UserMailer &lt; ActionMailer::Base
  default from: &#39;email@example.com&#39;

  def welcome_email(user:)
    mail(
      to: user.email,
      subject: &quot;Hi #{user.first_name}, and welcome!&quot;
    )
  end
end
</code></pre></div>
<p>为了保持事情简单并专注于什么是重要的，我们想在用户注册后给他发送一封“欢迎邮件”。</p>

<p>这就像<a href="http://guides.rubyonrails.org/action_mailer_basics.html#calling-the-mailer">Rails指南邮件程序示例</a>中的那样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># app/controllers/users_controller.rb

class UsersController &lt; ApplicationController
  ...
  def create
    ...
    # Yes, Ruby 2.0+ keyword arguments are preferred
    UserMailer.welcome_email(user: @user).deliver_later
  end
end
</code></pre></div>
<h3 id="mailer应该做最后的任务">Mailer应该做最后的任务</h3>

<p>接下来，我们要确保控制器内的任务能完成我们预期的。</p>

<p>在测试指南中，在<a href="http://guides.rubyonrails.org/testing.html#custom-assertions-and-testing-jobs-inside-other-components">Custom Assertions And Testing Jobs Inside Other Components</a>上面的部分教给我们大约半打这样的自定义断言。</p>

<p>或许你的第一本能是立刻使用[assert_enqueued_jobs][assert-enqueued-jobs]来测试每次创建新用户时我们是否将邮件发送任务放入队列。</p>

<p>你可以这样做：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># test/controllers/users_controller_test.rb

require &#39;test_helper&#39;

class UsersControllerTest &lt; ActionController::TestCase
  ...
  test &#39;email is enqueued to be delivered later&#39; do
    assert_enqueued_jobs 1 do
      post :create, {...}
    end
  end
end
</code></pre></div>
<p>即使你这样做，你也会惊讶于测试的失败，被告知assert_enqueued_jobs没有定义而无法使用。</p>

<p>这是因为我们的测试继承自ActionController::TestCase，它在编写时没有包含ActiveJob::TestHelper。</p>

<p>但是我们可以快速地修复这个问题：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># test/test_helper.rb

class ActionController::TestCase
  include ActiveJob::TestHelper
  ...
end
</code></pre></div>
<p>假设我们的代码能完成我们预期的，我们的测试现在应该是绿色的。</p>

<p>这是个好消息。我们可以继续重构代码，添加新功能，或者添加新测试。让我们跟随后者，测试我们的邮件是否被发送，以及它是否有预期的内容。</p>

<p>作为delivery_method选项被配置成:test的结果，ActionMailer能给我们提供一个所有发出邮件的数组。我们可以通过ActionMailer::Base.deliveries访问它。当发送的邮件串联时，测试邮件是否被真正发送就非常简单。我们要做的就是在行动完成后，检查交付数量增加1。用MiniTest来写的话，就像下面这样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">assert_difference &#39;ActionMailer::Base.deliveries.size&#39;, +1 do
  post :create, {...}
end
</code></pre></div>
<p>我们的测试是实时发生的，但正如我们在本文开头赞同的那样，不能阻塞控制器并在后台任务中发送邮件，所以我们现在需要协调一切，以确保我们的系统是确定的。因此，在我们的异步世界中，我们需要首先执行所有入队的任务，然后才能评估其结果。要执行待处理的Active Job任务，我们将使用<a href="http://api.rubyonrails.org/classes/ActiveJob/TestHelper.html#method-i-perform_enqueued_jobs">perform_enqueued_jobs</a>。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">test &#39;email is delivered with expected content&#39; do
  perform_enqueued_jobs do
    post :create, {...}
    delivered_email = ActionMailer::Base.deliveries.last

    # assert our email has the expected content, e.g.
    assert_includes delivered_email.to, @user.email
  end
end
</code></pre></div>
<h3 id="缩短反馈循环">缩短反馈循环</h3>

<p>迄今为止，我们都在进行功能性测试以确保我们的控制器如预期的那样行事。但是，当代码中的更改可能会破坏我们发送的邮件时，如何单元测试邮件程序才能缩短反馈循环并获得快速洞察？</p>

<p><a href="http://guides.rubyonrails.org/testing.html#testing-your-mailers">Rails测试指南</a>建议在这里使用fixtures，但我发现它们太过脆弱。特别是在开始的时候，当还在试验邮件的设计或内容时，变化会很快地使它们过时，导致测试变红。相反，我偏向使用assert_match来关注应该是邮件正文部分的关键元素。</p>

<p>为了这个目的和更多（比如抽象处理多部分邮件的逻辑），我们可以构建我们的自定义断言。这使我们能够扩展<a href="http://guides.rubyonrails.org/testing.html#available-assertions">MiniTest标准断言</a>或<a href="http://guides.rubyonrails.org/testing.html#rails-specific-assertions">Rails专用断言</a>。这也是创建我们自己的领域专用语言（DSL）进行测试的一个很好的示例。</p>

<p>让我们在test目录中创建一个shared文件夹来托管我们的SharedMailerTests模块。我们的自定义断言看起来像这样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># /test/shared/shared_mailer_tests.rb

module SharedMailerTests
  ...
  def assert_email_body_matches(matcher:, email:)
    if email.multipart?
      %w(text html).each do |part|
        assert_match matcher, email.send(&quot;#{part}_part&quot;).body.to_s
      end
    else
      assert_match matcher, email.body.to_s
    end
  end
end
</code></pre></div>
<p>接下来，我们要让邮件程序测试意识到这个自定义断言，所以我们把它混合在ActionMailer::TestCase中。我们可以以类似于我们在ActionController::TestCase中包含ActiveJob::TestHelper的方式来做到这点：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># test/test_helper.rb

require &#39;shared/shared_mailer_tests&#39;
...
class ActionMailer::TestCase
  include SharedMailerTests
  ...
end
</code></pre></div>
<p>请注意，我们首先需要在test_helper中依赖我们的shared_mailer_tests。</p>

<p>这些就绪后，我们现在可以确保我们的邮件包含我们预期的关键元素。想象一下，我们想确保我们发送给用户的URL包含一些用于追踪的特定UTM参数。我们现在可以使用我们的自定义断言配合我们的老朋友perform_enqueued_jobs做到这些：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># test/mailers/user_mailer_test.rb

class ToolMailerTest &lt; ActionMailer::TestCase
  ...
  test &#39;emailed URL contains expected UTM params&#39; do
    UserMailer.welcome_email(user: @user).deliver_later

    perform_enqueued_jobs do
      refute ActionMailer::Base.deliveries.empty?

      delivered_email = ActionMailer::Base.deliveries.last
      %W(
        utm_campaign=#{@campaign}
        utm_content=#{@content}
        utm_medium=email
        utm_source=mandrill
      ).each do |utm_param|
        assert_email_body_matches utm_param, delivered_email
      end
    end
  end
end
</code></pre></div>
<h3 id="结论">结论</h3>

<p>让ActionMailer基于Active Job之上，使得从同步发送邮件切换到通过队列发送邮件变得非常简单，就如同从deliver_now切换到deliver_later那样。</p>

<p>由于Active Job使得设置任务基础设施（不需要知道太多你正在使用的队列系统）如此容易，你的测试不再需要关心是否以后会切换到Sidekiq或Resque。</p>

<p>让你的测试设置正确以便于可以充分利用Active Job提供的新的自定义断言可能会有点棘手。希望本教程能使你对整个过程更加明白。</p>

<p>附：你有ActionMailer或Active Job的经验吗？有任何建议吗？有什么陷阱？我们很乐意听到你的经验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保护你的Paperclip下载]]></title>
    <link href="http://codemany.com/blog/protecting-your-paperclip-downloads/"/>
    <updated>2015-06-01T17:54:45+08:00</updated>
    <id>http://codemany.com/blog/protecting-your-paperclip-downloads</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://thewebfellas.com/blog/protecting-your-paperclip-downloads">https://thewebfellas.com/blog/protecting-your-paperclip-downloads</a></p>

<p>去年11月份，当我首次在博客上<a href="https://thewebfellas.com/blog/goodbye-attachment_fu-hello-paperclip">谈到Paperclip</a>时，我简要介绍了在控制器后面隐藏文件，而不是简单地将它们放在公共目录中展示给大家看。从那时起，我就注意到如何真正做到这点的问题定期地在<a href="http://www.railsforum.com/">Rails论坛</a>上出现。几周前，我不得不弄清楚如何更新我们的某些代码来保护我们已经从本地文件系统迁移到<a href=http://aws.amazon.com/s3/">Amazon S3</a>的资产。所以我认为这可能是一个值得分享的技巧。</p>

<h3 id="模型">模型</h3>

<p>我将使用来自我原先的Paperclip博文中的<a href="https://thewebfellas.com/blog/goodbye-attachment_fu-hello-paperclip#getting-clever-with-validations">Getting clever with validations</a>部分的Track模型的一个轻微更新版本。以下是代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Track &lt; ActiveRecord::Base

  has_attached_file :mp3,
                    :url =&gt; &#39;/:class/:id/:style.:extension&#39;,
                    :path =&gt; &#39;:rails_root/assets/:class/:id_partition/:style.:extension&#39;

  validates_attachment_presence :mp3
  validates_attachment_content_type :mp3, :content_type =&gt; [&#39;application/mp3&#39;, &#39;application/x-mp3&#39;, &#39;audio/mpeg&#39;, &#39;audio/mp3&#39;]
  validates_attachment_size :mp3, :less_than =&gt; 20.megabytes

  def downloadable?(user)
    user != :guest
  end

end
</code></pre></div>
<p>这段代码执行以下操作：</p>

<ul>
<li>定义含有名为mp3的Paperclip附件的Track模型。</li>
<li>配置用于访问mp3资源的URL，例如/track/1/original.mp3。在URL中留下样式属性可以使未来版本的代码去做像生成轨道的10秒预览这样的事情（使用自定义的Paperclip处理器），这些预览可以使用像/track/1/preview.mp3这样的URL访问。</li>
<li>配置Paperclip存储上传文件的路径（例如RAILS_ROOT/assets/tracks/000/000/001/original.mp3，其中RAILS_ROOT是Rails应用程序根目录的路径）——这里重要的是，文件存储在/public目录之外。</li>
<li>定义验证器以确保是mp3文件被上传，该验证器包含有效的内容类型并且限制文件不能太大。</li>
<li>定义downloadable?方法，可用于实现对轨道的用户访问权限。为简单起见，它只允许所有登录的用户访问轨道，不过你可以用应用程序需要的任何逻辑来替换它。</li>
</ul>

<h3 id="路由和控制器">路由和控制器</h3>

<p>现在，如果你尝试在视图中提供像下面这样的链接来下载mp3：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">link_to(&#39;Listen&#39;, track.mp3.url)
</code></pre></div>
<p>当你点击它的时候将得到这样的路由错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Routing Error
No route matches &quot;/tracks/1/original.mp3&quot; with {:method=&gt;:get}
</code></pre></div>
<p>我通常在routes.rb文件中使用map.connect将Paperclip URL映射到控制器中的download动作，就像下面这样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ActionController::Routing::Routes.draw do |map|
  map.connect &#39;tracks/:id/:style.:format&#39;, :controller =&gt; &#39;tracks&#39;, :action =&gt; &#39;download&#39;, :conditions =&gt; { :method =&gt; :get }
end
</code></pre></div>
<p>不需要使用命名路由，因为你不太可能需要通过名称引用路由。如果需要的话，通过映射到自定义的download动作，你还可以在控制器中提供标准的资源丰富的CRUD动作。清教徒式的REST粉丝可能会坚持将下载映射到单独的资源，并且使用POST请求创建一个新的下载资源：如果你打算做更多而不仅仅是将文件流传输到客户端（例如日志统计，更新账单信息），这可能值得考虑，否则为什么要复杂化事情？</p>

<p>然后，TracksController需要一个download动作：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class TracksController &lt; ApplicationController

  SEND_FILE_METHOD = :default

  def download
    head(:not_found) and return if (track = Track.find_by_id(params[:id])).nil?
    head(:forbidden) and return unless track.downloadable?(current_user)

    path = track.mp3.path(params[:style])
    head(:bad_request) and return unless File.exist?(path) &amp;&amp; params[:format].to_s == File.extname(path).gsub(/^\.+/, &#39;&#39;)

    send_file_options = { :type =&gt; File.mime_type?(path) }

    case SEND_FILE_METHOD
      when :apache then send_file_options[:x_sendfile] = true
      when :nginx then head(:x_accel_redirect =&gt; path.gsub(Rails.root, &#39;&#39;), :content_type =&gt; send_file_options[:type]) and return
    end

    send_file(path, send_file_options)
  end

end
</code></pre></div>
<p>控制器中有很多事情发生，这里是download动作的细节：</p>

<ol>
<li>尝试使用:id参数找到Track模型，如果轨道不存在则返回404 Not Found响应。</li>
<li>把当前用户传递给downloadable?方法，决定是否允许用户下载轨道。

<ul>
<li>这里假设current_user是应用程序的身份验证代码提供的方法，如果没有用户登录则返回:guest符号，否则返回User对象。这里以及downloadable?方法中使用的实际代码可能需要修改以适应你自己的身份验证代码。</li>
<li>如果不允许用户下载轨道，控制器将返回403 Forbidden响应。</li>
</ul></li>
<li>然后为传递的:style参数生成服务器上的mp3文件的路径。</li>
<li>然后，控制器确保文件存在（如果使用无效的:style参数则不会），并且请求的文件扩展名与文件的实际扩展名相匹配。如果需要，它返回400 Bad Request。</li>
<li>被用于<a href="http://apidock.com/rails/ActionController/Streaming/send_file">send_file</a>方法的散列选项将与mp3文件的MIME类型一起被初始化。

<ul>
<li>我在这里使用<a href="https://github.com/mattetti/mimetype-fu">mimetype-fu插件</a>（使用ruby script/plugin install git://github.com/mattetti/mimetype-fu.git安装），而不是mp3附件的content_type属性，以允许将来不同的样式可能会使用不同的文件类型的功能。</li>
</ul></li>
<li>控制器支持标准流传输，使用Lighttpd/Apache <a href="http://blog.lighttpd.net/articles/2006/07/02/x-sendfile">X-Sendfile</a>或Nginx <a href="https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/">X-Accel-Redirect</a>方法下载文件。

<ul>
<li>为简单起见，这里使用SEND_FILE_METHOD常量来配置要使用的方法，但是在实际的应用程序中，应该将其存储在某种配置设置中（我推荐使用Luke Redpath的<a href="https://github.com/lukeredpath/simpleconfig">SimpleConfig</a>插件进行此类操作）。</li>
<li>取决于配置的流传输方法，控制器既可以使用send_file（用于标准和X-Sendfile流传输）也可以使用带报头的响应（用于X-Accel-Redirect流传输）。</li>
<li>在Rails应用程序中我们通常使用Nginx，因此我们借助如下的Nginx配置以使用X-Accel-Redirect方法进行文件的流传输：</li>
</ul></li>
</ol>
<div class="highlight"><pre><code class="language-text" data-lang="text">location /assets/ {
  root /path/to/rails_root;
  internal;
}
</code></pre></div>
<p>其中/path/to/rails_root包含我们的Rails应用程序根目录的完整路径。</p>

<h3 id="视图">视图</h3>

<p>Track模型通过downloadable?方法提供访问控制逻辑，而在TracksController中的download动作处理mp3文件流传输，这两者使得使用带有Paperclip提供的url方法的link_to帮助器在视图中提供下载链接成为可能。例如，index视图可能如下所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;ul&gt;
&lt;% @tracks.each do |track| %&gt;
  &lt;li&gt;&lt;%= link_to(&#39;Listen&#39;, track.mp3.url) %&gt;&lt;/li&gt;
&lt;% end %&gt;
&lt;/ul&gt;
</code></pre></div>
<h3 id="扩展到amazon-s3">扩展到Amazon S3</h3>

<p><em>更新！Paperclip的最新版本包含到期的<a href="https://github.com/thoughtbot/paperclip/wiki/Restricting-Access-to-Objects-Stored-on-Amazon-S3">URL support</a></em>。</p>

<p>如果你的mp3存储在本地文件系统上，上面的代码可以正常地工作，但如果你的站点开始增长，并且你需要在存储空间和下载容量方面进行扩展，那么你可能需要迁移到S3。</p>

<p>Paperclip提供的S3存储模块目前使用<a href="https://github.com/rightscale/right_aws">RightAWS</a>，而2.3.1+版已经开始使用AWS::S3作为替代。请注意，如果要使用位于欧洲的S3存储桶，则此更改确实会<a href="https://github.com/thoughtbot/paperclip/commit/ac86bb9dfbe3ed8dabe2f76cd4a3199966a1899f#comments">导致一些问题</a>，因此如果这对你来说是个问题的话，你可能需要继续使用2.3.0版本。我将在下面的代码中覆盖这两个版本。</p>

<h4 id="更改存储模块">更改存储模块</h4>

<p>首先要更改的是Track模型中的has_attached_file定义：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">has_attached_file :mp3,
                  :url =&gt; &#39;:s3_domain_url&#39;,
                  :path =&gt; &#39;assets/:class/:id/:style.:extension&#39;,
                  :storage =&gt; :s3,
                  :s3_credentials =&gt; File.join(Rails.root, &#39;config&#39;, &#39;s3.yml&#39;),
                  :s3_permissions =&gt; &#39;authenticated-read&#39;,
                  :s3_protocol =&gt; &#39;http&#39;
</code></pre></div>
<p>这里最明显的更改分别依次为指定存储模块，凭据文件位置，上传文件权限和通信协议方面的:storage、:s3_credentials、:s3_permissions和:s3_protocol选项。</p>

<p>凭据YAML文件用于指定你的S3帐户的访问密钥、私有访问密钥和存储桶名称，应该如下所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">common: &amp;common
  access_key_id: your_access_key_id_goes_here
  secret_access_key: your_secret_access_key_goes_here

development:
  &lt;&lt;: *common
  bucket: app-name-development

test:
  &lt;&lt;: *common
  bucket: app-name-test

production:
  &lt;&lt;: *common
  bucket: app-name-production
</code></pre></div>
<p>为每个环境配置单独的<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html">S3桶</a>是个好主意，可以防止意外混淆测试文件与生产文件！</p>

<p>:s3_permissions选项允许你指定四个<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">固定访问策略</a>中的一个，在这种情况下，authenticated-read被用于设置读取访问仅限于对象所有者或经过身份验证的用户。</p>

<p>对:url和:path选项的更改略微不那么明显：:url被设置为“:s3_domain_url”，它是使用<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html">虚拟托管风格</a>的桶访问的Paperclip插补（如果使用欧洲桶这尤其重要，因为这是首选的访问方式）；:path被Paperclip用于生成存储在S3上的对象的密钥名称。</p>

<p>通过这些更改，上传到Track模型的新文件将使用从:path选项生成的密钥存储在相应的S3桶中，例如<a href="http://app-name-development.s3.amazonaws.com/assets/tracks/1/original.mp3%E3%80%82">http://app-name-development.s3.amazonaws.com/assets/tracks/1/original.mp3。</a></p>

<h4 id="重定向不再有流传输和时间">重定向不再有流传输和时间</h4>

<p>迁移到S3的好处之一是，你的服务器不再需要自己涉及将数据流传输到客户端（使用X-SendFile和X-Accel-Redirect等技术可以帮助你给Rails进程解除负担，但服务器仍然必须做所有的工作）。作为将文件数据发送给客户端的替代，控制器中的download动作现在需要处理权限检查，然后将客户端重定向到S3上的文件以进行下载。</p>

<p>然而，这会有个问题，因为上传文件正在使用阻止公开访问它们的authenticated-read固定访问策略。幸运的是，S3提供一种方法，可以为仅在特定时间段内运行的私有内容生成已验证的URL：然后我们的控制器可以将客户端重定向到此临时URL以启动下载，但如果有人获取URL的详细信息并尝试在以后访问该文件，那么他们将被告知该URL已经过期。</p>

<p>更新的代码如下所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def download
  head(:not_found) and return if (track = Track.find_by_id(params[:id])).nil?
  head(:forbidden) and return unless track.downloadable?(current_user)

  path = track.mp3.path(params[:style])
  head(:bad_request) and return unless params[:format].to_s == File.extname(path).gsub(/^\.+/, &#39;&#39;)

  redirect_to(AWS::S3::S3Object.url_for(path, track.mp3.bucket_name, :expires_in =&gt; 10.seconds))
end
</code></pre></div>
<p>在控制器中有两个主要区别：</p>

<ul>
<li>没有检查以确保对象存在，因为这将增加到S3的额外请求的开销——让S3去为不存在的对象返回适当的响应吧。</li>
<li>作为流传输文件的替代，它重定向到使用<a href="http://amazon.rubyforge.org/doc/classes/AWS/S3/S3Object.html#M000045">url_for</a>方法生成的临时URL。临时URL设置为在10秒后过期，该时间应足够长，以便重定向去启动下载：如果下载时间超过10秒，只要已经开始，它将继续下去，直到完成为止。</li>
</ul>

<p>如果你正在使用Paperclip 2.3.0或更旧的版本，因为RightAWS的缘故，控制器重定向代码应如下所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">redirect_to(track.mp3.s3.interface.get_link(track.mp3.s3_bucket.to_s, path, 10.seconds))
</code></pre></div>
<h4 id="重新考虑视图">重新考虑视图</h4>

<p>当使用本地文件系统存储时，Paperclip附件的url方法可被用于链接到TracksController的download动作，但现在文件托管在S3上，url方法返回的是S3桶的URL，这不是我们想要的。</p>

<p>这里有几个选择，路由可以被更改为命名路由，然后视图可以使用如下所示的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">link_to(&#39;Listen&#39;, download_track_path(track.id, &#39;original&#39;, &#39;mp3&#39;)
</code></pre></div>
<p>我认为更好的方法是在Track模型中添加一个新方法，使用Paperclip插补来生成下载URL。与此同时，还可以将验证S3 URL的代码从控制器中移到模型中。这里是完整的Track模型：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Track &lt; ActiveRecord::Base

  has_attached_file :mp3,
                    :url =&gt; &#39;:s3_domain_url&#39;,
                    :path =&gt; &#39;assets/:class/:id/:style.:extension&#39;,
                    :storage =&gt; :s3,
                    :s3_credentials =&gt; File.join(Rails.root, &#39;config&#39;, &#39;s3.yml&#39;),
                    :s3_permissions =&gt; &#39;authenticated-read&#39;,
                    :s3_protocol =&gt; &#39;http&#39;

  validates_attachment_presence :mp3
  validates_attachment_content_type :mp3, :content_type =&gt; [&#39;application/mp3&#39;, &#39;application/x-mp3&#39;, &#39;audio/mpeg&#39;, &#39;audio/mp3&#39;]
  validates_attachment_size :mp3, :less_than =&gt; 20.megabytes

  def downloadable?(user)
    user != :guest
  end

  def download_url(style = nil, include_updated_timestamp = true)
    url = Paperclip::Interpolations.interpolate(&#39;/:class/:id/:style.:extension&#39;, mp3, style || mp3.default_style)
    include_updated_timestamp &amp;&amp; mp3.updated_at ? [url, mp3.updated_at].compact.join(url.include?(&quot;?&quot;) ? &quot;&amp;&quot; : &quot;?&quot;) : url
  end

  def authenticated_url(style = nil, expires_in = 10.seconds)
    AWS::S3::S3Object.url_for(mp3.path(style || mp3.default_style), mp3.bucket_name, :expires_in =&gt; expires_in, :use_ssl =&gt; mp3.s3_protocol == &#39;https&#39;)
  end

end
</code></pre></div>
<p>对于RightAWS (Paperclip &lt;= 2.3.0)，验证URL的代码略有不同：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def authenticated_url(style = nil, expires_in = 10.seconds)
  mp3.s3.interface.get_link(mp3.s3_bucket.to_s, mp3.path(style || mp3.default_style), expires_in)
end
</code></pre></div>
<p>然后整理download动作，将重定向更改为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">redirect_to(track.authenticated_url(params[:style]))
</code></pre></div>
<p>现在视图可以链接到下载了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">link_to(&#39;Listen&#39;, track.download_url)
</code></pre></div>
<h4 id="结束">结束</h4>

<p>希望这里我给了你足够的信息，以便你开始在自己的Rails应用程序中实施受保护的下载。但是请不要忘记，如果你使用的是欧洲S3桶，需要<a href="https://github.com/thoughtbot/paperclip/commit/ac86bb9dfbe3ed8dabe2f76cd4a3199966a1899f#comments">进行一些修补</a>，否则会出现以下错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">AWS::S3::PermanentRedirect: The bucket you are attempting to access must be addressed using the specified endpoint. Please send all future requests to this endpoint.
</code></pre></div>
<p>当你尝试并且上传时——彻底地修复将是另一天的工作！</p>

<h3 id="faq">FAQ</h3>

<h4 id="如何强制下载文件，而不是在浏览器中显示？">如何强制下载文件，而不是在浏览器中显示？</h4>

<p>如果你使用的是文件系统存储模块，那么当使用send_file方法时，Rails会给attachment设置Content-Disposition报头，你不需要做任何事情。IE可能仍然会坚持在线显示文件，所以你可能需要用点蛮力，在控制器中给application/octet-stream设置Content-Type报头：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">send_file_options = { :type =&gt; &#39;application/octet-stream&#39; }
</code></pre></div>
<p>当然你也可以使用一些简单的浏览器嗅探来为智能浏览器返回正确的Content-Type，以及为IE返回application/octet-stream报头。</p>

<p>如果使用S3存储模块，那么你需要将s3_headers选项添加到模型的has_attached_file定义中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">has_attached_file :mp3,
            :url =&gt; &#39;:s3_domain_url&#39;,
            :path =&gt; &#39;assets/:class/:id/:style.:extension&#39;,
            :storage =&gt; :s3,
            :s3_credentials =&gt; File.join(Rails.root, &#39;config&#39;, &#39;s3.yml&#39;),
            :s3_permissions =&gt; &#39;authenticated-read&#39;,
            :s3_protocol =&gt; &#39;http&#39;,
            :s3_headers =&gt; { :content_disposition =&gt; &#39;attachment&#39; }
</code></pre></div>
<p>当控制器重定向到S3 URL时，Amazon将发送你在此处指定的报头，强制下载。就像使用文件系统存储一样，你也可以使用这种方法强制Content-Type报头，尽管你将无法基于用户浏览器使用任何类型的浏览器嗅探来选择内容类型：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">has_attached_file :mp3,
            :url =&gt; &#39;:s3_domain_url&#39;,
            :path =&gt; &#39;assets/:class/:id/:style.:extension&#39;,
            :storage =&gt; :s3,
            :s3_credentials =&gt; File.join(Rails.root, &#39;config&#39;, &#39;s3.yml&#39;),
            :s3_permissions =&gt; &#39;authenticated-read&#39;,
            :s3_protocol =&gt; &#39;http&#39;,
            :s3_headers =&gt; { :content_type =&gt; &#39;application/octet-stream&#39;, :content_disposition =&gt; &#39;attachment&#39; }
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Rails进行图片处理]]></title>
    <link href="http://codemany.com/blog/image-processing-rails/"/>
    <updated>2015-05-12T12:31:25+08:00</updated>
    <id>http://codemany.com/blog/image-processing-rails</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://www.sitepoint.com/image-processing-rails/">https://www.sitepoint.com/image-processing-rails/</a></p>

<p>图片是任何应用程序的重要部分。从社交网络到简单的缺陷跟踪器，图片都扮演着重要的角色。不过，管理图片不是件容易的事情，需要提前做大量的规划。</p>

<p>在本文中，我将演示如何用Rails实现这些。我将向你展示如何处理你的图片，并在后台创建多个版本。我们还将看到如何通过压缩这些图片来提高页面的性能，而不损失质量。</p>

<h3 id="起步">起步</h3>

<p>本教程中的示例在Rails 4.2上运行，使用MongoDB数据库，以及使用HAML渲染视图。不过，这里使用的代码片段应该能与任何版本的Rails兼容，尽管有轻微的配置差异。</p>

<h4 id="配置环境">配置环境</h4>

<p>ImageMagick是POSIX系统图片处理库。如果你的系统没有安装ImageMagick，它可以用操作系统的软件包管理器安装。</p>

<p>在Ubuntu上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get -y install imagemagick
sudo apt-get -y install libmagic-dev
sudo apt-get -y install libmagickwand-dev
</code></pre></div>
<p>在Mac OS X上，推荐使用Homebrew：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install imagemagick
</code></pre></div>
<p>现在，我们需要Ruby适配器来连接本地的ImageMagick库。我个人更偏爱MiniMagick，因为它是轻量级的，含有典型应用程序需要的几乎所有东西：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Gemfile

gem &#39;mini_magick&#39;
</code></pre></div>
<h3 id="热身运动">热身运动</h3>

<p>在正式构建任何东西之前，让我们先试试MiniMagick的某些功能。打开Rails控制台（rails c）并运行以下命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Open an image from a website

image = MiniMagick::Image.open(&quot;https://s3.amazonaws.com/StartupStockPhotos/20140808_StartupStockPhotos/85.jpg&quot;)

# Get the Image&#39;s width
image.width  # 4928

# Get the image&#39;s height
image.height  #3264
</code></pre></div>
<p>我的天哪，这图好大。让我们看看能否调整它的大小以适应我们的iPad：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">image.resize &quot;2048x1536&quot;

# Now get the image&#39;s new width and height

p &quot;Width is =&gt; #{image.width} and height is =&gt; #{image.height}&quot;
</code></pre></div>
<p>调整速度很快，只是修改的文件存储在哪里？</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">image.path  # temp path
</code></pre></div>
<p>处理过的图片存储在临时路径中，并且随时可能被清理。要将其持久化到磁盘，只需要调用write方法即可：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">image.write &quot;public/uploads/test.jpg&quot;
</code></pre></div>
<h4 id="转换图片">转换图片</h4>

<p>你将要执行的最常用操作之一是将图片转换为不同的格式。MiniMagick使这非常简单：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">image.format &quot;png&quot;
image.write &quot;public/uploads/test.png&quot;
</code></pre></div>
<p>你也可以在单个块中组合多个操作：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">image.combine_options do |i|
  i.resize &quot;2048x1536&quot;
  i.flip
  i.rotate &quot;-45&quot;
  i.blur &quot;0x15&quot;
end
image.write &quot;public/uploads/blur.png&quot;

![Some weird result](blur.png)
</code></pre></div>
<p>好吧，在这里我做的有点过火。我要给自己辩解一下，我只是试图给你展示可以用MiniMagick做的所有酷的东西。</p>

<p>现在，让我们来看看如何将其与Rails应用程序相结合。</p>

<h3 id="上传文件">上传文件</h3>

<p>Carrierwave是个奇妙的gem，它简化了Ruby中的文件上传。它还可以很好地与MiniMagick互动，使我们的生活更简单。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Gemfile

gem &#39;carrierwave&#39;
gem &#39;carrierwave-mongoid&#39;, :require =&gt; &#39;carrierwave/mongoid&#39;
</code></pre></div>
<p>注意：如果你使用的是ActiveRecord或DataMapper，配置将略有不同，而<a href="https://github.com/carrierwaveuploader/carrierwave">Carrierwave官方文档</a>会告诉你正确的方法。</p>

<p>批量获取所有这些gem：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">bundle install
</code></pre></div>
<p>创建首个上传器：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#app/uploaders/image_uploader.rb

class ImageUploader &lt; CarrierWave::Uploader::Base
  # Include RMagick or MiniMagick support:
  include CarrierWave::MiniMagick

  # Choose what kind of storage to use for this Uploader:
  storage :file
  # Override the directory where uploaded files will be stored.
  # This is a sensible default for uploaders that are meant to be mounted:
  def store_dir
    &quot;uploads/images&quot;
  end
end
</code></pre></div>
<p>这里的代码是不言自明的。<code>storage：file</code>指示服务器将图片存储在本地服务器上，<code>store_dir</code>指定存储位置。</p>

<p>由于这些文件是通过互联网发送的，因此最佳的做法是始终过滤进来的文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># app/uploaders/image_uploader.rb
...
# Add a white list of extensions which are allowed to be uploaded.
# For images you might use something like this:
def extension_white_list
  %w(jpg jpeg png gif)
end
...
</code></pre></div>
<p>此代码片段过滤掉未在此处指定的文件类型。这绝对不是万无一失的，但它可以作为抵御任何阻碍攻击的第一级过滤器。</p>

<p>将此上传器添加到我们的图片模型中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># app/models/image.rb

class Image
  include Mongoid::Document
  include Mongoid::Timestamps
  include Mongoid::Paranoia
  include Mongoid::Attributes::Dynamic
  include Rails.application.routes.url_helpers

  mount_uploader :media, ImageUploader, mount_on: :media_filename
end
</code></pre></div>
<p>编辑image_uploader.rb去处理上传的图片：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># app/uploaders/image_uploader.rb

...
process :resize_to_fill =&gt; [200, 200]
process :convert =&gt; &#39;png&#39;
...
</code></pre></div>
<p>尝试在Rails控制台创建一个新图片：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">media = File.open(&quot;/Users/test/Desktop/image/jpg&quot;)
img = Image.new(:media =&gt; media)
img.save
</code></pre></div>
<p>上传的图片保存在<code>store_dir</code>目录。而且上传的图片将立即被处理并覆写为200x200的图片。我们不会为任何未来的编辑而保有原始文件的副本。为避免这种情况，需要创建文件的多个版本。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># app/uploaders/image_uploader.rb

...
version :thumb do
  process :resize_to_fit =&gt; [100, 100]
  process :convert =&gt; &#39;jpg&#39;
end

version :cover   do
  process :resize_to_fit =&gt; [240, 180]
  process :convert =&gt; &#39;jpg&#39;
end
...
</code></pre></div>
<p>除原始图片之外，还将创建2个新版本。检查Carrierwave创建的版本：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">img.media.versions[:thumb]  # returns the thumb image instance
img.media.versions[:cover]  # returns the cover image instance
</code></pre></div>
<p>你注意到这些图片是瞬间生成的吗？这意味着图片转换发生在同一个线程中，并且执行被阻塞直到转换完成。在生产应用程序中，在同一个线程中创建图片的多个版本是不应该的。相反，我们应该有条件地处理这个问题。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># app/uploaders/image_uploader/rb

...
version :cover, :if =&gt; :is_live? do
  process :resize_to_fit =&gt; [240, 180]
  process :convert =&gt; &#39;jpg&#39;
end

def is_live?(img = nil)
  @is_live
end

def is_live=(value)
  @is_live = value
end
...
</code></pre></div>
<p>现在，当我们尝试创建一个新图片时，封面版本将不会生成。我们可以在需要时通过简单的运行以下代码来手动触发：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">img.media.is_live = true
img.save
img.media.recreate_versions! :cover
</code></pre></div>
<p>该代码也在前台运行，是个阻塞操作，但至少是推迟到最后可能的一刻。我们可以再进一步，通过Resque在后台运行这些代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># lib/resque/image_queue.rb
class ImageQueue
  @queue = :image_queue
  def self.perform(image_id)
    image = Image.find image_id
    img.media.is_live= true
    img.save
    img.media.recreate_versions! :cover
  end
end
</code></pre></div>
<p>然后，把它们放入队列：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Resque.enqueue(ImageQueue, img.id.to_s)
</code></pre></div>
<h3 id="提高性能">提高性能</h3>

<p>重量级的图片往往会减慢网站的速度。减少页面大小的一种方法是压缩这些图片。Carrierwave Image Optimizer可以帮助我们轻松地压缩图片，而没有任何麻烦。</p>

<p>将其添加到你的Gemfile中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;carrierwave-imageoptimizer&#39;
</code></pre></div>
<p>然后编辑image_uploader.rb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># app/uploaders/image_uploader.rb

...
include CarrierWave::ImageOptimizer
process :optimize
process :quality =&gt; 100
...
</code></pre></div>
<p>这段代码压缩所有的图片，没有任何视觉损失。这种方式的做法是所有图片的元信息被剥离。平均而言，这减少了约20-30%的大小。</p>

<h3 id="总结">总结</h3>

<p>图片处理是非常垂直的技术，我们几乎只触及表面。我们可以用它构建这么多酷的东西。我希望我已经用这篇文章引起你的兴趣。请在评论中分享你的想法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构Rails代码]]></title>
    <link href="http://codemany.com/blog/refactoring-rails-code/"/>
    <updated>2014-11-18T19:42:59+08:00</updated>
    <id>http://codemany.com/blog/refactoring-rails-code</id>
    <content type="html"><![CDATA[<p>在以前写的博文<a href="http://codemany.com/blog/problem-when-deploying-application-to-heroku/">部署应用到Heroku时的问题</a>里有这么一段话：</p>

<blockquote>
<p>股票功能需要导入交割单文件，因为导入后的文本文件不再使用，可以把上传路径由public/uploads改为tmp，这样就避免了Heroku不能写文件的问题。</p>
</blockquote>

<p>下面是那时候写的导入代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class StocksController &lt; ApplicationController
  UPLOADS_DIRECTORY = File.join(&quot;#{Rails.root}&quot;, &quot;public/uploads&quot;)

  def import
    filename = upload_file(params[:file])
    lines = File.readlines(&quot;#{UPLOADS_DIRECTORY}/#{filename}&quot;)
    lines.each do |line|
      # do something
    end
    redirect_to stocks_url
  end

  protected
    def upload_file(file)
      if !file.original_filename.empty?
        @filename = get_file_name(file.original_filename)
        Dir.mkdir(&quot;#{UPLOADS_DIRECTORY}&quot;) unless Dir.exist?(&quot;#{UPLOADS_DIRECTORY}&quot;)
        File.open(&quot;#{UPLOADS_DIRECTORY}/#{@filename}&quot;, &quot;wb&quot;) do |f|
          f.write(file.read)
        end
        return @filename
      end
    end

    def get_file_name(filename)
      if !filename.nil?
        # does not support chinese filename?
        Time.now.strftime(&quot;%Y%m%d%H%M%S&quot;) + &#39;.txt&#39;
      end
    end
end
</code></pre></div>
<p>这里的实现方法是先将上传文件保存到服务器上应用的public/uploads目录中，然后再读取和处理。</p>

<p>其实根本不需要写的这么复杂，因为导入的文件被读取一次后就不再使用了。所以在当时写代码的时候一直有这样的想法，如果能直接获得上传文件的数据，那么就不需要再另外去写保存和读取文件的代码了。</p>

<p>事实也是如此。通过表单提交的file字段数据会首先在服务器上形成临时文件，这时其实可以通过临时文件的路径来读取上传文件的数据。</p>

<p>根据该想法重构后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class StocksController &lt; ApplicationController
  def import
    lines = File.readlines(params[:file].tempfile.to_path.to_s)
    lines.each do |line|
      # do something
    end
    redirect_to stocks_url
  end
</code></pre></div>
<p>重构后的代码果然清爽多了，不过还是有改进的空间。</p>

<p>作为控制器，它应该只负责接收请求，并返回响应。而具体的业务逻辑，则应该交由模型去完成。下面是依照该理念再次重构后的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class StocksController &lt; ApplicationController
  def import
    Stock.import(params[:file])
    redirect_to stocks_url
  end
end

class Stock &lt; ActiveRecord::Base
  def self.import(file)
    lines = File.readlines(file.tempfile.to_path.to_s)
    lines.each do |line|
      # do something
    end
  end
end
</code></pre></div>]]></content>
  </entry>
  
</feed>
