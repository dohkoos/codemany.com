<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Rails | 乐者为王]]></title>
  <link href="http://codemany.com/tags/rails/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-26T22:26:00+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Pry调试Rails项目]]></title>
    <link href="http://codemany.com/blog/2014/07/07/debugging-rails-with-pry/"/>
    <updated>2014-07-07T23:26:08+08:00</updated>
    <id>http://codemany.com/blog/2014/07/07/debugging-rails-with-pry</id>
    <content type="html"><![CDATA[<p>调试Rails程序的工具有ruby-debug、irb、rails-console等，不过现在这些工具都可以歇着了，因为有了Pry。</p>

<p>首先，在Gemfile中申明gem包：</p>

<p><code>
gem 'pry', group: :development
</code></p>

<p>然后执行</p>

<p><code>
bundle install
</code></p>

<p>用Pry代替irb，直接运行：</p>

<p><code>
pry
</code></p>

<p>用Pry代替rails console，运行：</p>

<p><code>
pry -r ./config/environment.rb
</code></p>

<p>调试Rails项目时，在需要调试的地方添加binding.pry，当rails server运行到这行代码时会自动调出一个pry窗口，可以在这里进行交互，退出调试用exit-all。例如：</p>

<p><code>
def index
  @articles = Article.all
  binding.pry
end
</code></p>

<p>可以使用exit-program命令无条件地退出循环。</p>

<p><code>
(1..100).each do |i|
  binding.pry
  puts i
end
</code></p>

<p>Pry默认没有调试中经常用到的上一步，下一步等命令，可以安装pry-nav，然后就可以使用step, next, continue跳来跳去了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部署Qianbao到Heroku时的问题]]></title>
    <link href="http://codemany.com/blog/2013/05/19/problem-when-deploying-qianbao-to-heroku/"/>
    <updated>2013-05-19T06:25:33+08:00</updated>
    <id>http://codemany.com/blog/2013/05/19/problem-when-deploying-qianbao-to-heroku</id>
    <content type="html"><![CDATA[<p>Heroku现在已经是纯粹的只读PaaS了，也就是说以前还支持的SQlite现在也不能使用了。因此部署到Heroku上的Rails应用需要把使用的数据库改成PostgreSQL，并且要关闭assets的预编译功能。</p>

<p>修改Gemfile，将SQLite换成PostgreSQL：</p>

<p>```</p>

<h1>gem 'sqlite3'</h1>

<p>gem 'pg'
```</p>

<p>在config/application.rb中添加：</p>

<p><code>
config.assets.initialize_on_precompile = false
</code></p>

<p>股票功能需要导入交割单文件。因为导入后的文本文件不再使用，可以把上传路径由public/uploads改为tmp。这样就避免了不能Heroku不能写文件的问题。</p>

<p>应用上传后运行时出现异常，使用heroku logs -t查看日志发现有如下错误：</p>

<p><code>
Error: column "stocks.share_name" must appear in the GROUP BY clause or be used in an aggregate function
</code></p>

<p>这是因为在controller中有这么一行代码：</p>

<p><code>
current_user.stocks.select("share_code, share_name, sum(actual_amount) as amount").group("share_code")
</code></p>

<p>在PostgreSQL中这会有问题。比如下面的数据表：</p>

<p><img src="/uploads/qianbao-stocks-table.png" title="qianbao-stocks-table" ></p>

<p>执行上面的SQL语句后，share_name的值到底是取Ruby呢还是ST Ruby？解决这个问题的方法是使用aggregate函数。</p>

<p><code>
current_user.stocks.select("share_code, max(share_name) as share_name, sum(actual_amount) as amount").group("share_code")
</code></p>

<p>使用PostgreSQL还有个问题，就是decimal类型的字段，取出来的值是字符串类型。例如：</p>

<p><code>
if stock.amount &lt; 0
</code></p>

<p>它会报错误：</p>

<p><code>
ArgumentError (comparison of String with 0 failed)
</code></p>

<p>这个可以使用to_f函数解决：</p>

<p><code>
if stock.amount.to_f &lt; 0
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails中通过Checkbox实现批量删除]]></title>
    <link href="http://codemany.com/blog/2012/12/14/deleting-multiple-records-using-checkboxes-in-rails/"/>
    <updated>2012-12-14T02:20:20+08:00</updated>
    <id>http://codemany.com/blog/2012/12/14/deleting-multiple-records-using-checkboxes-in-rails</id>
    <content type="html"><![CDATA[<p>在Rails生成的控制器模版中，包含的destroy方法只能处理单个对象，而批量删除要求能够同时处理多个对象，这需要自定义一个批量操作action。批量删除的效果图如下：</p>

<p><img src="/uploads/deleting-multiple-using-checkboxes.png" title="deleting-multiple-using-checkboxes" ></p>

<p>每一行记录的第一列设置成Checkbox，用于标记此行是否被选中。表下方放置一个全选Checkbox，表示全部选中或全部反选。全选和反选的JavaScript代码如下：</p>

<p>```</p>

<script>
function toggle_checkall(field_name, state) {
  var checkboxes = document.getElementsByTagName('input');
  var count = checkboxes.length;
  for (var i = 0; i < count; i++) {
    if (checkboxes[i].type == "checkbox"
        && checkboxes[i].name == field_name + "_ids[]") {
      checkboxes[i].checked = state;
    }
  }
}
</script>


<p>```</p>

<p>在routes.rb中配置批量删除action的映射：</p>

<p><code>
resources :departs do
  delete 'destroy_multiple', :on =&gt; collection
end
</code></p>

<p>在index.html.erb中添加代码：</p>

<p>```
&lt;%= form_tag destroy_multiple_departs_path, method: :delete do %>
&lt;%= submit_tag "删除选中" %></p>

<table>
  <th><input type="checkbox" onclick="toggle_checkall('depart', this.checked);" /></th>
  ...
  <td><%= check_box_tag "depart_ids[]", depart.id %></td>
</table>


<p>&lt;% end %>
```</p>

<p>在controller中添加批量删除实现代码：</p>

<p>```
def destroy_multiple
  Depart.destroy(params[:depart_ids]) unless params[:depart_ids].blank?</p>

<p>  respond_to do |format|</p>

<pre><code>format.html { redirect_to departs }
format.json { head :no_content }
</code></pre>

<p>  end
end
```</p>

<p>参考资料：<br />
<a href="http://lzqustc.iteye.com/blog/440694">http://lzqustc.iteye.com/blog/440694</a><br />
<a href="http://stackoverflow.com/questions/12711178/rails-3-delete-multiple-records-using-checkboxes">http://stackoverflow.com/questions/12711178/rails-3-delete-multiple-records-using-checkboxes</a><br />
<a href="http://railscasts.com/episodes/165-edit-multiple">http://railscasts.com/episodes/165-edit-multiple</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[改写Rails 2.x generator到Rails 3.x时的一些记录]]></title>
    <link href="http://codemany.com/blog/2012/05/03/rewrite-some-records-when-the-rails-2-x-generator-to-the-rails-3-x/"/>
    <updated>2012-05-03T07:13:58+08:00</updated>
    <id>http://codemany.com/blog/2012/05/03/rewrite-some-records-when-the-rails-2-x-generator-to-the-rails-3-x</id>
    <content type="html"><![CDATA[<p>因为有个基于Rails 2.x的项目用到了<a href="https://github.com/jsboulanger/feedback">feedback</a>插件，在把项目迁移到Rails 3.x版本后，需要让feedback也支持Rails 3.x。但是原作者早已不再更新该插件，所以只能自动动手，花了两天的时间查资料，该代码，终于改写完成，在github上做了个分支。</p>

<p>Rails 3.x中生成generator可用下面的命令：<br />
```
rails g generator feedback_form<br /></p>

<pre><code>  create  lib/generators/feedback_form&lt;br /&gt;
  create  lib/generators/feedback_form/feedback_form_generator.rb&lt;br /&gt;
  create  lib/generators/feedback_form/USAGE&lt;br /&gt;
  create  lib/generators/feedback_form/templates&lt;br /&gt;
</code></pre>

<p>```</p>

<p><code>
class InitializerGenerator &lt; Rails::Generators::NamedBase&lt;br /&gt;
  source_root File.expand_path("../templates", __FILE__)&lt;br /&gt;
end&lt;br /&gt;
</code></p>

<p>Rails::Generators::NamedBase和Rails::Generators::Base的区别是NamedBase期望至少一个参数。</p>

<p>USAGE是打入--help参数时显示的文档：<br />
<code>
rails generate feedback_form --help&lt;br /&gt;
Usage:&lt;br /&gt;
  rails generate feedback_form NAME [options]&lt;br /&gt;
</code></p>

<p>Rails 2.x的generator中的manifest可以删除了，因为在3.x中每个public方法在生成过程中会被自动调用。</p>

<p>参考资料：<br />
<a href="http://guides.rubyonrails.org/generators.html">http://guides.rubyonrails.org/generators.html</a><br />
<a href="http://railscasts.com/episodes/218-making-generators-in-rails-3">http://railscasts.com/episodes/218-making-generators-in-rails-3</a><br />
<a href="http://blog.loopedstrange.com/modest-rubyist-archive/rails-3-plugins-part4-more-on-generators">http://blog.loopedstrange.com/modest-rubyist-archive/rails-3-plugins-part4-more-on-generators</a><br />
<a href="http://nicksda.apotomo.de/2010/09/getting-a-bloody-rails-3-generator-running-and-testing-it/">http://nicksda.apotomo.de/2010/09/getting-a-bloody-rails-3-generator-running-and-testing-it/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置i18n时date_select出现can't convert Symbol into String错误]]></title>
    <link href="http://codemany.com/blog/2012/04/19/set-up-i18n-date_select-can-t-the-convert-the-symbol-into-the-string-error/"/>
    <updated>2012-04-19T07:56:49+08:00</updated>
    <id>http://codemany.com/blog/2012/04/19/set-up-i18n-date_select-can-t-the-convert-the-symbol-into-the-string-error</id>
    <content type="html"><![CDATA[<p>问题和order参数有关，解决方法有两种：<br />
1、在每次调用date_select时明确指定order参数；<br />
2、your_lang.yml文件中添加以下内容：</p>

<p>```
date:<br />
  order:<br /></p>

<pre><code>- :year&lt;br /&gt;
- :month&lt;br /&gt;
- :day&lt;br /&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
