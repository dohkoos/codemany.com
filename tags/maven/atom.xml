<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Maven | 乐者为王]]></title>
  <link href="http://codemany.com/tags/maven/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-10-18T12:41:35+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Spring 3 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample/"/>
    <updated>2012-09-04T06:54:27+08:00</updated>
    <id>http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>在pom.xml中添加Spring的依赖包：</p>

<p>```
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-web&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency></p>

<!-- 注意：没有这个plugin包会导致Spring无法注入bean到Struts 2的Action中 -->


<p><dependency></p>

<pre><code>&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
&lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;
&lt;version&gt;2.3.4.1&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>配置web.xml文件，加上Spring的监听器：</p>

<p>```
&lt;context-param></p>

<pre><code>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
</code></pre>

<p>&lt;/context-param></p>

<p><listener></p>

<pre><code>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>删除hibernate.cfg.xml，添加applicationContext.xml，内容为：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;beans xmlns="<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>"</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;!-- DriverManagerDataSource在每个连接请求时都新建一个connection。
     与DBCP的BasicDataSource不同，DriverManagerDataSource提供的连接没有进行池管理 --&gt;
&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
    &lt;property name="url" value="jdbc:mysql://localhost:3306/jbookshelf" /&gt;
    &lt;property name="username" value="root" /&gt;
    &lt;property name="password" value="123456" /&gt;
&lt;/bean&gt;

&lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
            &lt;prop key="hibernate.connection.pool_size"&gt;1&lt;/prop&gt;
            &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;
            &lt;prop key="hibernate.cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/prop&gt;
            &lt;prop key="show_sql"&gt;true&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
    &lt;property name="mappingResources"&gt;
        &lt;list&gt;
            &lt;value&gt;com/codemany/account/model/User.hbm.xml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="userDao" class="com.codemany.account.dao.UserDao"&gt;
    &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
&lt;/bean&gt;

&lt;!-- Struts 2的action是有状态的，必须显式设置scope为prototype，这样每次请求过来都会创建新的action --&gt;
&lt;bean id="loginAction" class="com.codemany.account.action.LoginAction" scope="prototype"&gt;
    &lt;property name="userDao" ref="userDao" /&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>删除HibernateUtil.java，修改UserDao.java为以下内容：</p>

<p>```
package com.codemany.account.dao;</p>

<p>import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;</p>

<p>import com.codemany.account.model.User;</p>

<p>public class UserDao {</p>

<pre><code>// Spring 3集成Hibernate 4不再需要HibernateDaoSupport或HibernateTemplate了，
// 直接使用原生API即可。
private SessionFactory sessionFactory;

public void setSessionFactory(SessionFactory sessionFactory) {
    this.sessionFactory = sessionFactory;
}

public User getUser(String username) {
    Session session = sessionFactory.openSession();
    try {
        Query query = session.createQuery("from User u where u.username = ?");
        query.setString(0, username);
        query.setMaxResults(1);
        return (User)query.uniqueResult();
    } finally {
        session.close();
    }
}
</code></pre>

<p>}
```</p>

<p>在struts.xml中将action元素中login的class属性改为applicationContext.xml配置文件中的loginAction：</p>

<p>```
<action name="login" class="loginAction"></p>

<pre><code>&lt;result name="success"&gt;/index.jsp&lt;/result&gt;
&lt;result name="input"&gt;/index.jsp&lt;/result&gt;
</code></pre>

<p></action>
```</p>

<p>修改LoginAction.java的代码：</p>

<p>```
package com.codemany.account.action;</p>

<p>import com.codemany.account.dao.UserDao;
import com.codemany.account.model.User;</p>

<p>import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class LoginAction extends ActionSupport {</p>

<pre><code>private static final long serialVersionUID = -389833745243649130L;

private String username;
private String password;

private UserDao userDao;

public String execute() throws Exception {
    if (username == null || username.length() == 0
            || password == null || password.length() == 0) {
        return INPUT;
    }

    User u = userDao.getUser(username);
    if (u == null || !password.equals(u.getPassword())) {
        return INPUT;
    }

    ActionContext.getContext().getSession().put("logined", true);
    return SUCCESS;
}

public void setUsername(String username) {
    this.username = username;
}

public void setPassword(String password) {
    this.password = password;
}

public void setUserDao(UserDao userDao) {
    this.userDao = userDao;
}
</code></pre>

<p>}
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/2012/08/31/struts2-hibernate4-login-sample/"/>
    <updated>2012-08-31T07:41:05+08:00</updated>
    <id>http://codemany.com/blog/2012/08/31/struts2-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>使用以下代码创建数据库：</p>

<p>```
CREATE DATABASE IF NOT EXISTS jbookshelf;</p>

<p>USE jbookshelf;</p>

<p>DROP TABLE IF EXISTS users;</p>

<p>CREATE TABLE users (</p>

<pre><code>id int NOT NULL AUTO_INCREMENT,
username varchar(20) NOT NULL,
password varchar(50) NOT NULL,
PRIMARY KEY (id)
</code></pre>

<p>) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
```</p>

<p>在pom.xml中添加Hibernate的依赖配置：</p>

<p>```
<dependency></p>

<pre><code>&lt;groupId&gt;org.hibernate&lt;/groupId&gt;
&lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
&lt;version&gt;4.1.6.Final&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;mysql&lt;/groupId&gt;
&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;version&gt;5.1.21&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>创建User.java类：</p>

<p>```
package com.codemany.account.model;</p>

<p>public class User {</p>

<pre><code>private Long id;

private String username;
private String password;

public Long getId() {
    return id;
}

public void setId(Long id) {
    this.id = id;
}

public String getUsername() {
    return username;
}

public void setUsername(String username) {
    this.username = username;
}

public String getPassword() {
    return password;
}

public void setPassword(String password) {
    this.password = password;
}
</code></pre>

<p>}
```</p>

<p>在同一目录下创建User.hbm.xml文件：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE hibernate-mapping PUBLIC</p>

<pre><code>"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;
</code></pre>

<p>&lt;hibernate-mapping package="com.codemany.account.model"></p>

<pre><code>&lt;class name="User" table="users"&gt;
    &lt;id name="id"&gt;
        &lt;generator class="increment" /&gt;
    &lt;/id&gt;

    &lt;property name="username" length="20" /&gt;
    &lt;property name="password" length="50" /&gt;
&lt;/class&gt;
</code></pre>

<p>&lt;/hibernate-mapping>
```</p>

<p>在resources目录下创建hibernate.cfg.xml配置文件，内容如下：</p>

<p>```
&lt;?xml version='1.0' encoding='utf-8'?>
&lt;!DOCTYPE hibernate-configuration PUBLIC</p>

<pre><code>"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
</code></pre>

<p>&lt;hibernate-configuration></p>

<pre><code>&lt;session-factory&gt;
    &lt;!-- MySQL connection settings --&gt;
    &lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;
    &lt;property name="connection.url"&gt;jdbc:mysql://localhost:3306/jbookshelf&lt;/property&gt;
    &lt;property name="connection.username"&gt;yourname&lt;/property&gt;
    &lt;property name="connection.password"&gt;yourpassword&lt;/property&gt;

    &lt;!-- JDBC connection pool (use the built-in) --&gt;
    &lt;property name="connection.pool_size"&gt;1&lt;/property&gt;

    &lt;!-- SQL dialect --&gt;
    &lt;property name="dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;

    &lt;!-- Disable the second-level cache  --&gt;
    &lt;property name="cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/property&gt;

    &lt;!-- Echo all executed SQL to stdout --&gt;
    &lt;property name="show_sql"&gt;true&lt;/property&gt;

    &lt;mapping resource="com/codemany/account/model/User.hbm.xml" /&gt;
&lt;/session-factory&gt;
</code></pre>

<p>&lt;/hibernate-configuration>
```</p>

<p>建立管理Session的HibernateUtil.java类：</p>

<p>```
package com.codemany.account.dao.hibernate;</p>

<p>import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;</p>

<p>public class HibernateUtil {</p>

<pre><code>private static final SessionFactory sessionFactory;

static {
    try {
        // Create the SessionFactory from hibernate.cfg.xml
        Configuration configuration = new Configuration();
        configuration.configure();
        Properties props = configuration.getProperties();

        ServiceRegistry serviceRegistry =
                new ServiceRegistryBuilder().applySettings(props).buildServiceRegistry();

        sessionFactory = configuration.buildSessionFactory(serviceRegistry);
    } catch (Throwable ex) {
        // Make sure you log the exception, as it might be swallowed
        System.err.println("Initial SessionFactory creation failed." + ex);
        throw new ExceptionInInitializerError(ex);
    }
}

public static Session getSession() {
    return sessionFactory.openSession();
}
</code></pre>

<p>}
```</p>

<p>在dao包创建数据访问对象：</p>

<p>```
package com.codemany.account.dao;</p>

<p>import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;</p>

<p>import com.codemany.account.model.User;</p>

<p>public class UserDao {</p>

<pre><code>public static User getUser(String username) {
    Session session = HibernateUtil.getSession();
    try {
        Query query = session.createQuery("from User u where u.username = ?");
        query.setMaxResults(1);
        query.setString(0, username);
        return (User)query.uniqueResult();
    } finally {
        session.close();
    }
}
</code></pre>

<p>}
```</p>

<p>现在可以访问数据库了，所以要修改LoginAction.java的execute方法：</p>

<p>```
public String execute() throws Exception {</p>

<pre><code>if (username == null || username.length() == 0
        || password == null || password.length() == 0) {
    return INPUT;
}

User u = UserDao.getUser(username);
if (u == null) {
    return INPUT;
}
if (username.equals(u.getUsername()) &amp;&amp; password.equals(u.getPassword())) {
    ActionContext.getContext().getSession().put("logined", true);
    return SUCCESS;
}

return INPUT;
</code></pre>

<p>}
```</p>

<p>如果显示jta-1.0.1b.jar缺失的错误，可以在pom.xml中添加以下语句：</p>

<p>```
<repositories></p>

<pre><code>&lt;repository&gt;
    &lt;id&gt;java.net&lt;/id&gt;
    &lt;url&gt;http://download.java.net/maven/2/&lt;/url&gt;
&lt;/repository&gt;
</code></pre>

<p></repositories>
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts 2登录实例]]></title>
    <link href="http://codemany.com/blog/2012/08/24/struts2-login-sample/"/>
    <updated>2012-08-24T06:33:20+08:00</updated>
    <id>http://codemany.com/blog/2012/08/24/struts2-login-sample</id>
    <content type="html"><![CDATA[<p>新的Eclipse已经包含Maven插件了，不过还需要到Eclipse Marketplace中去安装一个m2-wtp（Maven Integeration for Eclipse WTP）插件，不然启动Tomcat时会报错。</p>

<p>安装好后创建新Maven项目，填写groupId和artifactId。</p>

<p>在pom.xml中加入Struts 2的依赖配置：</p>

<p>```
<dependencies></p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
    &lt;artifactId&gt;struts2-core&lt;/artifactId&gt;
    &lt;version&gt;2.3.4&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p></dependencies>
```</p>

<p>在web.xml文件中添加Struts 2的Filter：</p>

<p>```
<filter></p>

<pre><code>&lt;filter-name&gt;struts2&lt;/filter-name&gt;
&lt;filter-class&gt;
    org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
&lt;/filter-class&gt;
</code></pre>

<p></filter></p>

<p>&lt;filter-mapping></p>

<pre><code>&lt;filter-name&gt;struts2&lt;/filter-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</code></pre>

<p>&lt;/filter-mapping>
```</p>

<p>配置resources/struts.xml文件：</p>

<p>```
<struts></p>

<pre><code>&lt;package name="default" extends="struts-default"&gt;
    &lt;action name="login" class="com.codemany.account.action.LoginAction"&gt;
        &lt;result name="success"&gt;/index.jsp&lt;/result&gt;
        &lt;result name="input"&gt;/index.jsp&lt;/result&gt;
    &lt;/action&gt;

    &lt;action name="logout" class="com.codemany.account.action.LogoutAction"&gt;
        &lt;result name="success" type="redirect"&gt;/index.jsp&lt;/result&gt;
    &lt;/action&gt;
&lt;/package&gt;
</code></pre>

<p></struts>
```</p>

<p>```
package com.codemany.account.action;</p>

<p>import com.codemany.account.model.User;</p>

<p>import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class LoginAction extends ActionSupport {</p>

<pre><code>private static final long serialVersionUID = -389833745243649130L;

private String username;
private String password;

public String execute() throws Exception {
    if (username == null || username.length() != 0
            || password == null || password.length() != 0) {
        return INPUT;
    }

    if ("test".equals(username) &amp;&amp; "test".equals(password)) {
        ActionContext.getContext().getSession().put("logined", true);
        return SUCCESS;
    }

    return INPUT;
}

public void setUsername(String username) {
    this.username = username;
}

public void setPassword(String password) {
    this.password = password;
}
</code></pre>

<p>}
```</p>

<p>```
package com.codemany.account.action;</p>

<p>import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class LogoutAction extends ActionSupport {</p>

<pre><code>private static final long serialVersionUID = -518996422060716751L;

public String execute() throws Exception {
    ActionContext.getContext().getSession().put("logined", false);
    return SUCCESS;
}
</code></pre>

<p>}
```</p>

<p>index.jsp内容如下：</p>

<p>```
&lt;%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8" %></p>

<p>&lt;%@ taglib uri="/struts-tags" prefix="s" %></p>

<p>&lt;!DOCTYPE html>
<html>
<head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;Struts2 Login Sample&lt;/title&gt;
</code></pre>

<p></head></p>

<p><body></p>

<pre><code>&lt;s:if test="#session.logined"&gt;
    Welcome, you have logined. &lt;a href="&lt;%= request.getContextPath() %&gt;/logout.action"&gt;Logout&lt;/a&gt;
&lt;/s:if&gt;
&lt;s:else&gt;
    &lt;p&gt;User: test/test&lt;/p&gt;
    &lt;s:form action="login"&gt;
        &lt;s:textfield key="username" label="Username" /&gt;
        &lt;s:password key="password" label="Password" /&gt;
        &lt;s:submit value="Login" /&gt;
    &lt;/s:form&gt;
&lt;/s:else&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>在项目上点击右键 -> Run As -> Maven build运行项目。在Goals栏中填写tomcat:run，Maven会自动下载Tomcat到项目的target目录下后启动服务器。</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从已有项目创建Maven Archetype]]></title>
    <link href="http://codemany.com/blog/2011/10/12/create-maven-archetype-from-existing-project/"/>
    <updated>2011-10-12T16:19:04+08:00</updated>
    <id>http://codemany.com/blog/2011/10/12/create-maven-archetype-from-existing-project</id>
    <content type="html"><![CDATA[<p>有这么句话：遇到重复的Maven项目初始配置，就要创建自己的Archetype。</p>

<p>手里就有这样的项目，其它项目都基于这个项目创建，只是对package名字做了修改，还有就是替换部分的图片。如何从现有项目中创建Archetype呢？</p>

<p>首先，在已有项目的根目录下创建pom.xml，内容如下：</p>

<p>```
&lt;project xmlns="<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a>" xmlns:xsi="<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>"</p>

<pre><code>xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;your.company&lt;/groupId&gt;
&lt;artifactId&gt;artifact-name&lt;/artifactId&gt;
&lt;version&gt;1.0&lt;/version&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;
</code></pre>

<p></project>
```</p>

<p>然后在根目录下执行下列命令（当然，在这之前你必须先配置好Maven环境）：</p>

<p><code>
mvn archetype:create-from-project
</code></p>

<p>进入target\generated-sources\archetype目录，手工调整相关的源码。需进行变量替换的文件，要在archetype-metadata.xml中开启filtered="true"。</p>

<p>下面就是使用Archetype了：</p>

<p><code>
mvn clean install
mvn archetype:generate -DarchetypeArtifactId=artifact-name-archetype -DarchetypeGroupId=your.company -DgroupId=com.codemany -DartifactId=example -Dpackage=com.codemany.example
</code></p>
]]></content>
  </entry>
  
</feed>
