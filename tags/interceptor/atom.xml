<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Interceptor | 乐者为王]]></title>
  <link href="http://codemany.com/tags/interceptor/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-09-18T20:29:43+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Interceptor禁止用户访问未授权的图书信息]]></title>
    <link href="http://codemany.com/blog/2013/02/01/using-interceptor-to-prohibit-users-from-accessing-unauthorized-books-information/"/>
    <updated>2013-02-01T18:50:02+08:00</updated>
    <id>http://codemany.com/blog/2013/02/01/using-interceptor-to-prohibit-users-from-accessing-unauthorized-books-information</id>
    <content type="html"><![CDATA[<p>现在的JBookShelf有两个问题：</p>

<ol>
<li>未登录的用户可以访问图书信息；</li>
<li>登录后的用户可以访问其他用户的图书信息。</li>
</ol>


<p>第一个问题可以使用Struts 2的Interceptor来解决：</p>

<ol>
<li>创建一个实现了Interceptor接口的类；</li>
<li>在struts.xml配置中定义这个拦截器；</li>
<li>在struts.xml中定义一个使用了上面拦截器的拦截栈；</li>
<li>在struts.xml中定义一个全局转向配置。</li>
</ol>


<p>实现自己的拦截器有点要注意的是，拦截器必须是无状态的，不要使用在API提供的ActionInvocation之外的任何东西。要求拦截器是无状态的原因是Struts 2不能保证为每一个请求或者action创建一个实例，所以如果拦截器带有状态，会引发并发问题。</p>

<p>创建AuthorizationInterceptor类，继承类AbstractInterceptor。为什么继承它呢？而不是直接实现接口Interceptor。这是因为AbstractInterceptor已经实现了Interceptor接口，并且实现了接口中的init和destroy方法。而在这个拦截器中，我们并不需要使用这两个方法。下面上代码：</p>

<p>```
package com.codemany.account.interceptor;</p>

<p>import java.util.Collections;
import java.util.Set;</p>

<p>import com.codemany.account.model.User;</p>

<p>import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;
import com.opensymphony.xwork2.util.TextParseUtil;</p>

<p>public class AuthorizationInterceptor extends AbstractInterceptor {</p>

<pre><code>private static final long serialVersionUID = -5140884040684756043L;

protected Set&lt;String&gt; skipActions = Collections.emptySet();

public void setSkipActions(String skipActions) {
    this.skipActions = TextParseUtil.commaDelimitedStringToSet(skipActions);
}

@Override
public String intercept(ActionInvocation invocation) throws Exception {
    User user = (User)invocation.getInvocationContext()
            .getSession().get(User.SESSION_KEY);

    boolean isLogined = user != null;
    String action = invocation.getProxy().getActionName();
    // 如果用户未登录，并且访问的是需要登录权限的Action，就跳转到全局转向配置login上
    if (isLogined || skipActions.contains(action)) {
        return invocation.invoke();
    } else {
        return Action.LOGIN;
    }
}
</code></pre>

<p>}
```</p>

<p>这里的skipActions目的是为了跳过一些不需要拦截的Action。因为默认情况下，拦截器会拦截Action中的所有的方法。像login，register这类Action是任何用户在任何状态下都可以访问的，所以不需要拦截，这里就可以将这些Action放到skipActions中来跳过拦截。</p>

<p>实现了拦截类后还要在struts.xml进行配置使它起作用，以下是struts.xml的完整代码：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE struts PUBLIC</p>

<pre><code>"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;
</code></pre>

<p><struts></p>

<pre><code>&lt;constant name="struts.enable.DynamicMethodInvocation" value="true" /&gt;
&lt;constant name="struts.devMode" value="true" /&gt;

&lt;package name="default" extends="struts-default"&gt;
    &lt;interceptors&gt;
        &lt;interceptor name="authorization"
            class="com.codemany.account.interceptor.AuthorizationInterceptor" /&gt;

        &lt;interceptor-stack name="authorizationStack"&gt;
            &lt;interceptor-ref name="authorization"&gt;
                &lt;param name="skipActions"&gt;login, logout, register&lt;/param&gt;
            &lt;/interceptor-ref&gt;
            &lt;interceptor-ref name="defaultStack" /&gt;
        &lt;/interceptor-stack&gt;
    &lt;/interceptors&gt;

    &lt;default-interceptor-ref name="authorizationStack" /&gt;

    &lt;!-- 全局转向配置 --&gt;
    &lt;!-- 还记得拦截器里面的return Action.LOGIN这句吧，当程序执行完这一行后，--&gt;
    &lt;!-- 就会到struts.xml文件的global-results中找name为login的全局转向配置。--&gt;
    &lt;global-results&gt;
        &lt;result name="login" type="redirectAction"&gt;login!input&lt;/result&gt;
    &lt;/global-results&gt;
&lt;/package&gt;

&lt;include file="account.xml" /&gt;
&lt;include file="book.xml" /&gt;
</code></pre>

<p></struts>
```</p>

<p>然后将account.xml和book.xml中package继承的父包改成struts.xml配置中的default包：</p>

<p>```
<package name="account" extends="default"></p>

<p><package name="book" extends="default">
```</p>

<p>第二个问题的解决就是重写BookAction.java的代码，不再从数据库中读取Book数据，而是从当前登录用户的books属性中查找Book信息。</p>

<p>```
package com.codemany.book.action;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;</p>

<p>import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class BookAction extends ActionSupport {</p>

<pre><code>private static final long serialVersionUID = 2538923417705852774L;

private Long bookId;
private Book book;
private List&lt;Book&gt; bookList;

private BookService bookService;

public String list() throws Exception {
    if (bookList == null) {
        bookList = new ArrayList&lt;Book&gt;();
    }
    bookList.addAll(getCurrentUser().getBooks());
    return "list";
}

public String show() throws Exception {
    book = getCurrentUser().getBook(bookId);
    return "show";
}

public String input() throws Exception {
    if (bookId != null) {
        book = getCurrentUser().getBook(bookId);
    }
    return INPUT;
}

public String saveOrUpdate() throws Exception {
    book.setUser(getCurrentUser());
    bookService.saveOrUpdateBook(book);
    return SUCCESS;
}

public String delete() throws Exception {
    Book book = getCurrentUser().getBook(bookId);
    if (book != null) {
        bookService.deleteBook(bookId);
        getCurrentUser().getBooks().remove(book);
    }
    return SUCCESS;
}

public List&lt;Book&gt; getBookList() {
    return bookList;
}

public Book getBook() {
    return book;
}

public void setBook(Book book) {
    this.book = book;
}

public void setBookId(Long bookId) {
    this.bookId = bookId;
}

public void setBookService(BookService bookService) {
    this.bookService = bookService;
}

private User getCurrentUser() {
    return (User)ActionContext.getContext()
            .getSession().get(User.SESSION_KEY);
}
</code></pre>

<p>}
```</p>

<p>上面的代码会产生异常，提示取出的Book数据为空，所以要在User.hbm.xml中set标签后添加属性lazy=“false”，这样Hibernate从数据库中读取User数据时会连带取出对应的Book数据：</p>

<p><code>
&lt;set name="books" inverse="true" lazy="false"&gt;
</code></p>

<p>下面是BookAction类中用到的User.getBook(bookId)代码：</p>

<p>```
public class User {</p>

<pre><code>public Book getBook(Long bookId) {
    for (Book book : books) {
        if (bookId != null &amp;&amp; bookId.equals(book.getId())) {
            return book;
        }
    }
    return null;
}
</code></pre>

<p>```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
</feed>
