<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Regural Expression | 乐者为王]]></title>
  <link href="http://codemany.com/tags/regural-expression/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-09-09T22:25:15+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript学习笔记之正则表达式]]></title>
    <link href="http://codemany.com/blog/2005/07/30/javascript-study-notes-regular-expressions/"/>
    <updated>2005-07-30T11:09:06+08:00</updated>
    <id>http://codemany.com/blog/2005/07/30/javascript-study-notes-regular-expressions</id>
    <content type="html"><![CDATA[<p>JavaScript的正则表达式有两种格式：文本格式/pattern/flags和构造函数格式new RegExp("pattern"[, "flags"])。其中，pattern表示正则表达式的匹配模式，如果指定flags项，它可以是下列值之一：</p>

<table>
<thead>
<tr>
<th>Flags </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>g     </td>
<td> global match</td>
</tr>
<tr>
<td>i     </td>
<td> case-insensitive match</td>
</tr>
<tr>
<td>m     </td>
<td> multiline match</td>
</tr>
</tbody>
</table>


<h3>正则表达式中的特殊字符</h3>

<table>
<thead>
<tr>
<th>Character </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>[abc]     </td>
<td> Find any character between the brackets. 可以用短横线（-）指定一个范围</td>
</tr>
<tr>
<td>[^abc]    </td>
<td> Find any character NOT between the brackets. 可以用短横线（-）指定一个范围</td>
</tr>
<tr>
<td>x</td>
<td>y       | Find any of the alternatives specified</td>
</tr>
<tr>
<td>.         </td>
<td> Find a single character, except newline or line terminator</td>
</tr>
<tr>
<td>\w        </td>
<td> Find a word character</td>
</tr>
<tr>
<td>\W        </td>
<td> Find a non-word character</td>
</tr>
<tr>
<td>\d        </td>
<td> Find a digit</td>
</tr>
<tr>
<td>\D        </td>
<td> Find a non-digit character</td>
</tr>
<tr>
<td>\s        </td>
<td> Find a whitespace character</td>
</tr>
<tr>
<td>\S        </td>
<td> Find a non-whitespace character</td>
</tr>
<tr>
<td>\b        </td>
<td> Find a match at the beginning/end of a word</td>
</tr>
<tr>
<td>\B        </td>
<td> Find a match not at the beginning/end of a word</td>
</tr>
<tr>
<td>[\b]      </td>
<td> 匹配一个退格符（不要与\b混淆）</td>
</tr>
<tr>
<td>\0        </td>
<td> Find a NUL character</td>
</tr>
<tr>
<td>\n        </td>
<td> Find a new line character</td>
</tr>
<tr>
<td>\f        </td>
<td> Find a form feed character</td>
</tr>
<tr>
<td>\r        </td>
<td> Find a carriage return character</td>
</tr>
<tr>
<td>\t        </td>
<td> Find a tab character</td>
</tr>
<tr>
<td>\v        </td>
<td> Find a vertical tab character</td>
</tr>
<tr>
<td>\cX       </td>
<td> The control character ^X; for example, \cJ is equivalent to the newline character \n</td>
</tr>
<tr>
<td>\xxx      </td>
<td> Find the character specified by an octal number xxx</td>
</tr>
<tr>
<td>\xnn      </td>
<td> The character specified by the hexadecimal number nn</td>
</tr>
<tr>
<td>\uxxxx    </td>
<td> The Unicode character specified by the hexadecimal number xxxx</td>
</tr>
<tr>
<td>^         </td>
<td> Match the beginning of the string and, in multiline searches, the beginning of a line</td>
</tr>
<tr>
<td>$         </td>
<td> Match the end of the string and, in multiline searches, the end of a line.</td>
</tr>
<tr>
<td>*         </td>
<td> 匹配前面的字符0次或n次</td>
</tr>
<tr>
<td>+         </td>
<td> 匹配前面的字符1次或n次</td>
</tr>
<tr>
<td>?         </td>
<td> 匹配前面的字符0次或1次</td>
</tr>
<tr>
<td>(x)       </td>
<td> 匹配x并记录匹配的值。匹配子串可以通过结果数组中的[1], ..., [n]获取，或通过RegExp对象的属性$1, ..., $9返回</td>
</tr>
<tr>
<td>{n}       </td>
<td> 前面的字符n次</td>
</tr>
<tr>
<td>{n,}      </td>
<td> 前面的字符至少n次</td>
</tr>
<tr>
<td>{n, m}    </td>
<td> 前面的字符至少n次，最多m次</td>
</tr>
<tr>
<td>\n        </td>
<td> ?? 这里的n是一个正整数。匹配一个正则表达式的最后一个子串的n的值(计数左圆括号)</td>
</tr>
</tbody>
</table>


<p>?=x
?!x</p>

<h3>正则表达式方法</h3>

<p>exec(string) 对string进行正则处理，并返回匹配结果<br />
test(string) 测试string是否含有匹配结果，返回true或false<br />
match(pattern) 根据pattern进行正则匹配，如果匹配到则返回匹配结果，否则返回null<br />
search(pattern) 根据pattern进行正则匹配，如果匹配到一个结果，则返回它的索引数，否则返回-1<br />
replace(pattern, replacement) 根据pattern进行正则匹配，把匹配结果替换为replacement<br />
split(pattern) 根据pattern进行正则分割，返回一个分割的数组﻿</p></p>
]]></content>
  </entry>
  
</feed>
