<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ProgressDialog | 乐者为王]]></title>
  <link href="http://codemany.com/tags/progressdialog/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-10-04T18:41:38+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用showDialog()创建的ProgressDialog再次打开时进度条不变化]]></title>
    <link href="http://codemany.com/blog/progress-bar-does-not-work-when-reopen-progressdialog-using-showdialog/"/>
    <updated>2012-04-15T13:15:24+08:00</updated>
    <id>http://codemany.com/blog/progress-bar-does-not-work-when-reopen-progressdialog-using-showdialog</id>
    <content type="html"><![CDATA[<p>先来看段代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;fill_parent&quot;
    android:orientation=&quot;vertical&quot;&gt;
    &lt;Button
        android:layout_width=&quot;fill_parent&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;Copy Contacts&quot;
        android:onClick=&quot;copyContacts&quot; /&gt;
&lt;/LinearLayout&gt;
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;

public class DialogActivity extends Activity {
    private static final int COPY_CONTACTS = 0;

    private ProgressDialog mProgressDialog;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }

    public void copyContacts(View target) {
        showDialog(COPY_CONTACTS);
    }

    @Override
    protected Dialog onCreateDialog(int id) {
        switch (id) {
        case COPY_CONTACTS:
            mProgressDialog = new ProgressDialog(this);
            mProgressDialog.setTitle(&quot;Copy contacts&quot;);
            mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
            mProgressDialog.setMax(100);
            new AsyncCopyContactsTask().execute();
            break;
        }
        return mProgressDialog;
    }

    private class AsyncCopyContactsTask extends AsyncTask&lt;Void, Void, Integer&gt; {
        @Override
        protected Integer doInBackground(Void... params) {
            for (int i = 0; i &lt; 100; i++) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                }
                publishProgress();
            }
            return 0;
        }

        protected void onProgressUpdate(Void... progress) {
            mProgressDialog.incrementProgressBy(1);
        }

        protected void onPostExecute(Integer result) {
            mProgressDialog.dismiss();
        }
    }
}
</code></pre></div>
<p>第一次点击按钮会显示一个进度条，上面的数字处于变动当中，到达最大值后进度条会消失不见；再次点击按钮后，就会发现进度条上的数值和消失前相同，并且不再变化，而且进度条也不会消失。这是为什么呢？</p>

<p>Activity中有三个和对话框显示有关的方法：showDialog()，dismissDialog()和removeDialog()。其中showDialog()用于显示一个对话框；dismissDialog()使对话框消失，但仍然处于内存中，只是不显示而已，如果再次调用showDialog()方法，则缓存在内存中的对话框会重新显示，而不需要重新创建。removeDialog()使对话框消失，并从内存中将对话框清除，如果再次调用showDialog()来显示它，则在显示之前需要重新创建对话框。</p>

<p>在一个对话框的声明周期内，onCreateDialog()仅被调用一次，但onPrepareDialog()方法会每次被调用。比如，第一次调用 showDialog()方法显示某个对话框时，会先触发onCreateDialog()的执行，然后再触发onPrepareDialog()方法；如果将某个对话框 removeDialog()后再showDialog()，也会先触发onCreateDialog()，接着触发onPrepareDialog()方法；如果某个对话框是被dismiss()掉的，再调用 showDialog()方法来显示它时就不会触发onCreateDialog()方法的执行，只会触发onPrepareDialog()方法。</p>

<p>这是因为第一次调用showDialog()时，Android从你的Activity中调用onCreateDialog()方法，得到返回的Dialog对象。把当前Activity设置为该对话框的所有者，从而把对话框挂靠到Activity上，让Activity自动管理该对话框的状态。这样，下次调用showDialog()时就不用重新创建Dialog对象，而是复用旧的。</p>

<p>所以，解决再次打开ProgressDialog时进度条不变化的最好方法就是将mProgressDialog.dismiss()改成removeDialog(COPY_CONTACTS)。</p>

<p>注意：如果你决定在onCreateDialog()方法之外创建一个对话框，它将不会被附着到活动上。不过，你可以通过setOwnerActivity()把它附着到一个Activity上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现带Icon的ListView（改进版）]]></title>
    <link href="http://codemany.com/blog/implement-listview-with-icon-improved/"/>
    <updated>2011-06-02T18:47:58+08:00</updated>
    <id>http://codemany.com/blog/implement-listview-with-icon-improved</id>
    <content type="html"><![CDATA[<p>带Icon的ListView工作起来还不错，但是如果手机里安装的软件比较多的话就有问题了。在程序启动时会黑屏一段时间，就好像程序挂起了一样。所以这时需要显示一个对话框，告诉用户正在加载数据，最好还能准确告诉用户加载的进度。</p>

<p>显示对话框用ProgressDialog，它有两种样式：HORIZONTAL和SPINNER。这里暂时选择SPINNER，等以后有机会再改成HORIZONTAL。</p>

<p>我们在加载数据前显示ProgressDialog，在之后关闭对话框。示例代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ProgressDialog pd = ProgressDialog.show(this, &quot;Wait&quot;, &quot;loading...&quot;);

ListView lv = (ListView)findViewById(R.id.list_view);
adapter = new SimpleIconAdapter(this,
        getInstalledApps(false),
        R.layout.list_item,
        new String[] {APP_ICON, APP_TITLE, APP_PACKAGE},
        new int[] {R.id.app_icon, R.id.app_title, R.id.app_package});
lv.setAdapter(adapter);

pd.dismiss();
</code></pre></div>
<p>但结果ProgressDialog没有显示出来，因为加载数据的代码也执行在UI线程中，所以对话框的显示被阻塞了。怎么办呢？可以试着创建一个新线程，然后把加载数据这个耗时的操作放到这个非UI线程中去执行，这样不就可以了么：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ProgressDialog pd = ProgressDialog.show(this, &quot;Wait&quot;, &quot;loading...&quot;);

new Thread() {
    @Override
    public void run() {
        ListView lv = (ListView)findViewById(R.id.list_view);
        adapter = new SimpleIconAdapter(Main.this,
                getInstalledApps(false),
                R.layout.list_item,
                new String[] {APP_ICON, APP_TITLE, APP_PACKAGE},
                new int[] {R.id.app_icon, R.id.app_title, R.id.app_package});
        lv.setAdapter(adapter);
    }
}.start();

pd.dismiss();
</code></pre></div>
<p>这下更惨了，直接报RuntimeException，连界面都打不开了。</p>

<p>深入研究一下Android的线程模型，看看Android到底是怎么处理UI线程和其它线程的交互的，为什么上面的代码会报异常?</p>

<blockquote>
<p>When an application is launched, the system creates a thread called &quot;main&quot; for the application. The main thread, also called the UI thread, is very important because it is in charge of dispatching the events to the appropriate widgets, including drawing events. It is also the thread where your application interacts with running components of the Android UI toolkit.</p>

<p>For instance, if you touch the a button on screen, the UI thread dispatches the touch event to the widget, which in turn sets its pressed state and posts an invalidate request to the event queue. The UI thread dequeues the request and notifies the widget to redraw itself.</p>

<p>This single-thread model can yield poor performance unless your application is implemented properly. Specifically, if everything is happening in a single thread, performing long operations such as network access or database queries on the UI thread will block the whole user interface. No event can be dispatched, including drawing events, while the long operation is underway. From the user&#39;s perspective, the application appears hung. Even worse, if the UI thread is blocked for more than a few seconds (about 5 seconds currently) the user is presented with the infamous &quot;application not responding&quot; (ANR) dialog.</p>
</blockquote>

<p>看了上面这段话可以知道为啥程序一打开就黑屏，像挂掉了一样。</p>

<p>那为什么用新建线程来执行耗时操作的代码也有问题呢？这是因为它虽然没有阻塞UI线程，但它违背了单线程模型，Android的UI操作并不是线程安全的，并且这些操作必须在UI线程中执行。在这段代码片段中，在另一个线程中执行数据加载绑定，这会引起一些古怪的问题。</p>

<p>Andriod提供了几种在其它线程中访问UI线程的方法：</p>

<ul>
<li><a href="http://developer.android.com/reference/android/app/Activity.html#runOnUiThread(java.lang.Runnable)">Activity.runOnUiThread(Runnable)</a></li>
<li><a href="http://developer.android.com/reference/android/view/View.html#post(java.lang.Runnable)">View.post(Runnable)</a></li>
<li><a href="http://developer.android.com/reference/android/view/View.html#postDelayed(java.lang.Runnable,%20long)">View.postDelayed(Runnable, long)</a></li>
<li><a href="http://developer.android.com/reference/android/os/Handler.html">Hanlder</a></li>
</ul>

<p>上面的任何一个类或方法都可以修复我们前面代码中遇到的问题，很不幸的是这些类或方法同样会使你的代码变的很复杂很难理解。而且当你需要实现一些很复杂的操作并需要频繁地更新UI时会变得更糟糕。为了解决这个问题，Android 1.5提供了一个工具类AsyncTask，它使创建需要与用户界面交互的长时间运行的任务变得更简单。在Android 1.0和1.1中具有与AsyncTask相同功能的类UserTask，它提供了完全一样的API，你需要做的只是把它的代码拷贝的你的程序中。</p>

<p>其实这些方案背后采用的都是Handler。所以这里仍然使用旧有的，复杂的Handler来修复上述问题。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.widget.ListView;

public class MainActivity extends Activity {
    private static final String APP_ICON = &quot;app_icon&quot;;
    private static final String APP_TITLE = &quot;app_title&quot;;
    private static final String APP_PACKAGE = &quot;app_package&quot;;

    private SimpleIconAdapter adapter;
    private List&lt;HashMap&lt;String, Object&gt;&gt; listData;
    private ProgressDialog pd;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        ListView lv = (ListView)findViewById(R.id.list_view);
        listData = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();
        adapter = new SimpleIconAdapter(this,
                listData,
                R.layout.list_item,
                new String[] {APP_ICON, APP_TITLE, APP_PACKAGE},
                new int[] {R.id.app_icon, R.id.app_title, R.id.app_package});
        lv.setAdapter(adapter);

        pd = ProgressDialog.show(this, &quot;Wait&quot;, &quot;loading...&quot;);

        new Thread() {
            @Override
            public void run() {
                // 耗时操作，加载数据
                listData.addAll(getInstalledApps(false));
                handler.sendEmptyMessage(0);
            }
        }.start();
    }

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            // 通知UI更新。必须要放在这里
            adapter.notifyDataSetChanged();

            pd.dismiss();
        }
    };
</code></pre></div>]]></content>
  </entry>
  
</feed>
