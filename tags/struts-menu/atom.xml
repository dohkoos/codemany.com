<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Struts Menu | 乐者为王]]></title>
  <link href="http://codemany.com/tags/struts-menu/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-12-06T11:20:03+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让Struts-Menu能访问WebWork的ResourceBundle]]></title>
    <link href="http://codemany.com/blog/allow-struts-menu-to-access-resourcebundle-of-webwork/"/>
    <updated>2006-03-12T07:01:48+08:00</updated>
    <id>http://codemany.com/blog/allow-struts-menu-to-access-resourcebundle-of-webwork</id>
    <content type="html"><![CDATA[<p>Struts-Menu默认是通过JSTL或者Struts来读取ResourceBundle的，这就需要在web.xml中配置要读取的properties文件（JSTL方式）或在struts-config.xml中配置（Struts方式）。
WebWork也有自己的ResourceBundle配置方式，而且Struts-Menu也不支持访问WebWork的ResourceBundle的功能。所以参考着DisplayTag的实现对Struts-Menu进行了一番手术，实现了可访问WebWork的ResourceBundle的功能。</p>

<p>下面是修改步骤：</p>

<ul>
<li>在Struts-Menu项目中增加net/sf/navigator/localization目录，将org.displaytag.localization中的*.java移到该目录中；</li>
<li>将org.displaytag下的Message.java和messages.properties移到net/sf/navigator目录下；</li>
<li>给MenuDisplayerMapping添加两个属性localeResover和ResourceProvider；</li>
<li>在struts-menu.xml的Displayer标签下添加：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;setProperty property=&quot;localeResover&quot; value=&quot;net.sf.navigator.localization.I18nWebworkAdapter&quot; /&gt;
&lt;setProperty property=&quot;resourceProvider&quot; value=&quot;net.sf.navigator.localization.I18nWebworkAdapter&quot; /&gt;
</code></pre></div>
<ul>
<li>在MenuDisplayer中添加以下四个接口方法，并在AbstractMenuDisplayer里实现它们：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">public LocaleResolver getLocaleResolver();
public void setLocaleResolver(LocaleResolver localeResolver);
public I18nResourceProvider getResourceProvider();
public void setResourceProvider(I18nResourceProvider resourceProvider);
</code></pre></div>
<ul>
<li>在AbstractMenuDisplayer里添加protected的PageContext对象，并在init方法里初始化它；</li>
<li>覆写MessageResourcesMenuDisplayer.getMessage方法，代码如下：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">public String getMessage(String key) {
    String message = null;

    if (resourceProvider != null) {
        message = resourceProvider.getResource(key, &quot;???&quot;, null, pageContext);
    }
    if (message == null) {
        message = key;
    }

    return message;
}
</code></pre></div>
<ul>
<li>在UseMenuDisplayerTag文件里添加代码（+后的代码是增加的）：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">  // get an instance of the menu displayer
  MenuDisplayer displayerInstance = null;
+ LocaleResolver localeResolver = null;
+ I18nResourceProvider resourceProvider = null;

  // default to use the config on the mapping
  if (displayerMapping.getConfig() != null) {
      // this value (config) is set on the displayer below
      setConfig(displayerMapping.getConfig());
  }
+ localeResolver =
+         (LocaleResolver) Class.forName(displayerMapping.getLocaleResover()).newInstance();
+ resourceProvider =
+         (I18nResourceProvider) Class.forName(displayerMapping.getLocaleProvider()).newInstance();

  displayerInstance.setConfig(config);
+ displayerInstance.setResourceProvider(resourceProvider);
+ displayerInstance.setLocaleResolver(localeResolver);
</code></pre></div>]]></content>
  </entry>
  
</feed>
