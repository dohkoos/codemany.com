<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Translation | 乐者为王]]></title>
  <link href="http://codemany.com/tags/translation/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-05-16T10:09:09+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[开发者被灯光蒙蔽了双眼]]></title>
    <link href="http://codemany.com/blog/developers-are-blinded-by-the-light/"/>
    <updated>2016-04-30T23:08:43+08:00</updated>
    <id>http://codemany.com/blog/developers-are-blinded-by-the-light</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://programmingzen.com/2008/12/30/developers-are-blinded-by-the-light/">http://programmingzen.com/2008/12/30/developers-are-blinded-by-the-light/</a></p>

<blockquote>
<p>Blinded by the light,<br>
revved up like a deuce,<br>
another runner in the night<br>
— Bruce Springsteen</p>
</blockquote>

<p>人类在计算几率方面是异常地差。我们有限的经验强烈地影响着我们对事件的可能性的认知。例如，我们往往极大地高估由恐怖袭击、意外枪支走火或者飓风引起死亡的几率，并且极大地低估像坠落、溺水或者流感死亡的原因。其原因是媒体经常提醒我们恐怖主义、飓风的危险或者关于孩子们被意外射杀的瞬间故事。你很少发现关于一个人溺水、坠落或者由于流感死亡的故事在国家新闻频道上被报道。新闻报道有一种倾向是耸人听闻，为的是引起人们的注意和钩住大量的观众，因此当谈到估计什么可能/不可能发生时它们促成人们的偏见。</p>

<p>同样的，在电视和报纸上过度曝光心花怒放的彩票中奖者举起他们超大的支票往往歪曲人们对通过购买一注彩票胜利的可能性的认知。对这个问题持一个严谨和客观的态度将会很快揭露中奖的几率比它们表面上看起来的要差得多。[1]</p>

<p>我注意到这种情况也正在开发/创业的世界里发生。这是一波新的淘金热。太多的开发者正在试图建立下一个大的社交网络，成为下一个Facebook（或YouTube），聚集数以百万计的人群，希望被大公司以一笔数量荒谬的钱收购。媒体喜欢这类故事。</p>

<p>因此，正在试图构建下一个Facebook的开发者类似于彩票买家。他们中的一些人会成功和获胜，但大部分人会惨遭失败。我们真正需要多少社交网络？广告支撑的模式适合某些设法吸引庞大的人群同时保持其费用最低（例如PlentyOfFish）或者被收购（例如YouTube，它也在花Google的钱）的幸运的公司。在这个过程中其他人都是在烧钱以及浪费VC的钱和诚意。</p>

<p>我担心很多开发者被灯光蒙蔽了双眼。他们对获得成功的真实几率的认知受到了媒体连续报道的百万——如果不是10亿——美元收购和成功故事的扭曲。而且有些VC鼓励这种行为，希望能在他们的投资上看到高回报。毕竟这些都是非常富有的人，他们对小规模的成功不感兴趣。</p>

<p>除了明显的浪费时间和资源之外，我认为许多开发者为了追求极不可能的结果放弃了极好的机会。用一个传统商业计划挣1,000万的可能性和按YouTube的方式挣10亿的可能性的比例，与这些金额能负担得起你的不同生活质量不成正比。如果你破产了，有3万美元的信用卡债务，或者你是中产阶级，你会发现1,000万美元可以提高的生活质量总是远远超过从1,000万到10亿能提高的。而且重要的是，我们要认识到瞄准尽管更小，但更有可能的结果不会以任何方式阻止你以后的“伟大梦想”，一旦你的第一次（或者第一次成功的）创业已经取得了成功。</p>

<p>你愿意参加20次有1次胜利机会的100万美元抽奖，还是50,000,000次有1次机会的5亿美元抽奖？理性的人会选择第1个，然而在今天，大部分创业公司都倾向于选择第2个。他们这么做是因为他们极大地高估了他们以第2个抽奖成功的几率。</p>

<p>创建一个产品并让人们为它付费。不要拿VC的钱，除非你真的不考虑依靠自己的力量启动你的公司。软件世界的主要优点之一是在开始的时候极少量的资本需要。如果你想做Web应用，可以使用软件即服务（SaaS）模型，让你的用户为你提供的软件和服务付费。你将会有更加少的受众，更少的可伸缩性问题和费用，以及有更多的收入和更大的盈利机会。Joel Spolsky（和<a href="http://www.joelonsoftware.com/items/2008/12/29.html">他那华丽的办公空间</a>）挣得数百万收入是因为他的公司在出售一套Web版的bug追踪器。你知道有多少免费的bug追踪器？在这个市场上存在多少竞争对手？我确信有许多。然而，虽然Joel的人气毫无疑问地帮助到了他的公司，但此案例仍然展示了一个企业如何通过构建一个更好的产品而成功。</p>

<p>就像David Heinemeier Hansson提及的，有无数不受关注的公司在像那样挣钱。[2]如果你把视线从聚光灯上移开，你将看到许多公司在它们所做的事情上面非常成功，尽管它们不出名或者没有制造新闻头条。它们中的有些公司实际上努力不去吸引太多的关注到它们的成功上（经常用数百万美元来衡量），以便防止竞争对手的涌现。</p>

<p>不管你的名字是不是家喻户晓，你甚至不必创建Web应用才能非常成功。你可能会想到为智能手机包括iPhone开发移动应用。但是良好的老式桌面应用让各种各样的软件公司继续发展。这就是为什么“你不能再用商业桌面软件挣钱，或者桌面应用都死了”的扭曲的认知太荒谬的原因。作为开发者/微型ISV/创业公司，你用良好设计的桌面软件挣钱的机会远远高于构建任何一款YouTube、Flickr或者Facebook复制品的机会。</p>

<p>要了解我们的认知是怎么被扭曲的，你只需要和那些公开分享它们软件销售统计的公司交谈。你将会被用相对普通的软件挣到钱的数额震惊。Balsamiq制作了一款UI草图应用卖79美元。作者成功挣到了<a href="http://www.balsamiq.com/blog/?p=424">10万美元收入在前5个月</a>，大部分是通过销售应用的桌面版本。在这个产业里他当然远非最大的赢家之一。我提到这个不过是因为它表明那是一个非常不错的想法，很好执行，当你让你的用户付费时能很快带来收入。如果你认为在5个月里10万美元很少，那我来问你有多少免费网站达成一个类似的每月收入净额。如果你正在寻找更大的收入，了解下Omni Graffle，它给<a href="http://www.omnigroup.com/applications/OmniGraffle/">Omni Group</a>赚取了数百万美元，或者把你的目光放到B2B应用上（在那个市场里某些应用卖上千美元一份）。</p>

<p>当许多开发者被灯光蒙蔽了双眼的时候，有创业想法的智者正在建立真正的软件业务。我请你走出来做同样的事情。</p>

<p>脚注</p>

<p>[1] 我在这里总结的概念被Dan Gilbert在<a href="http://www.ted.com/index.php/talks/dan_gilbert_researches_happiness.html">这个TED演讲</a>里更详细地说明了。</p>

<p>[2] David Heinemeier Hansson在<a href="http://www.37signals.com/svn/posts/1495-the-untold-millions">他的一篇帖子</a>中持类似的观点，该帖给了本文以灵感。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贫富差距精简版]]></title>
    <link href="http://codemany.com/blog/economic-inequality-the-short-version/"/>
    <updated>2016-03-21T20:40:27+08:00</updated>
    <id>http://codemany.com/blog/economic-inequality-the-short-version</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://paulgraham.com/sim.html">http://paulgraham.com/sim.html</a></p>

<p>2016年1月</p>

<p><em>正如经常发生的那样——当说一些有争议的话题时，已经有我刚写的一篇贫富差距的文章的一些非常新奇的解释。我想这可能有助于澄清问题，如果我试着写一个简简单单、没有误解的版本。</em></p>

<p>很多人谈论贫富差距。几乎所有人都说贫富差距增大是坏的，贫富差距缩小是好的。</p>

<p>但是贫富差距本身并非坏事。它有多方面的原因。很多是坏的，但有些是好的。</p>

<p>例如，高入狱率和税收漏洞是增大贫富差距的不良因素。</p>

<p>但是创业同样地增大贫富差距。创业成功的创始人最终会得到值很多钱的股票。</p>

<p>而且不像高入狱率和税收漏洞，创业整体上是好的。</p>

<p>既然贫富差距本身并非坏事，我们就不应该攻击它。相反，我们应该攻击那些造成贫富差距的不良因素。</p>

<p>例如，我们应该攻击贫穷，而不是攻击贫富差距。</p>

<p>攻击贫富差距是双重错误。它会损害好的和坏的原因。但更糟的是，这是一个攻击坏的原因的无效方式。</p>

<p>除非我们直接攻击坏的贫富差距原因，否则我们不能做好解决它们的工作。</p>

<p>但是，如果我们解决了所有坏的贫富差距原因，我们依然将增加贫富差距的水平，因为正在增长的技术力量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一夜成名：这需要好几年时间]]></title>
    <link href="http://codemany.com/blog/overnight-success-it-takes-years/"/>
    <updated>2016-01-23T09:36:05+08:00</updated>
    <id>http://codemany.com/blog/overnight-success-it-takes-years</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://blog.codinghorror.com/overnight-success-it-takes-years/">http://blog.codinghorror.com/overnight-success-it-takes-years/</a></p>

<p>Gmail的原首席开发者Paul Buchheit说过<a href="http://paulbuchheit.blogspot.com/2009/01/overnight-success-takes-long-time.html">Gmail的成功花了很长时间</a>：</p>

<blockquote>
<p>我们在2001年8月开始开发Gmail。很长一段时间里，几乎每个人都不喜欢它。有些人使用它因为搜索，但他们有着无尽地抱怨。很多人认为我们应该杀死这个项目，又或者重启它作为一个有本地客户端软件的企业产品，而不是这个疯狂的JavaScript东西。甚至在2004年4月1日当我们到达发布它的那个点时——在开始开发它两年半之后——Google内部的很多人都在预测它的死亡。他们觉得这个产品太怪异了，并且没有人想去更换电子邮件服务。我被告知我们永远不会得到100万用户。</p>

<p>但在我们发布后，除了因为各种原因讨厌它的人，反响出人意外地好。尽管如此，它还是经常被描述为“小众产品（niche）”和“不会被硅谷之外的人使用”。</p>

<p>现在，在我们开始开发Gmail差不多七年半后，我看到一篇<a href="http://www.ft.com/cms/s/0/18cdabec-d8fb-11dd-ab5f-000077b07658.html">文章</a>叙述Gmail如何在去年增长40%，相比Yahoo的2%和Hotmail的-7%。</p>
</blockquote>

<p>Paul已经离开Google，现在在从事他自己的创业公司FriendFeed（译者注：FriendFeed已于2015年4月9日关闭）。许多业内人士对待FriendFeed不太友善。Stowe Boyd甚至竟然称FriendFeed就是个失败（译者注：Stowe Boyd评论FriendFeed的文章已经被删除了）。Paul从容应对批评：</p>

<blockquote>
<p>创建一个重要的新产品通常需要时间。FriendFeed需要继续追求创新，就像Gmail六年以前做的那样。FriendFeed显示了很好的前景，但它仍然是一个“在制品”。</p>

<p>我的预期是很大的成功需要好几年时间，没有许多反例（除了YouTube，但现在它其实还没有到达挣成堆钱的那个点）。Facebook成长非常快，但它此时已经五岁了。Larry和Sergey 开始开发Google在1996年——当我开始在那里是1999年，几乎没人听说过它。</p>

<p>一夜成名的观念非常具有误导性，而且相当有害。如果你开始新的东西，那会是一次长途旅行。没有借口去行动缓慢。相反，你必须行动的非常快，否则你将不会到达，因为它是一次长途旅行！这也是为什么节俭是重要的——你不想<a href="http://paulbuchheit.blogspot.com/2008/03/ideas-vs-judgment-and-execution_9197.html">饿死在半山腰上</a>。</p>
</blockquote>

<p>Stowe Boyd用一张Twitter和FriendFeed的流量对比图说明他关于FriendFeed的观点。这里请允许我把我自己的数据也加到Boyd先生的图上：</p>

<p><img src="/uploads/three-traffic-comparison.png" title="three-traffic-comparison" ></p>

<p>我觉得Paul的态度令人耳目一新，因为对于我们的创业公司<a href="http://stackoverflow.com/">Stack Overflow</a>我也采用同样的态度。我没有期望或甚至渴望一夜成名。我计划的是花上几年的时间去打磨，持续地、稳步地提升。</p>

<p>这项商业计划和我的职业生涯发展计划没有太多区别：成功需要好几年时间。当我说年的时候，我是认真的！不是在说像“更聪明地工作，而不是更努力地工作”那样的陈词滥调。我是在说真正的日历年。你知道的，12个月的，365天的那种。你必须花上你生命的多年时间孜孜不倦地钻研这些东西，每天醒来后一遍又一遍地做它。每天练习和收集反馈去不断变得更好。有时它可能是不愉快的，甚至偶尔是很无趣的，但它是必需的。</p>

<p>这几乎不是唯一的或有趣的建议。Peter Norvig的经典<a href="http://www.norvig.com/21-days.html">用十年自学编程</a>也谈到过这个话题，而且讲得比我更好。</p>

<blockquote>
<p>研究人员发现在任何领域都需要大约10年时间才能培养出专业技能，包括国际象棋、音乐作曲、电报操作、绘画、钢琴演奏、游泳、网球、以及神经心理学和拓扑学的研究。关键是刻意（deliberative）练习：不仅仅是一次又一次地做它，而是用略微超出你当前能力的任务来挑战自己，尝试它，在做时和做后分析你的表现，并且纠正所有错误。然后重复。再重复。</p>

<p>似乎没有真正的捷径：即使是莫扎特，4岁的音乐天才，在他开始创作世界级音乐前也花了超过13年。甲壳虫乐队似乎横空出世以一连串的冠军歌曲（a string of #1 hits），并且在1964年出现在《埃德·沙利文秀》。但其实自1957年以来他们就已经在利物浦和汉堡的小俱乐部里演出了，虽然他们在早期有广泛的吸引力，但他们最最成功的《Sgt. Pepper&#39;s Lonely Hearts Club Band》发布在1967年。</p>
</blockquote>

<p>老实说，我期待着有一天醒来，从现在起的2年或3年之后，做着和今天我在做的完全相同的事：为Stack Overflow编写代码，增加另一个微小的改进或有用的功能。很明显我们想要成功。但在某种程度上，成功是无关紧要的，因为这个过程本身是令人满意的。每天醒来做你喜欢的事情——甚至更好的是，周围社区的人也喜欢它——这本身就是一种奖赏。尽管有着成吨的工作要做。</p>

<p>博客也不例外。我经常给有抱负的博客作者<a href="http://blog.codinghorror.com/how-to-achieve-ultimate-blog-success-in-one-easy-step/">这个很重要的建议</a>：如果你开始你的博客，在六个月内别指望有人来读它。如果你这样做，我可以保证你将会非常失望。 可是，如果你能坚持发布计划并且每周写1篇或2篇高质量的博文一整年……然后，也只有到那个时候，你才可以看到稀稀落落的读者。我开始这个博客于2004年，花了整整3年的时间，每周写3到5篇博文，才使得它在软件开发社区内流行开来。</p>

<p>我非常期望在这个博客上一直写，以一种形式或另一种，用我的余生。它是我是谁的一部分。至于那种戏剧性的成名方式，我不抱有任何幻想：归根结底，<a href="http://www.gocomics.com/pearlsbeforeswine/2008/11/16">我只是在网上写博客的那个人</a>。</p>

<p><img src="/uploads/pearls-before-swine.png" title="pearls-before-swine" ></p>

<p>那样挺好的对我来说。我从来没有说过我是聪明的。</p>

<p>不管你最终获得多少读者，或页面浏览量，或任何我们这周正在度量的<a href="http://blog.codinghorror.com/the-high-score-table/">高分排行榜</a> ，请记住，你正在做的事情是值得去做的，因为——嗯——你正在做的事情是值得去做的。</p>

<p>如果你一直这样坚持下去，谁知道会发生什么？很有可能某一天你醒来，发现自己一夜成名了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写出受欢迎的编程文章的10个技巧]]></title>
    <link href="http://codemany.com/blog/10-tips-for-writing-consistently-popular-programming-articles/"/>
    <updated>2015-10-30T15:16:29+08:00</updated>
    <id>http://codemany.com/blog/10-tips-for-writing-consistently-popular-programming-articles</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.devx.com/blog/2009/01/10-tips-for-writing-consistent.html">http://www.devx.com/blog/2009/01/10-tips-for-writing-consistent.html</a></p>

<p>对于作者，这是一个可悲的事实当谈到受大众欢迎时，不是所有的文章都是平等的，一些文章被证明比其它的更受欢迎。事实是，不管你选的主题有多好，或你写的有多好，你都无法每次都打出一个本垒打。尽管如此，如果你已经在写编程的文章（或者你正在考虑写），这里列出的技巧被证明能帮助文章从沉闷乏味的堆里跃升至最多查看次数的列表的顶部。</p>

<h3 id="1-选择一个简练的话题">1. 选择一个简练的话题</h3>

<p>挑选一个简练的话题是艰难的，因为很多有趣的话题一点也不简洁，它们是冗长的和复杂的。有时候你可以协同创建很好的、完备的、独特的文章作为一个较长的话题，但通常不要这样做。相反你可能需要写一个系列或一本书。要么选择别的，要么把这个话题分成简练的块。</p>

<p>接下来的几个技巧可以帮助你满足技巧#1的要求：</p>

<h3 id="2-增强现有的文档">2. 增强现有的文档</h3>

<p>一些最受欢迎的文章本质上是增强文档。那并没有什么错，因为技术文档经常是匆忙产生的，是不完整的，不是由开发者编写的，或缺乏相关的例子。在几乎所有情况下，文档（或文档的缺乏）给作者提供了丰富的话题。</p>

<h3 id="3-比较事物">3. 比较事物</h3>

<p>另一个经常受欢迎的策略是写一个比较两个或多个受欢迎的项目。这些可能是语言，语言版本，APIs，数据库，操作系统，框架，编程方法，模式——在快速变化的开发者世界中，这里有无数的机会。挑两个或多个开发者使用的技术，并且写那种最好能帮助开发者转型或选择它们的文章。</p>

<h3 id="4-列个清单">4. 列个清单</h3>

<p>你可能会认为它是厌烦的，但“10 for/about”类型的文章往往会做的很好。（如果这篇博文做的很好，我会认为它是这个观点的验证，如果没有的话，或许我会减少成“9个技巧……”）。编辑们和出版商们喜欢这些文章，因为读者喜欢它们。我怀疑读者喜欢它们是因为包含很多东西的文章增加了概率，这些文章至少有一个包含需要或至少有有趣的材料，但也许人们只是喜欢列表。无论如何……</p>

<p>在你有一个坚实的话题后，你准备开始写作，请记住这些点：</p>

<h3 id="5-忽视历史">5. 忽视历史</h3>

<p>是的，我知道你认为每个人在切入正题前都需要了解你的特定的主题的历史背景，但事实是，他们很少这样做。比起你在高中学习代数时想让你的父亲解释数学的历史，你的读者不再想沉思你的历史评论。这里有个读者行为分析的内部技巧：大部分读者从来没有读完过第一页。所以，如果你没有回答他们的问题，或立即抓住他们的兴趣，不管你文章的其余部分有多么正确，他们不会看它。链接到历史，切入正题。</p>

<h3 id="6-避免“helloworld”例子">6. 避免“HelloWorld”例子</h3>

<p>你在你读过的文章和书里看到过一千个“HelloWorld”的代码例子，但这并不意味着它们是好的！它们不是。没有人喜欢它们。对于学习编程的任何事它们是完全无用的。它们也不是娱乐。完全有可能写出清晰而简单的既可以教又不烦闷的例子。</p>

<h3 id="7-说明你的观点">7. 说明你的观点</h3>

<p>开发者喜欢代码，的确，但你也可以通过包含插图和截图帮他们节省时间和精力。这是因为他们中的许多人可能不会运行你那迷人的示例代码，但如果他们正在阅读你的文章，他们很可能对结果感兴趣。显示输入或输出无论何时都很重要。</p>

<h3 id="8-显示有趣的代码">8. 显示有趣的代码</h3>

<p>许多技术作者似乎认为，提供一个简短的解释之后大量的示例代码（或者更糟的是，只是显示代码没有解释）将刺激他们的读者研究代码获得启示。我向你保证那不是真的。最好的文章解释了话题，只显示代码片断，然后解释或说明（或两者）代码做了什么，它如何与周围的代码或整体的话题适应，什么时候你该使用它，什么时候你不该使用它，也只有到那时——仅且当它是真正有用的——他们会向你打听更长的代码块。相反，只放有趣的代码在你的文章里，并提供其余部分为可运行的，完整的项目下载。</p>

<h3 id="9-化繁为简">9. 化繁为简</h3>

<p>避免冲动去告诉人们你的主题是多么复杂。他们知道它是复杂的，或者他们很可能不会读你的文章。相反，想办法去让你的复杂的主题显得更简单。</p>

<p>也许是所有中最重要的一点：</p>

<h3 id="10-简明扼要">10. 简明扼要</h3>

<p>最受欢迎的技术文章只给读者他们需要的——没有更多。</p>

<p>最后，这是真的，有些文章很受欢迎，尽管很少有或者没有在这里列出的特性——但这并不是你可以控制的东西。尝试去写那种文章很像博顺子，你会浪费大部分的时间。专注于基础知识，写很多文章，然后其中一些人将成为赢家。</p>

<p>快乐写作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一开始就编写优质的OO代码]]></title>
    <link href="http://codemany.com/blog/writing-great-oo-code-day-one/"/>
    <updated>2015-10-23T13:50:44+08:00</updated>
    <id>http://codemany.com/blog/writing-great-oo-code-day-one</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://weblogs.java.net/blog/2008/10/03/writing-great-oo-code-day-one">https://weblogs.java.net/blog/2008/10/03/writing-great-oo-code-day-one</a></p>

<p>没有获取经验的捷径。编写良好的面向对象代码需要经验。尽管如此，这里有三个实践可以帮助你一开始就有个良好的开端：</p>

<ol>
<li>使用测试驱动开发（TDD）编写你所有的代码</li>
<li>遵循<a href="http://xp.c2.com/XpSimplicityRules.html">简单的规则</a></li>
<li>命令代替询问（Tell Don&#39;t Ask）</li>
</ol>

<h3 id="使用tdd编写你所有的代码">使用TDD编写你所有的代码</h3>

<p><a href="http://ponderingobjectorienteddesign.blogspot.com/2008/09/tdd-is-design-activity.html">测试先行</a>编写的代码和测试后行编写的代码是非常非常不同的代码。测试先行编写的代码是松耦合和高内聚的。测试后行编写的代码往往会破坏封装，当一些属性或私有方法需要被暴露给测试的时候，因为这些类没有被设计成要被测试的。如果你编写的代码测试先行，代码的依赖性会更好，你的代码将是松耦合和高内聚的。稍后详细讨论测试如何帮助你设计更好的代码。</p>

<h3 id="遵循简单的规则">遵循简单的规则</h3>

<p>代码是简洁的，当它：</p>

<ol>
<li>通过所有的测试</li>
<li>不包含重复代码</li>
<li>表达了所有的意图</li>
<li>使用了最少的类和方法</li>
</ol>

<p>重要的是注意到我使用了一个有序列表。顺序很重要。带有单一main()方法的单一GodClass并不简单。它可以通过所有的测试，但在比“Hello, world!”更复杂的任何程序里它一定会包含重复代码和没有表达所有的意图。</p>

<p>我与简单的规则的斗争重点围绕在<a href="http://ponderingobjectorienteddesign.blogspot.com/2008/09/if-bugs.html">If Bug</a> 。我不明白遵循简单的规则如何阻止某人编写大量的if代码。有人会说，我试过了，大量的if代码不会表达意图。但是，当你读到这样的代码</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.STANDARD) {
    alert();
}
</code></pre></div>
<p>它实在是太容易看出意图了。无论该代码是在哪个方法的上下文中，如果mobile是STANDARD类型，那么警报。你还需要多少意图？</p>

<p>然后我灵光小闪。如果有那样的代码，那么在代码的其它地方肯定还有更多。可能是这样的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.GAS) {
    registerGasReading();
}
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.TEXT) {
    sendTextMessage();
}
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.LOCATION) {
    notifyLocation();
}
</code></pre></div>
<p>你看见了吗？我当然知道。违反规则2。许多许多违反规则2。并且是违反规则2的最糟糕的那种。重复代码在许多不同的代码片段中。重复代码将非常非常难被找到。所以为了帮助防止这个，我列出来了。</p>

<h3 id="命令代替询问">命令代替询问</h3>

<p>命令代替询问意味着不要询问一个对象的状态然后做些什么。应该命令那个对象去做些什么。这意味着所有这些if例子变成了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.alert();
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.registerGasReading();
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.sendTextMessage();
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.notifyLocation();
</code></pre></div>
<p>现在假设有一些if子句散落在有重复实现的整个代码中。在那个大量if代码的版本中，它们将非常难被找到，但在命令代替询问版本中，所有的实现都在Mobile类中。所有的都在一个地方寻找和消除。</p>

<p>聆听你的测试也将帮助你保持代码简单。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public interface Alarm {
    void alert(Mobile mobile);
}

public class Siren implements Alarm {
    public void alert(Mobile mobile) {
    if (mobile.getType == MobileTypes.STANDARD) {
        soundSiren();
    }
  }
}

public class SirenTest extends TestCase {
    public void testAlert() {
        LocationMobile mobile = new LocationMobile();
        Siren siren = new Siren();
        siren.alert(mobile);
        assert(sirenSounded());
    }
}
</code></pre></div>
<p>如果你仔细聆听你的测试，它会问你，“你为什么需要LocationMobile去测试Siren？”是呀，为什么呢？似乎Siren甚至不应该知道LocationMobile。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class LocationMobile {
    private Alarm alarm;
    public LocationMobile(Alarm alarm) {
        this.alarm = alarm;
    }
    public void alert() {
        alarm.alert();    // alert on Alarm no longer needs a mobile
    }
}

public class LocationMobileTest extends TestCase {
    public void testAlert() {
        Alarm alarm = EasyMock.createMock(Alarm.class);
        alarm.alert();
        EasyMock.replay(alarm);
        Mobile mobile = new LocationMobile(alarm);
        mobile.alert();
        EasyMock.verify(alarm);
    }
}
</code></pre></div>
<p>看上去我仅仅互换了依赖。作为Alarm依赖Mobile的替换，现在有了Mobile依赖Alarm。如果你仔细看第一个测试，真正的依赖是Siren知道LocationMobile。一个具体类依赖于另一个具体类。这违反了<a href="http://c2.com/cgi/wiki?DependencyInversionPrinciple">依赖倒置原则 （DIP）</a>。第二个例子是LocationMobile依赖接口Alarm。一个具体类依赖一个抽象。这满足了DIP。</p>

<p>如果你使用TDD编写你所有的代码，遵循简单的规则，以及命令代替询问，那么你会在那条成为一个更好的OO程序员的路上。良好的OO代码容易阅读和维护，但是可能难于编写。至少开始是这样。你写得越多，你将会变得更好，你将得到的经验也越多。与此同时，这些实践会让你在你的路上走得更好。</p>
]]></content>
  </entry>
  
</feed>
