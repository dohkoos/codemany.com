<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Translation | 乐者为王]]></title>
  <link href="http://codemany.com/tags/translation/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-11-07T18:54:16+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[追逐时髦的技术]]></title>
    <link href="http://codemany.com/blog/chasing-the-shiny-and-new-in-software/"/>
    <updated>2017-08-29T11:50:09+08:00</updated>
    <id>http://codemany.com/blog/chasing-the-shiny-and-new-in-software</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://www.nemil.com/musings/shinyandnew.html">https://www.nemil.com/musings/shinyandnew.html</a></p>

<p>有关当前最好的框架或编程语言的争论经常发生在Web开发中。就这点而言，<a href="https://www.scribd.com/">Scribd</a>的联合创始人Jared Friedman在2015年写了<a href="http://blog.jaredfriedman.com/2015/09/15/why-i-wouldnt-use-rails-for-a-new-company/">一篇文章</a>推荐创业公司使用Node.js代替Rails。</p>

<p>他提出几个关键点：</p>

<ul>
<li>Rails很慢。</li>
<li>黑客学院的毕业生都在使用Rails，贬低了它对高级工程师的价值，并减少了它的未来前景。</li>
<li>创业公司应该使用那些前瞻性工程师今后将使用的技术，以保证它们的应用不过时。</li>
<li>在Scribd，过去几年里它们已经从Prototype转换到jQuery，再到CoffeeScript，再到Angular，再到React。</li>
</ul>

<p>Node.js是创业公司的绝佳选择，但它饱受批评的两个部分令我担忧。首先，一名创业公司的工程师应该了解什么技术将会在几年后流行，以保证它们的技术栈不过时。第二，杰出的软件工程师将被时髦的技术栈吸引到创业公司，而不是有趣的技术问题。在过去我还听到过更恶劣的传闻，创业公司的开发者拒绝接受使用ES5 JavaScript编程的工作（那时CoffeeScript刚出来），Mongo发布不久工程师就执意在生产环境下使用Mongo替代Postgres，渴望用最新的前端框架不断重构项目。</p>

<p>我担心有些程序员（和他们的雇主）有这种倾向，即把注意力放在转换技术栈到最新上。他们主要基于框架选择公司，力求在工作中使用最新而不是最好的工具。他们把时间花在新的库和框架上，而不是提高他们的核心技术能力。我们把他们称为技术栈追逐者——他们奋力追求在创业公司的技术栈中使用那些对核心输出（用户重视的软件功能、开发团队的生产力）提升有限的新技术（或者他们自己喜欢的技术）。</p>

<h3 id="“时髦的”web开发">“时髦的”Web开发</h3>

<p>很同情那些在<a href="https://news.ycombinator.com/">Hacker News</a>上的时髦的Web或移动应用开发者。作为在2012年的全栈创业公司的开发者，你正在构建后端使用Ruby/Rails，前端使用Backbone/CoffeeScript/Underscore的网站，同时使用Capistrano（或相关的Python类似物）部署你的应用。到2013年，你已经将后端转换到Node/Express/Mongo，前端为Grunt/Ember。在2014年，你已经彻底切换到MEAN技术栈，但在尝试过Koa以后考虑转移到Go（在Express核心贡献者<a href="https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b">告别Node.js转向Go</a>以后）。在2015年，你在后端使用Express/Go，前端使用Gulp/ES2015/React，使用React Native代替原生移动语言，并且慢慢地将系统转换为使用Docker的微服务。很快，你将会被转换到Phoenix，如果Angular 2是正确的选择也会转换过去——甚至可能创造一个Go可以工作在Android上以及开源Swift可以适合你的技术栈的世界。（我显然是夸大效果，尽管这是HN头条新闻流行什么的一个合理表示。）</p>

<p>有几个原因表明这可能是合理的。时髦的Web工程师需要“时尚”才能获得未来的工作或合同。雇主使用框架或语言作为过滤器，而不是测试批判性思维和技能。雇主没有意识到有实力的开发者如果有正确的支持，可以在几个星期，通常是几天内成为许多语言或者框架的专家。有时趋势是无法阻止的：Swift正在取代Objective-C，世界正在转向更薄、更小的单体后端和更重、反应更灵敏的前端。通常，转变有着巨大的优势：生产力大幅上升，或者新的用户功能突然变得可能。然而，所有的变化都不会导致早期到中期的公司不采用就死，而为了乐趣或业余项目学习技术和认为它是生产环境的关键是迥然不同的。</p>

<p>我们可以用创业公司的时髦的Web或移动开发者与我们的计算机科学家作为对比。我的一个朋友是一家顶级科技公司的计算机神经学家——跟几乎所有从事技术工作的人一样，他的世界每隔几个月就会被重塑——得益于计算能力、脑成像和深度学习算法的快速发展。基本的编程工具其实变化不大。公平地说，只有C++从 11转换到14引起了一些焦虑。还有分布式计算系统、键/值存储和其它外部服务，但这些都是使用稳定的API构建的。他的大部分时间都花在单个DSL中的架构和算法上，而不是重写功能相似的代码或者快速学习提供有争议的好处和改变的库。</p>

<h3 id="选择工具">选择工具</h3>

<p>人们可能会建议创业公司选择时髦的技术栈，因为它是招聘杰出的工程师的关键工具。我自己的观察是，杰出的工程师注重其它的东西。到目前为止，最重要的是提供有趣的问题去解决——有趣的人与他们合作。吸引力和强大的使命感是吸引优秀人才（工程师或者其他）的其它途径。</p>

<p>我并不是在抱怨技术发展太快，也不是说我们都应该用汇编语言或者C++或者Ruby编程。软件工程师清楚他们的目标——我们的领域以令人目眩的速度发展，但对于我们拥有的影响力这都是值得的，因为有10亿人上网。我认为你需要有能力快速地学会新的框架、语言或库（如何完成它的<a href="https://news.ycombinator.com/item?id=7733249">Ask HN</a>）——依靠周围那些经验丰富的工程师，你的目标应该是尽快地具有生产力。除此之外，你应该深刻理解多种语言，而不仅仅是一种（但是同样的态度，不应盲目地扩展到框架或者轻量级的DSL）。</p>

<p>对于创业公司而言，Paul Graham<a href="http://castig.org/an-interview-with-paul-graham-hackers-painters-10-years-later/">在2013年被问到关于理想的语言</a>：“我的意思是，我们有的创业公司在用PHP编写代码——这让我有点担心，但这并不像其它事情那么让我担心。”GitHub的技术主管Sam Lambert在<a href="https://medium.com/s-c-a-l-e/github-scaling-on-ruby-with-a-nomadic-tech-team-4db562b96dcd">最近的一次采访</a>中谈到，他在2013年被GitHub的CTO面试时，对GitHub的技术栈是Rails、C和Bash脚本感到惊讶：“随着面试的继续，我发现他们实际上是一群非常务实的黑客，他们只钻研Ruby和C，使用更稳定的技术栈以便花时间工作在更有趣的事情上，而不是追逐最新最酷炫的技术。”GitHub的方法在我看来是Web和移动开发者的合理的平衡：广泛地探索工具，然后务实地选择解决你所面临的问题的工具（<a href="https://martinfowler.com/bliki/Yagni.html">YAGNI</a>适用于更多的地方，而不仅仅是面向用户的功能开发）。</p>

<p>令我担心的是，某些开发者，特别是在职业生涯早期的开发者，可能会以为创业公司的工程师不是问题解决者或计算机科学家，而是一个荣誉查找表——他们的任务是每隔几个月记住一个新的DSL——只能获得有限的好处。这使我们这些早期的工程师贬值——构建人们想要的东西，从事有趣的技术问题，快速交付代码。</p>

<p>无论如何，要在额外的时间里广泛地实践。如果好处是压倒性的，则切换生产环境中的语言/框架，但要考虑是哪些好处。警惕那些追求新技术却不考虑它对团队的预期优势的人。花时间学习概念和解决有趣的技术或用户问题。如果你有正确的应用边界，并选择你有现成生产力的框架，一旦你这样做了，你将具有一定的灵活性，但需要足够坚持才能达到产品与市场的匹配和超越。</p>

<p>任何一天打开<a href="https://news.ycombinator.com/">Hacker News</a>，你都能看到有帖子诱惑你使用某个框架、语言、类库或者服务去贡献和构建应用（包括一些像Mongo这样有大笔现金的公司，因此在它们的平台后面有营销预算）。有些工具拥有改变游戏规则的能力，其余的只有一些关键的不同功能，但是它们都需要时间才能成为专家。有些工具会大声宣告它们才是未来，并且嘲笑你所学到的东西——但是它们需要你的技能和意识与现有的技术真正地竞争。你会如何选择？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[checked/unchecked应该翻译成什么？]]></title>
    <link href="http://codemany.com/blog/what-should-checked-and-unchecked-translate/"/>
    <updated>2017-07-29T12:17:06+08:00</updated>
    <id>http://codemany.com/blog/what-should-checked-and-unchecked-translate</id>
    <content type="html"><![CDATA[<p>翻译有关Java异常的文章时，总是犹豫是否该把checked/unchecked也翻译过来。原因是，不是很清楚该如何优雅传神地翻译这两个单词。</p>

<p>《Java核心技术》将它们翻译成“已检查/未检查”。《Java编程思想》和《Effictive Java中文版》则翻译成“被检查的/不检查的”。至于技术文章的翻译更是花样百出，有“检测/非检测”、“可检测/非检测”、“可查/不可查”、“受查/非受查”、“检查型/非检查型”、“检查/非检查”等。</p>

<p>到底该翻译成什么呢？在回答这个问题前，让我们先确定什么是checked/unchecked异常？</p>

<p><img src="/uploads/exception-hierarchy.png" alt="exception-hierarchy"></p>

<p>上图是Java中的异常层次结构图。Java语言规范将派生自RuntimeException类和Error类的所有异常称为“unchecked异常”，其它的异常称为“checked异常”。</p>

<blockquote>
<p>The unchecked exception classes are the run-time exception classes and the error classes.</p>

<p>The checked exception classes are all exception classes other than the unchecked exception classes. That is, the checked exception classes are Throwable and all its subclasses other than RuntimeException and its subclasses and Error and its subclasses.</p>
</blockquote>

<p>并且，在编译时编译器会检查程序是否为所有的“checked异常”提供处理器。</p>

<blockquote>
<p>This compile-time checking for the presence of exception handlers is designed to reduce the number of exceptions which are not properly handled.</p>
</blockquote>

<p>从上述的描述可以得出，“checked异常”和“unchecked异常”是两种异常类型，且“checked异常”隐含有必须要检查的思想。</p>

<p>紧紧围绕这些描述，细细地思考和比较，个人认为：1. 《Java核心技术》的翻译存在问题，“已检查”和“未检查”说明的是异常的检查状态，没有表达出异常的分类这个概念。2. 《Java编程思想》和《Effictive Java中文版》的翻译则正确地表达了异常的分类，但“被检查”翻译的有点无厘头，如果能改成“要检查”则会更好，缺陷是连接“异常”这个词组后是短语，而非名词，读来费劲，也不上口；如果去掉“的”的话，后者会有歧义，听起来像是命令。3. “检测/非检测”和“检查/非检查”是同个意思。4. “可检测”这个翻译看上去似乎表示异常是可以检查的，和Java语言规范要求的该类异常必须要检查不符。5. “可查/不可查”也是如此。6. “受查/非受查”的翻译则有些莫名其妙的感觉。7. “检查型/非检查型”翻译的很好，既表达了异常的分类，也表达了一种异常是要检查的，另一种异常是不要检查的意义，只是前者还缺少点强制的意味。</p>

<p>分析到这里，结果已经是不言而明。“要检查的/不检查的”和“检查型/非检查型”是两种更好的翻译，都能把Java语言规范对checked/unchecked异常的描述尽量地表述出来。而后者在实际使用中更为简洁适宜。</p>

<p>接下来的事情就是把以前译文中未翻译的checked/unchecked修改成“检查型/非检查型”。在以后的翻译中也继续使用这个翻译结果，除非能找到更好的表述方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10x工程师经常的打盹]]></title>
    <link href="http://codemany.com/blog/10x-engineers-take-long-naps/"/>
    <updated>2017-07-23T18:05:43+08:00</updated>
    <id>http://codemany.com/blog/10x-engineers-take-long-naps</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://hackernoon.com/10x-engineers-take-long-naps-ed2ca00a953">https://hackernoon.com/10x-engineers-take-long-naps-ed2ca00a953</a></p>

<p>最近，我在为一个疯狂的悖论而烦恼：<strong>我感觉从来没有像今天这样工作效率高过，然而我也注意到在给定的每周内我工作的时间并没有减少。</strong>这让我想起另一个令人困惑的悖论，我在成功的软件公司看到，它们重视那些不足以令人信服的10x工程师传说，但同时也重视那些花费很多个人时间并确保避免倦怠的员工。</p>

<p>我对这些最近我给予它们很多激烈思考的悖论感到困惑，但我倾向于认为我已经得出结论，该结论可以很好地解释这两个似乎对立的观点。</p>

<p>之所以用“似乎”这个词，是因为我认为它们其实并不算是真正的对立面。简而言之，我的看法是，虽然我们使用相同的词汇谈论工程师的效率，但我们谈论的是两种截然不同的效率：</p>

<ul>
<li>一方面，<strong>效率是指在最短的时间内交付最多的产出。</strong>这个可以通过检查软件编写的数量（提交次数、代码行数等）或与软件相关的工作（文档页面、可交付的成果等）进行衡量。更长更多的工作时间意味着更多的产出。</li>
<li>另一方面，<strong>效率是指用最短的时间和精力产出最多的业务价值。</strong>这个可以通过利益相关者（客户、同事等）能从工程师的工作中的获得多少实际的货币化/有用的价值进行衡量。就像我一直在说的，<strong>软件工程师的职责不是解决技术问题，而是用技术方案解决业务问题。</strong></li>
</ul>

<p>混乱可能源于在大多数工作中，投入和产出的关系在一定程度上是呈线性的。最简单的例子：如果你的工作是工厂产品的日常生产，你工作的时间越长，生产的产品就越多。更多的工作时间=更多的价值。但事实是，在我们的工作中，这些可以变得非常无关，我甚至可以冒昧地说，有时候它们甚至是相互成反比的。</p>

<p><strong>它们可以是不相关的</strong>，因为你可以被某个疯狂的问题困扰整周的时间，捶胸顿足，感觉就像你没有带来任何价值，直到你把事情弄清楚，并且在10分钟内真正地解决这些事情（因此终于将业务向前推进）。或者，仅仅因为不同的心态，你可以花1个小时自动化某个过程，这将使其它问题过时，同时给另一个团队每周节省几个小时。或者你可以突然想到在结帐渠道中引入某个变更，它会使你的公司的转化率提高1%，因此可以提高数百万的收入。</p>

<p><strong>它们有时候也可以是成反比的</strong>（更多的工作时间=创造更少的价值），因为如果以“创造业务价值”为KPI，你的生产效率将取决于很多难以掌控的未知因素。如果你遇到这样的情况，花费整天的努力去尝试解决某些问题，然后经过充分的休息后在第二天早上回来，并在5分钟内诊断出问题，你可能会同意充分的休息是主要因素。</p>

<h3 id="“10x工程师”和“快速行动”">“10x工程师”和“快速行动”</h3>

<p>所以让我们回到“10x工程师”这个话题。在软件层次上，有更快速的工程师能完成其他工程师10x的代码这个概念在我看来是非常不切实际的。但是，如果你正在考虑的KPI是创造实际的业务价值，这听起来就不那么牵强。我可以告诉你的是，目前正在从事技术问题的一些工程师几乎不能给他们的公司增加任何业务价值，他们解决技术问题只是因为它们是有趣和富有挑战性的，工程师们太缺乏经验或者不够价值驱动，以至于不能认识到他们为什么跑偏；他们的领导技术太弱，以至于不能理解这项工作可能应该被重新调整优先级。相比之下，如果以业务价值为KPI，业界所有其他的工程师都是数学上无限的工程师！</p>

<p>此外，通过以业务价值为KPI，“<strong>快速行动和推陈出新</strong>”就可以被理解为“在最短的时间内优化你的业务价值能力并达到目标，不要太过满足于已经创造的价值，它们可以优化的更好”。如果“优化你的业务价值能力”意味着你需要减少每天的工作量，并获得充分的休息，以便能够产出更多的价值，那么即使要达到目标也不意味着会给你带来更多的压力，或者是大量的工作时间。</p>

<h3 id="行业现状">行业现状</h3>

<p>诚然，并不是所有的公司都同意我的理解。一个极端是，一些公司（Uber、Apple等）希望顶尖的工程师能够每天都全力以赴，并最大化他们的日常产出，以达到所需的业务价值。另一个极端是，其它一些公司（Facebook、Salesforce等）坚决要求工程师需要知道什么时候应该放慢速度，在必要的时候减少工作时间，以更聪明和更周全的方式工作，因为这些公司认为它们的工程师将因此做出更好的选择，可以用更少的时间和精力建立更多的价值。</p>

<p>当然，由于辩论双方都有公司是成功的，所以我不认为某些公司比其它公司更正确。我的观点是：</p>

<ul>
<li>由于软件工作的本质及其在最优条件下的潜在价值乘数效应，后者公司提出的方法对于员工来说既不是悖论，也不是不道德的。</li>
<li>作为业界的工程师，你可以在这两种文化（以及两者的折中）之间进行选择，与其它行业相比，我们真的算是幸运的。</li>
</ul>

<h3 id="结论">结论</h3>

<p>回到标题：<strong>10x开发者真的都经常的打盹吗？</strong>不，不，他们不是都这样做。不过我看到很多“业务价值10x”的开发者经常这样，因为他们很清楚地知道自己的极限，他们知道何时应该切换到非工作相关的事情来触发当他们恢复工作时倍增业务价值生产效率的时刻。对于其中的某些人来说，它是经常的打盹，但对于你来说，你可能会发现它是别的东西（在正确的时间散步、快速的视频游戏以放空你的大脑、和你的小孩一起玩等）。</p>

<p><strong>那么接下来该怎么做？</strong>如果你不确定如何在现实生活中应用这些想法，这里是主要的提示：注意观察你用少量代码解决大部分业务需求时都发生了什么的模式；实验你的日常例程，看看什么工作可以产生“乘数效应”；注意学习你自己的极限，随着时间的推移，优化你的健康、心态和生产效率；同样具有挑战性的是，让你自己遵循你所发现的极限。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10x开发者不是神话]]></title>
    <link href="http://codemany.com/blog/the-10x-developer-is-not-myth/"/>
    <updated>2017-06-17T09:25:44+08:00</updated>
    <id>http://codemany.com/blog/the-10x-developer-is-not-myth</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.ybrikman.com/writing/2013/09/29/the-10x-developer-is-not-myth/">http://www.ybrikman.com/writing/2013/09/29/the-10x-developer-is-not-myth/</a></p>

<p>更新：你可以<a href="https://www.campusmvp.es/recursos/post/el-desarrollador-estrella-del-rock-10x-no-es-un-mito.aspx">在这里找到本文的西班牙语翻译</a>。</p>

<p>昨天晚上，我在Twitter发布了以下内容：</p>

<blockquote>
<p>我被“10x”或者“摇滚明星开发者”是神话的说法所迷惑。明星运动员、艺术家、作家，或者摇滚明星是神话？</p>

<p>— Yevgeniy Brikman (@brikis98) <a href="https://twitter.com/brikis98/status/384208625725497344">September 29, 2013</a></p>
</blockquote>

<p>我收到了大量的回复和问题，但Twitter是个糟糕的讨论媒介，所以我写这篇博文作为补充。</p>

<p>有大堆的文章[<a href="http://blog.jelastic.com/2012/04/24/7-programming-myths-busted/">1</a>、<a href="http://sdt.bz/36247">2</a>、<a href="http://www.knowing.net/index.php/2011/12/11/why-10x-ticks-me-off/">3</a>、<a href="http://www.hanselman.com/blog/TheMythOfTheRockstarProgrammer.aspx">4</a>]声称10x开发者不存在。反对的理由通常分成3种：</p>

<ol>
<li>原来的10x数字来自单个的有缺陷的研究（Sackman，Erikson和Grant（1968））。</li>
<li>生产率是个模糊的事情，很难测量，所以我们不能做出任何10x的声明。</li>
<li>人才有分布，但没有单个工程师可以做10倍的工作。</li>
</ol>

<p>我不同意所有这些。让我们逐个地检查这些理由。</p>

<h3 id="这不是一个研究">这不是一个研究</h3>

<p>虽然Twitter和Hacker News上的空谈科学家喜欢严厉谴责已被同行评审的研究，但在那种情况下的证据是相当有吸引力的，不仅限于单项研究。请允许我引用这个问题<a href="http://programmers.stackexchange.com/questions/179616/a-good-programmer-can-be-as-10-times-more-productive-than-a-mediocre-one">在Stack Overflow上的讨论</a>的最顶部的回复：</p>

<blockquote>
<p>...发现个体编程生产力的巨大差异的原始研究是在20世纪60年代末由Sackman、Erikson和Grant（1968）进行的。他们研究了平均7年经验的专业程序员，发现最佳和最差程序员之间的初始编码时间的比例约为20:1；调试时间超过25:1；程序大小5:1；并且程序执行速度约为10:1。他们发现程序员的丰富经验与代码质量或生产率之间没有任何关系。</p>

<p>对Sackman、Erikson和Grant的发现的详细检查显示出其方法论的一些缺陷。但是，即使考虑到这些缺陷，他们的数据仍然显示出最佳和最差程序员之间的差距超过10倍。</p>

<p>在原始研究之后的几年中，“程序员之间存在数量级差距”的一般性发现已经被许多其它对专业程序员的研究所证实（Curtis 1981、Mills 1983、DeMarco和Lister 1985、Curtis等人1986、Card 1987、Boehm和Papaccio 1988、Valett和McGarry 1989、Boehm等人2000）...</p>
</blockquote>

<p>想知道更多可以看<a href="http://programmers.stackexchange.com/questions/179616/a-good-programmer-can-be-as-10-times-more-productive-than-a-mediocre-one">这里</a>和<a href="http://www.construx.com/10x_Software_Development/Origins_of_10X_%E2%80%93_How_Valid_is_the_Underlying_Research_/">这里</a>。</p>

<h3 id="如果你不能测量它，你仍然可以推理它">如果你不能测量它，你仍然可以推理它</h3>

<p>即使你忽略上面的研究，并宣称“编程生产力”很难测量——它是的——我们仍然可以讨论10x程序员。只是因为某些东西难以测量并不意味着我们无法推理它。</p>

<p>例如，你是如何为最近的项目挑选编程语言的？你有没有查阅“证明”这门语言比其它语言更有效的研究？就个人而言，我不需要实验来证明，Ruby比起C在构建网站时会是有一个数量级的更有生产力的选择。你可以胡乱拼凑些粗略的指标（库可用性、社区支持、文档），但现实是，大多数人基于直觉推理而不是双盲研究来做出这类语言决策。尽管缺乏过硬的数据，但我敢打赌，大多数时候，采用Ruby而不是C进行网站开发都将是正确的决策。</p>

<p>当然，编程不是唯一这样的事情：什么“指标”可以告诉你一位作家、艺术家、老师或者哲学家比另外一位更好？仅仅观察他们，我不能给出表明莎士比亚、纳博科夫或奥威尔比普通作家好一个数量级的“生产力指标”，但是绝大多数人都会同意这点。</p>

<h3 id="编程不是体力劳动">编程不是体力劳动</h3>

<p>抗拒10x程序员的最大问题是有些人认为编程是手工劳动，而程序员是装配线工人。有些程序员比其他程序员好些，但可以肯定的是，单个程序员不可能持续接近其他程序员的10倍！10个人的团队总是胜过单个编码者！9个女人不能在1个月内生产婴儿！</p>

<p>上面的逻辑听起来像是编程生产力只关乎打字速度。仿佛10x程序员只是能够生产平均水平的10倍代码。这种推理无视编程是创造性行业，不是体力劳动：解决同样问题的方法有很多种。停止简单地类比，更多地考虑罪案解决的类比：10名普通侦探与夏洛克·福尔摩斯。谁能更快地解决罪案？</p>

<p>10x开发者具有洞察力，能找到普通程序员永远不会找到的解决方案。他们将避免花费普通程序员大量时间的整类问题。编写正确代码的单个工程师绝对可以胜过编写错误代码的10个工程师。</p>

<h3 id="编程是关于选择">编程是关于选择</h3>

<p>考虑构建单个软件产品（如网站）的决策有多少：你用哪种语言？什么Web框架？你用什么数据存储？你用什么缓存？你在哪里托管站点？你怎么监控它？你如何推进新的变化？你如何存储代码？你安排什么样的自动化测试？</p>

<p>10个普通程序员将在每个步骤中做出“平均”质量的决策，这些决策的成本或收益将倍增。想象下流量以指数级增长，而这个普通的团队维护着普通的网站，数据存储引擎难以分片，没有足够冗余的主机，版本控制没有正确备份，没有CI环境，也没有监控。如果他们花费所有的时间去灭火，这10个编码者的效率如何？</p>

<p>如果程序员可以以减少一个数量级的工作量的方式对问题进行建模，那么单个程序员可以胜过这个10人团队。从多年的经验来看，伟大的程序员会知道，以后修复错误要花费更多。通过在前面作出良好的决策，10x程序员可以避免几个月的工作。</p>

<p><strong>它不是编写更多的代码，它是编写正确的代码。成为10x程序员不是通过做一个数量级的更多工作，而是通过做出比平常一个数量级的更好的决策。</strong></p>

<p>这不是说10x程序员根本不犯错误。程序员每天都要做出很多选择，而伟大的程序员做出正确的选择比普通程序员多得多。</p>

<p>编程不是唯一这样的事情。你愿意有10名普通科学家还是艾萨克·牛顿？10名普通科学家没有提出运动定律、重力理论、二项式系列、微积分等，艾萨克·牛顿做到了。你愿意让你的球队有迈克尔·乔丹还是10名普通球员（注意：乔丹获得了NBA平均薪水的10倍）？你愿意让史蒂夫·乔布斯（Steve Jobs）或者伊隆·马斯克（Elon Musk）经营一家公司还是把钥匙交给10个普通企业家？</p>

<h3 id="10x程序员很少见">10x程序员很少见</h3>

<p>重要的是以正确的角度看待事情。明星的程序员、运动员、作家和科学家极其少见。我不推荐围绕只雇佣“摇滚明星”来制定招聘策略，它会使你看起来很愚蠢和孤独。不要让完美成为好的敌人：聘请你能得到的最好工程师，并给他们充足的机会去发展和变得更好。</p>

<p>但是，不要陷入所有程序员生而平等的谬误。任何创造性行业都有广泛的能力。一方面是会让组织陷入困境的雇员类型，用他们编写的每行代码积极增加技术债务。另一方面，有些人可以编写带来更多可能的代码，并且具有比平均水平大一个数量级的影响。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[神秘的10x程序员]]></title>
    <link href="http://codemany.com/blog/the-mythical-10x-programmer/"/>
    <updated>2017-06-04T08:58:21+08:00</updated>
    <id>http://codemany.com/blog/the-mythical-10x-programmer</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://antirez.com/news/112">http://antirez.com/news/112</a></p>

<p>在编程神话中，10x程序员就是，一位程序员可以完成另一位普通程序员的10倍工作量，我们可以想象普通程序员擅长完成他们的工作，但没有10x程序员的神奇能力。实际上，为了更好地刻画“普通程序员”，更合理的说法是，在本学科的专业人员中，具有平均编程输出的程序员。</p>

<p>编程社区对这种怪物的存在与否处于两极分化：有人说不存在10x程序员这样的东西，有人说他实际上不仅存在，而且如果你知道去哪里寻找，甚至有100x程序员。</p>

<p>如果将编程视为一门“线性”学科，很明显10x程序员看起来像是非理性的可能。一个跑步者怎么可能比另一个跑步者快10倍？或者一位建筑工人在同一时间内的建造速度是另一位工人的10倍？然而，编程是一门非常特殊的设计学科。即使程序员不参与程序的实际架构设计，实施的行为仍然需要实现策略的子设计。</p>

<p>因此，如果程序的设计和实现不是线性能力，在我看来，就像经验、编码能力、知识、无用部分的识别不仅仅是线性优势，它们在创建程序的行为中以一种倍增的方式工作。当程序员既可以处理程序的设计又可以处理程序的实现时，这种现象当然也会发生的更多。“目标导向”的任务越多，潜在的10x程序员就越能利用他/她的能力，以便用更少的努力达成目标。当手头的任务更死板，具体指导使用什么工具以及如何实现这些任务时，10x程序员在较短时间内执行大量工作的能力就会被削弱：他仍然可以利用“局部的”设计可能性做些更好的工作，但是不再能够以更深刻的方式改变实现目标的途径，这可能包括甚至可能完全从项目中删除部分规范，以便达成几乎是同样的目标，但达成这一目标的努力因为某个大的因素而被减少。</p>

<p>作为程序员的20年里，我观察过与我一起工作的其他程序员，作为同事，由我指导以达成给定的目标，向Redis和其它项目提供补丁。同时，很多人告诉我，他们相信我是一个非常快的程序员。考虑到我远不是工作狂，我也将自己作为快速编码的参考。</p>

<p>以下是我认为在程序员生产力上最大差异的品质列表。</p>

<h3 id="纯粹的编程能力：完成子任务">纯粹的编程能力：完成子任务</h3>

<p>程序员最显著的限制或优势之一是处理实际实现程序部分的子任务：一个函数、一个算法或者其它任务。令人惊讶的是，根据我的经验，非常有效地使用基本的命令式编程结构来实现某些功能的能力并不像人们想象的那么普遍。在一个团队中，有时我观察到非常无能的程序员，甚至不知道一个简单的排序算法，和那些在理论上非常有能力，但实现解决方案的实践非常差的刚毕业的程序员相比，他们不能完成更多的工作。</p>

<h3 id="经验：模式匹配">经验：模式匹配</h3>

<p>根据经验，我的意思是一系列已经探索过的用于某些重复任务的解决方案。有经验的程序员最终知道如何处理各种子任务。这样既避免了很多的设计工作，而且反过来也是针对简洁性的最大敌人之一——设计错误的非常强大的武器。</p>

<h3 id="专注：实际时间-vs-假设时间">专注：实际时间 vs 假设时间</h3>

<p>如果不考虑时间质量的话，编写代码的时间是无关紧要的。内部和外部因素都可能导致缺乏专注。内部因素是拖延，对手边的项目缺乏兴趣（你不能做好你不喜欢的事情），缺乏锻炼/健康，睡眠质量差或者睡觉不足。外部因素是频繁的会议，没有独立办公室的工作环境，同事经常打扰等等。自然，尝试改善专注和减少中断对编程生产力将产生非边际影响。有时为了获得专注，需要采取极端措施。例如，我只会不时地阅读电子邮件，并且不回复它们中的大多数。</p>

<h3 id="设计的牺牲：删减5-而获得90">设计的牺牲：删减5%而获得90%</h3>

<p>当不愿意承认项目的非基本目标造成很大的设计复杂性，或者正在使另一个更重要的目标难以达成时，往往会产生复杂性，因为在基本功能和非基本功能之间存在着设计矛盾。设计师认识到设计中不容易实现的所有部分是非常重要的，因为努力和优势之间没有比例。为了最大限度地实现产出而执行的项目将精确地集中在可以在合理的时间内实现的方面。例如，当设计消息代理Disque时，某些时候我意识到，通过为消息提供力所能及的排序，项目的所有其它方面可以大大改善：可用性、查询语言和客户端交互、简洁性以及性能。</p>

<h3 id="简洁性">简洁性</h3>

<p>这是显而易见的观点，意味着全有或全无。为了明白什么是简洁性，检查复杂性是如何产生的是值得的。我认为复杂性的两个主要驱动因素是，不愿意进行设计的牺牲，也不愿意在设计活动中累积错误。</p>

<p>如果你在设计过程中思考，每次追求错误的路径，我们将越来越远离最佳解决方案。在错误的手中产生的初始设计错误，不会产生同一系统的重新设计，而是会导致另一个复杂解决方案的设计，以便应对初始错误。因此，这个项目在每个错误的步骤变得更多复杂和更少效率。</p>

<p>实现简洁性的方式是从小块“概念证明”的方面思考，从看起来最可行和直接的解决方案开始工作，以便在程序员脑中探索大量简单的设计。随后，经验和个人设计能力将有助于改进设计，并为需要解决的子设计找到合理的解决方案。</p>

<p>不管怎样，每次需要复杂的解决方案时，只有在没有更好的可能性，甚至考虑过完全不同的替代方案后，才能继续这一方向，重要的是要长时间地思考如何避免复杂性。</p>

<h3 id="完美主义：如何扼杀你的生产力和影响你的设计">完美主义：如何扼杀你的生产力和影响你的设计</h3>

<p>完美主义有两种变体：在程序中达到最佳可衡量性能的工程文化，以及一种人格特质。这两种情况我认为是程序员快速交付的最大障碍之一。完美主义和对外部判断的恐惧带入的设计偏见会导致选择不佳，即仅仅根据心理或简单可衡量的参数就改进设计，其中诸如鲁棒性、简洁性、及时交付的能力常常不被考虑。</p>

<h3 id="知识：某些理论会有帮助">知识：某些理论会有帮助</h3>

<p>在处理复杂任务时，关于数据结构的知识，计算的基本限制，非常适合于某些任务模式的非凡算法将对找到合适设计的能力产生影响。成为每件事的超级专家不是必需的，但是肯定至少要知道一个问题的众多潜在解决方案。例如，运用设计的牺牲（接受某些错误百分比）并且意识到概率集基数估计器可以组合在一起，以避免复杂、缓慢和记忆效率低的用于计算流中唯一条目的解决方案。</p>

<h3 id="底层：了解机器">底层：了解机器</h3>

<p>即使是使用高级语言的时候，程序中的很多问题也是由于对计算机如何执行给定任务的误解而产生的。这甚至可能导致需要从头开始重新设计和重新实现项目，因为被使用的工具或算法存在根本问题。良好的C语言能力，了解CPU如何工作，以及关于内核如何运转和系统调用如何实现的清晰思路，可以避免糟糕的后期意外。</p>

<h3 id="调试技巧">调试技巧</h3>

<p>寻找缺陷很容易花费大量的工作时间。善于获取缺陷的状态，以便用一组合理的步骤修复缺陷，以及编写不可能包含太多缺陷的简单代码的态度，这三者对程序员的效率有很大的影响。</p>

<p>看到程序员的上述品质如何能够对输出产生10倍的影响，我并不奇怪。结合起来，他们允许的从可行模式开始的良好设计实现，可以比替代方案简单几倍。有一种方式被用来强调简洁性，我喜欢称之为“机会主义编程”。基本上在每个开发步骤中，要选择一系列要实现的功能，以便用最少的努力，最大程度地影响程序的用户基础。</p>
]]></content>
  </entry>
  
</feed>
