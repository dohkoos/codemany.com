<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Translation | 乐者为王]]></title>
  <link href="http://codemany.com/tags/translation/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-07-12T01:01:02+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[10x开发者不是神话]]></title>
    <link href="http://codemany.com/blog/the-10x-developer-is-not-myth/"/>
    <updated>2017-06-17T09:25:44+08:00</updated>
    <id>http://codemany.com/blog/the-10x-developer-is-not-myth</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.ybrikman.com/writing/2013/09/29/the-10x-developer-is-not-myth/">http://www.ybrikman.com/writing/2013/09/29/the-10x-developer-is-not-myth/</a></p>

<p>更新：你可以<a href="https://www.campusmvp.es/recursos/post/el-desarrollador-estrella-del-rock-10x-no-es-un-mito.aspx">在这里找到本文的西班牙语翻译</a>。</p>

<p>昨天晚上，我在Twitter发布了以下内容：</p>

<blockquote>
<p>我被“10x”或者“摇滚明星开发者”是神话的说法所迷惑。明星运动员、艺术家、作家，或者摇滚明星是神话？</p>

<p>— Yevgeniy Brikman (@brikis98) <a href="https://twitter.com/brikis98/status/384208625725497344">September 29, 2013</a></p>
</blockquote>

<p>我收到了大量的回复和问题，但Twitter是个糟糕的讨论媒介，所以我写这篇博文作为补充。</p>

<p>有大堆的文章[<a href="http://blog.jelastic.com/2012/04/24/7-programming-myths-busted/">1</a>、<a href="http://sdt.bz/36247">2</a>、<a href="http://www.knowing.net/index.php/2011/12/11/why-10x-ticks-me-off/">3</a>、<a href="http://www.hanselman.com/blog/TheMythOfTheRockstarProgrammer.aspx">4</a>]声称10x开发者不存在。反对的理由通常分成3种：</p>

<ol>
<li>原来的10x数字来自单个的有缺陷的研究（Sackman，Erikson和Grant（1968））。</li>
<li>生产率是个模糊的事情，很难测量，所以我们不能做出任何10x的声明。</li>
<li>人才有分布，但没有单个工程师可以做10倍的工作。</li>
</ol>

<p>我不同意所有这些。让我们逐个地检查这些理由。</p>

<h3 id="这不是一个研究">这不是一个研究</h3>

<p>虽然Twitter和Hacker News上的空谈科学家喜欢严厉谴责已被同行评审的研究，但在那种情况下的证据是相当有吸引力的，不仅限于单项研究。请允许我引用这个问题<a href="http://programmers.stackexchange.com/questions/179616/a-good-programmer-can-be-as-10-times-more-productive-than-a-mediocre-one">在Stack Overflow上的讨论</a>的最顶部的回复：</p>

<blockquote>
<p>...发现个体编程生产力的巨大差异的原始研究是在20世纪60年代末由Sackman、Erikson和Grant（1968）进行的。他们研究了平均7年经验的专业程序员，发现最佳和最差程序员之间的初始编码时间的比例约为20:1；调试时间超过25:1；程序大小5:1；并且程序执行速度约为10:1。他们发现程序员的丰富经验与代码质量或生产率之间没有任何关系。</p>

<p>对Sackman、Erikson和Grant的发现的详细检查显示出其方法论的一些缺陷。但是，即使考虑到这些缺陷，他们的数据仍然显示出最佳和最差程序员之间的差距超过10倍。</p>

<p>在原始研究之后的几年中，“程序员之间存在数量级差距”的一般性发现已经被许多其它对专业程序员的研究所证实（Curtis 1981、Mills 1983、DeMarco和Lister 1985、Curtis等人1986、Card 1987、Boehm和Papaccio 1988、Valett和McGarry 1989、Boehm等人2000）...</p>
</blockquote>

<p>想知道更多可以看<a href="http://programmers.stackexchange.com/questions/179616/a-good-programmer-can-be-as-10-times-more-productive-than-a-mediocre-one">这里</a>和<a href="http://www.construx.com/10x_Software_Development/Origins_of_10X_%E2%80%93_How_Valid_is_the_Underlying_Research_/">这里</a>。</p>

<h3 id="如果你不能测量它，你仍然可以推理它">如果你不能测量它，你仍然可以推理它</h3>

<p>即使你忽略上面的研究，并宣称“编程生产力”很难测量——它是的——我们仍然可以讨论10x程序员。只是因为某些东西难以测量并不意味着我们无法推理它。</p>

<p>例如，你是如何为最近的项目挑选编程语言的？你有没有查阅“证明”这门语言比其它语言更有效的研究？就个人而言，我不需要实验来证明，Ruby比起C在构建网站时会是有一个数量级的更有生产力的选择。你可以胡乱拼凑些粗略的指标（库可用性、社区支持、文档），但现实是，大多数人基于直觉推理而不是双盲研究来做出这类语言决策。尽管缺乏过硬的数据，但我敢打赌，大多数时候，采用Ruby而不是C进行网站开发都将是正确的决策。</p>

<p>当然，编程不是唯一这样的事情：什么“指标”可以告诉你一位作家、艺术家、老师或者哲学家比另外一位更好？仅仅观察他们，我不能给出表明莎士比亚、纳博科夫或奥威尔比普通作家好一个数量级的“生产力指标”，但是绝大多数人都会同意这点。</p>

<h3 id="编程不是体力劳动">编程不是体力劳动</h3>

<p>抗拒10x程序员的最大问题是有些人认为编程是手工劳动，而程序员是装配线工人。有些程序员比其他程序员好些，但可以肯定的是，单个程序员不可能持续接近其他程序员的10倍！10个人的团队总是胜过单个编码者！9个女人不能在1个月内生产婴儿！</p>

<p>上面的逻辑听起来像是编程生产力只关乎打字速度。仿佛10x程序员只是能够生产平均水平的10倍代码。这种推理无视编程是创造性行业，不是体力劳动：解决同样问题的方法有很多种。停止简单地类比，更多地考虑罪案解决的类比：10名普通侦探与夏洛克·福尔摩斯。谁能更快地解决罪案？</p>

<p>10x开发者具有洞察力，能找到普通程序员永远不会找到的解决方案。他们将避免花费普通程序员大量时间的整类问题。编写正确代码的单个工程师绝对可以胜过编写错误代码的10个工程师。</p>

<h3 id="编程是关于选择">编程是关于选择</h3>

<p>考虑构建单个软件产品（如网站）的决策有多少：你用哪种语言？什么Web框架？你用什么数据存储？你用什么缓存？你在哪里托管站点？你怎么监控它？你如何推进新的变化？你如何存储代码？你安排什么样的自动化测试？</p>

<p>10个普通程序员将在每个步骤中做出“平均”质量的决策，这些决策的成本或收益将倍增。想象下流量以指数级增长，而这个普通的团队维护着普通的网站，数据存储引擎难以分片，没有足够冗余的主机，版本控制没有正确备份，没有CI环境，也没有监控。如果他们花费所有的时间去灭火，这10个编码者的效率如何？</p>

<p>如果程序员可以以减少一个数量级的工作量的方式对问题进行建模，那么单个程序员可以胜过这个10人团队。从多年的经验来看，伟大的程序员会知道，以后修复错误要花费更多。通过在前面作出良好的决策，10x程序员可以避免几个月的工作。</p>

<p><strong>它不是编写更多的代码，它是编写正确的代码。成为10x程序员不是通过做一个数量级的更多工作，而是通过做出比平常一个数量级的更好的决策。</strong></p>

<p>这不是说10x程序员根本不犯错误。程序员每天都要做出很多选择，而伟大的程序员做出正确的选择比普通程序员多得多。</p>

<p>编程不是唯一这样的事情。你愿意有10名普通科学家还是艾萨克·牛顿？10名普通科学家没有提出运动定律、重力理论、二项式系列、微积分等，艾萨克·牛顿做到了。你愿意让你的球队有迈克尔·乔丹还是10名普通球员（注意：乔丹获得了NBA平均薪水的10倍）？你愿意让史蒂夫·乔布斯（Steve Jobs）或者伊隆·马斯克（Elon Musk）经营一家公司还是把钥匙交给10个普通企业家？</p>

<h3 id="10x程序员很少见">10x程序员很少见</h3>

<p>重要的是以正确的角度看待事情。明星的程序员、运动员、作家和科学家极其少见。我不推荐围绕只雇佣“摇滚明星”来制定招聘策略，它会使你看起来很愚蠢和孤独。不要让完美成为好的敌人：聘请你能得到的最好工程师，并给他们充足的机会去发展和变得更好。</p>

<p>但是，不要陷入所有程序员生而平等的谬误。任何创造性行业都有广泛的能力。一方面是会让组织陷入困境的雇员类型，用他们编写的每行代码积极增加技术债务。另一方面，有些人可以编写带来更多可能的代码，并且具有比平均水平大一个数量级的影响。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[神秘的10x程序员]]></title>
    <link href="http://codemany.com/blog/the-mythical-10x-programmer/"/>
    <updated>2017-06-04T08:58:21+08:00</updated>
    <id>http://codemany.com/blog/the-mythical-10x-programmer</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://antirez.com/news/112">http://antirez.com/news/112</a></p>

<p>在编程神话中，10x程序员就是，一位程序员可以完成另一位普通程序员的10倍工作量，我们可以想象普通程序员擅长完成他们的工作，但没有10x程序员的神奇能力。实际上，为了更好地刻画“普通程序员”，更合理的说法是，在本学科的专业人员中，具有平均编程输出的程序员。</p>

<p>编程社区对这种怪物的存在与否处于两极分化：有人说不存在10x程序员这样的东西，有人说他实际上不仅存在，而且如果你知道去哪里寻找，甚至有100x程序员。</p>

<p>如果将编程视为一门“线性”学科，很明显10x程序员看起来像是非理性的可能。一个跑步者怎么可能比另一个跑步者快10倍？或者一位建筑工人在同一时间内的建造速度是另一位工人的10倍？然而，编程是一门非常特殊的设计学科。即使程序员不参与程序的实际架构设计，实施的行为仍然需要实现策略的子设计。</p>

<p>因此，如果程序的设计和实现不是线性能力，在我看来，就像经验、编码能力、知识、无用部分的识别不仅仅是线性优势，它们在创建程序的行为中以一种倍增的方式工作。当程序员既可以处理程序的设计又可以处理程序的实现时，这种现象当然也会发生的更多。“目标导向”的任务越多，潜在的10x程序员就越能利用他/她的能力，以便用更少的努力达成目标。当手头的任务更死板，具体指导使用什么工具以及如何实现这些任务时，10x程序员在较短时间内执行大量工作的能力就会被削弱：他仍然可以利用“局部的”设计可能性做些更好的工作，但是不再能够以更深刻的方式改变实现目标的途径，这可能包括甚至可能完全从项目中删除部分规范，以便达成几乎是同样的目标，但达成这一目标的努力因为某个大的因素而被减少。</p>

<p>作为程序员的20年里，我观察过与我一起工作的其他程序员，作为同事，由我指导以达成给定的目标，向Redis和其它项目提供补丁。同时，很多人告诉我，他们相信我是一个非常快的程序员。考虑到我远不是工作狂，我也将自己作为快速编码的参考。</p>

<p>以下是我认为在程序员生产力上最大差异的品质列表。</p>

<h3 id="纯粹的编程能力：完成子任务">纯粹的编程能力：完成子任务</h3>

<p>程序员最显著的限制或优势之一是处理实际实现程序部分的子任务：一个函数、一个算法或者其它任务。令人惊讶的是，根据我的经验，非常有效地使用基本的命令式编程结构来实现某些功能的能力并不像人们想象的那么普遍。在一个团队中，有时我观察到非常无能的程序员，甚至不知道一个简单的排序算法，和那些在理论上非常有能力，但实现解决方案的实践非常差的刚毕业的程序员相比，他们不能完成更多的工作。</p>

<h3 id="经验：模式匹配">经验：模式匹配</h3>

<p>根据经验，我的意思是一系列已经探索过的用于某些重复任务的解决方案。有经验的程序员最终知道如何处理各种子任务。这样既避免了很多的设计工作，而且反过来也是针对简洁性的最大敌人之一——设计错误的非常强大的武器。</p>

<h3 id="专注：实际时间-vs-假设时间">专注：实际时间 vs 假设时间</h3>

<p>如果不考虑时间质量的话，编写代码的时间是无关紧要的。内部和外部因素都可能导致缺乏专注。内部因素是拖延，对手边的项目缺乏兴趣（你不能做好你不喜欢的事情），缺乏锻炼/健康，睡眠质量差或者睡觉不足。外部因素是频繁的会议，没有独立办公室的工作环境，同事经常打扰等等。自然，尝试改善专注和减少中断对编程生产力将产生非边际影响。有时为了获得专注，需要采取极端措施。例如，我只会不时地阅读电子邮件，并且不回复它们中的大多数。</p>

<h3 id="设计的牺牲：删减5-而获得90">设计的牺牲：删减5%而获得90%</h3>

<p>当不愿意承认项目的非基本目标造成很大的设计复杂性，或者正在使另一个更重要的目标难以达成时，往往会产生复杂性，因为在基本功能和非基本功能之间存在着设计矛盾。设计师认识到设计中不容易实现的所有部分是非常重要的，因为努力和优势之间没有比例。为了最大限度地实现产出而执行的项目将精确地集中在可以在合理的时间内实现的方面。例如，当设计消息代理Disque时，某些时候我意识到，通过为消息提供力所能及的排序，项目的所有其它方面可以大大改善：可用性、查询语言和客户端交互、简洁性以及性能。</p>

<h3 id="简洁性">简洁性</h3>

<p>这是显而易见的观点，意味着全有或全无。为了明白什么是简洁性，检查复杂性是如何产生的是值得的。我认为复杂性的两个主要驱动因素是，不愿意进行设计的牺牲，也不愿意在设计活动中累积错误。</p>

<p>如果你在设计过程中思考，每次追求错误的路径，我们将越来越远离最佳解决方案。在错误的手中产生的初始设计错误，不会产生同一系统的重新设计，而是会导致另一个复杂解决方案的设计，以便应对初始错误。因此，这个项目在每个错误的步骤变得更多复杂和更少效率。</p>

<p>实现简洁性的方式是从小块“概念证明”的方面思考，从看起来最可行和直接的解决方案开始工作，以便在程序员脑中探索大量简单的设计。随后，经验和个人设计能力将有助于改进设计，并为需要解决的子设计找到合理的解决方案。</p>

<p>不管怎样，每次需要复杂的解决方案时，只有在没有更好的可能性，甚至考虑过完全不同的替代方案后，才能继续这一方向，重要的是要长时间地思考如何避免复杂性。</p>

<h3 id="完美主义：如何扼杀你的生产力和影响你的设计">完美主义：如何扼杀你的生产力和影响你的设计</h3>

<p>完美主义有两种变体：在程序中达到最佳可衡量性能的工程文化，以及一种人格特质。这两种情况我认为是程序员快速交付的最大障碍之一。完美主义和对外部判断的恐惧带入的设计偏见会导致选择不佳，即仅仅根据心理或简单可衡量的参数就改进设计，其中诸如鲁棒性、简洁性、及时交付的能力常常不被考虑。</p>

<h3 id="知识：某些理论会有帮助">知识：某些理论会有帮助</h3>

<p>在处理复杂任务时，关于数据结构的知识，计算的基本限制，非常适合于某些任务模式的非凡算法将对找到合适设计的能力产生影响。成为每件事的超级专家不是必需的，但是肯定至少要知道一个问题的众多潜在解决方案。例如，运用设计的牺牲（接受某些错误百分比）并且意识到概率集基数估计器可以组合在一起，以避免复杂、缓慢和记忆效率低的用于计算流中唯一条目的解决方案。</p>

<h3 id="底层：了解机器">底层：了解机器</h3>

<p>即使是使用高级语言的时候，程序中的很多问题也是由于对计算机如何执行给定任务的误解而产生的。这甚至可能导致需要从头开始重新设计和重新实现项目，因为被使用的工具或算法存在根本问题。良好的C语言能力，了解CPU如何工作，以及关于内核如何运转和系统调用如何实现的清晰思路，可以避免糟糕的后期意外。</p>

<h3 id="调试技巧">调试技巧</h3>

<p>寻找缺陷很容易花费大量的工作时间。善于获取缺陷的状态，以便用一组合理的步骤修复缺陷，以及编写不可能包含太多缺陷的简单代码的态度，这三者对程序员的效率有很大的影响。</p>

<p>看到程序员的上述品质如何能够对输出产生10倍的影响，我并不奇怪。结合起来，他们允许的从可行模式开始的良好设计实现，可以比替代方案简单几倍。有一种方式被用来强调简洁性，我喜欢称之为“机会主义编程”。基本上在每个开发步骤中，要选择一系列要实现的功能，以便用最少的努力，最大程度地影响程序的用户基础。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[费曼技巧：最好的学习方法]]></title>
    <link href="http://codemany.com/blog/learn-anything-faster-with-the-feynman-technique/"/>
    <updated>2017-06-02T08:30:09+08:00</updated>
    <id>http://codemany.com/blog/learn-anything-faster-with-the-feynman-technique</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://www.farnamstreetblog.com/2012/04/learn-anything-faster-with-the-feynman-technique/">https://www.farnamstreetblog.com/2012/04/learn-anything-faster-with-the-feynman-technique/</a></p>

<p>费曼技巧有4个简单的步骤，我将在下面解释它们：</p>

<ul>
<li>选择一个概念</li>
<li>把它教给某个小孩</li>
<li>识别薄弱环节，回到原始材料</li>
<li>回顾和简化（可选）</li>
</ul>

<p>如果你不学习就会固步自封。那么，学习新主题并识别现有知识的薄弱环节的最好方式是什么？</p>

<h3 id="两种类型的知识">两种类型的知识</h3>

<p>有<a href="https://www.farnamstreetblog.com/2015/09/two-types-of-knowledge/">两种类型的知识</a>，我们大多数人关注错误的那种。第一类知识注重知道某事物的名称。第二类注重知道某事物。它们不是一回事。著名的诺贝尔物理学奖获得者理查德·费曼（Richard Feynman）明白<a href="https://www.farnamstreetblog.com/2015/01/richard-feynman-knowing-something/">知道某事物和知道某事物的名称之间的差异</a>，这是他成功的最重要的原因之一。事实上，他创造了一个学习公式，确保他比其他人更明白某些东西。</p>

<p>这被称为费曼技巧，它将帮助你更快更明白地学到东西。最重要的是，它极其容易实现。</p>

<blockquote>
<p>一个人如果说他知道他在想些什么，却表达不出来，通常是他其实并不知道自己在想些什么。——莫提默·艾德勒</p>
</blockquote>

<h3 id="费曼技巧">费曼技巧</h3>

<p>费曼技巧有4个步骤。</p>

<h4 id="步骤1：把它教给某个小孩">步骤1：把它教给某个小孩</h4>

<p>拿出一张白纸，在顶部写下你想要学习的主题。写出你对这个主题的了解，好像你正在把它教给某个小孩。不是你聪明的成年朋友，而是一个8岁的小孩，他刚好有足够的词汇和注意力来涵盖基本的概念和关系。</p>

<p>很多人倾向于使用复杂的词汇和行话来掩盖他们不明白的东西。问题是我们仅仅愚弄自己，因为我们不知道我们不明白。另外，使用行话会掩盖周围的人对我们的误解。</p>

<p>当你自始至终都用孩子可以理解的简单的语言写出某个想法时（提示：只用最常见的单词），你迫使自己在更深的层次上去理解这个概念，并简化想法之间的关系和连接。如果你努力，你会清楚地知道自己在哪里还有薄弱环节。这种压力很好——它预示着学习的机会。</p>

<h4 id="步骤2：回顾">步骤2：回顾</h4>

<p>在第一步中，你不可避免地会遇到你的知识的薄弱环节，你忘记了某些重要的东西，或者不能解释它，或者只是很难把重要的概念联系起来。</p>

<p>这是宝贵的反馈，因为你已经发现你的知识的边缘。胜任力是知道你能力的极限，你刚刚已经识别出一个！</p>

<p>这是学习开始的地方。现在你知道在哪里会遇到困难，回到原始材料并重新学习，直到你可以用基本的术语去解释它们。</p>

<p>识别你的理解的边界也限制了你可能犯的错误，并增加了在应用知识时成功的机会。</p>

<h4 id="步骤3：整理和简化">步骤3：整理和简化</h4>

<p>现在你有一套手工制作的笔记。检查他们以确保你没有错误地从原始材料中借用任何行话。将它们组织成一个丰满的简单的故事。</p>

<p>把它们大声地朗读出来，如果解释不直白或者听起来很混乱，这表明你在该领域的理解仍需要做些工作。</p>

<h4 id="步骤4（可选）：传播">步骤4（可选）：传播</h4>

<p>如果你真的想要确保自己的理解没有任何偏差，那就把它告诉别人（理想状态是这个人对该主题知之甚少，或者就找个8岁的小孩）。对你的知识的最终考验是你将其传达给另一个人的能力。</p>

<p>这不仅是学习的一个妙诀，它也是一种不同的思维方式的窗口，允许你将想法分解，然后从头开始重建。（Elon Musk称它为<a href="https://www.farnamstreetblog.com/2015/04/elon-musk-framework-thinking/">从第一个原则思考</a>）。这会导致对想法和概念的更深入的理解。重要的是，以这种方式解决问题，你可以在别人不知道他们自己在说什么的情况下理解这个问题。</p>

<p>费曼的方法直观地认为智力是一个成长的过程，这与卡罗尔·德韦克（Carol Dweck）的工作非常吻合，卡罗尔·德韦克漂亮地描述了<a href="https://www.farnamstreetblog.com/2015/03/carol-dweck-mindset/">固定型和成长型思维之间的区别</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100%代码覆盖率的悲剧]]></title>
    <link href="http://codemany.com/blog/code-coverage-100-percent-tragedy/"/>
    <updated>2017-05-13T19:00:41+08:00</updated>
    <id>http://codemany.com/blog/code-coverage-100-percent-tragedy</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://labs.ig.com/code-coverage-100-percent-tragedy">http://labs.ig.com/code-coverage-100-percent-tragedy</a></p>

<p>有趣的是，我对测试的观点正在发生变化。十五年来，我一直在宣扬TDD（测试驱动开发，或者被称为测试先行方法），或至少让开发者写些单元测试。不过，最近我发现自己更经常地说，“你为什么要写测试？”而不是“你应该写测试”。</p>

<h3 id="怎么回事？">怎么回事？</h3>

<p>在办公室四处走走时，开发者要求我帮助他进行单元测试。看来他在使用Mockito测试以下代码时遇到了麻烦：</p>

<p><img src="/uploads/initialise-method.png" title="initialise-method" ></p>

<p>我想他是非常惊讶于我的回应：“你不需要测试。”</p>

<p>“但我不得不测啊！”他说。“否则如何知道这段代码是正常的？”</p>

<p>“这段代码很明显。没有条件，没有循环，没有转换，没有任何东西。它们只是一些普通的旧式胶水代码。”</p>

<p>“但没有测试，任何人都可以来修改和破坏这段代码呀！”</p>

<p>“看，如果那个虚构的邪恶/无知的开发者来了，破坏了这些简单的代码，如果相关的单元测试中断，你认为他会做什么？他只会删除它。”</p>

<p>“但是如果非要写测试怎么办？”</p>

<p>“在这种情况下，我将这样写测试：”</p>

<p><img src="/uploads/initialise-test.png" title="initialise-test" ></p>

<p>“但是你没有使用Mockito啊！”</p>

<p>“那又怎么样呢？Mockito没有帮助你。恰恰相反：它会妨碍你，并且它也不会使测试变得更易读或更简单。”</p>

<p>“但是我们决定使用Mockito进行所有测试！”</p>

<p>我：“……”</p>

<p>后来我碰到他，他自豪地说，他已经设法用Mockito写了测试。我明白让测试代码正常运行的心理满足感，但尽管如此，这种解决方案让我难过。</p>

<h3 id="另一个例子">另一个例子</h3>

<p>我遇到个开发者，他们对新应用程序的高代码覆盖率以及对BDD（行为驱动设计）的新发现感到兴奋。查看代码，我们发现以下的Cucumber测试：</p>

<p><img src="/uploads/cucumber-test.png" title="cucumber-test.png" ></p>

<p>如果你以前使用过Cucumber，你就不会震惊于它所需的支持代码的数量：</p>

<p><img src="/uploads/cucumber-support.png" title="cucumber-support.png" ></p>

<p><img src="/uploads/cucumber-support2.png" title="cucumber-support2.png" ></p>

<p>和所有要测试的代码：</p>

<p><img src="/uploads/cucumber-code.png" title="cucumber-code.png" ></p>

<p>是的，一个简单的地图查找。我和这个开发者有足够的信任去直言不讳地说，“这是在浪费时间。”</p>

<p>“但我的老板希望我能为所有的类写测试，”他回答。</p>

<p>“代价是什么？”</p>

<p>“费用？”</p>

<p>“无论如何，这些测试与BDD无关。”</p>

<p>“我知道，但是我们决定使用Cucumber进行所有测试”</p>

<p>我：“……”</p>

<p>我明白按照自己意愿改造工具的心理满足感，但尽管如此，这种解决方案让我难过。</p>

<h3 id="悲剧在哪里？">悲剧在哪里？</h3>

<p>悲剧是两位聪明的开发者（我需要带他们去团队面试）浪费时间写那种测试，测试是毫无意义的，但需要后来的IG开发者维护。</p>

<p>悲剧是不使用正确的工具，因为没有特别好的理由，我们决定坚持不懈地使用错误的工具。</p>

<p>悲剧是一旦某个“良好实践”成为主流，我们似乎就忘记它是怎么来的，它的好处是什么，最主要的是，使用它的代价是什么。</p>

<p>如果我们只是机械地应用它而没有太多的思考，这通常意味着我们最终得到最平庸的结果，失去大部分的好处，但支付所有（甚至更多）的成本。根据我的经验，编写好的单元测试并非易事。</p>

<h3 id="那么100-的代码覆盖率值得追求吗？">那么100%的代码覆盖率值得追求吗？</h3>

<p>是的，每个人都应该实现它……在一个项目中。我认为你必须用极端的手段去了解限制是什么。</p>

<p>我们已经有了一个极端的大量经验：0个单元测试的项目，所以我们知道在这上面工作的痛苦。我们通常缺乏的是在另一个极端的经验：强制100%代码覆盖率和一切都是TDD的项目。单元测试（尤其是测试先行方法）是一个非常好的实践，但我们应该学习哪些测试是有用的，哪些是适得其反的。</p>

<p>要记住没有什么是免费的，没有什么是银弹。使用工具前请停下来想一想。</p>

<h4 id="关于作者：">关于作者：</h4>

<p>Daniel Lebrero在IG的大数据团队担任技术架构师。拥有超过15年的Java经验和4年的Clojure经验，他现在是函数式编程的大力倡导者。可以在<a href="https://twitter.com/DanLebrero">Twitter</a>，<a href="https://www.linkedin.com/in/daniel-lebrero-4729906">LinkedIn</a>或者他的个人<a href="http://danlebrero.com/">博客</a>找到他。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习新编程语言的非传统方式]]></title>
    <link href="http://codemany.com/blog/unconventional-way-of-learning-a-new-programming-language/"/>
    <updated>2017-04-08T09:23:59+08:00</updated>
    <id>http://codemany.com/blog/unconventional-way-of-learning-a-new-programming-language</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://hackernoon.com/unconventional-way-of-learning-a-new-programming-language-e4d1f600342c">https://hackernoon.com/unconventional-way-of-learning-a-new-programming-language-e4d1f600342c</a></p>

<p>现在已经有500多种编程语言。因此，开始学习新的编程语言对你来说是很正常的。你可能知道C++和Java，但是你的工作需要Python；或者你精通Python，但是需要用Java编写代码；或者也许你想要学习这种很酷的语言只是为了扩展你的编程技能。</p>

<p>如果你想学习新的编程语言，你会选择哪种方式？</p>

<ul>
<li>从若干在线教程中学习</li>
<li>或者从若干在线课程（MOOC）中学习</li>
</ul>

<p>有些人甚至可能认为，学习新语言的最佳方式应该是这样的：</p>

<ul>
<li>学习这门新的编程语言的语法</li>
<li>再用这门语言构建一些个人项目</li>
</ul>

<p>有道理！这样可以确保你能够应用学习语言的语法而获得的知识。</p>

<p>我开发过20多个迷你项目，同时学习不同的语言。相信我，当你为个人项目编写代码的时候，不管这些项目是周末项目还是紧急快速补丁，你编写代码都只是为了完成任务。你只会关注——“我的代码是否工作？”你几乎不关心代码的质量。</p>

<blockquote>
<p>任何傻瓜都能写出计算机可以理解的代码。好的程序员能写出人类可以理解的代码。——Martin Fowler</p>
</blockquote>

<p>那么，你是如何学习你正在尝试学习的新的编程语言的良好实践呢？</p>

<h3 id="向该语言的开源项目贡献代码">向该语言的开源项目贡献代码</h3>

<p>惊讶吗？有些人可能在想——“等等，开源是很难的。只有当我们是该语言的专家时，我们才能为开源项目贡献代码，对吗？”答案是不。</p>

<p>让我给你们讲个故事。</p>

<p>去年，我收到Booking.com全职工作的邀请，而且我知道我将使用Perl（这是他们后端的主要语言）工作。2016年6月，当我完成大学学位后，我开始学习Perl，以便为自己在大学毕业后的首份工作做准备。因为我会在7月的第二周入职，所以我差不多有1个月的时间。</p>

<p>我开始阅读Perl的语法，并开始理解这门语言的一些常见模式。现在，我真的想使用Perl构建一些东西，以便我可以应用我的这门语言的知识和实践这门语言的各种概念。当我在寻找使用Perl构建某些东西的想法时，我在GitHub偶遇DuckDuckGo的开源组织。我注意到他们的某些开放项目是用Perl写的。我浏览issues发现有很多“新手”问题。我立即开始去解决它们，并提交了几个pull request。到今天为止，我已经是他们的几个开放项目的主要贡献者之一，也是DuckDuckGo的20个开源社区领袖之一。</p>

<blockquote>
<p>故事的寓意——通过向用Perl编写的开源项目贡献代码我学会了Perl。</p>
</blockquote>

<h3 id="为什么这种方法奏效呢？">为什么这种方法奏效呢？</h3>

<p>就在我学会Perl的语法之后，我开始向开源项目贡献代码。当这样做的时候，我总是习惯看看现有的模块。我经常留意在Perl中使用的模式。此后，我开始在自己的代码中吸收这些良好的实践，它帮助我学习如何使用Perl编写好的代码。</p>

<p>这并不是偶然。让我给你们讲个另外类似的故事。</p>

<p>最近，当我在Booking.com工作的时候，我挑选了一些任务，包括给用Go语言编写的服务之一添加新功能。以下是我和队友的对话：</p>

<blockquote>
<p>我：我真的喜欢这项任务。我想做它。你怎么看？</p>

<p>他：是的，它的确很有意思。但是，它需要Go的知识。你知道Go吗？</p>

<p>我：不知道。</p>

<p>他：你想学习Go吗？</p>

<p>我：是的！</p>

<p>他：&#x1f60a; 那就去吧！</p>
</blockquote>

<p>我去了，那也是我学习另外一门编程语言——Go的起点！</p>

<p>我开始阅读Go的语法，并在它的官方网站上发现了一个非常棒的初学者语言教程。它足以让我熟悉该语言的所有基本概念。</p>

<p>再次地，我开始寻找含有“新手”或“易于修复”问题的Go开源项目。我发现了一个Google的项目，它基本上是GitHub的REST API的Go包装器。</p>

<p>在我开始学习Go的2天后，我有了这个项目的第一个PR。下图是我过去1年的<a href="https://github.com/sahildua2305">贡献图表</a>：</p>

<p><img src="/uploads/contribution-graph.png" title="contribution-graph" ></p>

<h3 id="开源是如何帮助的？">开源是如何帮助的？</h3>

<p>现在你可能会疑惑给开源贡献代码如何帮助你学习一门语言的良好实践。它有多个方面。让我们来逐个讨论。</p>

<h4 id="代码质量">代码质量</h4>

<p>大多数良好的开源项目都有严格的编码指导原则，你必须遵守它们才能使你的代码被合并。参与开源将帮助你适应这些指导原则，从而编写优质的代码，即使你只是在学习这门语言。</p>

<p>不仅如此，你还有机会查看其余的代码，学习别人是如何写代码和/或写文档的。</p>

<h4 id="代码审查">代码审查</h4>

<p>给开源贡献代码的最好部分是代码审查。当你推送代码时，你将获得与该项目相关的专家的反馈，因此可以让你有机会提升对语言的理解。</p>

<p>这就像获得了关于如何编写好代码的一次免费的个人指导。</p>

<h4 id="赞赏">赞赏</h4>

<p>下图是我在Go语言上的第一个PR的首个<a href="https://github.com/google/go-github/pull/497">评论</a>：</p>

<p><img src="/uploads/go-appreciation-comment.png" title="go-appreciation-comment" ></p>

<p>作为软件开发者，我们的工作真的需要得到赞赏。而开源社区能够确保这些。在我的整个开源贡献经历中，我从来没有收到过甚至一条侮辱或者挫伤的评论。每个人都善于鼓舞和乐于助人。</p>

<p>下图是DuckDuckGo社区中另个人的评论：</p>

<p><img src="/uploads/duckduckgo-appreciation-comment.png" title="duckduckgo-appreciation-comment" ></p>

<p>所以，下次你想学习一门新语言，只管去学！找个开源项目贡献代码，在学习这门语言和它微妙之处的道路上奋勇前进吧;)</p>

<p>务必让我知道这种非传统方式是否对你有效。另外，如果你认为这种方式对某人有用，请推荐（&#10084;）这篇文章。</p>

<p>如果有任何其它有效的方法也请告诉我。可以在Twitter上关注我<a href="https://twitter.com/sahildua2305">@sahildua2305</a>。</p>
]]></content>
  </entry>
  
</feed>
