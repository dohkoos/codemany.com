<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SQLite | 乐者为王]]></title>
  <link href="http://codemany.com/tags/sqlite/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-11-10T20:11:00+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Spinner + SQLite实现省市县三级联动]]></title>
    <link href="http://codemany.com/blog/implement-three-level-linkage-with-spinner-and-sqlite/"/>
    <updated>2011-09-16T21:48:32+08:00</updated>
    <id>http://codemany.com/blog/implement-three-level-linkage-with-spinner-and-sqlite</id>
    <content type="html"><![CDATA[<p>建立省市县<a href="http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/">行政区划代码</a>数据表。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">CREATE TABLE xzqhdm (
    _id integer PRIMARY KEY,
    code numeric,
    region text,
    parent_code numeric
);
</code></pre></div>
<p>parent_code指上一级的行政区划代码，省属于最上级的行政单位，设置它的区划代码为999999。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">INSERT INTO xzqhdm VALUES(NULL, 110000, &quot;北京市&quot;, 999999);
INSERT INTO xzqhdm VALUES(NULL, 110100, &quot;市辖区&quot;, 110000);
INSERT INTO xzqhdm VALUES(NULL, 110101, &quot;东城区&quot;, 110100);
INSERT INTO xzqhdm VALUES(NULL, 110102, &quot;西城区&quot;, 110100);
INSERT INTO xzqhdm VALUES(NULL, 110103, &quot;崇文区&quot;, 110100);
INSERT INTO xzqhdm VALUES(NULL, 110104, &quot;宣武区&quot;, 110100);
INSERT INTO xzqhdm VALUES(NULL, 110105, &quot;朝阳区&quot;, 110100);
INSERT INTO xzqhdm VALUES(NULL, 110106, &quot;丰台区&quot;, 110100);
...
INSERT INTO xzqhdm VALUES(NULL, 659001, &quot;石河子市&quot;, 659000);
INSERT INTO xzqhdm VALUES(NULL, 659002, &quot;阿拉尔市&quot;, 659000);
INSERT INTO xzqhdm VALUES(NULL, 659003, &quot;图木舒克市&quot;, 659000);
INSERT INTO xzqhdm VALUES(NULL, 659004, &quot;五家渠市&quot;, 659000);
</code></pre></div>
<h3 id="sqlite数据库的操作">SQLite数据库的操作</h3>

<p>如果应用使用到了SQLite数据库，在用户初次使用应用时，需要创建应用使用到的数据表结构及添加一些初始化记录，另外在软件升级的时候，也需要对数据表结构进行更新。Android系统为我们提供了一个名为SQLiteOpenHelper的类，这是一个抽象类，该类用于对数据库版本进行管理，有两个重要的方法，分别是onCreate()和onUpgrade()。</p>

<p>当调用SQLiteOpenHelper的getWritableDatabase()或getReadableDatabase()方法获取数据库实例时，如果数据库不存在，Android系统会自动生成一个数据库文件，接着调用onCreate()方法，onCreate()方法在初次生成数据库时才会被调用，在onCreate()方法里可以生成数据表结构及添加一些应用使用到的初始化数据。onUpgrade()方法在数据库的版本发生变化时会被调用，数据库的版本是由程序员控制的，假设数据库现在的版本是1，由于业务的需要，修改了数据表的结构，这时候就需要升级软件，升级软件时希望更新用户手机里的数据表结构，为了实现这一目的，可以把原来的数据库版本设置为2（或其它数值），并且在onUpgrade()方法里面实现表结构的更新。当软件的版本升级次数比较多，这时在onUpgrade()方法里面可以根据原版号和目标版本号进行判断，然后作出相应的表结构及数据更新。</p>

<p>SQLiteDatabase类则封装了一些操作数据库的常用API，使用该类可以完成对数据进行CRUD操作。主要是execSQL()和rawQuery()方法。execSQL()方法可以执行insert、delete、update和CREATE TABLE之类有更改行为的SQL语句； rawQuery()方法可以执行select语句。SQLiteDatabase还专门提供了对应于CRUD的操作方法： insert()、delete()、update()和query()。</p>

<p>如何将SQLite数据库与APK文件一起发布？可以将数据库文件复制到res/raw目录中，所有在该目录中的文件不会被压缩，这样可以直接提取该目录中的文件。</p>

<p>如何打开res/raw目录中的数据库文件？不能直接打开，需要在程序第一次启动时将该文件复制到手机内存或SD卡中后再打开。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class DBHelper extends SQLiteOpenHelper {
    private static String DB_PATH = &quot;/data/data/com.codemany.linkage/databases/&quot;;
    private static String DB_NAME = &quot;xzqh.db&quot;;
    private static DBHelper databaseHelper;
    private static SQLiteDatabase db;

    private Context context;

    private DBHelper(Context context) {
        super(context, DB_NAME, null, 1);
        this.context = context;
    }

    public static DBHelper getInstance(Context context) {
        if (databaseHelper == null) {
            databaseHelper = new DBHelper(context);
            databaseHelper.openDataBase();

            if (db == null) {
                try {
                    db = databaseHelper.getWritableDatabase();
                    databaseHelper.copyDatabase();
                }
                catch (Exception e) {
                    Log.d(&quot;DBHelper&quot;, &quot;Error in database creation&quot;);
                }

                databaseHelper.openDataBase();
            }
        }
        return databaseHelper;
    }

    private void copyDatabase() throws IOException {
        InputStream is = context.getResources().openRawResource(R.raw.xzqh);
        OutputStream os = new FileOutputStream(DB_PATH + DB_NAME);
        byte[] buffer = new byte[1024];
        int length;
        while ((length = is.read(buffer)) &gt; 0) {
            os.write(buffer, 0, length);
        }

        os.flush();
        os.close();
        is.close();
    }

    private void openDataBase() {
        try {
            db = SQLiteDatabase.openDatabase(
                    DB_PATH + DB_NAME,
                    null,
                    SQLiteDatabase.OPEN_READONLY | SQLiteDatabase.NO_LOCALIZED_COLLATORS);
        } catch (SQLiteException e) {
            // database does&#39;t exist yet
        }
    }

    public SimpleCursorAdapter getListByParentCode(Context context, String parentCode) {
        SimpleCursorAdapter list = null;
        DBHelper dHelper = new DBHelper(context);
        SQLiteDatabase db = dHelper.getReadableDatabase();
        Cursor cursor = db.rawQuery(
                &quot;SELECT code as _id, region FROM xzqhdm WHERE parent_code = ?&quot;,
                new String[] {parentCode});
        if (cursor.getCount() != 0) {
            list = new SimpleCursorAdapter(context,
                    android.R.layout.simple_spinner_item,
                    cursor,
                    new String[] {&quot;region&quot;},
                    new int[] {android.R.id.text1});
            list.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        }
        return list;
    }

    @Override
    public synchronized void close() {
        if (db != null) {
            db.close();
        }
        super.close();
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
    }
}
</code></pre></div>
<p>在代码实现时遇到的难题是如何在选中region的同时得到对应的code。网上有教程说定制自己的Adapter，覆写bindView()方法，不过有多个Spinner就需要声明多个全局变量；还有教程指出可以直接往Adapter中传递对象（实现一个类，将code和region作为字段），然后覆写对象的toString()方法。后来受到这个帖子的启发，修改了rawQuery中的select语句得以实现Spinner控件中的键值绑定。</p>

<p>原来的查询语句是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT _id, code, region FROM xzqhdm WHERE parent_code = ?
</code></pre></div>
<p>因为传入到CursorAdapter中的Cursor结果集必须包含有列名为<code>_id</code>的列，否则CursorAdapter将不会起作用。而code可以被看作是整数，那么只需要将选出的code当作<code>_id</code>就行了，根据这个想法写出的查询语句如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT code as _id, region FROM xzqhdm WHERE parent_code = ?
</code></pre></div>
<p>这样，当触发Spinner上的ItemSelected事件时就可以通过最后一个参数id得到当前的code了。</p>

<p>写这篇文章的时候同时也在调试着代码，突然发现其实不需要改写查询语句也是可以实现键值绑定的。只要在onItemSelected()方法中使用如下代码就可以取得相应的值了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Cursor cursor = (Cursor)parent.getSelectedItem();
if (cursor != null) {
    int code = cursor.getString(cursor.getColumnIndex(&quot;code&quot;));
    String country = cursor.getString(cursor.getColumnIndex(&quot;region&quot;));
}
</code></pre></div>
<p><a href="/uploads/linkage.zip" title="linkage.zip">代码下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sqlite3-ruby和uninitialized constant Encoding]]></title>
    <link href="http://codemany.com/blog/sqlite3-ruby-and-uninitialized-constant-encoding/"/>
    <updated>2010-03-30T12:58:13+08:00</updated>
    <id>http://codemany.com/blog/sqlite3-ruby-and-uninitialized-constant-encoding</id>
    <content type="html"><![CDATA[<p>Ruby 1.8.6 + Rails 2.3.5</p>

<p>创建项目后在运行rake db:migrate时出现了以下错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">** Invoke db:migrate (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute db:migrate
rake aborted!
uninitialized constant Encoding
</code></pre></div>
<p>具体错误信息如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/active_support/dependencies.rb:443:in &#39;load_missing_constant&#39;
/active_support/dependencies.rb:80:in &#39;const_missing&#39;
/active_support/dependencies.rb:92:in &#39;const_missing&#39;
/sqlite3-0.0.8/lib/sqlite3/encoding.rb:9:in &#39;find&#39;
/sqlite3-0.0.8/lib/sqlite3/database.rb:66:in &#39;initialize&#39;
/active_record/connection_adapters/sqlite3_adapter.rb:13:in &#39;new&#39;
/active_record/connection_adapters/sqlite3_adapter.rb:13:in &#39;sqlite3_connection&#39;
/active_record/connection_adapters/abstract/connection_pool.rb:223:in &#39;send&#39;
/active_record/connection_adapters/abstract/connection_pool.rb:223:in &#39;new_connection&#39;
/active_record/connection_adapters/abstract/connection_pool.rb:245:in &#39;checkout_new_connection&#39;
/active_record/connection_adapters/abstract/connection_pool.rb:188:in &#39;checkout&#39;
/active_record/connection_adapters/abstract/connection_pool.rb:184:in &#39;loop&#39;
/active_record/connection_adapters/abstract/connection_pool.rb:184:in &#39;checkout&#39;
</code></pre></div>
<p>从 <a href="http://stackoverflow.com/questions/1797199/uninitialized-constant-encoding-with-sqlite3-ruby-on-windows">http://stackoverflow.com/questions/1797199/uninitialized-constant-encoding-with-sqlite3-ruby-on-windows</a> 查到原因说是因为安装了非sqlite3-ruby包所导致。记起安装SQLite时使用的命令是gem install sqlite3，而实际上sqlite3包仅是针对ruby 1.9版本，在1.8.6上需要使用sqlite3-ruby包。用gem list查看发现果然安装的是sqlite3包。gem uninstall sqlite3把它卸载掉，然后装上sqlite3-ruby包，再次运行rake db:migrate，可以了，不再出现错误信息了。</p>
]]></content>
  </entry>
  
</feed>
