<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: MySQL | 乐者为王]]></title>
  <link href="http://codemany.com/tags/mysql/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-12-02T07:36:40+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现图书的增删查改（CRUD）]]></title>
    <link href="http://codemany.com/blog/implement-crud-for-books/"/>
    <updated>2012-12-22T14:25:20+08:00</updated>
    <id>http://codemany.com/blog/implement-crud-for-books</id>
    <content type="html"><![CDATA[<p>图书的MySQL数据库创建脚本：</p>

<pre><code>CREATE TABLE books (
    id int NOT NULL AUTO_INCREMENT,
    title varchar(255) NOT NULL,
    description text,
    image_url varchar(255),
    price decimal(8, 2) NOT NULL,
    author varchar(255) NOT NULL,
    isbn varchar(255) NOT NULL,
    publisher varchar(255) NOT NULL,
    user_id int NOT NULL,
    PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
</code></pre>

<p>图书实体类文件Book.java主要代码：</p>

<pre><code>public class Book {
    private Long id;
    private String title;
    private String description;
    private String image_url;
    private double price;
    private String author;
    private String isbn;
    private String publisher;
    private User user;
</code></pre>

<p>在User类中添加集合变量books：</p>

<pre><code>public class User {
    private Set&lt;Book&gt; books = new HashSet&lt;Book&gt;();
</code></pre>

<p>在User.hbm.xml中配置和图书的一对多关联：</p>

<p>&#8220;`</p>

<!-- Bidirectional one-to-many association to Book -->


<p><set name="books" inverse="true">
    <key column="user_id" not-null="true" />
    <one-to-many class="com.codemany.book.model.Book" />
</set>
&#8220;`</p>

<p>图书的表映射文件Book.hbm.xml代码：</p>

<pre><code>&lt;hibernate-mapping&gt;
    &lt;class name="com.codemany.book.model.Book" table="books"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="increment" /&gt;
        &lt;/id&gt;

        &lt;property name="title" not-null="true" /&gt;
        &lt;property name="description" /&gt;
        &lt;property name="image_url" /&gt;
        &lt;property name="price" not-null="true" /&gt;
        &lt;property name="author" not-null="true" /&gt;
        &lt;property name="isbn" not-null="true" /&gt;
        &lt;property name="publisher" not-null="true" /&gt;

        &lt;many-to-one name="user" column="user_id" not-null="true" /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>

<p>BookService.java中的代码相对简单，因为没什么复杂的业务逻辑，只是负责把Action和Dao这两层连接起来。</p>

<p>BookDao.java中的代码主要实现图书的读取，更新和删除：</p>

<pre><code>package com.codemany.book.dao;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.codemany.book.model.Book;

public class BookDao {
    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public List&lt;Book&gt; getBookList() {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery("from Book b");
            List&lt;Book&gt; bookList = query.list();
            return bookList;
        } finally {
            session.close();
        }
    }

    public Book getBook(Long bookId) {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery("from Book b where b.id = :id");
            query.setLong("id", bookId);
            query.setMaxResults(1);
            return (Book)query.uniqueResult();
        } finally {
            session.close();
        }
    }

    public void saveOrUpdateBook(Book book) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            session.saveOrUpdate(book);
            ts.commit();
        } finally {
            session.close();
        }
    }

    public void deleteBook(Long bookId) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            Book book = (Book)session.get(Book.class, bookId);
            session.delete(book);
            ts.commit();
        } finally {
            session.close();
        }
    }
}
</code></pre>

<p>BookAction.java负责协调图书应用程序间的运转。接收访问请求，与模型进行交互，将合适的视图展示给用户：</p>

<pre><code>package com.codemany.book.action;

import java.util.List;

import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class BookAction extends ActionSupport {
    private static final long serialVersionUID = 2538923417705852774L;

    private Long bookId;
    private Book book;
    private List&lt;Book&gt; bookList;
    private BookService bookService;

    public String list() throws Exception {
        bookList = bookService.getBookList();
        return "list";
    }

    public String show() throws Exception {
        book = bookService.getBook(bookId);
        return "show";
    }

    public String input() throws Exception {
        if (bookId != null) {
            book = bookService.getBook(bookId);
        }
        return INPUT;
    }

    public String saveOrUpdate() throws Exception {
        User user = (User)ActionContext.getContext().getSession().get("user");
        book.setUser(user);
        bookService.saveOrUpdateBook(book);
        return SUCCESS;
    }

    public String delete() throws Exception {
        bookService.deleteBook(bookId);
        return SUCCESS;
    }
</code></pre>

<p>在applicationContext.xml中添加Book的相关配置，如下面代码所示：</p>

<p>&#8220;`
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    <property name="mappingResources">
        <list>
            <value>com/codemany/book/model/Book.hbm.xml</value>
        </list>
    </property>
</bean></p>

<!-- book -->


<p><bean id="bookDao" class="com.codemany.book.dao.BookDao">
    <property name="sessionFactory" ref="sessionFactory" />
</bean></p>

<p><bean id="bookService" class="com.codemany.book.service.BookService">
    <property name="bookDao" ref="bookDao" />
</bean></p>

<p><bean id="bookAction" class="com.codemany.book.action.BookAction" scope="prototype">
    <property name="bookService" ref="bookService" />
</bean>
&#8220;`</p>

<p>在Struts 2配置文件struts.xml中include文件book.xml。以下是book.xml文件的内容：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;

&lt;struts&gt;
    &lt;package name="book" extends="struts-default"&gt;
        &lt;action name="*Book" method="{1}" class="bookAction"&gt;
            &lt;result name="list"&gt;/books/list.jsp&lt;/result&gt;
            &lt;result name="show"&gt;/books/show.jsp&lt;/result&gt;
            &lt;result name="input"&gt;/books/form.jsp&lt;/result&gt;
            &lt;result type="redirectAction"&gt;listBook&lt;/result&gt;
        &lt;/action&gt;
    &lt;/package&gt;
&lt;/struts&gt;
</code></pre>

<p>视图文件show.jsp作为显示单本图书的信息，代码很简单，就不放出来了，只把list.jsp和form.jsp的代码列出来。</p>

<p>list.jsp用来显示所有的图书：</p>

<pre><code>&lt;body&gt;
    &lt;h1&gt;Listing books&lt;/h1&gt;

    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;Title&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
            &lt;th&gt;Image url&lt;/th&gt;
            &lt;th&gt;Price&lt;/th&gt;
            &lt;th&gt;Author&lt;/th&gt;
            &lt;th&gt;ISBN&lt;/th&gt;
            &lt;th&gt;Publisher&lt;/th&gt;
            &lt;th&gt;Action&lt;/th&gt;
        &lt;/tr&gt;

        &lt;s:iterator value="bookList"&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;s:property value="title" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="description" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="image_url" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="price" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="author" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="isbn" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="publisher" /&gt;&lt;/td&gt;
            &lt;td&gt;
                &lt;s:a href="showBook.action?bookId=%{id}"&gt;Show&lt;/s:a&gt;
                &lt;s:a href="inputBook.action?bookId=%{id}"&gt;Edit&lt;/s:a&gt;
                &lt;s:a href="deleteBook.action?bookId=%{id}" method="delete"&gt;Destroy&lt;/s:a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/s:iterator&gt;
    &lt;/table&gt;

    &lt;s:a action="inputBook"&gt;Add&lt;/s:a&gt;
&lt;/body&gt;
</code></pre>

<p>当用户新建或者更新图书时，视图form.jsp就上场了。因为被两个逻辑使用，显示的标题等信息也不相同，所以需要判断图书的id是否存在，如果不存在的话即是新建业务，否则就是更新操作。</p>

<pre><code>&lt;body&gt;
    &lt;s:if test="book.id != null"&gt;
        &lt;h1&gt;Editing book&lt;/h1&gt;
    &lt;/s:if&gt;
    &lt;s:else&gt;
        &lt;h1&gt;Add book&lt;/h1&gt;
    &lt;/s:else&gt;

    &lt;s:form action="saveOrUpdateBook" method="post"&gt;
        &lt;div class="field"&gt;
            &lt;s:hidden name="book.id" value="%{book.id}" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.title" label="Title" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textarea name="book.description" label="Description" rows="5" cols="25" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.image_url" label="Image URL" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.price" label="Price" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.author" label="Author" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.isbn" label="ISBN" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.publisher" label="Publisher" /&gt;
        &lt;/div&gt;
        &lt;div class="actions"&gt;
            &lt;s:if test="book.id != null"&gt;
            &lt;s:submit value="Update" /&gt;
            &lt;/s:if&gt;
            &lt;s:else&gt;
            &lt;s:submit value="Save" /&gt;
            &lt;/s:else&gt;
      &lt;/div&gt;
    &lt;/s:form&gt;

    &lt;s:if test="book.id != null"&gt;
        &lt;s:a href="showBook.action?bookId=%{book.id}"&gt;Show&lt;/s:a&gt; |
    &lt;/s:if&gt;
    &lt;s:a action="listBook"&gt;Back&lt;/s:a&gt;
&lt;/body&gt;
</code></pre>

<p>最后还要完成图书模型的服务端校验。Struts 2的校验文件有两种格式：ActionName-validation.xml和ActionName-alias-validation.xml。第一种会对该Action中的每个方法进行校验，不符合只对saveOrUpdate校验的要求。在BookAction.java同目录下创建BookAction-saveOrUpdateBook-validation.xml文件：</p>

<pre><code>&lt;validators&gt;
    &lt;field name="book"&gt;
        &lt;field-validator type="visitor"&gt;
            &lt;param name="appendPrefix"&gt;true&lt;/param&gt;
            &lt;message /&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre>

<p>当然，还要在Book.java所在的位置创建Book-validation.xml文件：</p>

<pre><code>&lt;validators&gt;
    &lt;field name="title"&gt;
        &lt;field-validator type="required"&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;

    &lt;field name="price"&gt;
        &lt;field-validator type="required"&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
        &lt;field-validator type="double"&gt;
            &lt;param name="minInclusive"&gt;0.01&lt;/param&gt;
            &lt;message&gt;Price should be at least 0.01&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
</code></pre>

<p>看着BookAction-saveOrUpdateBook-validation.xml这么长的文件名是不是有点无语:)没关系，BookAction-validation.xml配置文件还是可以用的，只要在BookAction.java中那些不需要进行校验的方法上添加@SkipValidation；也可以在action配置中启用validation.excludeMethods参数：</p>

<pre><code>&lt;action name="*Book" method="{1}" class="bookAction"&gt;
    &lt;interceptor-ref name="defaultStack"&gt;
        &lt;param name="validation.excludeMethods"&gt;list,show,input,delete&lt;/param&gt;
    &lt;/interceptor-ref&gt;
</code></pre>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Spring 3 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/struts2-spring3-hibernate4-login-sample/"/>
    <updated>2012-09-04T06:54:27+08:00</updated>
    <id>http://codemany.com/blog/struts2-spring3-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>在pom.xml中添加Spring的依赖包：</p>

<p>&#8220;`
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-orm</artifactId>
    <version>3.1.2.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-web</artifactId>
    <version>3.1.2.RELEASE</version>
</dependency></p>

<!-- 注意：没有这个plugin包会导致Spring无法注入bean到Struts 2的Action中 -->


<p><dependency>
    <groupId>org.apache.struts</groupId>
    <artifactId>struts2-spring-plugin</artifactId>
    <version>2.3.4.1</version>
</dependency>
&#8220;`</p>

<p>配置web.xml文件，加上Spring的监听器：</p>

<pre><code>&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre>

<p>删除hibernate.cfg.xml，添加applicationContext.xml，内容为：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

    &lt;!-- DriverManagerDataSource在每个连接请求时都新建一个connection。
         与DBCP的BasicDataSource不同，DriverManagerDataSource提供的连接没有进行池管理 --&gt;
    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
        &lt;property name="url" value="jdbc:mysql://localhost:3306/jbookshelf" /&gt;
        &lt;property name="username" value="root" /&gt;
        &lt;property name="password" value="123456" /&gt;
    &lt;/bean&gt;

    &lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;
        &lt;property name="dataSource" ref="dataSource" /&gt;
        &lt;property name="hibernateProperties"&gt;
            &lt;props&gt;
                &lt;prop key="hibernate.connection.pool_size"&gt;1&lt;/prop&gt;
                &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;
                &lt;prop key="hibernate.cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/prop&gt;
                &lt;prop key="show_sql"&gt;true&lt;/prop&gt;
            &lt;/props&gt;
        &lt;/property&gt;
        &lt;property name="mappingResources"&gt;
            &lt;list&gt;
                &lt;value&gt;com/codemany/account/model/User.hbm.xml&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

    &lt;bean id="userDao" class="com.codemany.account.dao.UserDao"&gt;
        &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
    &lt;/bean&gt;

    &lt;!-- Struts 2的action是有状态的，必须显式设置scope为prototype，这样每次请求过来都会创建新的action --&gt;
    &lt;bean id="loginAction" class="com.codemany.account.action.LoginAction" scope="prototype"&gt;
        &lt;property name="userDao" ref="userDao" /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>

<p>删除HibernateUtil.java，修改UserDao.java为以下内容：</p>

<pre><code>package com.codemany.account.dao;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.codemany.account.model.User;

public class UserDao {
    // Spring 3集成Hibernate 4不再需要HibernateDaoSupport或HibernateTemplate了，
    // 直接使用原生API即可。
    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public User getUser(String username) {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery("from User u where u.username = ?");
            query.setString(0, username);
            query.setMaxResults(1);
            return (User)query.uniqueResult();
        } finally {
            session.close();
        }
    }
}
</code></pre>

<p>在struts.xml中将action元素中login的class属性改为applicationContext.xml配置文件中的loginAction：</p>

<pre><code>&lt;action name="login" class="loginAction"&gt;
    &lt;result name="success"&gt;/index.jsp&lt;/result&gt;
    &lt;result name="input"&gt;/index.jsp&lt;/result&gt;
&lt;/action&gt;
</code></pre>

<p>修改LoginAction.java的代码：</p>

<pre><code>package com.codemany.account.action;

import com.codemany.account.dao.UserDao;
import com.codemany.account.model.User;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class LoginAction extends ActionSupport {
    private static final long serialVersionUID = -389833745243649130L;

    private String username;
    private String password;

    private UserDao userDao;

    public String execute() throws Exception {
        if (username == null || username.length() == 0
                || password == null || password.length() == 0) {
            return INPUT;
        }

        User u = userDao.getUser(username);
        if (u == null || !password.equals(u.getPassword())) {
            return INPUT;
        }

        ActionContext.getContext().getSession().put("logined", true);
        return SUCCESS;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }
}
</code></pre>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/struts2-hibernate4-login-sample/"/>
    <updated>2012-08-31T07:41:05+08:00</updated>
    <id>http://codemany.com/blog/struts2-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>使用以下代码创建数据库：</p>

<pre><code>CREATE DATABASE IF NOT EXISTS jbookshelf;

USE jbookshelf;

DROP TABLE IF EXISTS users;

CREATE TABLE users (
    id int NOT NULL AUTO_INCREMENT,
    username varchar(20) NOT NULL,
    password varchar(50) NOT NULL,
    PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
</code></pre>

<p>在pom.xml中添加Hibernate的依赖配置：</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
    &lt;version&gt;4.1.6.Final&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;5.1.21&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>创建User.java类：</p>

<pre><code>package com.codemany.account.model;

public class User {
    private Long id;

    private String username;
    private String password;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
</code></pre>

<p>在同一目录下创建User.hbm.xml文件：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;

&lt;hibernate-mapping package="com.codemany.account.model"&gt;
    &lt;class name="User" table="users"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="increment" /&gt;
        &lt;/id&gt;

        &lt;property name="username" length="20" /&gt;
        &lt;property name="password" length="50" /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>

<p>在resources目录下创建hibernate.cfg.xml配置文件，内容如下：</p>

<pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;

&lt;hibernate-configuration&gt;
    &lt;session-factory&gt;
        &lt;!-- MySQL connection settings --&gt;
        &lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;
        &lt;property name="connection.url"&gt;jdbc:mysql://localhost:3306/jbookshelf&lt;/property&gt;
        &lt;property name="connection.username"&gt;yourname&lt;/property&gt;
        &lt;property name="connection.password"&gt;yourpassword&lt;/property&gt;

        &lt;!-- JDBC connection pool (use the built-in) --&gt;
        &lt;property name="connection.pool_size"&gt;1&lt;/property&gt;

        &lt;!-- SQL dialect --&gt;
        &lt;property name="dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;

        &lt;!-- Disable the second-level cache  --&gt;
        &lt;property name="cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/property&gt;

        &lt;!-- Echo all executed SQL to stdout --&gt;
        &lt;property name="show_sql"&gt;true&lt;/property&gt;

        &lt;mapping resource="com/codemany/account/model/User.hbm.xml" /&gt;
    &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</code></pre>

<p>建立管理Session的HibernateUtil.java类：</p>

<pre><code>package com.codemany.account.dao.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {
    private static final SessionFactory sessionFactory;

    static {
        try {
            // Create the SessionFactory from hibernate.cfg.xml
            Configuration configuration = new Configuration();
            configuration.configure();
            Properties props = configuration.getProperties();

            ServiceRegistry serviceRegistry =
                    new ServiceRegistryBuilder().applySettings(props).buildServiceRegistry();

            sessionFactory = configuration.buildSessionFactory(serviceRegistry);
        } catch (Throwable ex) {
            // Make sure you log the exception, as it might be swallowed
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static Session getSession() {
        return sessionFactory.openSession();
    }
}
</code></pre>

<p>在dao包创建数据访问对象：</p>

<pre><code>package com.codemany.account.dao;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.codemany.account.model.User;

public class UserDao {
    public static User getUser(String username) {
        Session session = HibernateUtil.getSession();
        try {
            Query query = session.createQuery("from User u where u.username = ?");
            query.setMaxResults(1);
            query.setString(0, username);
            return (User)query.uniqueResult();
        } finally {
            session.close();
        }
    }
}
</code></pre>

<p>现在可以访问数据库了，所以要修改LoginAction.java的execute方法：</p>

<pre><code>public String execute() throws Exception {
    if (username == null || username.length() == 0
            || password == null || password.length() == 0) {
        return INPUT;
    }

    User u = UserDao.getUser(username);
    if (u == null) {
        return INPUT;
    }
    if (username.equals(u.getUsername()) &amp;&amp; password.equals(u.getPassword())) {
        ActionContext.getContext().getSession().put("logined", true);
        return SUCCESS;
    }

    return INPUT;
}
</code></pre>

<p>如果显示jta-1.0.1b.jar缺失的错误，可以在pom.xml中添加以下语句：</p>

<pre><code>&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;java.net&lt;/id&gt;
        &lt;url&gt;http://download.java.net/maven/2/&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建视图时的with check option选项]]></title>
    <link href="http://codemany.com/blog/with-check-option-in-view/"/>
    <updated>2010-06-28T20:33:27+08:00</updated>
    <id>http://codemany.com/blog/with-check-option-in-view</id>
    <content type="html"><![CDATA[<p>通过有with check option选项的视图操作基表，有以下结论：</p>

<ol>
<li>首先视图只操作它可以查询出来的数据，对于它查询不出的数据，即使基表有，也不可以通过视图来操作；</li>
<li>对于update，有with check option，要保证update后，数据能被视图查询出来；</li>
<li>对于delete，有无with check option都一样；</li>
<li>对于insert，有with check option，要保证insert后，数据要被视图查询出来。</li>
</ol>


<p>对于没有where子句的视图，使用with check option是多余的。</p>

<p>下面用一个例子来说明第4条：</p>

<pre><code>CREATE TABLE students (
    id int NOT NULL AUTO_INCREMENT,
    name varchar(50) NOT NULL,
    age int,
    sex char(1),
    PRIMARY KEY (id)
);

CREATE VIEW male_students_view AS
    SELECT name, age FROM students
    WHERE sex = 'M'
    WITH CHECK OPTION;
</code></pre>

<pre><code>-- 报CHECK OPTION failed错误，原因如4，插入数据后要还能被视图查询出来。
INSERT INTO male_students_view VALUES('WU', 18);
</code></pre>

<pre><code>-- 报Column count doesn't match value count错误，因为视图中根本没有sex列。
INSERT INTO male_students_view VALUES('WU', 18, 'M');
</code></pre>

<p>将students.sex列改成默认值为M：</p>

<pre><code>ALTER TABLE students MODIFY sex char(1) NOT NULL DEFAULT 'M'
</code></pre>

<pre><code>-- 执行成功，1 row affected。
INSERT INTO male_students_view VALUES('WU', 18);
</code></pre>

<pre><code>-- 还是同样的问题，Column count doesn't match value count。
INSERT INTO male_students_view VALUES('WU', 18, 'M');
</code></pre>

<p>或者不修改students.sex的属性，将视图改成：</p>

<pre><code>CREATE VIEW male_students_view AS
    SELECT name, age, sex FROM students
    WHERE sex = 'M'
    WITH CHECK OPTION;
</code></pre>

<pre><code>-- 会报CHECK OPTION failed错误。
INSERT INTO male_students_view VALUES('WU', 18);
</code></pre>

<pre><code>-- 执行成功，1 row affected。
INSERT INTO male_students_view VALUES('WU', 18, 'M');
</code></pre>

<p>以上例子都在MySQL上实际执行过，绝对不会像<a href="http://blog.csdn.net/kowity/article/details/1657899">这篇文章</a>中讲的某本教科书那样胡言乱语。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[允许客户端远程连接Lunarpages上的MySQL数据库]]></title>
    <link href="http://codemany.com/blog/allow-remote-client-to-connect-to-mysql-on-lunarpages/"/>
    <updated>2009-07-09T14:54:05+08:00</updated>
    <id>http://codemany.com/blog/allow-remote-client-to-connect-to-mysql-on-lunarpages</id>
    <content type="html"><![CDATA[<p>Lunarpages虚拟主机上的MySQL服务默认仅有本机能访问。只有在cPanel中向某IP地址或地址段或者所有地址开放访问权限后，才可以从外部用客户端连接数据库。</p>

<p>如果想允许任何主机的访问，直接在Host处填写百分号%，然后Add Host即可。如果只想特定主机访问，就输入客户端机器的IP地址。</p>

<p>{% img /uploads/lunarpages-mysql-remote.png lunarpages-mysql-remote %}</p>

<p>客户端远程连接时使用的地址就是虚拟空间的地址，可以通过ping域名得到。</p>
]]></content>
  </entry>
  
</feed>
