<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ajax | 乐者为王]]></title>
  <link href="http://codemany.com/tags/ajax/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2018-01-10T19:35:22+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 2.3和Paperclip实现无刷新异步上传文件]]></title>
    <link href="http://codemany.com/blog/upload-file-asynchronously-without-refresh-with-paperclip-rails-23/"/>
    <updated>2011-03-08T16:09:31+08:00</updated>
    <id>http://codemany.com/blog/upload-file-asynchronously-without-refresh-with-paperclip-rails-23</id>
    <content type="html"><![CDATA[<div class="highlight"><pre><code class="language-text" data-lang="text">rails upload
cd upload
script/plugin install git://github.com/thoughtbot/paperclip.git
script/plugin install git://github.com/markcatley/responds_to_parent.git
script/generate scaffold user name:string
script/generate paperclip user avatar
rake db:migrate
</code></pre></div>
<p>在user.rb中增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">  has_attached_file :avatar, :url =&gt; &quot;/uploads/:basename.:extension&quot;
  validates_attachment_presence :avatar
  validates_attachment_content_type :avatar,
    :content_type =&gt; [&#39;image/jpeg&#39;, &#39;image/jpg&#39;, &#39;image/png&#39;]
  validates_attachment_size :avatar, :less_than =&gt; 1.megabytes
</code></pre></div>
<p>修改views/users/new.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% form_for(@user, :url =&gt; users_path(:format =&gt; &#39;js&#39;),
      :html =&gt; { :id =&gt; &#39;upload_form&#39;, :multipart =&gt; true, :target =&gt; &#39;uframe&#39; }) do |f| %&gt;
  &lt;%= f.error_messages %&gt;

  &lt;p&gt;
    &lt;%= f.label :name %&gt;&lt;br /&gt;
    &lt;%= f.text_field :name %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :avatar %&gt;&lt;br /&gt;
    &lt;%= f.file_field :avatar %&gt;
    &lt;div id=&quot;avatar&quot;&gt;
    &lt;% if @user.avatar.exists? %&gt;
      &lt;%= image_tag @user.avatar.url(:medium) %&gt;
    &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.submit &#39;Create&#39; %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
&lt;iframe id=&quot;uframe&quot; name=&quot;uframe&quot; style=&quot;display: none;&quot;&gt;&lt;/iframe&gt;
</code></pre></div>
<p>当点击submit按钮后，表单被提交到隐藏的iframe，相应的action被执行，执行结果会被返回给隐藏的iframe，我们需要上传后结果能返回到母窗口，这就是responds_to_parent插件提供的功能。</p>

<p>在views/layouts/user.html.erb中增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= javascript_include_tag :defaults %&gt;
</code></pre></div>
<p>修改users_controller.rb中的create方法，增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">format.js do
  flash[:notice] = &#39;avatar created&#39;
  responds_to_parent do
    render :update do |page|
      page.replace_html :avatar, image_tag(@user.avatar.url(:medium))
      page[&#39;upload_form&#39;].reset
    end
  end
end
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用simple_captcha插件实现验证码]]></title>
    <link href="http://codemany.com/blog/implement-captcha-using-simple-captcha-plugin/"/>
    <updated>2010-12-09T18:42:26+08:00</updated>
    <id>http://codemany.com/blog/implement-captcha-using-simple-captcha-plugin</id>
    <content type="html"><![CDATA[<p><a href="http://expressica.com/simple_captcha/">simple_captcha</a>是一个可以帮我们在Rails中轻松实现验证码功能的插件，它使用简单，并且支持图片和数字验证。</p>

<p>安装插件</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/eshopworks/simple_captcha.git
rake simple_captcha:setup
rake db:migrate
</code></pre></div>
<p>在config/routes.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">map.simple_captcha &#39;/simple_captcha/:action&#39;, :controller =&gt; &#39;simple_captcha&#39;
</code></pre></div>
<p>在app/controllers/application_controller.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ApplicationController &lt; ActionController::Base
  include SimpleCaptcha::ControllerHelpers
</code></pre></div>
<p>验证方式有两种：基于控制器和基于模型。这里使用后者作为示例。</p>

<p>在app/views/entries/new.html.erb的form中加上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= show_simple_captcha(:ojbect =&gt; &#39;entry&#39;, :label =&gt; &#39;Please type the text from the image.&#39;) %&gt;
</code></pre></div>
<p>在app/models/entry.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Entry &lt; ActiveRecord::Base
  apply_simple_captcha
</code></pre></div>
<p>将app/controllers/entries_controller.rb中的create方法里的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if @entry.save
</code></pre></div>
<p>改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if @entry.save_with_captcha
</code></pre></div>
<p>2011/2/17更新</p>

<p>当看不清楚，需要换个验证码时稍麻烦，需要借助Ajax实现，simple_captcha没有提供这个功能，还好小日本写好了一段代码可以参考：<a href="http://d.hatena.ne.jp/kusakari/20080130/1201666383">http://d.hatena.ne.jp/kusakari/20080130/1201666383</a> 。不过可惜使用的是Prototype库，花了点时间将它改成了jQuery代码。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;captcha_image&quot;&gt;
  &lt;%= show_simple_captcha(:object =&gt; &#39;entry&#39;, :label =&gt; &#39;Please type the text from the image.&#39;) %&gt;
&lt;/div&gt;
&lt;a href=&quot;javascript:void(0);&quot; id=&quot;recognize_captcha&quot;&gt;I cannot recognize.&lt;/a&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  $(&quot;#recognize_captcha&quot;).click(function() {
    $.ajax({
      url: &quot;&lt;%= url_for(:action =&gt; &#39;update_captcha&#39;) %&gt;&quot;,
      success: function(response) {
        $(&quot;#captcha_image&quot;).html(response);
      }
    });
  });
&lt;/script&gt;
</code></pre></div>
<p>在app/controllers/entries_controller.rb中加上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def update_captcha
  render :layout =&gt; false
end
</code></pre></div>
<p>创建app/views/entries/update_captcha.html.erb，代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= show_simple_captcha(:object =&gt; &quot;entry&quot;, :label =&gt; &#39;Please type the text from the image.&#39;) %&gt;
</code></pre></div>
<p>还有就是要在routes.rb中添加个映射，不然会找不到action：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">map.update_captcha &#39;/update_captcha&#39;, :controller =&gt; &#39;entries&#39;, :action =&gt; &#39;update_captcha&#39;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax：Web应用的一种新方法]]></title>
    <link href="http://codemany.com/blog/ajax-new-approach-web-applications/"/>
    <updated>2006-06-22T09:17:30+08:00</updated>
    <id>http://codemany.com/blog/ajax-new-approach-web-applications</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://adaptivepath.org/ideas/ajax-new-approach-web-applications/">http://adaptivepath.org/ideas/ajax-new-approach-web-applications/</a></p>

<p>如果有任何关于当前的交互设计可以被称为“迷人”的话，那就是创建Web应用。毕竟，你最后一次听到有人吹嘘不在Web上的产品的交互设计是什么时候？（好吧，除了iPod。）一切都很酷，富有创意的新设计都是在线的。</p>

<p>尽管如此，Web交互设计师仍不能不对创建桌面软件的同事们感到一丝羡慕。桌面应用有着在Web上似乎遥不可及的丰富和响应能力。让Web迅速扩散的同样简单也造成了在我们可以提供的体验和用户能够从桌面应用得到的体验之间差距。</p>

<p>这一差距正在缩小。看一看<a href="http://www.google.com/webhp?complete=1&hl=en">Google Suggest</a>。观察随着你输入建议项更新的方式，几乎立即。现在看看<a href="http://maps.google.com/">Google Maps</a>。放大。使用鼠标抓取地图并稍稍滚动。再次滚动，一切几乎立即发生，无需等待页面重新加载。</p>

<p>Google Suggest和Google Maps是Web应用的一种新方法的两个例子，该方法在Adaptive Path被我们称为Ajax。这个名字是异步JavaScript + XML的简写，它代表了Web上可能的根本性转变。</p>

<h3 id="定义ajax">定义Ajax</h3>

<p>Ajax不是一种技术。它事实上是几种技术，每种技术都在它自身正确的地方蓬勃发展，以强大的新方式聚合在一起。Ajax包括：</p>

<ul>
<li>使用XHTML和CSS的<a href="http://adaptivepath.org/publications/essays/archives/000266.php">standards-based presentation</a>；</li>
<li>使用<a href="http://www.scottandrew.com/weblog/articles/dom_1">Document Object Model</a>的动态显示和交互；</li>
<li>使用<a href="http://www-106.ibm.com/developerworks/xml/library/x-xslt/?article=xr">XML和XSLT</a>的数据交换和操控；</li>
<li>使用<a href="http://www.xml.com/pub/a/2005/02/09/xml-http-request.html">XMLHttpRequest</a>的异步数据检索；</li>
<li>和<a href="http://www.crockford.com/javascript/javascript.html">JavaScript</a>将所有这些绑定在一起。</li>
</ul>

<p>经典的Web应用模型是这么工作的：在界面上的大多数用户操作触发一个HTTP请求回Web服务器。服务器做一些处理——检索数据，精密计算，与各种遗留系统对话——然后返回一个HTML页面到客户端。它是改编自Web作为超文本媒介的原定用途的一个模型，但是如同<a href="http://www.jjg.net/elements/">用户体验的要素</a>的爱好者所知，该模型让Web很好地适合超文本不一定能让它很好地适合软件应用。</p>

<p><img src="/uploads/ajax-fig1.png" alt="ajax-fig1"></p>

<p><em>图1：Web应用的传统模型（左）与Ajax模型（右）的比较。</em></p>

<p>这种方法很有技术上的感觉，但它无助于很好的用户体验。当服务器在做它的事情的时候，用户在做什么？没错，等待。在任务中的每一步，用户都在等待。</p>

<p>显然，如果我们从头开始为应用设计Web，我们不会让用户呆呆地等待。一旦界面被加载后，为什么每次应用需要从服务器获得什么时用户交互就将陷入停顿？事实上，为什么用户应该看到所有进入服务器的应用？</p>

<h3 id="ajax有何不同">Ajax有何不同</h3>

<p>Ajax应用消除了在Web上交互的开始-停止-开始-停止的本质，通过引入中介——Ajax引擎——在用户和服务器之间。它看起来像是给应用添加一个层而让应用更少地作出响应，但事实恰好相反。</p>

<p>在会话开始而不是加载页面的时候，浏览器加载Ajax引擎——用JavaScript编写并且通常藏在一个隐藏的Frame中。在用户方面引擎同时负责渲染用户看到的界面和与服务器通讯。Ajax引擎允许用户和应用的交互异步发生——独立于与服务器的通讯。因此用户永远不会开始于一个空白浏览器窗口和一个沙漏图标，呆呆地等待服务器做某些事情。</p>

<p><img src="/uploads/ajax-fig2.png" alt="ajax-fig2"></p>

<p><em>图2：传统Web应用的同步交互模式（上）与Ajax应用的异步模式（下）的比较</em></p>

<p>通常会生成一个HTTP请求的每个用户操作采取JavaScript调用Ajax引擎的形式替代。任何对用户操作的响应不需要回到服务器——例如简单的数据验证，编辑内存中的数据，甚至一些导航——引擎自己处理。如果为了响应引擎需要从服务器获得什么——如果这是提交数据以进行处理，加载额外的界面代码，或者检索新的数据——引擎异步发出这些请求，通常使用XML，没有拖延用户和应用的交互。</p>

<h3 id="谁在使用ajax">谁在使用Ajax</h3>

<p>Google在开发Ajax方法上做了巨大的投资。在过去一年里Google推出的所有主要产品——<a href="http://www.orkut.com/">Orkut</a>、<a href="http://www.gmail.com/">Gmail</a>、<a href="http://groups-beta.google.com/">Google Groups</a>的最新beta版本、<a href="http://www.google.com/webhp?complete=1&hl=en">Google Suggest</a>，以及<a href="http://maps.google.com/">Google Maps</a>——都是Ajax应用。（想了解更多这些Ajax实现的技术细节，可以查看<a href="http://johnvey.com/features/gmailapi/">Gmail</a>、<a href="http://serversideguy.blogspot.com/2004/12/google-suggest-dissected.html">Google Suggest</a>，和<a href="http://web.archive.org/web/20050331002145/jgwebber.blogspot.com/2005/02/mapping-google.html">Google Maps</a>的这些优秀分析）别人也在模仿：<a href="http://www.flickr.com/">Flickr</a>中人们喜欢的许多特性依靠Ajax，而Amazon的<a href="http://www.a9.com/">A9.com</a>搜索引擎已经运用了类似的技术。</p>

<p>这些项目表明Ajax并不只是技术层面的论调，而且对实际应用也是实用的。这不是另一种只在实验室工作的技术。Ajax应用可以是任意大小，从非常简单、功能单一的Google Suggest到非常复杂和精密的Google Maps。</p>

<p>在Adaptive Path，在过去的几个月中我们已经使用Ajax完成了我们自己的工作，并且我们认识到我们仅仅触及到Ajax应用可以提供的丰富交互和响应能力的一点皮毛。Ajax是Web应用的一个重要的发展，并且它的重要性只会继续增长。因为外面有那么多的开发者已经知道如何使用这些技术，我们期望看到更多的组织继Google之后率先获得Ajax提供的竞争优势。</p>

<h3 id="继续前行">继续前行</h3>

<p>创建Ajax应用最大的挑战不是技术。核心Ajax技术是成熟的、稳定的、并且容易理解的。相反，挑战来自于这些应用的设计者：忘记我们所认为我们知道的关于Web的限制，并且开始想象一个更广泛、更丰富的可能性的范围。</p>

<p>那一定会很有趣。</p>

<h3 id="ajax-q-amp-a">Ajax Q&amp;A</h3>

<p><strong>2005年3月13日：</strong> 自我们第一次发布Jesse的论文以来，我们收到了大量读者关于Ajax问题的信件。在这个Q&amp;A中，Jesse回答了一些最常见的问题。</p>

<p><strong>Q.</strong> 是Adaptive Path发明的Ajax吗？还是Google？是不是Adaptive Path帮助构建了Google的Ajax应用？</p>

<p><strong>A.</strong> 既不是Adaptive Path也不是Google发明的Ajax。Google近期的产品仅仅是级别最高的Ajax应用例子。Adaptive Path没有参与Google的Ajax应用的开发，但我们一直在为我们其它的一些客户做Ajax的工作。</p>

<p><strong>Q.</strong> Adaptive Path正在出售Ajax组件或注册这个名字的商标吗？我从哪里可以下载它？</p>

<p><strong>A.</strong> Ajax不是你能下载的东西。它是一种方法——思考使用某种技术的Web应用架构的一种方式。Ajax这个名字和方法均不是Adaptive Path专有的。</p>

<p><strong>Q.</strong> Ajax仅仅是XMLHttpRequest的另一个名字吗？</p>

<p><strong>A.</strong> 不是。XMLHttpRequest只是Ajax方程式的一部分。XMLHttpRequest是使异步服务器通讯成为可能的技术组件；Ajax是我们给文章中描述的整体方法的名字，它不仅依赖于XMLHttpRequest，还依赖于CSS、DOM和其它技术。</p>

<p><strong>Q.</strong> 为什么你觉得有必要给出这个名字？</p>

<p><strong>A.</strong> 当和客户讨论这个方法时，我需要使用比“异步JavaScript + CSS + DOM + XMLHttpRequest”更短的东西。</p>

<p><strong>Q.</strong> 异步服务器通讯技术已经存在好多年了。是什么让Ajax成为一种“新”方法的？</p>

<p><strong>A.</strong> 新情况是这些技术在实际应用中的突出使用改变了Web的基本交互模型。Ajax现在大行其道是因为这些技术和行业对如何更有效地部署它们的理解已经经过了时间的发展。</p>

<p><strong>Q.</strong> Ajax是一个技术平台或一种架构风格吗？</p>

<p><strong>A.</strong> 都是。Ajax是以某种特殊方式同时使用的一组技术。</p>

<p><strong>Q.</strong> Ajax最适合什么类型的应用？</p>

<p><strong>A.</strong> 目前我们还不知道。因为它是一种相对较新的方法，我们对Ajax最适用在哪些地方的理解仍处于初级阶段。有时候传统的Web应用模型是某个问题的最合适的解决方案。</p>

<p><strong>Q.</strong> 这意味着Adaptive Path是反Flash的吗？</p>

<p><strong>A.</strong> 一点也不。Macromedia是Adaptive Path的一个客户，而且我们是Flash技术长期以来的支持者。随着Ajax的成熟，我们希望有时候Ajax是特定问题的最好的解决方案，而有时候Flash 是最好的解决方案。我们也有兴趣探索技术可以混合的方式（正如Flickr的案例，它使用了两者）。</p>

<p><strong>Q.</strong> Ajax有显著的可访问性或浏览器兼容性限制吗？Ajax应用会破坏后退按钮吗？Ajax兼容REST吗？Ajax开发时是否有安全考虑？Ajax应用可以为那些已经关闭JavaScript的用户工作吗？</p>

<p><strong>A.</strong> 所有这些问题的答案是“可能”。许多开发者已经在致力于解决这些问题。要确定Ajax所有的局限性，我们认为有更多的工作要做，并且我们期望Ajax开发社区一起来发现更多这类问题。</p>

<p><strong>Q.</strong> 一些你举出的Google例子根本没有使用XML。我必须在Ajax应用中使用XML和/或XSLT吗？</p>

<p><strong>A.</strong> 不。XML是最全面发展的在Ajax客户端内外获取数据的手段，但没有理由使用<a href="http://www.crockford.com/JSON/">JavaScript Object Notation</a>之类的技术或任何类似的结构化数据的手段为交换不能达到同样的效果。</p>

<p><strong>Q.</strong> Ajax应用比传统Web应用更易于开发吗？</p>

<p><strong>A.</strong> 不一定。Ajax应用必然涉及到在客户端运行复杂的JavaScript代码。让复杂的代码高效并且无缺陷不是一个掉以轻心的任务，需要更好的开发工具和框架来帮助我们面对挑战。</p>

<p><strong>Q.</strong> Ajax应用经常交付比传统Web应用更好的体验吗？</p>

<p><strong>A.</strong> 不一定。Ajax给交互设计师更多的灵活性。然而，我们拥有的能力越大，在运用它的时候我们必须使用的更谨慎。我们必须小心地使用Ajax来增强我们应用的用户体验，而不是削弱它。</p>

<p>这篇文章被来自<a href="http://webhostinggeeks.com/">Webhostinggeeks.com</a>的Jovana Milutinovich翻译成了<a href="http://science.webhostinggeeks.com/ajaxnovi-pristup">Serbo-Croatian</a>语言。</p>
]]></content>
  </entry>
  
</feed>
