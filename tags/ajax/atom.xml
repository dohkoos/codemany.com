<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ajax | 乐者为王]]></title>
  <link href="http://codemany.com/tags/ajax/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-03-30T12:04:01+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 2.3和Paperclip实现无刷新异步上传文件]]></title>
    <link href="http://codemany.com/blog/upload-file-asynchronously-without-refresh-with-paperclip-rails-23/"/>
    <updated>2011-03-08T16:09:31+08:00</updated>
    <id>http://codemany.com/blog/upload-file-asynchronously-without-refresh-with-paperclip-rails-23</id>
    <content type="html"><![CDATA[<div class="highlight"><pre><code class="language-text" data-lang="text">rails upload
cd upload
script/plugin install git://github.com/thoughtbot/paperclip.git
script/plugin install git://github.com/markcatley/responds_to_parent.git
script/generate scaffold user name:string
script/generate paperclip user avatar
rake db:migrate
</code></pre></div>
<p>在user.rb中增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">  has_attached_file :avatar, :url =&gt; &quot;/uploads/:basename.:extension&quot;
  validates_attachment_presence :avatar
  validates_attachment_content_type :avatar,
    :content_type =&gt; [&#39;image/jpeg&#39;, &#39;image/jpg&#39;, &#39;image/png&#39;]
  validates_attachment_size :avatar, :less_than =&gt; 1.megabytes
</code></pre></div>
<p>修改views/users/new.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% form_for(@user, :url =&gt; users_path(:format =&gt; &#39;js&#39;),
      :html =&gt; { :id =&gt; &#39;upload_form&#39;, :multipart =&gt; true, :target =&gt; &#39;uframe&#39; }) do |f| %&gt;
  &lt;%= f.error_messages %&gt;

  &lt;p&gt;
    &lt;%= f.label :name %&gt;&lt;br /&gt;
    &lt;%= f.text_field :name %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :avatar %&gt;&lt;br /&gt;
    &lt;%= f.file_field :avatar %&gt;
    &lt;div id=&quot;avatar&quot;&gt;
    &lt;% if @user.avatar.exists? %&gt;
      &lt;%= image_tag @user.avatar.url(:medium) %&gt;
    &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.submit &#39;Create&#39; %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
&lt;iframe id=&quot;uframe&quot; name=&quot;uframe&quot; style=&quot;display: none;&quot;&gt;&lt;/iframe&gt;
</code></pre></div>
<p>当点击submit按钮后，表单被提交到隐藏的iframe，相应的action被执行，执行结果会被返回给隐藏的iframe，我们需要上传后结果能返回到母窗口，这就是responds_to_parent插件提供的功能。</p>

<p>在views/layouts/user.html.erb中增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= javascript_include_tag :defaults %&gt;
</code></pre></div>
<p>修改users_controller.rb中的create方法，增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">format.js do
  flash[:notice] = &#39;avatar created&#39;
  responds_to_parent do
    render :update do |page|
      page.replace_html :avatar, image_tag(@user.avatar.url(:medium))
      page[&#39;upload_form&#39;].reset
    end
  end
end
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用simple_captcha插件实现验证码]]></title>
    <link href="http://codemany.com/blog/implement-captcha-using-simple-captcha-plugin/"/>
    <updated>2010-12-09T18:42:26+08:00</updated>
    <id>http://codemany.com/blog/implement-captcha-using-simple-captcha-plugin</id>
    <content type="html"><![CDATA[<p><a href="http://expressica.com/simple_captcha/">simple_captcha</a>是一个可以帮我们在Rails中轻松实现验证码功能的插件，它使用简单，并且支持图片和数字验证。</p>

<p>安装插件</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/eshopworks/simple_captcha.git
rake simple_captcha:setup
rake db:migrate
</code></pre></div>
<p>在config/routes.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">map.simple_captcha &#39;/simple_captcha/:action&#39;, :controller =&gt; &#39;simple_captcha&#39;
</code></pre></div>
<p>在app/controllers/application_controller.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ApplicationController &lt; ActionController::Base
  include SimpleCaptcha::ControllerHelpers
</code></pre></div>
<p>验证方式有两种：基于controller和基于model。这里使用后者作为示例。</p>

<p>在app/views/entries/new.html.erb的form中加上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= show_simple_captcha(:ojbect =&gt; &#39;entry&#39;, :label =&gt; &#39;Please type the text from the image.&#39;) %&gt;
</code></pre></div>
<p>在app/models/entry.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Entry &lt; ActiveRecord::Base
  apply_simple_captcha
</code></pre></div>
<p>将app/controllers/entries_controller.rb中的create方法里的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if @entry.save
</code></pre></div>
<p>改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if @entry.save_with_captcha
</code></pre></div>
<p>2011/2/17更新</p>

<p>当看不清楚，需要换个验证码时稍麻烦，需要借助Ajax实现，simple_captcha没有提供这个功能，还好小日本写好了一段代码可以参考：<a href="http://d.hatena.ne.jp/kusakari/20080130/1201666383">http://d.hatena.ne.jp/kusakari/20080130/1201666383</a> 。不过可惜使用的是Prototype库，花了点时间将它改成了jQuery代码。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;captcha_image&quot;&gt;
  &lt;%= show_simple_captcha(:object =&gt; &#39;entry&#39;, :label =&gt; &#39;Please type the text from the image.&#39;) %&gt;
&lt;/div&gt;
&lt;a href=&quot;javascript:void(0);&quot; id=&quot;recognize_captcha&quot;&gt;I cannot recognize.&lt;/a&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  $(&quot;#recognize_captcha&quot;).click(function() {
    $.ajax({
      url: &quot;&lt;%= url_for(:action =&gt; &#39;update_captcha&#39;) %&gt;&quot;,
      success: function(response) {
        $(&quot;#captcha_image&quot;).html(response);
      }
    });
  });
&lt;/script&gt;
</code></pre></div>
<p>在app/controllers/entries_controller.rb中加上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def update_captcha
  render :layout =&gt; false
end
</code></pre></div>
<p>创建app/views/entries/update_captcha.html.erb，代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= show_simple_captcha(:object =&gt; &quot;entry&quot;, :label =&gt; &#39;Please type the text from the image.&#39;) %&gt;
</code></pre></div>
<p>还有就是要在routes.rb中添加个映射，不然会找不到action：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">map.update_captcha &#39;/update_captcha&#39;, :controller =&gt; &#39;entries&#39;, :action =&gt; &#39;update_captcha&#39;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax：Web应用的一种新方法]]></title>
    <link href="http://codemany.com/blog/ajax-new-approach-web-applications/"/>
    <updated>2006-06-22T09:17:30+08:00</updated>
    <id>http://codemany.com/blog/ajax-new-approach-web-applications</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://adaptivepath.org/ideas/ajax-new-approach-web-applications/">http://adaptivepath.org/ideas/ajax-new-approach-web-applications/</a></p>

<p>If anything about current interaction design can be called “glamorous”, it’s creating Web applications. After all, when was the last time you heard someone rave about the interaction design of a product that wasn’t on the Web? (Okay, besides the iPod.) All the cool, innovative new projects are online.</p>

<p>Despite this, Web interaction designers can’t help but feel a little envious of our colleagues who create desktop software. Desktop applications have a richness and responsiveness that has seemed out of reach on the Web. The same simplicity that enabled the Web’s rapid proliferation also creates a gap between the experiences we can provide and the experiences users can get from a desktop application.</p>

<p>That gap is closing. Take a look at <a href="http://www.google.com/webhp?complete=1&hl=en">Google Suggest</a>. Watch the way the suggested terms update as you type, almost instantly. Now look at <a href="http://maps.google.com/">Google Maps</a>. Zoom in. Use your cursor to grab the map and scroll around a bit. Again, everything happens almost instantly, with no waiting for pages to reload.</p>

<p>Google Suggest and Google Maps are two examples of a new approach to web applications that we at Adaptive Path have been calling Ajax. The name is shorthand for Asynchronous JavaScript + XML, and it represents a fundamental shift in what’s possible on the Web.</p>

<h3 id="定义ajax">定义Ajax</h3>

<p>Ajax不是一种技术。它事实上是几种技术，每种技术都在它自身正确的地方蓬勃发展，以强大的新方式聚合在一起。Ajax包括：</p>

<ul>
<li>使用XHTML和CSS的<a href="http://adaptivepath.org/publications/essays/archives/000266.php">standards-based presentation</a>；</li>
<li>使用<a href="http://www.scottandrew.com/weblog/articles/dom_1">Document Object Model</a>的动态显示和交互；</li>
<li>使用<a href="http://www-106.ibm.com/developerworks/xml/library/x-xslt/?article=xr">XML and XSLT</a>的数据交换和操控；</li>
<li>使用<a href="http://www.xml.com/pub/a/2005/02/09/xml-http-request.html">XMLHttpRequest</a>的异步数据检索；</li>
<li>和<a href="http://www.crockford.com/javascript/javascript.html">JavaScript</a>将所有这些绑定在一起。</li>
</ul>

<p>经典的Web应用模型是这么工作的：在界面上的大多数用户操作触发一个HTTP请求回Web服务器。服务器做一些处理——检索数据，精密计算，与各种遗留系统对话——然后返回一个HTML页面到客户端。它是改编自Web作为超文本媒介的原定用途的一个模型，但是如同<a href="http://www.jjg.net/elements/">The Elements of User Experience</a>的爱好者所知，该模型让Web很好地适合超文本不一定能让它很好地适合软件应用。</p>

<p><img src="/uploads/ajax-fig1.png"></p>

<p><em>图1：Web应用的传统模型（左）与Ajax模型（右）的比较。</em></p>

<p>这种方法很有技术上的感觉，但它无助于很好的用户体验。当服务器在做它的事情的时候，用户在做什么？没错，等待。在任务中的每一步，用户都在等待。</p>

<p>显然，如果我们从头开始为应用设计Web，我们不会让用户呆呆地等待。一旦界面被加载后，为什么每次应用需要从服务器获得什么时用户交互就将陷入停顿？事实上，为什么用户应该看到所有进入服务器的应用？</p>

<h3 id="ajax有何不同">Ajax有何不同</h3>

<p>An Ajax application eliminates the start-stop-start-stop nature of interaction on the Web by introducing an intermediary — an Ajax engine — between the user and the server. It seems like adding a layer to the application would make it less responsive, but the opposite is true.</p>

<p>Instead of loading a webpage, at the start of the session, the browser loads an Ajax engine — written in JavaScript and usually tucked away in a hidden frame. This engine is responsible for both rendering the interface the user sees and communicating with the server on the user’s behalf. The Ajax engine allows the user’s interaction with the application to happen asynchronously — independent of communication with the server. So the user is never staring at a blank browser window and an hourglass icon, waiting around for the server to do something.</p>

<p><img src="/uploads/ajax-fig2.png"></p>

<p><em>图2：传统Web应用的同步交互模式（上）与Ajax应用的异步模式（下）的比较</em></p>

<p>Every user action that normally would generate an HTTP request takes the form of a JavaScript call to the Ajax engine instead. Any response to a user action that doesn’t require a trip back to the server — such as simple data validation, editing data in memory, and even some navigation — the engine handles on its own. If the engine needs something from the server in order to respond — if it’s submitting data for processing, loading additional interface code, or retrieving new data — the engine makes those requests asynchronously, usually using XML, without stalling a user’s interaction with the application.</p>

<h3 id="谁在使用ajax">谁在使用Ajax</h3>

<p>Google is making a huge investment in developing the Ajax approach. All of the major products Google has introduced over the last year — <a href="http://www.orkut.com/">Orkut</a>, <a href="http://www.gmail.com/">Gmail</a>, the latest beta version of <a href="http://groups-beta.google.com/">Google Groups</a>, <a href="http://www.google.com/webhp?complete=1&hl=en">Google Suggest</a>, and <a href="http://maps.google.com/">Google Maps</a> — are Ajax applications. (For more on the technical nuts and bolts of these Ajax implementations, check out these excellent analyses of <a href="http://johnvey.com/features/gmailapi/">Gmail</a>, <a href="http://serversideguy.blogspot.com/2004/12/google-suggest-dissected.html">Google Suggest</a>, and <a href="http://web.archive.org/web/20050331002145/jgwebber.blogspot.com/2005/02/mapping-google.html">Google Maps</a>.) Others are following suit: many of the features that people love in <a href="http://www.flickr.com/">Flickr</a> depend on Ajax, and Amazon’s <a href="http://www.a9.com/">A9.com</a> search engine applies similar techniques.</p>

<p>These projects demonstrate that Ajax is not only technically sound, but also practical for real-world applications. This isn’t another technology that only works in a laboratory. And Ajax applications can be any size, from the very simple, single-function Google Suggest to the very complex and sophisticated Google Maps.</p>

<p>At Adaptive Path, we’ve been doing our own work with Ajax over the last several months, and we’re realizing we’ve only scratched the surface of the rich interaction and responsiveness that Ajax applications can provide. Ajax is an important development for Web applications, and its importance is only going to grow. And because there are so many developers out there who already know how to use these technologies, we expect to see many more organizations following Google’s lead in reaping the competitive advantage Ajax provides.</p>

<h3 id="继续前行">继续前行</h3>

<p>在创建Ajax应用中最大的挑战不是技术。核心Ajax技术是成熟的、稳定的、并且容易理解的。相反，挑战来自于这些应用的设计人员：忘记我们所认为我们知道的关于Web的限制，并且开始想象一个更广泛、更丰富的可能性的范围。</p>

<p>那一定会很有趣。</p>

<h3 id="ajax-q-amp-a">Ajax Q&amp;A</h3>

<p><strong>2005年3月13日：</strong> 自我们第一次发布Jesse的论文以来，我们收到了大量读者关于Ajax问题的信件。在这个Q&amp;A中，Jesse回答了一些最常见的问题。</p>

<p><strong>Q.</strong> 是Adaptive Path发明的Ajax吗？还是Google？是不是Adaptive Path帮助构建了Google的Ajax应用？</p>

<p><strong>A.</strong> 既不是Adaptive Path也不是Google发明的Ajax。Google最近的产品仅仅是最知名的Ajax应用例子。Adaptive Path没有参与Google的Ajax应用的开发，但我们一直在为我们其它的一些客户做Ajax的工作。</p>

<p><strong>Q.</strong> Adaptive Path正在出售Ajax组件或注册这个名字的商标吗？我从哪里可以下载它？</p>

<p><strong>A.</strong> Ajax不是你能下载的东西。它是一种方法——思考使用某种技术的Web应用架构的一种方式。Ajax这个名字和方法均不是Adaptive Path专有的。</p>

<p>Q. Is Ajax just another name for XMLHttpRequest?</p>

<p>A. No. XMLHttpRequest is only part of the Ajax equation. XMLHttpRequest is the technical component that makes the asynchronous server communication possible; Ajax is our name for the overall approach described in the article, which relies not only on XMLHttpRequest, but on CSS, DOM, and other technologies.</p>

<p>Q. Why did you feel the need to give this a name?</p>

<p>A. I needed something shorter than “Asynchronous JavaScript+CSS+DOM+XMLHttpRequest” to use when discussing this approach with clients.</p>

<p>Q. Techniques for asynchronous server communication have been around for years. What makes Ajax a “new” approach?</p>

<p>A. What’s new is the prominent use of these techniques in real-world applications to change the fundamental interaction model of the Web. Ajax is taking hold now because these technologies and the industry’s understanding of how to deploy them most effectively have taken time to develop.</p>

<p><strong>Q.</strong> Ajax是一个技术平台或一种架构风格吗？</p>

<p><strong>A.</strong> 都是。Ajax是以某种特殊方式同时使用的一组技术。</p>

<p><strong>Q.</strong> Ajax最适合什么类型的应用？</p>

<p><strong>A.</strong> 目前我们还不知道。因为它是一种相对较新的方法，我们对Ajax最适用在哪些地方的理解仍处于初级阶段。有时候传统的Web应用模型是某个问题的最合适的解决方案。</p>

<p><strong>Q.</strong> 这意味着Adaptive Path是反Flash的吗？</p>

<p><strong>A.</strong> 一点也不。Macromedia是Adaptive Path的一个客户，而且我们是Flash技术长期以来的支持者。随着Ajax的成熟，我们希望有时候Ajax是特定问题的最好的解决方案，而有时候Flash 是最好的解决方案。我们也有兴趣探索技术可以混合的方式（正如Flickr的案例，它使用了两者）。</p>

<p>Q. Does Ajax have significant accessibility or browser compatibility limitations? Do Ajax applications break the back button? Is Ajax compatible with REST? Are there security considerations with Ajax development? Can Ajax applications be made to work for users who have JavaScript turned off?</p>

<p>A. The answer to all of these questions is “maybe”. Many developers are already working on ways to address these concerns. We think there’s more work to be done to determine all the limitations of Ajax, and we expect the Ajax development community to uncover more issues like these along the way.</p>

<p><strong>Q.</strong> 一些你举出的Google例子根本没有使用XML。我必须在Ajax应用中使用XML和/或XSLT吗？</p>

<p><strong>A.</strong> 不。XML是最全面发展的在Ajax客户端内外获取数据的手段，但没有理由使用<a href="http://www.crockford.com/JSON/">JavaScript Object Notation</a>之类的技术或任何类似的结构化数据的手段为交换不能达到同样的效果。</p>

<p><strong>Q.</strong> Ajax应用比传统Web应用更易于开发吗？</p>

<p><strong>A.</strong> 不一定。Ajax应用必然涉及到在客户端运行复杂的JavaScript代码。让复杂的代码高效并且无缺陷不是一个掉以轻心的任务，需要更好的开发工具和框架来帮助我们面对挑战。</p>

<p><strong>Q.</strong> Ajax应用经常交付比传统Web应用更好的体验吗？</p>

<p><strong>A.</strong> 不一定。Ajax给交互设计人员更多的灵活性。然而，我们拥有的能力越大，在运用它的时候我们必须使用的更谨慎。我们必须小心地使用Ajax来增强我们应用的用户体验，而不是削弱它。</p>

<p>这篇文章被来自<a href="http://webhostinggeeks.com/">Webhostinggeeks.com</a>的Jovana Milutinovich翻译成了<a href="http://science.webhostinggeeks.com/ajaxnovi-pristup">Serbo-Croatian</a>语言。</p>
]]></content>
  </entry>
  
</feed>
