<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: GitHub | 乐者为王]]></title>
  <link href="http://codemany.com/tags/github/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-03-21T15:45:50+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub对软件职业生涯的影响]]></title>
    <link href="http://codemany.com/blog/the-impact-github-is-having-on-your-software-career-right-now/"/>
    <updated>2017-03-20T20:50:30+08:00</updated>
    <id>http://codemany.com/blog/the-impact-github-is-having-on-your-software-career-right-now</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://medium.com/@sitapati/the-impact-github-is-having-on-your-software-career-right-now-6ce536ec0b50">https://medium.com/@sitapati/the-impact-github-is-having-on-your-software-career-right-now-6ce536ec0b50</a></p>

<p>在未来的12-24个月里——换句话说，即2018到2019年间——程序员的聘用方式将彻底改变。</p>

<p>2004-2014年间，我任职于Red Hat，世界上最大的开源软件工程公司。2004年7月，在我工作的第一天，我的上司Marty Messer对我说：“你在这里所做的一切工作都是开源的。在将来，你不再需要简历，人们可以直接Google你。”</p>

<p>在那时，它是在Red Hat工作的一个独特之处：我们有机会在开源社区创立自己的个人品牌和声誉。我们通过邮件列表、缺陷追踪器以及提交源代码到Mercurial、Subversion和CVS版本库
来和其他软件工程师进行交流。所有这些都是公开的，并且可以被Google索引。</p>

<p>快进到2017，我们生活的这个世界已经被开源软件所吞噬。</p>

<p>有两个因素可以让你真切地感受到开源时代的到来：</p>

<ol>
<li>微软——曾经是闭源私有软件的典型代表和反对开源的圣战士——已经全心全意地拥抱开源软件，成立.NET基金会（Red Hat是其中的一员）和加入Linux基金会。现在.NET已经作为开源项目进行开发。</li>
<li>GitHub已经成为一个奇特的社交网络，它把问题追踪和分布式代码控制捆绑在一起。</li>
</ol>

<p>对于来自主要是闭源背景的软件开发者来说，刚刚发生了什么还不是很清楚。对他们来说，开源等于“在业余时间免费工作”。</p>

<p>然而，对于我们这些在过去10年里建成一个10亿美元开源软件公司的人来说，为开源工作没有什么免费或业余时间。并且，为开源工作的好处和结果是显而易见的：你的声誉是你的，而且在公司间是可携带的。GitHub是一个社交网络，在那里，你的社会资本，通过你的提交和对你正在工作的任何技术的全球交流的贡献创造的，是你的——不会绑定到你正在临时工作的公司。</p>

<p>聪明人会利用这个优势——他们会向他们日常工作中使用的语言和框架贡献补丁、问题和评论——TypeScript、.NET、Redux。</p>

<p>他们同样会提倡并创造性地安排他们的工作尽可能地以公开的方式完成——即使那只是他们对私有版本库的贡献图。</p>

<p>GitHub是一个很好的均衡器。你可能不能从印度找到一份澳大利亚的工作，但没有什么阻止你在印度利用GitHub与澳大利亚人进行合作。</p>

<p>在过去的十年里，从Red Hat获取一份工作的方式是显而易见的。你只要开始与Red Hat的工程师一起协作开发他们的一些开源项目，然后作出有价值的贡献并且得到他们的认可，你就可以申请一份工作。或者他们会找你。</p>

<p>现在，同样的途径对每个人都开放，不过仅限于技术职位。随着世界被开源所吞噬，同样的求职方式现在在各个地方开始流行起来。</p>

<p>在Linux和Git的发明者Linus Torvalds（在GitHub上有4.9万关注者）<a href="http://www.theregister.co.uk/2017/02/15/think_different_shut_up_and_work_harder_says_linus_torvalds/">最近的访谈</a>中，他说到：</p>

<blockquote>
<p>你提交大量的小补丁，直到项目的维护者信任你，到那时你会成为信任网络的一部分，而不仅仅是个发送补丁的家伙。</p>
</blockquote>

<p>你的声誉是你在信任网络中的定位。当你换公司时，你之前的声誉就会有所丢失并且减弱。如果你生活在一个小镇里并且在那待了很久，那么那里的人都会对你有所了解。但如果你去了其他国家生活，无论你去哪个国家，你之前的声誉都已经归零了。你最终会到一个没人了解你的地方，更糟糕的是，那里没人知道谁了解你。</p>

<p>你可能是第一次、第二次，或者更糟糕的是你已经是第三次这样丢失了与你的信任网络的联系。除非你已经通过在研讨会或者大型会议进行演讲建立个人品牌，否则你与其他人共事时建立的信任，以及提交到企业内部仓库的代码都会不复存在。</p>

<p>但是，如果你的工作是在 GitHub 上完成的，它就不会消失。它是可以看得见的。你之前与别人建立的信任网络的联系是可以从 GitHub 里直接看的到的。</p>

<p>在 GitHub 开源社区中将要发生的一件事就是，学生、刚毕业的学以及移民者这些相对弱势的群体可以利用 GitHub 这个优势到澳大利亚找份工作。</p>

<p>并且 GitHub 会改变开发者社区现有的样貌。一些之前比较有权威的开发者将会突然地发现他们的信任网络被破坏了。因为在开源中有个原则叫精英领导（meritocracy ）——拥有最好想法的人胜出、拥有提多提交的人胜出、拥有最多通过测试的人胜出、拥有最佳实现的人胜出，等等。</p>

<p>这不是一个完美的原则（没有任何东西是完美的）。并且会让你很难成为一个可以一起共事的好同事。在红帽公司里，我们解雇过一些明星工程师（rock star engineers ），仅仅因为他们不能和其他同事和睦相处。而那些“其他工程师”会经常在 GitHub 里与其他代码提交者进行交流。</p>

<p>GitHub 不是简单地作为一个代码仓库和原始提交者的成员列表, 一些人把这看成是稻草人谬误（ strawman arguments）。GitHub 是一个社交网络。我觉得：</p>

<blockquote>
<p>重要的不是你提交到 GitHub 上的代码，是其他人对你 GitHub 上的代码的评论</p>
</blockquote>

<p>那是你可以随身携带的声誉。并且在之后的12到24个月里，是否在 GitHub 里为开源项目贡献代码会有明显的区别。就好像有邮件和没有邮件（现在所有人都有邮件了）、有手机与没手机（现在任何人都有手机）的区别。到最后，大多数人将会以开源的方式来进行工作，并且会基于各种因素提供相对公平的竞争环境。</p>

<p>但现在，程序员的职业发展空间已经被 GitHub 打乱了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wordpress迁移到Octopress]]></title>
    <link href="http://codemany.com/blog/migrating-wordpress-to-octopress/"/>
    <updated>2014-08-05T19:15:03+08:00</updated>
    <id>http://codemany.com/blog/migrating-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>GitHub Pages提供免费的静态站点托管服务，有两种类型：User/Organization Pages和Project Pages。前者是用户/组织的主页，一个用户/组织仅有一个；后者是每个项目的主页。</p>

<p>安装Octopress时，rake setup_github_pages会要求输入GitHub Pages项目的URL，根据URL判断是哪种服务。如果是前者，会在新建的<code>_deploy</code>目录上创建master分支，用于存放发布的静态文件，并把原master分支改为source分支；后者则仅在<code>_deploy</code>目录上创建gh-pages分支。</p>

<p>Octopress默认的permalink是/blog/:year/:month/:day/:title/，想把它改成/:title/这种格式。修改后，发现生成的文章都跑到了public目录下，默认应该是在public/blog目录里的。为保持目录的简洁，把它改成了/blog/:title/，这样虽然生成的文章没有按年月日分目录，但是用户在访问系列文章时就可以只修改相应数字，不然必须得记住几乎不可能知道的文章的发布年月日。</p>

<p>至于评论的迁移，不想费过多的手脚，直接使用Octopress自带的Disqus。在Wordpress中安装好Disqus插件，通过插件设置将现有的评论内容导入Disqus。不过Disqus处理导入数据的时间有点长，需要等待一段时间，可以在 <a href="http://import.disqus.com">http://import.disqus.com</a> 查看导入进度。导入完成后，把Wordpress文章的permalink改成和Octopress相同，登录Disqus后台，找到Migrate Threads栏目，在Domain Migration Wizard里把旧域名改成新域名，然后一路Next就大功告成了。</p>

<p>不过在实践中碰到了问题，打开某篇有评论的文章，发现只有评论框，没有评论。搞不明白是怎么回事。后来受到 <a href="http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/">http://www.ducea.com/2012/11/12/disqus-comments-not-visible-in-octopress/</a> 的启发，原来是<code>_config.yml</code>中的URL还是生成项目时的，与CNAME中配置的域名不一致，修改后就没问题了。</p>

<p>在侧边栏显示最新评论也很简单，添加recent_comments.html到source/_includes/custom/asides目录下，在<code>_config.yml</code>的default_asides做好配置，最新评论内容就会出现在侧边栏中了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;section&gt;
  &lt;h1&gt;Recent Comments&lt;/h1&gt;
  &lt;div class=&quot;dsq-widget&quot;&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;http://codemany.disqus.com/recent_comments_widget.js&quot;&gt;&lt;/script&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre></div>
<p>在侧边栏显示Tag Cloud参照了 <a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">http://codemacro.com/2012/07/18/add-tag-to-octopress/</a> 教程，没几分钟就搞定了。</p>

<p>分享使用的是JiaThis，只要把source/_includes/post/sharing.html中的代码替换成以下代码就可以：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;jiathis_style_32x32&quot;&gt;
  &lt;a class=&quot;jiathis_button_qzone&quot;&gt;&lt;/a&gt;
  &lt;a class=&quot;jiathis_button_tsina&quot;&gt;&lt;/a&gt;
  &lt;a class=&quot;jiathis_button_tqq&quot;&gt;&lt;/a&gt;
  &lt;a class=&quot;jiathis_button_weixin&quot;&gt;&lt;/a&gt;
  &lt;a class=&quot;jiathis_button_renren&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;http://www.jiathis.com/share/&quot; class=&quot;jiathis jiathis_txt jtico jtico_jiathis&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;
  &lt;a class=&quot;jiathis_counter_style&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://v2.jiathis.com/code/jia.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre></div>
<p>相关文章本想用Octopress自带的lsi模块实现，只是当文章较多时生成速度实在是巨慢，按照推荐安装gsl模块，结果在Windows Server 2008系统上死活装不上，采用手动编译方式也总是死在rb-gsl的安装上。失望之余找到 <a href="https://github.com/LawrenceWoodman/related_posts-jekyll_plugin">https://github.com/LawrenceWoodman/related_posts-jekyll_plugin</a> 这个插件，它使用起来非常简单，只需将related_posts.rb放到自己的plugins文件夹中，然后在source/<u>includes/post中新建related</u>posts.html文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ % if site.related_posts % }
  &lt;h3&gt;Related posts&lt;/h3&gt;
  &lt;ul class=&quot;posts&quot;&gt;
  { % for post in site.related_posts limit:3 % }
    &lt;li class=&quot;related&quot;&gt;
      &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
  { % endfor % }
  &lt;/ul&gt;
{ % endif % }
</code></pre></div>
<p>修改source/_layouts/post.html，在</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ % include post/author.html % }
{ % include post/date.html % }{ % if updated % }{ % else % }{ % endif % }
{ % include post/categories.html % }
</code></pre></div>
<p>后面添加</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ % include post/related_posts.html % }
</code></pre></div>
<p>就可以了。使用这个插件会有个小问题，就是它和Jekyll 2.1不兼容，rake generate时会报错，可以使用jumanji27提供的<a href="https://github.com/jumanji27/related_posts-jekyll_plugin">fork版本</a>。</p>

<p>在Wordpress的Tools/Export页面选择导出文章内容，保存为wordpress.xml文件。然后使用工具把它转换成markdown格式。这里使用了YORKXIN的<a href="https://gist.github.com/chitsaou/1394128" title="wordpressdotcom.rb">修改版本</a>，将脚本和wordpress.xml放到Octopress根目录下，然后运行：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby -r ./wordpressdotcom.rb -e Jekyll::WordpressDotCom.process
</code></pre></div>
<p>会把转换好的文章都放到source/_posts目录下，文件后缀名是html，直接改成markdown就是。</p>

<p>最后就是苦力活：修改文中的站内链接、上传的图片路径以及代码高亮语法等。</p>
]]></content>
  </entry>
  
</feed>
