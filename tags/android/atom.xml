<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Android | 乐者为王]]></title>
  <link href="http://codemany.com/tags/android/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-11-03T10:46:04+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何修改Android的hosts文件]]></title>
    <link href="http://codemany.com/blog/how-to-modify-hosts-in-android/"/>
    <updated>2017-02-16T11:52:56+08:00</updated>
    <id>http://codemany.com/blog/how-to-modify-hosts-in-android</id>
    <content type="html"><![CDATA[<p>由于「你懂的」的原因，某些时候我们需要修改Android的hosts文件。Android的hosts文件路径是/system/etc/hosts，在修改该文件前首先需要Android手机获取root权限。至于如何root你的手机，这里就不加详述，可以自行在网络上查找，很多也很简单。</p>

<p>本文将要阐述的是如何在命令行下通过adb程序访问root过的手机，把hosts拖到电脑上修改，然后再复制回手机来实现修改hosts的方法。</p>

<p>下面就开始具体的步骤：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb pull /system/etc/hosts hosts.mod
[100%] /system/etc/hosts
</code></pre></div>
<p>上面的命令是把手机上的hosts文件拖到电脑上，[100%]表明文件已经传输完成，可以修改hosts文件了。在修改完成后就使用以下命令上传到手机：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb push hosts.mod /system/etc/hosts
adb: error: failed to copy &#39;hosts.mod&#39; to &#39;/system/etc/hosts&#39;: Read-only file system
</code></pre></div>
<p>从回显的消息可以看到，文件系统是只读的，所以不能直接上传。</p>

<p>试试以下的命令看能不能成功？！</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb root  # 帮助文档说该命令可以让adbd守护进程获得root权限
C:\tools&gt;adb push hosts.mod /system/etc/hosts
adb: error: failed to copy &#39;hosts.mod&#39; to &#39;/system/etc/hosts&#39;: Read-only file system
</code></pre></div>
<p>还是不行，看来要重新挂载/system目录才可以。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb remount
remount failed: Operation not permitted
</code></pre></div>
<p>没有权限？这是必须祭起shell大法的节奏啊！</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb shell
* daemon not running. starting it now on port 5037 *
* daemon started successfully *
shell@maguro:/ $ ls -al /system/etc/hosts
-rw-r--r-- root     root           25 2013-08-14 07:00 hosts
</code></pre></div>
<p>从上面最后一行可以看出hosts这个文件只有它的拥有者能写入，对于其他人来说都是只读的。要想让其他人也能做修改，必须使用以下命令进行提权，再改变hosts文件的属性才行。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">shell@maguro:/ $ su
</code></pre></div>
<p>如果是第一次执行这个命令，手机会亮起，SuperSU应用会提示你是否同意权限的分配。这里当然是要同意的！接着你就可以看到终端下的提示符从$变成了#，@前的字符也由shell变成了root。然后我们就可以修改hosts文件的权限属性了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # chmod +666 /system/etc/hosts
Bad mode
root@maguro:/ # chmod 666 /system/etc/hosts
Unable to chmod /system/etc/hosts: Read-only file system
</code></pre></div>
<p>又是Read-only file system！输入以下命令看看/system目录的文件系统详情呢。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # mount | grep system
/dev/block/platform/omap/omap_hsmmc.0/by-name/system /system ext4 ro,seclabel,relatime...
</code></pre></div>
<p>看到ext4后面的ro了吗？它是read only的缩写，即只读的意思。这说明/system目录是只读的。接下来我们要把它改成可以读写。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # mount -o rw,remount /system
</code></pre></div>
<p>上面的-o用于指定加载文件系统时的选项。这些选项包括：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">remount 重新加载设备。通常用于改变设备的设置状态。
ro 以只读模式加载。
rw 以可读写模式加载。
</code></pre></div>
<p>再次查看，可以看到原来ro的位置已经变成rw了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # mount | grep system
/dev/block/platform/omap/omap_hsmmc.0/by-name/system /system ext4 rw,seclabel,relatime...
</code></pre></div>
<p>不过到这里我们还不能向手机拷贝hosts文件，因为hosts文件的权限属性还没被改过，如果强行上传的话，会得到如下的错误消息：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb push hosts.mod /system/etc/hosts
adb: error: failed to copy &#39;hosts.mod&#39; to &#39;/system/etc/hosts&#39;: Permission denied
</code></pre></div>
<p>运行以下命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # chmod 666 /system/etc/hosts
</code></pre></div>
<p>然后查看hosts文件的属性。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # ls -al /system/etc/hosts
-rw-rw-rw- root     root           25 2013-08-14 07:00 hosts
</code></pre></div>
<p>可以看到所有人都可以读写hosts文件了。</p>

<p>既然一切都准备就绪，那就再来试试上传修改后的hosts文件吧。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb push hosts.mod /system/etc/hosts
adb: error: failed to copy &#39;hosts.mod&#39; to &#39;/system/etc/hosts&#39;: Read-only file system
</code></pre></div>
<p>怎么回事，为什么还是拷贝失败呢？不是已经把文件系统改为可读写了吗？</p>

<p>并且在查找原因的过程中还发现一个奇怪的事情。在root模式下/system目录是可读写的，但在shell模式下/system却是只读的。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # mount | grep system
/dev/block/platform/omap/omap_hsmmc.0/by-name/system /system ext4 rw,seclabel,relatime...
root@maguro:/ # exit
shell@maguro:/ # mount | grep system
/dev/block/platform/omap/omap_hsmmc.0/by-name/system /system ext4 ro,seclabel,relatime...
</code></pre></div>
<p>而且在手机上的Terminal Emulator中把/system目录mount成可读写之后，在adb shell的root模式下查看/system的状态仍然显示为只读。</p>

<p>在网上找啊找啊找啊，都快要绝望了，终于找到可能之问题所在。就是这个帖子：<a href="http://android.stackexchange.com/questions/142271/mount-in-shell-as-user-or-root-with-different-output">mount in shell as user or root with different output</a>。有个回答提到mount namespace这样东西。然后才知道：</p>

<blockquote>
<p>A mount namespace is the set of filesystem mounts that are visible to a process.</p>
</blockquote>

<p>每个进程的挂载点对其它进程是不可见的。Terminal Emulator中mount后的挂载点属于该进程，而adb shell中shell模式和root模式的挂载点分别属于各自的进程。这就是前面root模式下修改/system目录为可读写后在shell模式下仍显示为只读的原因。</p>

<p>知道问题的原因了，那如何解决呢？</p>

<p>在SuperSu应用的设置中有个mount namespace separation的选项，如下图所示：</p>

<p><img src="/uploads/mount-namespace-separation.png" alt="mount-namespace-separation"></p>

<p>把勾选取消，然后mount的挂载点就是全局性的了，不再为mount它们的进程所独有。不过要记住的是，只有在重启手机后该修改才有效。</p>

<p>下面是取消mount namespace separation后在上传的结果：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\tools&gt;adb push hosts.mod /system/etc/hosts
[100%] /system/etc/hosts
</code></pre></div>
<p>可以看到[100%]的回显，说明文件已经上传完成。</p>

<p>查看hosts文件的属性：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # ls -al /system/etc/hosts
-rw-rw-rw- root     root       137679 2017-02-16 00:20 hosts
</code></pre></div>
<p>文件的大小已经由25变成137679，说明文件已经替换完成。</p>

<p>下面就是恢复手机到原先的状态：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root@maguro:/ # chmod 644 /system/etc/hosts
root@maguro:/ # ls -al /system/etc/hosts
-rw-r--r-- root     root       137679 2017-02-16 00:20 hosts
root@maguro:/ # mount -o ro,remount /system
</code></pre></div>
<p>至此，修改hosts文件的工作就算大功告成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[象棋残局大师开发实录（2）]]></title>
    <link href="http://codemany.com/blog/chess-mess-master-development-record-part2/"/>
    <updated>2017-01-17T18:21:40+08:00</updated>
    <id>http://codemany.com/blog/chess-mess-master-development-record-part2</id>
    <content type="html"><![CDATA[<p>界面的实现主要是绘制棋盘和棋子，有纯代码绘制和使用图片两种方式。因为担心图片缩放引起图片质量问题，以及害怕根据缩放计算棋子落点的麻烦，打算采取纯代码绘制方式。不过在编写了部分代码后发觉这不是个好主意。</p>

<p>纯代码绘制棋盘需要画纵横线、斜线、炮兵座线、文字“楚河汉界”以及中文数字两套坐标，部分线条需要加粗，河界区的竖线不需要画，文字绘制时是以baseline为Y坐标的。这些因素导致文字和棋子在视图中的坐标位置都需要经过细细地计算。如果再考虑让“楚河汉界”这几个字躺着显示，那就更是麻烦。即便这样，绘制完的棋盘背景也只是白色，素素的不是很好看。就这还是没有考虑绘制棋子的结果。当然，好处也是有的，棋子所在的交点坐标很容易计算得到（这个其实不算优点，只是我没深入思考的结果，图片的方式也很容易计算棋子的落点坐标），棋盘也不需要考虑缩放问题，总是适配当前运行的机器的。</p>

<p>既然纯代码绘制的方式问题多多且只有无需屏幕适配这个优势，那采用图片的方式就是必然。</p>

<p>图片方式的实现也有两种，一种是使用View或者SurfaceView显示图片；还有一种是把棋盘和棋子当作ImageView控件处理。使用Layout.addView(View)和Layout.deleteView(View)就可以很容易地放置和消除棋子。经过简单的比较我选用SurfaceView作为绘制的视图。SurfaceView的内容这里不做介绍，因为这不是我们要考虑的重点。以下是SurfaceView的代码骨架：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class GameView extends SurfaceView implements SurfaceHolder.Callback {
    private DrawThread drawThread;
    private SurfaceHolder surfaceHolder;

    public GameView(Context context, AttributeSet attrs) {
        super(context, attrs);

        surfaceHolder = getHolder();
        surfaceHolder.addCallback(this);

        // TODO: 加载棋盘棋子图片资源
    }

    // 自定义的绘制方法
    private void doDraw(Canvas canvas) {
        // TODO: 绘制棋盘和棋子
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            // TODO: 游戏交互
        }
        return super.onTouchEvent(event);
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        if (drawThread == null) {
            drawThread = new DrawThread();
            drawThread.start();
        }
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        if (drawThread != null) {
            drawThread.stopThread();
        }
    }

    private class DrawThread extends Thread {
        private boolean isRunning = false;

        public DrawThread() {
            isRunning = true;
        }

        public void stopThread() {
            isRunning = false;
            boolean retry = true;
            while (retry) {
                try {
                    this.join();    // 保证run方法执行完毕
                    retry = false;
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        @Override
        public void run() {
            while (isRunning) {
                Canvas canvas = null;
                try {
                    canvas = surfaceHolder.lockCanvas();
                    synchronized (surfaceHolder) {
                        if (canvas != null) {
                            doDraw(canvas);
                        }
                    }
                } finally {
                    if (canvas != null) {
                        surfaceHolder.unlockCanvasAndPost(canvas);
                    }
                }
            }
        }
    }
}
</code></pre></div>
<p>用图片在视图上绘制棋盘需要考虑不同屏幕尺寸的适配问题，官方推荐的做法是单图片多分辨率，即将不同分辨率的同个图片放在特定的资源目录下。这种做法的缺点是需要维护多套图片，且绘制的棋盘也不可能正好完全匹配屏幕。使用单分辨率图片的话，如果图片尺寸过小，那么在绘制时就必须放大，容易变得模糊；如果图片尺寸太大的话，又会导致资源太大进而引起应用安装包过大的问题。这里使用的是558 * 620像素的图片，既不是太大，又不是太小，恰到好处。其中，棋盘格子是57 * 57像素的正方形，河界的高度和棋盘格子的边长相等，所以两条边线的距离是57 * 8 = 456像素，底线距离是57 * 9 = 513像素。</p>

<p><img src="/uploads/marked-chess-board.png" alt="marked-chess-board"></p>

<p>棋子图片的原始大小是55 * 55像素。连同上面棋盘的那些值可以设置成以下的常量供以后使用：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class ChessBoard {
    public static final int RAW_IMAGE_WIDTH = 558;
    public static final int RAW_IMAGE_HEIGHT = 620;
    public static final int RAW_TILES_WIDTH = 456;
    public static final int RAW_TILES_HEIGHT = 513;
    public static final int RAW_TILE_SIZE = 57;
    public static final int RAW_CHESS_SIZE = 55;

</code></pre></div>
<p>因为使用的是单张图片，所以在绘制之前还需要知道屏幕的大小，以便在绘制时对图片做等比例的缩放，使图片在填满屏幕的前提下，最大程度地保证图片的缩放效果，确保图片不变形。缩放代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">// 计算屏幕的最佳缩放比例
private float calcBestScale() {
    DisplayMetrics dm = getResources().getDisplayMetrics();
    int screenWidth  = dm.widthPixels;
    int screenHeight = dm.heightPixels;

    float scaleX = (float)screenWidth / RAW_IMAGE_WIDTH;
    float scaleY = (float)screenHeight / RAW_IMAGE_HEIGHT;
    return Math.min(scaleX, scaleY);
}

private Bitmap resizeBitmap(Bitmap bitmap, float bestScale) {
    Matrix matrix = new Matrix();
    matrix.postScale(bestScale, bestScale);
    return Bitmap.createBitmap(bitmap, 0, 0,
            bitmap.getWidth(), bitmap.getHeight(), matrix, true);
}
</code></pre></div>
<p>在保证能得到最佳效果的缩放图片后，就可以加载棋盘和棋子的图片资源了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private void initResources() {
    board = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.board)), bestScale);

    chesses[0] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.black_jiang)), bestScale);
    chesses[1] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.black_shi)), bestScale);
    chesses[2] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.black_xiang)), bestScale);
    chesses[3] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.black_ma)), bestScale);
    chesses[4] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.black_ju)), bestScale);
    chesses[5] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.black_pao)), bestScale);
    chesses[6] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.black_zu)), bestScale);
    chesses[7] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.red_shuai)), bestScale);
    chesses[8] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.red_shi)), bestScale);
    chesses[9] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.red_xiang)), bestScale);
    chesses[10] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.red_ma)), bestScale);
    chesses[11] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.red_ju)), bestScale);
    chesses[12] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.red_pao)), bestScale);
    chesses[13] = resizeBitmap(BitmapFactory.decodeStream(
            getResources().openRawResource(+R.drawable.red_bing)), bestScale);
}
</code></pre></div>
<p>注意，加载图片资源要用openRawResource()配合decodeStream()才能得到原始大小的图片，如果使用decodeResource()的话，得到的图片大小则是<code>原始大小 * 手机密度 / 160</code>。至于R前面的+号则是因为图片在drawable目录下时Android Studio会提示警告，不想加的话就必须要把图片放到raw目录中。</p>

<p>有了棋盘和棋子的图片资源后，我们就可以绘制象棋界面了。当然，在这之前还要先确定表示棋局状态的数据结构，我们用一个10行9列的二维数组来描述。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class ChessBoard {
    /*
     * 无子(0)
     * 黑将(1) 黑士(2) 黑象(3)  黑马(4)  黑车(5)  黑砲(6)  黑卒(7)
     * 红帅(8) 红仕(9) 红相(10) 红馬(11) 红車(12) 红炮(13) 红兵(14)
     */
    private int[][] chessPoints = {
        /*   1 2 3 4 5 6 7 8 9   */
        {5, 4, 3, 2, 1, 2, 3, 4, 5},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 6, 0, 0, 0, 0, 0, 6, 0},
        {7, 0, 7, 0, 7, 0, 7, 0, 7},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        /*       楚河 汉界       */
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {14, 0, 14, 0, 14, 0, 14, 0, 14},
        {0, 13, 0, 0, 0, 0, 0, 13, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {12, 11, 10, 9, 8, 9, 10, 11, 12}
        /* 九 八 七 六 五 四 三 二 一 */
    };

    public int[][] getChessPoints() {
        return chessPoints;
    }

    public int getChess(int row, int col) {
        return chessPoints[row][col];
    }

    public boolean hasChess(int row, int col) {
        return chessPoints[row][col] != 0;
    }
</code></pre></div>
<p>接着，我们需要根据适配时图片缩放的比例计算各个棋子绘制时的偏移坐标（假设棋盘的偏移坐标是[0, 0]）。先看下图：</p>

<p><img src="/uploads/chess-piece-offset.png" alt="chess-piece-offset"></p>

<p>通过观察可以知道，两个棋子左边框之间的距离等于棋盘格子的边长。如果把左上角棋子相对棋盘图片边界偏移的变量分为称为chessBaseLeft和chessBaseTop的话，那么它们的值可以通过以下的公式计算得到：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">tileSize = ChessBoard.RAW_TILE_SIZE * bestScale;    // 棋盘格子缩放后的大小
chessBaseLeft = (ChessBoard.RAW_IMAGE_WIDTH - ChessBoard.RAW_TILES_WIDTH
        - ChessBoard.RAW_CHESS_SIZE) / 2 * bestScale;
chessBaseTop = (ChessBoard.RAW_IMAGE_HEIGHT - ChessBoard.RAW_TILES_HEIGHT
        - ChessBoard.RAW_CHESS_SIZE) / 2 * bestScale;
</code></pre></div>
<p>得到棋子相对棋盘的偏移坐标后，我们就可以开始真正的绘制棋盘和棋子了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">canvas.drawColor(Color.WHITE);

// 绘制棋盘
canvas.drawBitmap(board, 0, 0, paint);

// 根据points数组绘制棋子
for (int row = 0; row &lt; chessBoard.getChessPoints().length; row++) {
    for (int col = 0; col &lt; chessBoard.getChessPoints()[row].length; col++) {
        if (chessBoard.hasChess(row, col)) {
            float left = chessBaseLeft + col * tileSize;
            float top = chessBaseTop + row * tileSize;
            int index = chessBoard.getChess(row, col) - 1;
            canvas.drawBitmap(chesses[index], left, top, paint);
        }
    }
}
</code></pre></div>
<p>至此，象棋界面的绘制就算完成。以下是最终实现的界面截图：</p>

<p><img src="/uploads/cmm-rendering.png" alt="cmm-rendering"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[象棋残局大师开发实录（1）]]></title>
    <link href="http://codemany.com/blog/chess-mess-master-development-record-part1/"/>
    <updated>2017-01-01T21:43:06+08:00</updated>
    <id>http://codemany.com/blog/chess-mess-master-development-record-part1</id>
    <content type="html"><![CDATA[<p>小时候经常在街头看到有人摆象棋残局，红方无论赢棋还是和棋都算破解成功，否则就是失败。作为象棋低手，也曾尝试过好多次，但从来没有真正破解过哪个残局。有次甚至默记住某个残局的走法去破解，结果在解完所有圈套后还是在接下来的走棋中输掉。</p>

<p>一晃许多年过去了，象棋也很长时间没有再玩过。最近偶尔在网上接触到象棋残局，又再次把思绪给挑动起来。同时也了解到那些街头残局的最终结果通常都是和棋，并且由于残局往往会包含多个圈套，所以破解成功的可能性非常非常之低。因为在解套阶段，你必须步步走对才能把所有的圈套解除，否则只要有一步走错便是输。解完套之后，你仍然得小心翼翼地走棋，要是误走一着也很可能会输掉。正所谓：一着不慎，满盘皆输。</p>

<p>残局棋谱通常会有参考走法，按照这些走法逐步执行就可以破解成功。但目前我在网上碰到的有些残局的参考走法明显有错误。比如，红方在某个关键步骤时有不遵循参考走法的走法会让红方对黑方形成必杀，又或者黑方在某一步时换个走法就会使和棋的结局变成黑方必胜。当然，这些错误或正确的走法也可能是我想当然，因此我也不能确定我的想法是否真的正确。为解决这个问题，我决定开发一款结合人工智能的象棋残局软件。毕竟现在的人工智已经非常强大了，上半年的AlphoGo都已经把围棋这个难题给攻克，所以用人工智能来探索象棋残局还是非常合适的。</p>

<p>象棋游戏属于完全信息博弈游戏，所以它至少应具备如下几个部分：</p>

<ol>
<li>某种在机器中表示棋局的方法，能够让程序知道博弈的状态。</li>
<li>产生合法走法的规则，以使博弈公正地进行，并可判断棋手是否乱走。</li>
<li>从所有合法的走法中选择最佳走法的技术。</li>
<li>一种评估局面优劣的方法，用以同上面的技术配合作出智能的选择。</li>
<li>用户界面。有了它，程序才可以用。</li>
</ol>

<p>但我要开发的程序主要是用于研究象棋残局的，所以它还需要一些特殊的辅助功能。在最理想的情况下，残局的人机博弈走法应该和参考走法相同。但有时候我们会发现黑方会走出不在参考走法上的步骤。因为参考走法是经过多年的演变而来，通常是最优的，所以我们需要能对黑方的走棋进行纠错。当然，最好的做法是提高博弈算法的能力，但智能的改进不是一蹴而就的，纠错功能的提供只是作为这种无奈的补充。假如黑方的走法确实比参考走法更优，并且我们发现黑方这样走以后红方似乎找不到可以赢棋或者和棋的走法，这时就需要机器帮助我们计算出最佳走法。此外，轮到红方走棋时可能会发现有貌似比参考走法上更优的走法需要验证，这时我们需要在验证失败后能够回退到不同走法的分叉点上。</p>

<p>带有这些特殊需求的游戏界面线框图如下所示：</p>

<p><img src="/uploads/cmm-wireframe.png" alt="cmm-wireframe"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Application对象里存储数据的陷阱]]></title>
    <link href="http://codemany.com/blog/trap-for-storing-data-in-the-application-object/"/>
    <updated>2015-10-27T20:57:41+08:00</updated>
    <id>http://codemany.com/blog/trap-for-storing-data-in-the-application-object</id>
    <content type="html"><![CDATA[<p>看到<a href="http://www.developerphil.com/dont-store-data-in-the-application-object/">Don&#39;t Store Data in the Application Object</a>讲，在Application对象中存储共享数据会引起NullPointerException。顿时心里就咯噔了一下，用了四分之三秒，想起自己有个业余项目就干了这样的事。赶紧地测试看看。</p>

<p>打开应用，从MainActivity进入TxtViewerActivity界面（这里MainActivity主要是读取目录数据，然后保存在继承自Application的MainApp中，供TxtViewerActivity调用）。按手机Home键退出应用，这时你按菜单键可以看到该应用的缩图。然后在Eclipse中打开Window -&gt; Show View -&gt; Other -&gt; Android -&gt; Devices视图，双击窗口内的设备，然后点击设备下对应的进程，点击右上方红色的“Stop Process”图标。</p>

<p><img src="/uploads/android-devices.png" alt="android-devices"></p>

<p>重新按菜单键打开应用，然后……然后果然在LogCat中看到了有NullPointerException的大段红色警告文字。</p>

<h3 id="为什么会crash的？">为什么会Crash的？</h3>

<p>根本原因在于：当应用被kill掉后，通过菜单键重新打开时，应用不会开始重新启动。Android系统会新建一个Application对象，然后启动上次离开时的TxtViewerActivity以造成这个应用从来没有被kill掉的假象。因为没有经过MainActivity的数据读取，所以在TxtViewerActivity中读取数据当然要抛出异常了。</p>

<h3 id="有没有替代方法呢？">有没有替代方法呢？</h3>

<ul>
<li>直接将数据通过Intent传递给TxtViewerActivity？当然也会碰到上述同样的问题。</li>
<li>使用SharedPreferences？可惜只能存储boolean、int、long、float和String五种数据类型，不支持List的存储；</li>
<li>使用持久化存储？也不支持List的存储，而且太笨重了；</li>
<li>使用Singleton对象保存共享数据，然后通过Intent传递呢？这个想法不错，还可以将读取assets资源等操作移到该对象中，做到单一职责原则，改善设计。不过这样一来Singleton对象会对MainActivity的context有长期引用，容易造成内存泄露。如果不把读取操作放进去……那根本就不可能，你能让一个追求完美的程序猿忍受糟糕的代码设计吗！</li>
</ul>

<p>幸好早就有人总结出来经验了：使用Application的context代替Activity的context。</p>

<p>创建Singleton对象，在Application对该对象保持引用，把原来存储在Application中共享的数据全部移到Singleton对象中，将Activity中读取assets资源等操作也放入该对象，Activity中原来对Application对象的访问改成通过Application对象对Singleton对象的访问。</p>

<p>这样修改后，不光解决了应用的崩溃，还预防了内存泄漏，更改进代码的设计。</p>

<p>代码下载：<a href="https://github.com/dohkoos/txtReader">https://github.com/dohkoos/txtReader</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TabActivity is deprecated]]></title>
    <link href="http://codemany.com/blog/tabactivity-is-deprecated/"/>
    <updated>2014-12-05T19:29:10+08:00</updated>
    <id>http://codemany.com/blog/tabactivity-is-deprecated</id>
    <content type="html"><![CDATA[<p>最近在整理<a href="http://codemany.com/blog/summary-of-android-tab-navigation/">Android Tab导航总结</a>的代码时发现
TabActivity在API 13中被标记为过期了，所以就去寻找它的替换类，能尽量满足最小修改的要求。发现可以使用FragmentActivity来替代，Fragment组件作为标签页添加。</p>

<p>Fragment是Android 3.0引入的一个新概念，主要是为了适应各种不同的屏幕大小，它非常类似于Activity，可以像Activity一样包含布局，但是不能单独存在，只能存在于Activity中。下图是Fragment在不同屏幕上的显示以及Fragment与所在Activity的关系：</p>

<p><img src="/uploads/android-fragments.png" alt="android-fragments"></p>

<p>重构前的布局：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">MainActivity extends TabActivity
    TabHost - tabhost
        LinearLayout
            TabWidget - tabs
            FrameLayout - tabcontent
                TabSpec (Activity)
                ...
                TabSpec (Activity)
</code></pre></div>
<p>重构后的布局：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">MainActivity extends FragmentActivity
    TabHost - tabhost
        LinearLayout
            TabWidget - tabs
            FrameLayout - tabcontent
                TabSpec (Fragment)
                ...
                TabSpec (Fragment)
</code></pre></div>
<p>把TabLeftActivity和TabRightActivity分别改成LeftFragment和RightFragment，并且要把其中的onCreate()方法改成onCreateView()方法：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class LeftFragment extends Fragment {
    private View rootView;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        rootView = inflater.inflate(R.layout.tab_left, container, false);

        // do something
        // 不能直接使用findViewById()方法，必须加上rootView前缀
        // 如果要引用当前绑定的Activity实例，使用getActivity()方法

        return rootView;
    }
</code></pre></div>
<p>然后在main.xml中的FrameLayout里添加两个Fragment组件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;fragment android:name=&quot;com.example.fragments.LeftFragment&quot;
    android:id=&quot;@+id/fragment_left&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot; /&gt;

&lt;fragment android:name=&quot;com.example.fragments.RightFragment&quot;
    android:id=&quot;@+id/fragment_right&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot; /&gt;
</code></pre></div>
<p>把MainActivity改成从FragmentActivity继承。这里不能像TabActivity一样直接用getTabHost()，需要改成如下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">TabHost tabHost = (TabHost)findViewById(android.R.id.tabhost);
tabHost.setup();
</code></pre></div>
<p>到这边就已经完成了，其它tabHost.addTab的使用方式一模一样。</p>
]]></content>
  </entry>
  
</feed>
