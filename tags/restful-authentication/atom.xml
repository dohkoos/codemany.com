<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: restful_authentication | 乐者为王]]></title>
  <link href="http://codemany.com/tags/restful-authentication/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-01-07T20:41:20+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[restful_authentication实现用email登录]]></title>
    <link href="http://codemany.com/blog/restful-authentication-authenticate-with-email/"/>
    <updated>2011-03-07T20:02:36+08:00</updated>
    <id>http://codemany.com/blog/restful-authentication-authenticate-with-email</id>
    <content type="html"><![CDATA[<p>如果要使用用户名和email并行的登录方式，那么只要在models/user.rb中添加一行代码就可以了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def self.authenticate(login, password)
  return nil if login.blank? || password.blank?
  u = find_by_login(login.downcase)  # need to get the salt
  u ||= find_by_email(login.downcase)  # 有了这行代码就可以使用email登录了
  u &amp;&amp; u.authenticated?(password) ? u : nil
end
</code></pre></div>
<p>假如要使只能用email登录，就要先移除models/user.rb中的下列代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">validates_presence_of :login
validates_length_of :login
validates_uniqueness_of :login
</code></pre></div>
<p>然后修改self.authenticate方法为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def self.authenticate(email, password)
  return nil if email.blank? || password.blank?
  u = find_by_email(email.downcase)  # need to get the salt
  u &amp;&amp; u.authenticated?(password) ? u : nil
end
</code></pre></div>
<p>接着将注册页面views/users/new.html.erb中的login块移除，还有就是要将相关邮件模板中的@user.login改为@user.email。</p>

<p>经过这些修改后就实现了只能使用email登录的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uninitialized constant Typus::Authentication::ByPassword]]></title>
    <link href="http://codemany.com/blog/uninitialized-constant-typus-authentication-bypassword/"/>
    <updated>2011-03-06T14:07:03+08:00</updated>
    <id>http://codemany.com/blog/uninitialized-constant-typus-authentication-bypassword</id>
    <content type="html"><![CDATA[<p>使用的Rails版本是2.3.5，所以在安装typus的时候需要加上-r 2-3-stable。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/fesplugas/typus.git -r 2-3-stable
</code></pre></div>
<p>在安装完后执行script/generate typus出现了下面的错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">uninitialized constant Typus::Authentication::ByPassword
</code></pre></div>
<p>在网上找到的答案是因为和restful_authentication中Authentication模块有冲突，可以将app/models/user.rb中的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">include Authentication
include Authentication::ByPassword
include Authentication::ByCookieToken
</code></pre></div>
<p>改成</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">include ::Authentication
include ::Authentication::ByPassword
include ::Authentication::ByCookieToken
</code></pre></div>
<p>再次执行generator时提示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">undefined method &#39;login_regex&#39; for Typus::Authentication:Module
</code></pre></div>
<p>经过再三查找，原来是user.rb文件中还有别的调用Authentication的地方，全部加上::符号，问题解决了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造todolist应用]]></title>
    <link href="http://codemany.com/blog/using-rails-23-to-create-a-todolist-application/"/>
    <updated>2010-10-04T12:27:38+08:00</updated>
    <id>http://codemany.com/blog/using-rails-23-to-create-a-todolist-application</id>
    <content type="html"><![CDATA[<p>首先生成项目骨架：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails todolist
cd todolist
script/generate scaffold todo title:string description:text done:boolean due_date:datetime
rake db:migrate
</code></pre></div>
<p><img src="/uploads/user-todo-association.png" title="user-todo-association" ></p>

<p>安装认证和授权插件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/technoweenie/restful-authentication.git restful_authentication
script/generate authenticated user sessions

script/plugin install git://github.com/greenisus/forgot_password.git
script/generate forgot_password password user
</code></pre></div>
<p>然后将include AuthenticatedSystem移到ApplicationController中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class ApplicationController &lt; ActionController::Base
  include AuthenticatedSystem
</code></pre></div>
<p>添加Todo和User的关联：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Todo &lt; ActiveRecord::Base
  belongs_to :user

class User &lt; ActiveRecord::Base
  has_many :todos
</code></pre></div>
<p>修改TodosController，将Todo和User绑定：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class TodosController &lt; ApplicationController
  before_filter :login_required

  def index
    @todos = current_user.todos

  def show
    @todo = current_user.todos.find(params[:id])

  def new
    @todo = Todo.new

  def edit
    @todo = current_user.todos.find(params[:id])

  def create
    @todo = Todo.new(params[:todo])
    @todo.user = current_user

  def update
    @todo = current_user.todos.find(params[:id])

  def destroy
    @todo = current_user.todos.find(params[:id])
</code></pre></div>
<p>创建一个应用的首页：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/generate controller home index
</code></pre></div>
<p>为了可以访问到应用首页，需要删除public/index.html文件，并且在routes.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">map.root :controller =&gt; &#39;home&#39;
</code></pre></div>
<p>将app/views/layouts下的todos.html.erb改名为application.html.erb，然后添加下面的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% if logged_in? -%&gt;
  &lt;div id=&quot;user-bar-greeting&quot;&gt;
    Logged in as &lt;%= link_to_current_user :content_method =&gt; :login %&gt;
  &lt;/div&gt;
  &lt;div id=&quot;user-bar-action&quot;&gt;
    (&lt;%= link_to &quot;Log out&quot;, logout_path, { :title =&gt; &quot;Log out&quot; } %&gt;)
  &lt;/div&gt;
&lt;% else -%&gt;
  &lt;div id=&quot;user-bar-action&quot;&gt;
    &lt;%= link_to &quot;Log in&quot;, login_path, { :title =&gt; &quot;Log in&quot; } %&gt; /
     &lt;%= link_to &quot;Sign up&quot;, signup_path, { :title =&gt; &quot;Create an account&quot; } %&gt;
  &lt;/div&gt;
&lt;% end -%&gt;
</code></pre></div>
<p>Todo模型的description字段是text类型，在页面上用textarea表示简单了一点，将它改成使用TinyMCE编辑器。可以使用<a href="https://github.com/trevorrowe/tinymce_hammer">tinymce_hammer</a>插件来集成。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/trevorrowe/tinymce_hammer.git
</code></pre></div>
<p>执行以下命令后，将会安装TinyMCE到public/javascript/tiny_mce目录：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/generate tinymce_installation
</code></pre></div>
<p>在layout下的模板中添加下面这条语句：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= init_tinymce_hammer_if_required %&gt;
</code></pre></div>
<p>将app/views/todos下new.html.erb和edit.html.erb中的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= f.text_area :description %&gt;
</code></pre></div>
<p>修改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= f.tinymce :description, :rows =&gt; 10, :cols =&gt; 40 %&gt;
</code></pre></div>
<p>去除app/views/todos/index.html.erb中description字段的h方法：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;td&gt;&lt;%= todo.description %&gt;&lt;/td&gt;&lt;br /&gt;
</code></pre></div>
<p>还有就是删除某条Todo后记录就彻底地没了，不能恢复，需要给它加上一剂后悔药，使之可以重新被捞出，<a href="https://github.com/technoweenie/acts_as_paranoid">acts_as_paranoid</a>插件可以做到这点。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/technoweenie/acts_as_paranoid.git
script/generate migration add_deleted_at_to_todos deleted_at:datetime
rake db:migrate
</code></pre></div>
<p>添加acts_as_paranoid到模型中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Todo &lt; ActiveRecord::Base
  acts_as_paranoid
</code></pre></div>
<p>现在，调用这个模型的destroy方法将不会真正地删除记录，只会将记录从视图上移除，在deleted_at里记录删除的时间。<del>当然，你可以在find中使用with_deleted或only_deleted参数得到被隐藏的记录。</del>在Rails 3中在find中使用参数会报ArgumentError，显示如下错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Unknown key: only_deleted
</code></pre></div>
<p>解决办法是使用以下格式的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">current_user.todos.only_deleted.find(:all)
</code></pre></div>
<p>至此，一个简单的todolist就算完成了。</p>

<p>代码下载：<a href="https://github.com/dohkoos/todolist">https://github.com/dohkoos/todolist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账应用（3）]]></title>
    <link href="http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part3/"/>
    <updated>2009-11-15T16:21:33+08:00</updated>
    <id>http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part3</id>
    <content type="html"><![CDATA[<p>这次要给应用加上一个认证系统（注册、激活、登录、登出）。当用户输入注册信息时，必须输入有效的邮箱地址，注册成功后，用户并不能立即登录系统，而是要登录注册时输入的邮箱，通过该邮箱内的激活邮件来激活账户。通过这种方式可以防止用户的恶意注册。</p>

<p><a href="https://github.com/technoweenie/restful-authentication">restful_authentication</a>是一个支持Rails 2.0的认证系统插件，它为你生成REST风格的认证系统模板，除了提供最基本的用户注册登录登出功能外，还有一个可选的邮件激活功能。只要一个命令，它就为你生成了User模型、管理注册和登录的控制器、相应的视图页面、mailer等等。</p>

<p>安装插件和生成框架代码</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/technoweenie/restful-authentication.git restful_authentication
script/generate authenticated user sessions --include-activation
rake db:migrate
</code></pre></div>
<p>--include-activation选项决定是否生成向新注册用户发送激活码邮件的代码。</p>

<p>如果你想你的URL看起来更符合惯例一些，那么可以在config/routes.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">map.signup &#39;/signup&#39;, :controller =&gt; &#39;users&#39;, :action =&gt; &#39;new&#39;
map.login &#39;/login&#39;, :controller =&gt; &#39;sessions&#39;, :action =&gt; &#39;new&#39;
map.logout &#39;/logout&#39;, :controller =&gt; &#39;sessions&#39;, :action =&gt; &#39;destroy&#39;
</code></pre></div>
<p>因为使用了--include-activation选项，所以还要在config/routes.rb中增加以下映射：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">map.activate &#39;/activate/:activation_code&#39;,
             :controller =&gt; &#39;users&#39;, :action =&gt; &#39;activate&#39;, :activation_code =&gt; nil
</code></pre></div>
<p>最后，还需要添加一个observer到config/environment.rb的Rails::Initializer块中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">config.active_record.observers = :user_observer
</code></pre></div>
<p>设置ActionMailer，在config/environments/development.rb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Don&#39;t care if the mailer can&#39;t send
config.action_mailer.raise_delivery_errors = true
config.action_mailer.perform_deliveries = true
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :address =&gt; &quot;smtp.example.com&quot;,
  :port =&gt; 25,
  :domain =&gt; &quot;example.com&quot;,
  :authentication =&gt; :login,
  :user_name =&gt; &quot;yourname@example.com&quot;,
  :password =&gt; &quot;yourpassword&quot;
}
config.action_mailer.default_charset = &quot;utf-8&quot;

HOST = &quot;localhost:3000&quot;
ADMINEMAIL = &quot;yourname@example.com&quot;
</code></pre></div>
<p>打开app/models/user_mailer.rb，修改</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@body[:url]  = &quot;http://YOURSITE/activate/#{user.activation_code}&quot;
@body[:url]  = &quot;http://YOURSITE/&quot;
@subject     = &quot;[YOURSITE] &quot;
@from        = &quot;ADMINEMAIL&quot;
</code></pre></div>
<p>为以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@body[:url]  = &quot;http://#{HOST}/activate/#{user.activation_code}&quot;
@body[:url]  = &quot;http://#{HOST}/&quot;
@subject     = &quot;[#{HOST}] &quot;
@from        = &quot;#{ADMINEMAIL}&quot;
</code></pre></div>
<p>如果出现以下错误信息，那么可能是smtp_settings中的domain没有填写：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Net::SMTPSyntaxError (500 Error: bad syntax):
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:679:in &#39;check_response&#39;
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:652:in &#39;getok&#39;
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:622:in &#39;helo&#39;
</code></pre></div>
<p>user_mailer.rb中的ADMINEMAIL必须是一个有效的邮件账号，否则会出现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Net::SMTPFatalError (550 Invalid User):
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:679:in &#39;check_response&#39;
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:652:in &#39;getok&#39;
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:630:in &#39;mailfrom&#39;
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/qianbao">https://github.com/dohkoos/qianbao</a></p>
]]></content>
  </entry>
  
</feed>
