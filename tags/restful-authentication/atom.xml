<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: restful_authentication | 乐者为王]]></title>
  <link href="http://codemany.com/tags/restful-authentication/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-10-18T12:41:35+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[restful_authentication实现用email登录]]></title>
    <link href="http://codemany.com/blog/2011/03/07/restful-authentication-authenticate-with-email/"/>
    <updated>2011-03-07T20:02:36+08:00</updated>
    <id>http://codemany.com/blog/2011/03/07/restful-authentication-authenticate-with-email</id>
    <content type="html"><![CDATA[<p>如果要使用用户名和email并行的登录方式，那么只要在models/user.rb中添加一行代码就可以了（粗体为添加部分）：</p>

<p><code>
def self.authenticate(login, password)
  return nil if login.blank? || password.blank?
  u = find_by_login(login.downcase)  # need to get the salt
  u ||= find_by_email(login.downcase)
  u &amp;&amp; u.authenticated?(password) ? u : nil
end
</code></p>

<p>假如要使只能用email登录，就要先移除models/user.rb中的下列代码：</p>

<p><code>
validates_presence_of :login
validates_length_of :login
validates_uniqueness_of :login
</code></p>

<p>然后修改self.authenticate方法为：</p>

<p><code>
def self.authenticate(email, password)
  return nil if email.blank? || password.blank?
  u = find_by_email(email.downcase)  # need to get the salt
  u &amp;&amp; u.authenticated?(password) ? u : nil
end
</code></p>

<p>接着将注册页面views/users/new.html.erb中的login块移除，还有就是要将忘记密码邮件中的@user.login改为@user.email。</p>

<p>经过这些修改后就实现只能使用email登录了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造todolist应用]]></title>
    <link href="http://codemany.com/blog/2010/10/04/using-rails-23-to-create-a-todolist-application/"/>
    <updated>2010-10-04T12:27:38+08:00</updated>
    <id>http://codemany.com/blog/2010/10/04/using-rails-23-to-create-a-todolist-application</id>
    <content type="html"><![CDATA[<p>首先生成项目骨架：</p>

<p><code>
rails todolist
cd todolist
script/generate scaffold todo title:string description:text done:boolean due_date:datetime
rake db:migrate
</code></p>

<p><img src="/uploads/user-todo-association.png" title="user-todo-association" ></p>

<p>安装认证和授权插件：</p>

<p>```
script/plugin install git://github.com/technoweenie/restful-authentication.git
script/generate authenticated user sessions</p>

<p>script/plugin install git://github.com/greenisus/forgot_password.git
script/generate forgot_password password user
```</p>

<p>然后将include AuthenticatedSystem移到ApplicationController中：</p>

<p><code>
class ApplicationController &lt; ActionController::Base
  include AuthenticatedSystem
</code></p>

<p>添加Todo和User的关联：</p>

<p>```
class Todo &lt; ActiveRecord::Base
  belongs_to :user</p>

<p>class User &lt; ActiveRecord::Base
  has_many :todos
```</p>

<p>修改TodosController，将Todo和User绑定：</p>

<p>```
class TodosController &lt; ApplicationController
  before_filter :login_required</p>

<p>  def index</p>

<pre><code>@todos = current_user.todos
</code></pre>

<p>  def show</p>

<pre><code>@todo = current_user.todos.find(params[:id])
</code></pre>

<p>  def new</p>

<pre><code>@todo = Todo.new
</code></pre>

<p>  def edit</p>

<pre><code>@todo = current_user.todos.find(params[:id])
</code></pre>

<p>  def create</p>

<pre><code>@todo = Todo.new(params[:todo])
@todo.user = current_user
</code></pre>

<p>  def update</p>

<pre><code>@todo = current_user.todos.find(params[:id])
</code></pre>

<p>  def destroy</p>

<pre><code>@todo = current_user.todos.find(params[:id])
</code></pre>

<p>```</p>

<p>创建一个应用的首页：</p>

<p><code>
script/generate controller home index
</code></p>

<p>为了可以访问到应用首页，需要删除public/index.html文件，并且在routes.rb中添加：</p>

<p><code>
map.root :controller =&gt; 'home'
</code></p>

<p>将app/views/layouts下的todos.html.erb改名为application.html.erb，然后添加下面的代码：</p>

<p>```
&lt;% if logged_in? -%>
  <div id="user-bar-greeting"></p>

<pre><code>Logged in as &lt;%= link_to_current_user :content_method =&gt; :login %&gt;
</code></pre>

<p>  </div>
  <div id="user-bar-action"></p>

<pre><code>(&lt;%= link_to "Log out", logout_path, { :title =&gt; "Log out" } %&gt;)
</code></pre>

<p>  </div>
&lt;% else -%>
  <div id="user-bar-action"></p>

<pre><code>&lt;%= link_to "Log in", login_path, { :title =&gt; "Log in" } %&gt; /
 &lt;%= link_to "Sign up", signup_path, { :title =&gt; "Create an account" } %&gt;
</code></pre>

<p>  </div>
&lt;% end -%>
```</p>

<p>Todo模型的description字段是text类型，在页面上用textarea表示简单了一点，将它改成使用TinyMCE编辑器。可以使用<a href="https://github.com/trevorrowe/tinymce_hammer">tinymce_hammer</a>插件来集成。</p>

<p><code>
script/plugin install git://github.com/trevorrowe/tinymce_hammer.git
</code></p>

<p>执行以下命令后，将会安装TinyMCE到public/javascript/tiny_mce目录：</p>

<p><code>
script/generate tinymce_installation
</code></p>

<p>在layout下的模板中添加下面这条语句：</p>

<p><code>
&lt;%= init_tinymce_hammer_if_required %&gt;
</code></p>

<p>将app/views/todos下new.html.erb和edit.html.erb中的</p>

<p><code>
&lt;%= f.text_area :description %&gt;
</code></p>

<p>修改为</p>

<p><code>
&lt;%= f.tinymce :description, :rows =&gt; 10, :cols =&gt; 40 %&gt;
</code></p>

<p>去除app/views/todos/index.html.erb中description字段的h方法：</p>

<p><code>
&lt;td&gt;&lt;%= todo.description %&gt;&lt;/td&gt;&lt;br /&gt;
</code></p>

<p>还有就是删除某条Todo后记录就彻底地没了，不能恢复，需要给它加上一剂后悔药，使之可以重新被捞出，<a href="https://github.com/technoweenie/acts_as_paranoid">acts_as_paranoid</a>插件可以做到这点。</p>

<p><code>
script/plugin install git://github.com/technoweenie/acts_as_paranoid.git
script/generate migration add_deleted_at_to_todos deleted_at:datetime
rake db:migrate
</code></p>

<p>添加acts_as_paranoid到模型中：</p>

<p><code>
class Todo &lt; ActiveRecord::Base
  acts_as_paranoid
</code></p>

<p>现在，调用这个模型的destroy方法将不会真正地删除记录，只会将记录从视图上移除，在deleted_at里记录删除的时间。<del>当然，你可以在find中使用with_deleted或only_deleted参数得到被隐藏的记录。</del>在Rails 3中在find中使用参数会报ArgumentError异常，显示如下错误：</p>

<p><code>
Unknown key: only_deleted
</code></p>

<p>解决办法是使用以下格式的代码：</p>

<p><code>
current_user.todos.only_deleted.find(:all)
</code></p>

<p>至此，一个简单的todolist就算完成了。</p>

<p>代码下载：<a href="https://github.com/dohkoos/todolist">https://github.com/dohkoos/todolist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账软件（3）]]></title>
    <link href="http://codemany.com/blog/2009/11/15/using-rails-23-to-create-a-simple-accounting-app-part3/"/>
    <updated>2009-11-15T16:21:33+08:00</updated>
    <id>http://codemany.com/blog/2009/11/15/using-rails-23-to-create-a-simple-accounting-app-part3</id>
    <content type="html"><![CDATA[<p>这次要给应用加上一个认证系统（注册、激活、登录、登出）。当用户输入注册信息时，必须输入有效的邮箱地址，注册成功后，用户并不能立即登录系统，而是要登录注册时输入的邮箱，通过该邮箱内的激活邮件来激活账户。通过这种方式可以防止用户的恶意注册。</p>

<p><a href="https://github.com/technoweenie/restful-authentication">restful_authentication</a>是一个支持Rails 2.0的认证系统插件，它为你生成REST风格的认证系统模板，除了提供最基本的用户注册登录登出功能外，还有一个可选的邮件激活功能。只要一个命令，它就为你生成了User模型、管理注册和登录的控制器、相应的视图页面、mailer等等。</p>

<p>安装插件和生成框架代码</p>

<p><code>
script/plugin install http://github.com/technoweenie/restful-authentication.git restful_authentication
script/generate authenticated user sessions --include-activation
rake db:migrate
</code></p>

<p><code>--include-activation</code>参数决定是否生成向新注册用户发送激活码邮件的代码。</p>

<p>如果你想你的URL看起来更符合惯例一些，那么可以在config/routes.rb中添加：</p>

<p><code>
map.signup '/signup', :controller =&gt; 'users', :action =&gt; 'new'
map.login '/login', :controller =&gt; 'sessions', :action =&gt; 'new'
map.logout '/logout', :controller =&gt; 'sessions', :action =&gt; 'destroy'
</code></p>

<p>因为使用了<code>--include-activation</code>参数，所以还要在config/routes.rb中增加以下映射：</p>

<p>```
map.activate '/activate/:activation_code',</p>

<pre><code>         :controller =&gt; 'users', :action =&gt; 'activate', :activation_code =&gt; nil
</code></pre>

<p>```</p>

<p>最后，还需要添加一个observer到config/environment.rb的Rails::Initializer块中：</p>

<p><code>
config.active_record.observers = :user_observer
</code></p>

<p>设置ActionMailer，在config/environments/development.rb中添加：</p>

<p>```</p>

<h1>Don't care if the mailer can't send</h1>

<p>config.action_mailer.raise_delivery_errors = true
config.action_mailer.perform_deliveries = true
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :address => "smtp.example.com",
  :port => 25,
  :domain => "example.com",
  :authentication => :login,
  :user_name => "<a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#x79;&#x6f;&#x75;&#x72;&#110;&#x61;&#x6d;&#x65;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#109;">&#x79;&#111;&#x75;&#114;&#x6e;&#x61;&#109;&#x65;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#x6d;</a>",
  :password => "yourpassword"
}
config.action_mailer.default_charset = "utf-8"</p>

<p>HOST = "localhost:3000"
ADMINEMAIL = "<a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x79;&#x6f;&#117;&#x72;&#110;&#x61;&#x6d;&#101;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#x79;&#x6f;&#x75;&#x72;&#110;&#97;&#109;&#101;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a>"
```</p>

<p>打开app/models/user_mailer.rb，修改</p>

<p><code>
@body[:url]  = "http://YOURSITE/activate/#{user.activation_code}"
@body[:url]  = "http://YOURSITE/"
@subject     = "[YOURSITE] "
@from        = "ADMINEMAIL"
</code></p>

<p>为以下代码：</p>

<p><code>
@body[:url]  = "http://#{HOST}/activate/#{user.activation_code}"
@body[:url]  = "http://#{HOST}/"
@subject     = "[#{HOST}] "
@from        = "#{ADMINEMAIL}"
</code></p>

<p>如果出现以下错误信息，那么可能是smtp_settings中的domain没有填写：</p>

<p><code>
Net::SMTPSyntaxError (500 Error: bad syntax):
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:679:in 'check_response'
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:652:in 'getok'
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:622:in 'helo'
</code></p>

<p>user_mailer.rb中的ADMINEMAIL必须是一个有效的邮件账号，否则会出现：</p>

<p><code>
Net::SMTPFatalError (550 Invalid User):
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:679:in 'check_response'
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:652:in 'getok'
  RAILS_HOME/lib/ruby/1.8/net/smtp.rb:630:in 'mailfrom'
</code></p>
]]></content>
  </entry>
  
</feed>
