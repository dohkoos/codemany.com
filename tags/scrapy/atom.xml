<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Scrapy | 乐者为王]]></title>
  <link href="http://codemany.com/tags/scrapy/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-12-04T10:40:09+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（5）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part5/"/>
    <updated>2017-11-18T21:55:30+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part5</id>
    <content type="html"><![CDATA[<p>今天的任务是重构TxtPipeline。</p>

<p>先看下TxtPipeline中负责写文件的代码片段：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">f = open(filename, &#39;w&#39;)
f.write(title)
f.write(content)
f.close()
</code></pre></div>
<p>我们经常会看到这样的代码，但它存在严重的问题，你能把它找出来吗？</p>

<p>首先，open函数打开文件，并返回文件句柄，该句柄是由操作系统分配的。接着就是调用write方法写文件。最后是调用close方法关闭文件。文件使用完毕后必须关闭，因为文件句柄会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的。</p>

<p>由于文件读写时都有可能产生IOError，一旦出错，后面的close方法就不会被调用。所以，为确保无论是否出错都能正常地关闭文件和释放文件句柄，我们需要使用如下方法来实现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">try:
  f = open(filename, &#39;w&#39;)
  f.write(title)
  f.write(content)
finally:
  if f:
    f.close()
</code></pre></div>
<p>但每次都这么写实在太繁琐。其实，我们可以使用with语句来帮我们自动管理文件资源：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">with open(filename, &#39;w&#39;) as f:
  f.write(title)
  f.write(content)
</code></pre></div>
<p>这和前面的try-finally是一样的，但是代码更加简洁，而且不必调用close方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（4）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part4/"/>
    <updated>2017-11-11T14:17:36+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part4</id>
    <content type="html"><![CDATA[<p>在<a href="/blog/crawl-novel-with-scrapy-part1/">使用Scrapy爬取小说（1）</a>中，我们使用range(1, 310)来确定章节链接的范围，这很不好。我们编程的时候应该要尽量注意减少代码中的硬编码和魔数，提高代码的可移植性。如果小说章节的链接不是这种连续的数字，或者章节的数量是在逐步增加的，那么这段代码就是无效的，或者会慢慢变得无效。</p>

<p>如何才能把这段代码写得更具可移植性呢？</p>

<p><img src="/uploads/novel-chapter-urls.png" alt="novel-chapter-urls"></p>

<p>我们不必关心章节链接的格式，我们只要知道它是个链接，一定是以<code>&lt;a href=&quot;url&quot;&gt;text&lt;/a&gt;</code>这种形式呈现（如上图所示）。我们也不必关心章节数量是否变化，只要把所有这种形式的链接抓取下来即可。与此对应的XPath表达式是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">//center/table[@bordercolorlight]//a/@href
</code></pre></div>
<p>因为页面文档中可能有多个表格，所以要在table后面添加@bordercolorlight属性来指定我们要查找的那个。</p>

<p>那么在Scrapy中如何实现这样的能力呢？以下是具体的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def parse(self, response):
  links = response.xpath(&#39;//center/table[@bordercolorlight]//a/@href&#39;).extract()
  for link in links:
    next = response.urljoin(link)
    yield scrapy.Request(next, callback=self.parse_chapter)
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（3）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part3/"/>
    <updated>2017-11-04T09:55:53+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part3</id>
    <content type="html"><![CDATA[<p>在前文中，我们将小说的每个章节保存为独立的文本文件。今天我们准备把小说内容输出到数据库。对于数据存储，我选择MongoDB。为什么是MongoDB而不是其它？原因是以前没用过，想尝试下。</p>

<p>现在我们已经知道，要把抓取来的数据保存到数据库，只需实现Item Pipeline即可。我们可以仿照前面的实现依葫芦画瓢。</p>

<p>以下是将小说内容保存到MongoDB的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import pymongo

class MongoPipeline(object):
  def open_spider(self, spider):
    self.client = pymongo.MongoClient(&#39;localhost&#39;, 27017)
    self.novel = self.client[&#39;novel&#39;]
    self.ssjx = self.novel[&#39;ssjx&#39;]

  def process_item(self, item, spider):
    data = {
      # 标题和内容都是列表类型，必须先转换成字符串
      &#39;title&#39; : &#39;&#39;.join(item[&#39;title&#39;]),
      &#39;content&#39; : &#39;&#39;.join(item[&#39;content&#39;]),
    }
    self.ssjx.insert(data)
    return item

  def close_spider(self, spider):
    self.client.close()
</code></pre></div>
<p>将组件添加到novel/settings.py的ITEM_PIPELINES配置中以启用它：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ITEM_PIPELINES = {
  &#39;novel.pipelines.TxtPipeline&#39; : 300,
  &#39;novel.pipelines.MongoPipeline&#39; : 400,
}
</code></pre></div>
<p>在项目的根目录中使用下面的指令运行Spider：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scrapy crawl novelspider
</code></pre></div>
<p>如果没有问题的话，爬虫会不停地运行，小说的章节内容也会被一个个地保存到数据库。下面的截图是最终的抓取结果：</p>

<p><img src="/uploads/novel-mongo-gui.png" alt="novel-mongo-gui"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（2）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part2/"/>
    <updated>2017-10-28T20:35:23+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part2</id>
    <content type="html"><![CDATA[<p>接上文。</p>

<p>将抓取的小说内容保存成本地文件是通过在命令行指定<code>-o</code>选项实现的。虽然工作的很好，但是有两个缺点：一是把所有小说内容保存到单个文件会导致该文件太大，用文本编辑器打开随机浏览的速度非常慢；二是小说章节不是按照顺序保存的，导致阅读指定的章节内容很不方便。</p>

<p>再写个小工具按章节内容分割小说文件？无需如此麻烦。我们可以在Scrapy中直接将每个章节保存为单独的文本文件。Scrapy中的Item Pipeline就是干这类事情的。看下面的Scrapy架构图：</p>

<p><img src="/uploads/scrapy-architecture.png" alt="scrapy-architecture"></p>

<p>当Item在Spider中被收集之后，它们会被传递到Item Pipeline，这些Pipeline组件按照一定的顺序执行对Item的处理，同时也决定此Item是否继续通过，或是被丢弃而不再进行处理。</p>

<p>以下是Item Pipeline的一些典型应用：</p>

<ul>
<li>清理HTML数据</li>
<li>验证爬取的数据</li>
<li>查重</li>
<li>将爬取结果保存到数据库中</li>
</ul>

<h3 id="编写item-pipeline">编写Item Pipeline</h3>

<p>编写自己的Item Pipeline非常简单，每个Item Pipeline都是实现以下方法的Python类：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">process_item(self, item, spider)
</code></pre></div>
<p>此外，下面的方法是可选实现的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">open_spider(self, spider)  # 该方法在Spider被开启时调用
close_spider(spider)       # 该方法在Spider被关闭时调用
</code></pre></div>
<p>明白原理后，我们就可以开始编写自己的Item Pipeline。以下就是将小说的每个章节写成单独文本文件的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class TxtPipeline(object):
  def process_item(self, item, spider):
    # 标题和内容都是列表类型，必须先转换成字符串
    title = &#39;&#39;.join(item[&#39;title&#39;])
    content = &#39;&#39;.join(item[&#39;content&#39;])
    # 使用章节名来创建文件
    # 使用strip()来过滤非法字符r&#39;\/:*?&quot;&lt;&gt;|&#39;
    filename = &#39;{}.txt&#39;.format(title.strip())
    f = open(filename, &#39;w&#39;)
    f.write(title)
    f.write(content)
    f.close()
    return item
</code></pre></div>
<h3 id="启用item-pipeline">启用Item Pipeline</h3>

<p>要启用Pipeline组件，你必须将它添加到novel/settings.py的ITEM_PIPELINES配置中，就像下面这样:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ITEM_PIPELINES = {
  &#39;novel.pipelines.TxtPipeline&#39; : 300,
}
</code></pre></div>
<p>Pipeline后面的整数值确定它们的运行顺序，Item按数字从低到高通过每个Pipeline。通常将这些值定义在0-1000范围内。</p>

<h3 id="运行spider">运行Spider</h3>

<p>在项目的根目录中执行如下的命令（因为不再把所有的小说内容保存为单个文件，所有不需要指定<code>-o</code>选项）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scrapy crawl novelspider
</code></pre></div>
<p>没有报错的话，等个几分钟，就能看到很多文本文件躺在自己的电脑上面。</p>

<p><img src="/uploads/novel-txt-list.png" alt="novel-txt-list"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（1）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part1/"/>
    <updated>2017-10-21T08:49:54+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part1</id>
    <content type="html"><![CDATA[<p>这几天正在看《Python网络数据采集》，在这过程中觉得有必要写个爬虫来实践学到的知识。便给自己定个小目标：试着用Scrapy爬取小说《蜀山剑侠传》，并把内容保存到本地文件中。</p>

<p>Scrapy是一个开源的Python数据抓取框架，速度快且强大，而且使用简单，可以很方便地抓取网站页面并从中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。</p>

<p>好吧，废话不多说，让我们直接开干！</p>

<h3 id="创建项目">创建项目</h3>

<p>在抓取之前，必须先创建一个Scrapy项目，可以直接用以下命令生成：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scrapy startproject novel
</code></pre></div>
<p>这是新建项目的目录结构：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.
├── novel                # 项目模块
│   ├── __init__.py
│   ├── items.py         # 定义爬取的数据
│   ├── middlewares.py   # 定义爬取时的中间件
│   ├── pipelines.py     # 定义数据管道
│   ├── __pycache__
│   ├── settings.py      # 项目的设置文件
│   └── spiders          # 放置爬虫代码的文件夹
│       ├── __init__.py
│       └── __pycache__
└── scrapy.cfg           # Scrapy部署时的配置文件
</code></pre></div>
<h3 id="分析页面结构">分析页面结构</h3>

<p>主要分析两个页面。一是小说的目录页面，目的是获取小说所有章节的链接以备抓取。二是任意章节页面，用于爬取其中的标题和正文。</p>

<p>通过观察目录页面的源码可以发现，所有章节的链接都类似<code>NUMBER.htm</code>。其中，NUMBER是3位整数，从001到309。</p>

<p><img src="/uploads/novel-chapter-urls.png" alt="novel-chapter-urls"></p>

<p>使用浏览器的检查器（Inspector）查看章节页面，尝试把光标放在正文上，你应该可以看到正文周围的蓝色方块（如下图左侧所示），如果你点击这个方块，就可以选中检查器中相应的HTML代码。可以看到小说的标题和正文都在td标签中。</p>

<p><img src="/uploads/novel-page-inspector.png" alt="novel-page-inspector"></p>

<p>与此对应的XPath表达式分别是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">//center/table/tr[2]/td/text()  # 标题的XPath路径
//center/table/tr[4]/td/text()  # 正文的XPath路径
</code></pre></div>
<p>需要注意的是，上面XPath表达式里的中括号内的数字为节点索引，是从1开始的，而不是0。</p>

<h3 id="定义爬取的数据">定义爬取的数据</h3>

<p>当需要从某个网站抓取信息时，首先是定义我们要爬取的数据。在Scrapy中，可以通过Item来完成。以下是我们定义的Item：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import scrapy

class NovelItem(scrapy.Item):
  title = scrapy.Field()
  content = scrapy.Field()
</code></pre></div>
<h3 id="编写爬取数据的spider">编写爬取数据的Spider</h3>

<p>现在我们需要添加一个爬虫来真正做点什么。创建文件novel/spiders/novel_spider.py，添加如下内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import scrapy
from novel.items import NovelItem

class NovelSpider(scrapy.Spider):
  name = &#39;novelspider&#39;
  allowed_domains = [&#39;example.com&#39;]
  start_urls = [&#39;http://example.com/wuxia/hzlz/ssjx/&#39;]

  def parse(self, response):
    # 还记得前面分析目录页面时的结果吗：000、001...309。
    for i in range(1, 310):
      # 生成每个章节的绝对链接
      next = response.urljoin(&#39;{0:03d}.htm&#39;.format(i))
      # 生成新的请求对象解析小说的标题和正文
      yield scrapy.Request(next, callback=self.parse_chapter)

  def parse_chapter(self, response):
    item = NovelItem()
    title = response.xpath(&#39;//center/table/tr[2]/td/text()&#39;).extract()
    print(&#39;Title is&#39;, title)
    content = response.xpath(&#39;//center/table/tr[4]/td/text()&#39;).extract()
    print(&#39;Content is&#39;, content)
    item[&#39;title&#39;] = title
    item[&#39;content&#39;] = content
    return item
</code></pre></div>
<h3 id="运行spider">运行Spider</h3>

<p>完成爬虫后，如何通过它来得到我们想要的结果呢？在项目的根目录中执行如下的命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scrapy crawl novelspider -o novel.json
</code></pre></div>
<p>没有报错的话，等个几分钟，就能看到一个完整的JSON数据文件躺在自己的电脑上面。</p>

<p>不过如果打开的话，可能只会看到“\uXXXX”这样的乱码，它们都是中文字符的Unicode编码。要直接显示成中文的话，需要在novel/settings.py中添加以下设置：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FEED_EXPORT_ENCODING = &#39;utf-8&#39;
</code></pre></div>
<p>最终的结果如图：</p>

<p><img src="/uploads/novel-json-chinese.png" alt="novel-json-chinese"></p>
]]></content>
  </entry>
  
</feed>
