<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Python | 乐者为王]]></title>
  <link href="http://codemany.com/tags/python/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2018-01-21T18:56:19+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（6）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part6/"/>
    <updated>2017-12-06T17:18:51+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part6</id>
    <content type="html"><![CDATA[<p>在<a href="/blog/crawl-novel-with-scrapy-part1/">使用Scrapy爬取小说（1）</a>中，我们首先抓取小说目录页面的所有章节链接，然后再使用这些链接分别抓取各个章节的正文内容。这样需要分析两个不同页面的结构。其实，还有个更简单点的方法，只要分析内容页面的结构即可。</p>

<p>在小说的内容页面中通常都会有“上一页”和“下一页”这样的链接。我们只需要先抓取小说的首个章节，然后抽取出它的“下一页”链接，接着抓取这个链接对应的章节，再抽取出这个章节的“下一页”链接，重复这个循环直到不再有“下一页”链接为止。</p>

<p>抽取“下一页”链接的XPath表达式是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">//a[text()=&#39;下一页&#39;]/@href
</code></pre></div>
<p>修改后的novel_spider.py如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class NovelSpider(scrapy.Spider):
  name = &#39;novelspider&#39;
  allowed_domains = [&#39;example.com&#39;]
  # 把原来的目录页链接改成第一章的链接
  start_urls = [&#39;http://example.com/wuxia/hzlz/ssjx/001.htm&#39;]

  def parse(self, response):
    # 有些小说网站的页眉和页脚都有“下一页”链接，我们
    # 不需要管它有几个，只要获取第一个出现的就行。
    link = response.xpath(&quot;//a[text()=&#39;下一页&#39;]/@href&quot;).extract_first()
    next_url = response.urljoin(link)
    yield scrapy.Request(next_url, callback=self.parse)  # 注意callback的值

    item = NovelItem()
    title = response.xpath(&#39;//center/table/tr[2]/td/text()&#39;).extract()
    content = response.xpath(&#39;//center/table/tr[4]/td/text()&#39;).extract()
    item[&#39;title&#39;] = title
    item[&#39;content&#39;] = content
    return item
</code></pre></div>
<p>满怀愉悦地运行Spider，结果什么都没有，抓取失败。这是怎么回事？百思不得其解。</p>

<h3 id="郁闷之旅由此开始～">郁闷之旅由此开始～</h3>

<p>把yield关键词删掉试试？！修改后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">link = response.xpath(&quot;//a[text()=&#39;下一页&#39;]/@href&quot;).extract_first()
next_url = response.urljoin(link)
scrapy.Request(next_url, callback=self.parse)
</code></pre></div>
<p>结果只输出第一章的内容。</p>

<p>把parse方法改成下面这样呢？</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def parse(self, response):
  item = NovelItem()
  title = response.xpath(&#39;//center/table/tr[2]/td/text()&#39;).extract()
  content = response.xpath(&#39;//center/table/tr[4]/td/text()&#39;).extract()
  item[&#39;title&#39;] = title
  item[&#39;content&#39;] = content
  yield item

  link = response.xpath(&quot;//a[text()=&#39;下一页&#39;]/@href&quot;).extract_first()
  next_url = response.urljoin(link)
  return scrapy.Request(next_url, callback=self.parse)
</code></pre></div>
<p>也只能输出第一章的内容。</p>

<p>读到这里可能有看官会疑惑，为什么我会做出上面这两种修改？首先，我知道问题是在yield语句那里。其次，因为在我的印象中，yield的作用是延迟执行后面的语句。但现在从实际执行的情况来看显然不是如此。</p>

<h3 id="真实的yield">真实的yield</h3>

<p>查阅资料以后发现，包含yield的函数不再是普通函数，Python解释器会将其视为生成器。我们用个例子来详细说明下。</p>

<p>Fibonacci数列是个非常简单的递归数列，除第1和第2个数外，任何一个数都可以由前两个数相加得到。下面是输出Fibonacci数列前N个数的测试代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def fab(max):
  n = 0
  a, b = 0, 1
  while n &lt; max:
    yield b
    a, b = b, a + b
    n = n + 1

print(fab(5))
</code></pre></div>
<p>猜猜会输出什么？有人以为会打印出Fibonacci数列，但实际上输出的是生成器对象的信息：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;generator object fab at 0x7fd41edfcd58&gt;
</code></pre></div>
<p>fab(5)看起来像函数调用，但它其实是返回一个生成器对象。在对其调用next函数之前，它不会执行任何函数代码。虽然仍按函数的流程执行，但每执行到一条yield语句就会中断，并返回一个迭代值，下次执行时从yield处继续执行。看起来就好像一个函数在正常执行的过程中被yield中断了数次，每次中断都会通过yield返回当时的迭代值。</p>

<p>所以正确的打印代码应该这样写（for循环会自动对生成器对象调用next函数）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">for n in fab(5)
  print(n)
</code></pre></div>
<p>也可以手动调用next函数，这样我们就可以更清楚地看到它的执行流程：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt;&gt;&gt; f = fab(5)
&gt;&gt;&gt; next(f)
1
&gt;&gt;&gt; next(f)
1
&gt;&gt;&gt; next(f)
2
&gt;&gt;&gt; next(f)
3
&gt;&gt;&gt; next(f)
5
&gt;&gt;&gt; next(f)
Traceback (most recent call last):
 File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
StopIteration
</code></pre></div>
<p>当函数执行结束时，生成器自动抛出StopIteration异常，表示迭代完成。在for循环中，无需处理StopIteration异常，循环会正常结束。</p>

<h3 id="正确的解决方案">正确的解决方案</h3>

<p>明白yield到底起什么作用后，再回过头来看前面的修改。</p>

<p>第2次修改明显是没有思考，胡乱盲目地尝试。它只是创建一个Request对象而已，能有什么用！代码也清楚地表明，parse方法仅会被回调1次，这也是仅能输出第一章内容的原因。现在回想起来
怎么也弄不明白当初为什么会这么写？！</p>

<p>第3次修改的代码首先是解析Response对象，把第一章的标题和内容封装起来返回给Scrapy。因为这个函数是生成器函数，所以Scrapy在输出第一章内容后会继续执行yield item后面的语句，直到函数结束，抛出StopIteration异常。因为有return语句，所以会把返回的值当作StopIteration异常的属性。</p>

<p>第1次修改和第3次修改类似，不同的是它返回“下一页”的Request对象给Scrapy，所以parse方法会被不断地循环回调，直到没有“下一页”为止。</p>

<p>归根结底，第1和第3次修改不能输出所有章节内容的原因是因为StopIteration异常吞掉了return返回的值，所以也要把它改成yield。修改后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def parse(self, response):
  item = NovelItem()
  title = response.xpath(&#39;//center/table/tr[2]/td/text()&#39;).extract()
  content = response.xpath(&#39;//center/table/tr[4]/td/text()&#39;).extract()
  item[&#39;title&#39;] = title
  item[&#39;content&#39;] = content
  yield item

  link = response.xpath(&quot;//a[text()=&#39;下一页&#39;]/@href&quot;).extract_first()
  next_url = response.urljoin(link)
  yield scrapy.Request(next_url, callback=self.parse)
</code></pre></div>
<p>给代码做个美容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def parse(self, response):
  yield {
    &#39;title&#39;: response.xpath(&#39;//center/table/tr[2]/td/text()&#39;).extract(),
    &#39;content&#39;: response.xpath(&#39;//center/table/tr[4]/td/text()&#39;).extract(),
  }

  link = response.xpath(&quot;//a[text()=&#39;下一页&#39;]/@href&quot;).extract_first()
  next_url = response.urljoin(link)
  yield scrapy.Request(next_url, callback=self.parse)
</code></pre></div>
<p>打完收工。写文章比写代码累多了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（5）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part5/"/>
    <updated>2017-11-18T21:55:30+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part5</id>
    <content type="html"><![CDATA[<p>今天的任务是重构TxtPipeline。</p>

<p>先看下TxtPipeline中负责写文件的代码片段：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">f = open(filename, &#39;w&#39;)
f.write(title)
f.write(content)
f.close()
</code></pre></div>
<p>我们经常会看到这样的代码，但它存在严重的问题，你能把它找出来吗？</p>

<p>首先，open函数打开文件，并返回文件句柄，该句柄是由操作系统分配的。接着就是调用write方法写文件。最后是调用close方法关闭文件。文件使用完毕后必须关闭，因为文件句柄会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的。</p>

<p>由于文件读写时都有可能产生IOError，一旦出错，后面的close方法就不会被调用。所以，为确保无论是否出错都能正常地关闭文件和释放文件句柄，我们需要使用如下方法来实现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">try:
  f = open(filename, &#39;w&#39;)
  f.write(title)
  f.write(content)
finally:
  if f:
    f.close()
</code></pre></div>
<p>但每次都这么写实在太繁琐。其实，我们可以使用with语句来帮我们自动管理文件资源：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">with open(filename, &#39;w&#39;) as f:
  f.write(title)
  f.write(content)
</code></pre></div>
<p>这和前面的try-finally是一样的，但是代码更加简洁，而且不必调用close方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（4）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part4/"/>
    <updated>2017-11-11T14:17:36+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part4</id>
    <content type="html"><![CDATA[<p>在<a href="/blog/crawl-novel-with-scrapy-part1/">使用Scrapy爬取小说（1）</a>中，我们使用range(1, 310)来确定章节链接的范围，这很不好。我们编程的时候应该要尽量注意减少代码中的硬编码和魔数，提高代码的可移植性。如果小说章节的链接不是这种连续的数字，或者章节的数量是在逐步增加的，那么这段代码就是无效的，或者会慢慢变得无效。</p>

<p>如何才能把这段代码写得更具可移植性呢？</p>

<p><img src="/uploads/novel-chapter-urls.png" alt="novel-chapter-urls"></p>

<p>我们不必关心章节链接的格式，我们只要知道它是个链接，一定是以<code>&lt;a href=&quot;url&quot;&gt;text&lt;/a&gt;</code>这种形式呈现（如上图所示）。我们也不必关心章节数量是否变化，只要把所有这种形式的链接抓取下来即可。与此对应的XPath表达式是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">//center/table[@bordercolorlight]//a/@href
</code></pre></div>
<p>因为页面文档中可能有多个表格，所以要在table后面添加@bordercolorlight属性来指定我们要查找的那个。</p>

<p>那么在Scrapy中如何实现这样的能力呢？以下是具体的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def parse(self, response):
  links = response.xpath(&#39;//center/table[@bordercolorlight]//a/@href&#39;).extract()
  for link in links:
    next = response.urljoin(link)
    yield scrapy.Request(next, callback=self.parse_chapter)
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（3）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part3/"/>
    <updated>2017-11-04T09:55:53+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part3</id>
    <content type="html"><![CDATA[<p>在前文中，我们将小说的每个章节保存为独立的文本文件。今天我们准备把小说内容输出到数据库。对于数据存储，我选择MongoDB。为什么是MongoDB而不是其它？原因是以前没用过，想尝试下。</p>

<p>现在我们已经知道，要把抓取来的数据保存到数据库，只需实现Item Pipeline即可。我们可以仿照前面的实现依葫芦画瓢。</p>

<p>以下是将小说内容保存到MongoDB的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import pymongo

class MongoPipeline(object):
  def open_spider(self, spider):
    self.client = pymongo.MongoClient(&#39;localhost&#39;, 27017)
    self.novel = self.client[&#39;novel&#39;]
    self.ssjx = self.novel[&#39;ssjx&#39;]

  def process_item(self, item, spider):
    data = {
      # 标题和内容都是列表类型，必须先转换成字符串
      &#39;title&#39; : &#39;&#39;.join(item[&#39;title&#39;]),
      &#39;content&#39; : &#39;&#39;.join(item[&#39;content&#39;]),
    }
    self.ssjx.insert(data)
    return item

  def close_spider(self, spider):
    self.client.close()
</code></pre></div>
<p>将组件添加到novel/settings.py的ITEM_PIPELINES配置中以启用它：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ITEM_PIPELINES = {
  &#39;novel.pipelines.TxtPipeline&#39; : 300,
  &#39;novel.pipelines.MongoPipeline&#39; : 400,
}
</code></pre></div>
<p>在项目的根目录中使用下面的指令运行Spider：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scrapy crawl novelspider
</code></pre></div>
<p>如果没有问题的话，爬虫会不停地运行，小说的章节内容也会被一个个地保存到数据库。下面的截图是最终的抓取结果：</p>

<p><img src="/uploads/novel-mongo-gui.png" alt="novel-mongo-gui"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（2）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part2/"/>
    <updated>2017-10-28T20:35:23+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part2</id>
    <content type="html"><![CDATA[<p>接上文。</p>

<p>将抓取的小说内容保存成本地文件是通过在命令行指定<code>-o</code>选项实现的。虽然工作的很好，但是有两个缺点：一是把所有小说内容保存到单个文件会导致该文件太大，用文本编辑器打开随机浏览的速度非常慢；二是小说章节不是按照顺序保存的，导致阅读指定的章节内容很不方便。</p>

<p>再写个小工具按章节内容分割小说文件？无需如此麻烦。我们可以在Scrapy中直接将每个章节保存为单独的文本文件。Scrapy中的Item Pipeline就是干这类事情的。看下面的Scrapy架构图：</p>

<p><img src="/uploads/scrapy-architecture.png" alt="scrapy-architecture"></p>

<p>当Item在Spider中被收集之后，它们会被传递到Item Pipeline，这些Pipeline组件按照一定的顺序执行对Item的处理，同时也决定此Item是否继续通过，或是被丢弃而不再进行处理。</p>

<p>以下是Item Pipeline的一些典型应用：</p>

<ul>
<li>清理HTML数据</li>
<li>验证爬取的数据</li>
<li>查重</li>
<li>将爬取结果保存到数据库中</li>
</ul>

<h3 id="编写item-pipeline">编写Item Pipeline</h3>

<p>编写自己的Item Pipeline非常简单，每个Item Pipeline都是实现以下方法的Python类：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">process_item(self, item, spider)
</code></pre></div>
<p>此外，下面的方法是可选实现的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">open_spider(self, spider)  # 该方法在Spider被开启时调用
close_spider(spider)       # 该方法在Spider被关闭时调用
</code></pre></div>
<p>明白原理后，我们就可以开始编写自己的Item Pipeline。以下就是将小说的每个章节写成单独文本文件的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class TxtPipeline(object):
  def process_item(self, item, spider):
    # 标题和内容都是列表类型，必须先转换成字符串
    title = &#39;&#39;.join(item[&#39;title&#39;])
    content = &#39;&#39;.join(item[&#39;content&#39;])
    # 使用章节名来创建文件
    # 使用strip()来过滤非法字符r&#39;\/:*?&quot;&lt;&gt;|&#39;
    filename = &#39;{}.txt&#39;.format(title.strip())
    f = open(filename, &#39;w&#39;)
    f.write(title)
    f.write(content)
    f.close()
    return item
</code></pre></div>
<h3 id="启用item-pipeline">启用Item Pipeline</h3>

<p>要启用Pipeline组件，你必须将它添加到novel/settings.py的ITEM_PIPELINES配置中，就像下面这样:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ITEM_PIPELINES = {
  &#39;novel.pipelines.TxtPipeline&#39; : 300,
}
</code></pre></div>
<p>Pipeline后面的整数值确定它们的运行顺序，Item按数字从低到高通过每个Pipeline。通常将这些值定义在0-1000范围内。</p>

<h3 id="运行spider">运行Spider</h3>

<p>在项目的根目录中执行如下的命令（因为不再把所有的小说内容保存为单个文件，所有不需要指定<code>-o</code>选项）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scrapy crawl novelspider
</code></pre></div>
<p>没有报错的话，等个几分钟，就能看到很多文本文件躺在自己的电脑上面。</p>

<p><img src="/uploads/novel-txt-list.png" alt="novel-txt-list"></p>
]]></content>
  </entry>
  
</feed>
