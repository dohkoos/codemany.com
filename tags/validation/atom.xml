<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Validation | 乐者为王]]></title>
  <link href="http://codemany.com/tags/validation/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-04T00:34:54+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现图书的增删查改（CRUD）]]></title>
    <link href="http://codemany.com/blog/2012/12/22/book-additions-and-deletions-investigation-changed-crud/"/>
    <updated>2012-12-22T14:25:20+08:00</updated>
    <id>http://codemany.com/blog/2012/12/22/book-additions-and-deletions-investigation-changed-crud</id>
    <content type="html"><![CDATA[<p>图书的MySQL数据库创建脚本：<br />
<code>
CREATE TABLE books (&lt;br /&gt;
  id int NOT NULL AUTO_INCREMENT,&lt;br /&gt;
  title varchar(255) NOT NULL,&lt;br /&gt;
  description text,&lt;br /&gt;
  image_url varchar(255),&lt;br /&gt;
  price decimal(8, 2) NOT NULL,&lt;br /&gt;
  author varchar(255) NOT NULL,&lt;br /&gt;
  isbn varchar(255) NOT NULL,&lt;br /&gt;
  publisher varchar(255) NOT NULL,&lt;br /&gt;
  user_id int NOT NULL,&lt;br /&gt;
  PRIMARY KEY (id)&lt;br /&gt;
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;&lt;br /&gt;
</code></p>

<p>图书实体类文件Book.java主要代码：<br />
```
public class Book {<br /></p>

<pre><code>private Long id;&lt;br /&gt;
private String title;&lt;br /&gt;
private String description;&lt;br /&gt;
private String image_url;&lt;br /&gt;
private double price;&lt;br /&gt;
private String author;&lt;br /&gt;
private String isbn;&lt;br /&gt;
private String publisher;&lt;br /&gt;
private User user;&lt;br /&gt;
...&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在User类中添加集合变量books：<br />
```
public class User {<br /></p>

<pre><code>...&lt;br /&gt;
private Set&lt;Book&gt; books = new HashSet&lt;Book&gt;();&lt;br /&gt;
...&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在User.hbm.xml中配置和图书的一对多关联：<br />
```</p>

<!-- Bidirectional one-to-many association to Book -->


<p><set name="books" inverse="true"></p>

<pre><code>&lt;key column="user_id" not-null="true" /&gt;
&lt;one-to-many class="com.codemany.book.model.Book" /&gt;
</code></pre>

<p></set>
```</p>

<p>图书的表映射文件Book.hbm.xml代码：<br />
```
&lt;hibernate-mapping></p>

<pre><code>&lt;class name="com.codemany.book.model.Book" table="books"&gt;
    &lt;id name="id"&gt;
        &lt;generator class="increment" /&gt;
    &lt;/id&gt;

    &lt;property name="title" not-null="true" /&gt;
    &lt;property name="description" /&gt;
    &lt;property name="image_url" /&gt;
    &lt;property name="price" not-null="true" /&gt;
    &lt;property name="author" not-null="true" /&gt;
    &lt;property name="isbn" not-null="true" /&gt;
    &lt;property name="publisher" not-null="true" /&gt;

    &lt;many-to-one name="user" column="user_id" not-null="true" /&gt;
&lt;/class&gt;
</code></pre>

<p>&lt;/hibernate-mapping>
```</p>

<p>BookService.java中的代码相对简单，因为没什么复杂的业务逻辑，只是负责把Action和Dao这两层连接起来。</p>

<p>BookDao.java中的代码主要实现图书的读取，更新和删除：<br />
```
package com.codemany.book.dao;</p>

<p>import java.util.List;</p>

<p>import org.hibernate.Query;<br />
import org.hibernate.Session;<br />
import org.hibernate.SessionFactory;<br />
import org.hibernate.Transaction;</p>

<p>import com.codemany.book.model.Book;</p>

<p>public class BookDao {<br /></p>

<pre><code>private SessionFactory sessionFactory;

public void setSessionFactory(SessionFactory sessionFactory) {&lt;br /&gt;
    this.sessionFactory = sessionFactory;&lt;br /&gt;
}

public List&lt;Book&gt; getBookList() {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from Book b");&lt;br /&gt;
        List&lt;Book&gt; bookList = query.list();&lt;br /&gt;
        return bookList;&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}

public Book getBook(Long bookId) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from Book b where b.id = :id");&lt;br /&gt;
        query.setLong("id", bookId);&lt;br /&gt;
        query.setMaxResults(1);&lt;br /&gt;
        return (Book)query.uniqueResult();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}

public void saveOrUpdateBook(Book book) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    Transaction ts = null;&lt;br /&gt;
    try {&lt;br /&gt;
        ts = session.beginTransaction();&lt;br /&gt;
        session.saveOrUpdate(book);&lt;br /&gt;
        ts.commit();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}

public void deleteBook(Long bookId) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    Transaction ts = null;&lt;br /&gt;
    try {&lt;br /&gt;
        ts = session.beginTransaction();&lt;br /&gt;
        Book book = (Book)session.get(Book.class, bookId);&lt;br /&gt;
        session.delete(book);&lt;br /&gt;
        ts.commit();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>BookAction.java负责协调图书应用程序间的运转。接收访问请求，与模型进行交互，将合适的视图展示给用户：<br />
```
package com.codemany.book.action;</p>

<p>import java.util.List;</p>

<p>import com.codemany.account.model.User;<br />
import com.codemany.book.model.Book;<br />
import com.codemany.book.service.BookService;</p>

<p>import com.opensymphony.xwork2.ActionContext;<br />
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class BookAction extends ActionSupport {<br /></p>

<pre><code>private static final long serialVersionUID = 2538923417705852774L;

private Long bookId;&lt;br /&gt;
private Book book;&lt;br /&gt;
private List&lt;Book&gt; bookList;&lt;br /&gt;
private BookService bookService;

public String list() throws Exception {&lt;br /&gt;
    bookList = bookService.getBookList();&lt;br /&gt;
    return "list";&lt;br /&gt;
}

public String show() throws Exception {&lt;br /&gt;
    book = bookService.getBook(bookId);&lt;br /&gt;
    return "show";&lt;br /&gt;
}

public String input() throws Exception {&lt;br /&gt;
    if (bookId != null) {&lt;br /&gt;
        book = bookService.getBook(bookId);&lt;br /&gt;
    }&lt;br /&gt;
    return INPUT;&lt;br /&gt;
}

public String saveOrUpdate() throws Exception {&lt;br /&gt;
    User user = (User)ActionContext.getContext().getSession().get("user");&lt;br /&gt;
    book.setUser(user);&lt;br /&gt;
    bookService.saveOrUpdateBook(book);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}

public String delete() throws Exception {&lt;br /&gt;
    bookService.deleteBook(bookId);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}&lt;br /&gt;
...&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在applicationContext.xml中添加Book的相关配置，如下面代码所示：<br />
```
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"></p>

<pre><code>...&lt;br /&gt;
&lt;property name="mappingResources"&gt;
    &lt;list&gt;
        ...&lt;br /&gt;
        &lt;value&gt;com/codemany/book/model/Book.hbm.xml&lt;/value&gt;
    &lt;/list&gt;
&lt;/property&gt;
</code></pre>

<p></bean>
&hellip;</p>

<!-- book -->


<p><bean id="bookDao" class="com.codemany.book.dao.BookDao"></p>

<pre><code>&lt;property name="sessionFactory" ref="sessionFactory" /&gt;
</code></pre>

<p></bean></p>

<p><bean id="bookService" class="com.codemany.book.service.BookService"></p>

<pre><code>&lt;property name="bookDao" ref="bookDao" /&gt;
</code></pre>

<p></bean></p>

<p><bean id="bookAction" class="com.codemany.book.action.BookAction" scope="prototype"></p>

<pre><code>&lt;property name="bookService" ref="bookService" /&gt;
</code></pre>

<p></bean>
```</p>

<p>在Struts 2配置文件struts.xml中include文件book.xml。以下是book.xml文件的内容：<br />
```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;!DOCTYPE struts PUBLIC<br /></p>

<pre><code>"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"&lt;br /&gt;
"http://struts.apache.org/dtds/struts-2.0.dtd"&gt;
</code></pre>

<p><struts></p>

<pre><code>&lt;package name="book" extends="struts-default"&gt;
    &lt;action name="*Book" method="{1}" class="bookAction"&gt;
        &lt;result name="list"&gt;/books/list.jsp&lt;/result&gt;
        &lt;result name="show"&gt;/books/show.jsp&lt;/result&gt;
        &lt;result name="input"&gt;/books/form.jsp&lt;/result&gt;
        &lt;result type="redirectAction"&gt;listBook&lt;/result&gt;
    &lt;/action&gt;
&lt;/package&gt;
</code></pre>

<p></struts>
```</p>

<p>视图文件show.jsp作为显示单本图书的信息，代码很简单，就不放出来了，只把list.jsp和form.jsp的代码列出来。</p>

<p>list.jsp用来显示所有的图书：<br />
```
<body></p>

<h1>Listing books</h1>




<table>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Image url</th>
        <th>Price</th>
        <th>Author</th>
        <th>ISBN</th>
        <th>Publisher</th>
        <th>Action</th>
    </tr>

    <s:iterator value="bookList">
    <tr>
        <td><s:property value="title" /></td>
        <td><s:property value="description" /></td>
        <td><s:property value="image_url" /></td>
        <td><s:property value="price" /></td>
        <td><s:property value="author" /></td>
        <td><s:property value="isbn" /></td>
        <td><s:property value="publisher" /></td>
        <td>
            <s:a href="showBook.action?bookId=%{id}">Show</s:a>
            <s:a href="inputBook.action?bookId=%{id}">Edit</s:a>
            <s:a href="deleteBook.action?bookId=%{id}" method="delete">Destroy</s:a>
        </td>
    </tr>
    </s:iterator>
</table>


<p>&lt;s:a action=&ldquo;inputBook&rdquo;>Add&lt;/s:a>
</body>
```</p>

<p>当用户新建或者更新图书时，视图form.jsp就上场了。因为被两个逻辑使用，显示的标题等信息也不相同，所以需要判断图书的id是否存在，如果不存在的话即是新建业务，否则就是更新操作。<br />
```
<body>
&lt;s:if test=&ldquo;book.id != null&rdquo;></p>

<pre><code>&lt;h1&gt;Editing book&lt;/h1&gt;
</code></pre>

<p>&lt;/s:if>
&lt;s:else></p>

<pre><code>&lt;h1&gt;Add book&lt;/h1&gt;
</code></pre>

<p>&lt;/s:else></p>

<p>&lt;s:form action=&ldquo;saveOrUpdateBook&rdquo; method=&ldquo;post&rdquo;></p>

<pre><code>&lt;div class="field"&gt;
    &lt;s:hidden name="book.id" value="%{book.id}" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.title" label="Title" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textarea name="book.description" label="Description" rows="5" cols="25" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.image_url" label="Image URL" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.price" label="Price" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.author" label="Author" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.isbn" label="ISBN" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.publisher" label="Publisher" /&gt;
&lt;/div&gt;
&lt;div class="actions"&gt;
    &lt;s:if test="book.id != null"&gt;
    &lt;s:submit value="Update" /&gt;
    &lt;/s:if&gt;
    &lt;s:else&gt;
    &lt;s:submit value="Save" /&gt;
    &lt;/s:else&gt;
</code></pre>

<p>  </div>
&lt;/s:form></p>

<p>&lt;s:if test=&ldquo;book.id != null&rdquo;>
&lt;s:a href=&ldquo;showBook.action?bookId=%{book.id}&rdquo;>Show&lt;/s:a> |
&lt;/s:if>
&lt;s:a action=&ldquo;listBook&rdquo;>Back&lt;/s:a>
</body>
```</p>

<p>最后还要完成图书模型的服务端校验。Struts 2的校验文件有两种格式：ActionName-validation.xml和ActionName-alias-validation.xml。第一种会对该Action中的每个方法进行校验，不符合只对saveOrUpdate校验的要求。在BookAction.java同目录下创建BookAction-saveOrUpdateBook-validation.xml文件：<br />
```
<validators></p>

<pre><code>&lt;field name="book"&gt;
    &lt;field-validator type="visitor"&gt;
        &lt;param name="appendPrefix"&gt;true&lt;/param&gt;
        &lt;message /&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre>

<p></validators>
```</p>

<p>当然，还要在Book.java所在的位置创建Book-validation.xml文件：<br />
```
<validators></p>

<pre><code>&lt;field name="title"&gt;
    &lt;field-validator type="required"&gt;
        &lt;message&gt;Price is required&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
...&lt;br /&gt;
&lt;field name="price"&gt;
    &lt;field-validator type="required"&gt;
        &lt;message&gt;Price is required&lt;/message&gt;
    &lt;/field-validator&gt;
    &lt;field-validator type="double"&gt;
        &lt;param name="minInclusive"&gt;0.01&lt;/param&gt;
        &lt;message&gt;Price should be at least 0.01&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre>

<p></validators>
```</p>

<p>看着BookAction-saveOrUpdateBook-validation.xml这么长的文件名是不是有点无语:)没关系，BookAction-validation.xml配置文件还是可以用的，只要在BookAction.java中那些不需要进行校验的方法上添加@SkipValidation；也可以在action配置中启用validation.excludeMethods参数：<br />
```
<action name="*Book" method="{1}" class="bookAction"></p>

<pre><code>&lt;interceptor-ref name="defaultStack"&gt;
    &lt;param name="validation.excludeMethods"&gt;list,show,input,delete&lt;/param&gt;
&lt;/interceptor-ref&gt;
...
</code></pre>

<p></action>
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf"><a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></a>
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Struts 2 Validation框架校验登录信息]]></title>
    <link href="http://codemany.com/blog/2012/09/08/struts-2-validation-framework-checksum-login-information/"/>
    <updated>2012-09-08T14:42:17+08:00</updated>
    <id>http://codemany.com/blog/2012/09/08/struts-2-validation-framework-checksum-login-information</id>
    <content type="html"><![CDATA[<p>Struts 2有三种校验方式：<br />
1. 使用Annotation进行校验<br />
2. 使用XML配置校验<br />
3. 使用覆盖validate方法校验</p>

<p>使用XML配置时validation.xml的命名规则和放置路径：
<ActionClassName>-validation.xml</p>

<p><ActionClassName>就是要验证的Action类的名字，将此文件放于与Action类文件相同的目录下。</p>

<p>如果该Action类在struts.xml配置中有多个action实例，那么对应某个action实例的验证文件名规则如下：
<ActionClassName>&ndash;<aliasName>-validation.xml</p>

<p>例如：UserAction-login-validation.xml。注意，这里的<aliasName>并不是方法名，而是struts.xml中配置的action实例的名字。</p>

<p>既然用框架来校验了，那么在LoginAction.java中判断用户名和密码是否为空的代码就可以删除了。还要记得加上username和passowrd的getter方法，不然校验器（validator）会因为取不到field而报错。<br />
```
public String execute() throws Exception {<br /></p>

<pre><code>User u = userService.getUser(username);&lt;br /&gt;
if (u == null || !password.equals(u.getPassword())) {&lt;br /&gt;
    return INPUT;&lt;br /&gt;
}

ActionContext.getContext().getSession().put("logined", true);&lt;br /&gt;
return SUCCESS;&lt;br /&gt;
</code></pre>

<p>}</p>

<p>public String getUsername() {<br /></p>

<pre><code>return username;&lt;br /&gt;
</code></pre>

<p>}</p>

<p>public String getPassword() {<br /></p>

<pre><code>return password;&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>同时在LoginAction.java相同目录下创建LoginAction-validation.xml，内容如下：<br />
```
&lt;!DOCTYPE validators PUBLIC<br /></p>

<pre><code>"-//OpenSymphony Group//XWork Validator 1.0.2//EN"&lt;br /&gt;
"http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd"&gt;
</code></pre>

<p><validators></p>

<pre><code>&lt;field name="username"&gt;
    &lt;field-validator type="requiredstring"&gt;
        &lt;message&gt;Username is required&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
&lt;field name="password"&gt;
    &lt;field-validator type="requiredstring"&gt;
        &lt;message&gt;Password is required&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre>

<p></validators>
```</p>

<p>message提供了校验出错的信息，消息中可以使用${}来引用被校验的对象。如果未出现异常，则转入用户请求的处理方法，如果出现异常，则转入input所指定的视图。所以，对于验证的action实例，必须要在配置文件中为其指定input视图。</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf"><a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></a>
</p></p>
]]></content>
  </entry>
  
</feed>
