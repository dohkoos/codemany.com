<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Validation | 乐者为王]]></title>
  <link href="http://codemany.com/tags/validation/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-10-17T17:12:53+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现图书的增删查改（CRUD）]]></title>
    <link href="http://codemany.com/blog/implement-crud-for-books/"/>
    <updated>2012-12-22T14:25:20+08:00</updated>
    <id>http://codemany.com/blog/implement-crud-for-books</id>
    <content type="html"><![CDATA[<p>图书的MySQL数据库创建脚本：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">CREATE TABLE books (
    id int NOT NULL AUTO_INCREMENT,
    title varchar(255) NOT NULL,
    description text,
    image_url varchar(255),
    price decimal(8, 2) NOT NULL,
    author varchar(255) NOT NULL,
    isbn varchar(255) NOT NULL,
    publisher varchar(255) NOT NULL,
    user_id int NOT NULL,
    PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
</code></pre></div>
<p>图书实体类文件Book.java主要代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class Book {
    private Long id;
    private String title;
    private String description;
    private String image_url;
    private double price;
    private String author;
    private String isbn;
    private String publisher;
    private User user;
</code></pre></div>
<p>在User类中添加集合变量books：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class User {
    private Set&lt;Book&gt; books = new HashSet&lt;Book&gt;();
</code></pre></div>
<p>在User.hbm.xml中配置和图书的一对多关联：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- Bidirectional one-to-many association to Book --&gt;
&lt;set name=&quot;books&quot; inverse=&quot;true&quot;&gt;
    &lt;key column=&quot;user_id&quot; not-null=&quot;true&quot; /&gt;
    &lt;one-to-many class=&quot;com.codemany.book.model.Book&quot; /&gt;
&lt;/set&gt;
</code></pre></div>
<p>图书的表映射文件Book.hbm.xml代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;hibernate-mapping&gt;
    &lt;class name=&quot;com.codemany.book.model.Book&quot; table=&quot;books&quot;&gt;
        &lt;id name=&quot;id&quot;&gt;
            &lt;generator class=&quot;increment&quot; /&gt;
        &lt;/id&gt;

        &lt;property name=&quot;title&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;description&quot; /&gt;
        &lt;property name=&quot;image_url&quot; /&gt;
        &lt;property name=&quot;price&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;author&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;isbn&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;publisher&quot; not-null=&quot;true&quot; /&gt;

        &lt;many-to-one name=&quot;user&quot; column=&quot;user_id&quot; not-null=&quot;true&quot; /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre></div>
<p>BookService.java中的代码相对简单，因为没什么复杂的业务逻辑，只是负责把Action和Dao这两层连接起来。</p>

<p>BookDao.java中的代码主要实现图书的读取，更新和删除：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.book.dao;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.codemany.book.model.Book;

public class BookDao {
    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public List&lt;Book&gt; getBookList() {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery(&quot;from Book b&quot;);
            List&lt;Book&gt; bookList = query.list();
            return bookList;
        } finally {
            session.close();
        }
    }

    public Book getBook(Long bookId) {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery(&quot;from Book b where b.id = :id&quot;);
            query.setLong(&quot;id&quot;, bookId);
            query.setMaxResults(1);
            return (Book)query.uniqueResult();
        } finally {
            session.close();
        }
    }

    public void saveOrUpdateBook(Book book) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            session.saveOrUpdate(book);
            ts.commit();
        } finally {
            session.close();
        }
    }

    public void deleteBook(Long bookId) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            Book book = (Book)session.get(Book.class, bookId);
            session.delete(book);
            ts.commit();
        } finally {
            session.close();
        }
    }
}
</code></pre></div>
<p>BookAction.java负责协调图书应用程序间的运转。接收访问请求，与模型进行交互，将合适的视图展示给用户：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.book.action;

import java.util.List;

import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class BookAction extends ActionSupport {
    private static final long serialVersionUID = 2538923417705852774L;

    private Long bookId;
    private Book book;
    private List&lt;Book&gt; bookList;
    private BookService bookService;

    public String list() throws Exception {
        bookList = bookService.getBookList();
        return &quot;list&quot;;
    }

    public String show() throws Exception {
        book = bookService.getBook(bookId);
        return &quot;show&quot;;
    }

    public String input() throws Exception {
        if (bookId != null) {
            book = bookService.getBook(bookId);
        }
        return INPUT;
    }

    public String saveOrUpdate() throws Exception {
        User user = (User)ActionContext.getContext().getSession().get(&quot;user&quot;);
        book.setUser(user);
        bookService.saveOrUpdateBook(book);
        return SUCCESS;
    }

    public String delete() throws Exception {
        bookService.deleteBook(bookId);
        return SUCCESS;
    }
</code></pre></div>
<p>在applicationContext.xml中添加Book的相关配置，如下面代码所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;
    &lt;property name=&quot;mappingResources&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;com/codemany/book/model/Book.hbm.xml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;!-- book --&gt;
&lt;bean id=&quot;bookDao&quot; class=&quot;com.codemany.book.dao.BookDao&quot;&gt;
    &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;bookService&quot; class=&quot;com.codemany.book.service.BookService&quot;&gt;
    &lt;property name=&quot;bookDao&quot; ref=&quot;bookDao&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;bookAction&quot; class=&quot;com.codemany.book.action.BookAction&quot; scope=&quot;prototype&quot;&gt;
    &lt;property name=&quot;bookService&quot; ref=&quot;bookService&quot; /&gt;
&lt;/bean&gt;
</code></pre></div>
<p>在Struts 2配置文件struts.xml中include文件book.xml。以下是book.xml文件的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE struts PUBLIC
    &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;
    &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt;

&lt;struts&gt;
    &lt;package name=&quot;book&quot; extends=&quot;struts-default&quot;&gt;
        &lt;action name=&quot;*Book&quot; method=&quot;{1}&quot; class=&quot;bookAction&quot;&gt;
            &lt;result name=&quot;list&quot;&gt;/books/list.jsp&lt;/result&gt;
            &lt;result name=&quot;show&quot;&gt;/books/show.jsp&lt;/result&gt;
            &lt;result name=&quot;input&quot;&gt;/books/form.jsp&lt;/result&gt;
            &lt;result type=&quot;redirectAction&quot;&gt;listBook&lt;/result&gt;
        &lt;/action&gt;
    &lt;/package&gt;
&lt;/struts&gt;
</code></pre></div>
<p>视图文件show.jsp作为显示单本图书的信息，代码很简单，就不放出来了，只把list.jsp和form.jsp的代码列出来。</p>

<p>list.jsp用来显示所有的图书：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;
    &lt;h1&gt;Listing books&lt;/h1&gt;

    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;Title&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
            &lt;th&gt;Image url&lt;/th&gt;
            &lt;th&gt;Price&lt;/th&gt;
            &lt;th&gt;Author&lt;/th&gt;
            &lt;th&gt;ISBN&lt;/th&gt;
            &lt;th&gt;Publisher&lt;/th&gt;
            &lt;th&gt;Action&lt;/th&gt;
        &lt;/tr&gt;

        &lt;s:iterator value=&quot;bookList&quot;&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;s:property value=&quot;title&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;description&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;image_url&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;price&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;author&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;isbn&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;publisher&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;
                &lt;s:a href=&quot;showBook.action?bookId=%{id}&quot;&gt;Show&lt;/s:a&gt;
                &lt;s:a href=&quot;inputBook.action?bookId=%{id}&quot;&gt;Edit&lt;/s:a&gt;
                &lt;s:a href=&quot;deleteBook.action?bookId=%{id}&quot; method=&quot;delete&quot;&gt;Destroy&lt;/s:a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/s:iterator&gt;
    &lt;/table&gt;

    &lt;s:a action=&quot;inputBook&quot;&gt;Add&lt;/s:a&gt;
&lt;/body&gt;
</code></pre></div>
<p>当用户新建或者更新图书时，视图form.jsp就上场了。因为被两个逻辑使用，显示的标题等信息也不相同，所以需要判断图书的id是否存在，如果不存在的话即是新建业务，否则就是更新操作。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;
    &lt;s:if test=&quot;book.id != null&quot;&gt;
        &lt;h1&gt;Editing book&lt;/h1&gt;
    &lt;/s:if&gt;
    &lt;s:else&gt;
        &lt;h1&gt;Add book&lt;/h1&gt;
    &lt;/s:else&gt;

    &lt;s:form action=&quot;saveOrUpdateBook&quot; method=&quot;post&quot;&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:hidden name=&quot;book.id&quot; value=&quot;%{book.id}&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.title&quot; label=&quot;Title&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textarea name=&quot;book.description&quot; label=&quot;Description&quot; rows=&quot;5&quot; cols=&quot;25&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.image_url&quot; label=&quot;Image URL&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.price&quot; label=&quot;Price&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.author&quot; label=&quot;Author&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.isbn&quot; label=&quot;ISBN&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.publisher&quot; label=&quot;Publisher&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;actions&quot;&gt;
            &lt;s:if test=&quot;book.id != null&quot;&gt;
            &lt;s:submit value=&quot;Update&quot; /&gt;
            &lt;/s:if&gt;
            &lt;s:else&gt;
            &lt;s:submit value=&quot;Save&quot; /&gt;
            &lt;/s:else&gt;
      &lt;/div&gt;
    &lt;/s:form&gt;

    &lt;s:if test=&quot;book.id != null&quot;&gt;
        &lt;s:a href=&quot;showBook.action?bookId=%{book.id}&quot;&gt;Show&lt;/s:a&gt; |
    &lt;/s:if&gt;
    &lt;s:a action=&quot;listBook&quot;&gt;Back&lt;/s:a&gt;
&lt;/body&gt;
</code></pre></div>
<p>最后还要完成图书模型的服务端校验。Struts 2的校验文件有两种格式：ActionName-validation.xml和ActionName-alias-validation.xml。第一种会对该Action中的每个方法进行校验，不符合只对saveOrUpdate校验的要求。在BookAction.java同目录下创建BookAction-saveOrUpdateBook-validation.xml文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;validators&gt;
    &lt;field name=&quot;book&quot;&gt;
        &lt;field-validator type=&quot;visitor&quot;&gt;
            &lt;param name=&quot;appendPrefix&quot;&gt;true&lt;/param&gt;
            &lt;message /&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre></div>
<p>当然，还要在Book.java所在的位置创建Book-validation.xml文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;validators&gt;
    &lt;field name=&quot;title&quot;&gt;
        &lt;field-validator type=&quot;required&quot;&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;

    &lt;field name=&quot;price&quot;&gt;
        &lt;field-validator type=&quot;required&quot;&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
        &lt;field-validator type=&quot;double&quot;&gt;
            &lt;param name=&quot;minInclusive&quot;&gt;0.01&lt;/param&gt;
            &lt;message&gt;Price should be at least 0.01&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
</code></pre></div>
<p>看着BookAction-saveOrUpdateBook-validation.xml这么长的文件名是不是有点无语，没关系，BookAction-validation.xml配置文件还是可以用的，只要在BookAction.java中那些不需要进行校验的方法上添加@SkipValidation；也可以在action配置中启用validation.excludeMethods参数：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;action name=&quot;*Book&quot; method=&quot;{1}&quot; class=&quot;bookAction&quot;&gt;
    &lt;interceptor-ref name=&quot;defaultStack&quot;&gt;
        &lt;param name=&quot;validation.excludeMethods&quot;&gt;list,show,input,delete&lt;/param&gt;
    &lt;/interceptor-ref&gt;
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Struts 2 Validation框架校验登录]]></title>
    <link href="http://codemany.com/blog/validate-login-with-struts2-validation-framework/"/>
    <updated>2012-09-08T14:42:17+08:00</updated>
    <id>http://codemany.com/blog/validate-login-with-struts2-validation-framework</id>
    <content type="html"><![CDATA[<p>Struts 2有三种校验方式：</p>

<ol>
<li>使用Annotation进行校验。</li>
<li>使用XML配置校验。</li>
<li>使用覆盖validate方法校验。</li>
</ol>

<p>使用XML配置时validation.xml的命名规则和放置路径：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;ActionClassName&gt;-validation.xml
</code></pre></div>
<p><code>&lt;ActionClassName&gt;</code>就是要验证的Action类的名字，将此文件放在与Action类文件相同的目录下即可。如果该Action类在struts.xml配置中有多个action实例，那么对应某个action实例的校验文件命名规则如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;ActionClassName&gt;-&lt;aliasName&gt;-validation.xml
</code></pre></div>
<p>例如：UserAction-login-validation.xml。注意，这里的<code>&lt;aliasName&gt;</code>并不是方法名，而是struts.xml中配置的action实例的名字。</p>

<p>既然用框架来校验了，那么在LoginAction.java中判断用户名和密码是否为空的代码就可以删除了。还要记得加上username和passowrd的getter方法，不然校验器（validator）会因为取不到field而报错。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public String execute() throws Exception {
    User u = userService.getUser(username);
    if (u == null || !password.equals(u.getPassword())) {
        return INPUT;
    }

    ActionContext.getContext().getSession().put(&quot;logined&quot;, true);
    return SUCCESS;
}

public String getUsername() {
    return username;
}

public String getPassword() {
    return password;
}
</code></pre></div>
<p>同时在LoginAction.java相同目录下创建LoginAction-validation.xml，内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!DOCTYPE validators PUBLIC
    &quot;-//OpenSymphony Group//XWork Validator 1.0.2//EN&quot;
    &quot;http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd&quot;&gt;

&lt;validators&gt;
    &lt;field name=&quot;username&quot;&gt;
        &lt;field-validator type=&quot;requiredstring&quot;&gt;
            &lt;message&gt;Username is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
    &lt;field name=&quot;password&quot;&gt;
        &lt;field-validator type=&quot;requiredstring&quot;&gt;
            &lt;message&gt;Password is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre></div>
<p>message提供了校验出错的信息，在其中可以使用${}来引用被校验的对象。如果未出现异常，则转入用户请求的处理方法；出现异常则转入input所指定的视图。所以，对于校验的action实例，必须要在配置文件中为其指定input视图。</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
</feed>
