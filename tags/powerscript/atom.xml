<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: PowerScript | 乐者为王]]></title>
  <link href="http://codemany.com/tags/powerscript/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-01-18T10:25:12+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用ANTLR构建PowerScript语法分析器（4）]]></title>
    <link href="http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part4/"/>
    <updated>2008-04-26T22:17:05+08:00</updated>
    <id>http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part4</id>
    <content type="html"><![CDATA[<p>什么是表达式</p>

<p>简单的来说，表达式就是运算元和运算符根据语法规则结合后的结果，它通常被用来执行在变量或值上的操作处理。</p>

<p>主表达式（Primary Expression）</p>

<p>到现在PowerScript的词法分析已经写的差不多了，接下来就要开始写语法分析。语法分析的主要组成部分是表达式（expression），而表达式的主要组成部分则是主表达式。主表达式包含了大部分简单的表达式，如字面量（literal），字段存取，方法调用和数组存取等。带圆括号的表达式通常也被认为是主表达式。其常见形式如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">(x)
x.y
f(x)
a[x]
x++
x--
new
</code></pre></div>
<p>当直接子类存有和父类相同签名的事件或函数时，可以通过super调用父类的事件或函数，但是：</p>

<ol>
<li>它不能调用父类中控件的脚本（猜测super后只能跟随“::”符号）；</li>
<li>它只能在直接子类的函数或事件中调用父类的事件或函数。</li>
</ol>

<p>在哪些脚本中可以使用parent：</p>

<ol>
<li>窗口中的控件，此时parent指代包含该控件的窗口；</li>
<li>定制的用户对象中的控件，这时parent指代定制的用户对象；</li>
<li>菜单，这时候parent指代该菜单的上一级菜单。</li>
</ol>

<p>收集的一些语句：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">this.ls_array[1]
this.event pfc_addrow()
this.event rowfocuschanged(ll_row)
this.uo_1.function hallo()
post function column_order_update_from_grid()
event ue_process()

close(parent)
parent.enabled
parent.hide()
parent.event ue_postconstructor()
parent.function static trigger wf_process( )

super::create
super::clicked;
super::event clicked()
super::event clicked(xpos, ypos, row, dwo)
super::of_remove_tail(anv_tailnode)
super::event trigger selectionchanging(oldindex, newindex)

iu_tab_postings.post of_enable_sort(dw_main, dw_detail, false)
w_main.event doubleclicked(flags, xpos, ypos)
dw_main.event pfc_retrieve()
cb_ok.event trigger clicked()
cb_ok.triggerevent(clicked!)
</code></pre></div>
<p>主表达式语法：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">primary_expression
    : &#39;(&#39; expression &#39;)&#39;
    | IDENTIFIER &#39;!&#39;?                   // build-in constant
    | literal
    | &#39;::&#39; IDENTIFIER                   // global variables
    | call_type IDENTIFIER arguments    // example: post function to_string()
    | &#39;create&#39; &#39;using&#39;? (STRING_LITERAL|IDENTIFIER)
    | &#39;destroy&#39; IDENTIFIER
    | &#39;super&#39; &#39;::&#39; call_type? IDENTIFIER arguments?
    | object_name (&#39;.&#39; IDENTIFIER)* identifier_suffix?
    ;

object_name
    : &#39;this&#39;
    | &#39;parent&#39;
    | IDENTIFIER
    ;

call_type
    : ( &#39;function&#39;
      | &#39;event&#39;
      | &#39;static&#39;
      | &#39;dynamic&#39;
      | &#39;trigger&#39;
      | &#39;post&#39;
      )+
    ;

identifier_suffix
    : arguments (&#39;.&#39; IDENTIFIER arguments)*    // cascaded calling
    | &#39;[&#39; expression_list? &#39;]&#39;
    | call_type IDENTIFIER arguments
    ;

arguments
    : &#39;(&#39; expression_list? &#39;)&#39;
    ;

literal
    : STRING_LITERAL
    | INTEGER_LITERAL
    | FLOAT_LITERAL
    | BOOLEAN_LITERAL
    ;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ANTLR构建PowerScript语法分析器（3）]]></title>
    <link href="http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part3/"/>
    <updated>2007-09-07T16:40:49+08:00</updated>
    <id>http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part3</id>
    <content type="html"><![CDATA[<h3 id="转义字符（special-ascii-characters）">转义字符（Special ASCII Characters）</h3>

<p>PowerScript中转义字符是以波浪号（~）开头。下图是PowerScript支持的完整的转义字符，#字符表示数字。Decimal由三个十进制数组成，范围是000-255；Hexadecimal由两个十六进制数组成，范围是00-FF；Octal由三个八进制数组成，范围是000-377。</p>

<p><img src="/uploads/pb-spefial-char.png" title="pb-spefial-char" ></p>

<p>注意：#表示数字是必须的。譬如，必须用~007这种样式来表示转义字符，而不能是~7这种样式。</p>

<p>这里是转义字符的词法规则：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">fragment
Escape
    : &#39;~&#39; (&#39;n&#39;|&#39;t&#39;|&#39;v&#39;|&#39;r&#39;|&#39;f&#39;|&#39;b&#39;|&#39;\&quot;&#39;|&#39;\&#39;&#39;|&#39;~&#39;)
    | DecimalEscape
    | HexEscape
    | OctalEscape
    ;

fragment
DecimalEscape
    : &#39;~&#39; (&#39;0&#39;..&#39;1&#39;) (&#39;0&#39;..&#39;9&#39;) (&#39;0&#39;..&#39;9&#39;)    // 000 - 199
    | &#39;~&#39; &#39;2&#39; (&#39;0&#39;..&#39;5&#39;) (&#39;0&#39;..&#39;5&#39;)           // 200 - 255
    ;

fragment
HexEscape
    : &#39;~h&#39; (&#39;0&#39;..&#39;9&#39;|&#39;a&#39;..&#39;f&#39;|&#39;A&#39;..&#39;F&#39;) (&#39;0&#39;..&#39;9&#39;|&#39;a&#39;..&#39;f&#39;|&#39;A&#39;..&#39;F&#39;)    // 00 - FF
    ;

fragment
OctalEscape
    : &#39;~o&#39; (&#39;0&#39;..&#39;3&#39;) (&#39;0&#39;..&#39;7&#39;) (&#39;0&#39;..&#39;7&#39;)   // 000 - 377
    ;
</code></pre></div>
<h3 id="字符和字符串字面量（character-and-string-literal）">字符和字符串字面量（Character and String Literal）</h3>

<p>PowerScript程序中字符和字符串字面量没有明显的区别。字符是指由单引号（&#39;）或双引号（&quot;）括起来的一个ASCII字符，例如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">char c
c = &#39;T&#39;
c = &quot;T&quot;
</code></pre></div>
<p>字符串字面量则是指由单引号或双引号括起来的不多于1024个的ASCII字符串，例如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">string s
s = &#39;This is a string&#39;
s = &quot;This is a string&quot;
</code></pre></div>
<p>由于两者没有明显区别，因此在词法分析时只能将两者都作为字符串字面量来处理。至于到底是字符还是字符串，只有到了语意分析阶段才能作出判断（字符串字面量支持续行符）。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">STRING_LITERAL
    : ( &#39;\&#39;&#39; (Escape|~(&#39;~&#39;|&#39;\r&#39;|&#39;\n&#39;|&#39;\&#39;&#39;))* &#39;\&#39;&#39;
      | &#39;\&quot;&#39; (Escape|~(&#39;~&#39;|&#39;\r&#39;|&#39;\n&#39;|&#39;\&quot;&#39;))* &#39;\&quot;&#39;
      )
      {
          System.out.println(&quot;string&gt;&quot; + getText());
      }
    ;
</code></pre></div>
<h3 id="数字和布尔字面量（numeric-and-boolean-literal）">数字和布尔字面量（Numeric and Boolean Literal）</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">INTEGER_LITERAL
    : (&#39;0&#39;|&#39;1&#39;..&#39;9&#39; (&#39;0&#39;..&#39;9&#39;)*)
      {
          System.out.println(&quot;integer&gt;&quot; + getText());
      }
    ;

FLOAT_LITERAL
    : ( (&#39;0&#39;..&#39;9&#39;)+ &#39;.&#39; (&#39;0&#39;..&#39;9&#39;)* Exponent?
      | &#39;.&#39; (&#39;0&#39;..&#39;9&#39;)+ Exponent?
      | (&#39;0&#39;..&#39;9&#39;)+ Exponent?
      )
      {
          System.out.println(&quot;float&gt;&quot; + getText());
      }
    ;

BOOLEAN_LITERAL
    : (&#39;true&#39;|&#39;false&#39;)
      {
          System.out.println(&quot;boolean&gt;&quot; + getText());
      }

    ;

fragment
Exponent
    : (&#39;e&#39;|&#39;E&#39;) (&#39;+&#39;|&#39;-&#39;)? (&#39;0&#39;..&#39;9&#39;)+
    ;
</code></pre></div>
<h3 id="标识符（identifier）">标识符（Identifier）</h3>

<p>标识符规则可以参看<a href="http://codemany.com/blog/powerscript-identifier/">PowerScript标识符</a>一文，以下是标识符的词法规则：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">IDENTIFIER
    : Letter (Letter|&#39;0&#39;..&#39;9&#39;|&#39;$&#39;|&#39;#&#39;|&#39;%&#39;)*    // 暂时不支持短横线（-）
      {
          System.out.println(&quot;identifier&gt;&quot; + getText());
      }
    ;

fragment
Letter
    : (&#39;A&#39;..&#39;Z&#39;|&#39;a&#39;..&#39;z&#39;|&#39;_&#39;)
    ;
</code></pre></div>
<p>PowerScript是否支持变量名的续行？</p>

<blockquote>
<p>Do not split a line by inserting the continuation character within a variable name. This causes an error and the statement fails.</p>
</blockquote>

<p>经过实际测试V9.0 Build 5507、V9.0.1 Build 7171和V8.0.3 Build 9704都不支持变量名的续行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ANTLR构建PowerScript语法分析器（2）]]></title>
    <link href="http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part2/"/>
    <updated>2007-09-02T16:44:22+08:00</updated>
    <id>http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part2</id>
    <content type="html"><![CDATA[<p>在<a href="http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part1/">使用ANTLR构建PowerScript语法分析器（1）</a>中写的词法规则存在几个小问题：</p>

<ol>
<li>换行符和回车符同时存在于WS和EndOfLine两个词法规则中，属于重复定义；</li>
<li>输出单行注释时紧随其后会额外多输出一个空行；</li>
<li>单行注释是文件的最后一行时不能被词法分析器识别；</li>
<li>像<code>/* comments /* nested comments */ */</code>这种嵌套注释会被输出成：</li>
</ol>
<div class="highlight"><pre><code class="language-text" data-lang="text">bc&gt;/* comments /* nested comments */
bc&gt;/* comments /* nested comments */ */
</code></pre></div>
<p>下面我们将逐个修复它们。</p>

<p>解决第1个问题前先要问问自己，单行注释的词法规则中真的需要包含EndOfLine这个词法规则吗？真的需要吗？如果没有的话，当词法分析器识别到换行符或回车符时，就会去匹配词法规则WS。这样看来，EndOfLine这个词法规则在这里其实是不必要的，完全可以删除掉。</p>

<p>第2个问题因为词法规则EndOfLine已经被删除，所以也就不存在了。这儿仅仅分析下问题的原因。词法分析器分析单行注释时，EndOfLine会被当作单行注释的一部分予以识别。翻看生成的词法识别器代码，可以看到打印代码块出现在词法规则EndOfLine调用的后面。打印代码块中的getText()方法是从CharStream中获取文本的，如果在词法规则EndOfLine被调用后才执行，因为词法规则EndOfLine被调用时会将CharStream的当前索引向尾部移动，这时获得的文本就会包含EndOfLine，导致打印时额外输出一个空行。</p>

<p>第3个问题同样也由于第1个问题的修复而不存在了。它出现的原因是因为文件最后一行的结尾字符是EOF，无法匹配词法规则EndOfLine。</p>

<p>第4个问题则可以通过计数器来处理。先初始化一个计数器变量depthOfComments来标记块注释的深度，当遇到<code>“/*”</code>时就加1，遇到“*/”时则减1。输出时只要判断depthOfComments是否等于0就行了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@lexer::members {
    int depthOfComments = 0;
}

BLOCK_COMMENT
    : &#39;/*&#39; {depthOfComments++;}
      ( options {greedy=false;}
      : (&#39;/&#39; &#39;*&#39;)=&gt; BLOCK_COMMENT
      | &#39;/&#39; ~(&#39;*&#39;)
      | ~(&#39;/&#39;)
      )*
      &#39;*/&#39; {depthOfComments--;}
      {
          if (depthOfComments == 0) {
              System.out.println(&quot;bc&gt;&quot; + getText());
          }
      }
    ;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ANTLR构建PowerScript语法分析器（1）]]></title>
    <link href="http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part1/"/>
    <updated>2007-08-22T23:43:04+08:00</updated>
    <id>http://codemany.com/blog/using-antlr-to-build-powerscript-grammar-parser-part1</id>
    <content type="html"><![CDATA[<p>首先，让我们从最简单的做起，先实现一套能正确分析PowerScript注释的词法规则。PowerScript支持两种注释形式：单行注释（//）和多行注释（<code>/*...*/</code>）。</p>

<p>单行注释以双斜杠（//）起头，直到遇到行结束符为止，所以在这里要先明确一下行结束符用什么表示。在DOS系统中行结束符用“\r\n”表示，在Unix系统中行结束符用“\n”表示，现在的Mac系统也是以“\n”表示行结束符，但早期的Mac系统中行结束符则是以“\r”表示。所以兼容这几种操作系统的行结束符词法规则为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">fragment
EndOfLine
    : &#39;\r&#39; &#39;\n&#39;    // DOS
    | &#39;\r&#39;         // Mac
    | &#39;\n&#39;         // Unix
    ;
</code></pre></div>
<p>现在，有了行结束符词法规则，就可以定义单行注释的词法规则了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">LINE_COMMENT
    : &#39;//&#39; ~(&#39;\n&#39;|&#39;\r&#39;)* EndOfLine
    ;
</code></pre></div>
<p>通常的多行注释词法规则是这样的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">BLOCK_COMMENT
    : &#39;/*&#39; ( options {greedy=false;} : . )* &#39;*/&#39;
    ;
</code></pre></div>
<p>但由于PowerScript支持嵌套注释，所以上面的规则无效，必须重新定义。当词法分析器遇到<code>“/*”</code>后就进入了多行注释。这时假如遇到了“/”符号，词法分析器必须预取一个字符，看这个字符是否是“*”。如果是的话，就进入了嵌套的多行注释，否则，则还是处在多行注释中。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">BLOCK_COMMENT
    : &#39;/*&#39;
      ( options {greedy=false;}
      : (&#39;/&#39; &#39;*&#39;)=&gt; BLOCK_COMMENT    // 在多行注释中遇到“/*”，用语法断言确定是嵌套多行注释
      | &#39;/&#39; ~(&#39;*&#39;)                   // 在多行注释中只遇到“/”，而没有紧跟着的“*”
      | ~(&#39;/&#39;)                       // 在多行注释中没有遇到“/”
      )*
      &#39;*/&#39;
    ;
</code></pre></div>
<p>当然，我们还希望忽略空格、制表符、回车符、换行符等无意义字符。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">WS
    : (&#39; &#39;|&#39;\r&#39;|&#39;\t&#39;|&#39;\u000C&#39;|&#39;\n&#39;) {$channel=HIDDEN;}
    ;
</code></pre></div>
<p>测试代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/* This is a comment.   */
/* /This is a comment. */
/* *This is a comment. */
/* This is a comment. /* */*/
/* This is a comment. /* This is a nested comment. */ */
/*  The comment starts here.
 /*  The nested comment starts here.
 The nested comment ends here.  */
 The comment ends here.  */
/* The comment starts here,
 continues to this line,&amp;
 and finally ends here. */
// This entire line is a comment.
// This entire line is a comment. //
// /This entire line is a comment.
// This entire line is a comment. */
// This entire line is a comment. /*
</code></pre></div>
<p>完整的PowerScript.g的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">grammar PowerScript;

program
    : LINE_COMMENT+
    | BLOCK_COMMENT+
    ;

LINE_COMMENT
    : &#39;//&#39; ~(&#39;\n&#39;|&#39;\r&#39;)* EndOfLine
      {
          System.out.println(&quot;lc&gt;&quot; + getText());
      }
    ;

BLOCK_COMMENT
    : &#39;/*&#39;
      ( options {greedy=false;}
      : (&#39;/&#39; &#39;*&#39;)=&gt; BLOCK_COMMENT
      | &#39;/&#39; ~(&#39;*&#39;)
      | ~(&#39;/&#39;)
      )*
      &#39;*/&#39;
      {
          System.out.println(&quot;bc&gt;&quot; + getText());
      }
    ;

WS
    : (&#39; &#39;|&#39;\r&#39;|&#39;\t&#39;|&#39;\u000C&#39;|&#39;\n&#39;) {$channel=HIDDEN;}
    ;

fragment
EndOfLine
    : &#39;\r&#39; &#39;\n&#39;    // DOS
    | &#39;\r&#39;         // Mac
    | &#39;\n&#39;         // Unix
    ;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerScript标识符]]></title>
    <link href="http://codemany.com/blog/powerscript-identifier/"/>
    <updated>2006-12-13T12:47:45+08:00</updated>
    <id>http://codemany.com/blog/powerscript-identifier</id>
    <content type="html"><![CDATA[<p>在使用减号（-）、负号（-）、减1（--）运算符时，必须在这些符号的前面加上空格，原因在于PowerScript会把这些符号当成标识符的一部分。</p>

<p>PowerScript标识符规则：</p>

<ol>
<li>必须以字母或下划线（_）开头；</li>
<li>其余字符可以是字母、数字、下划线（_）、美元符号（$）、短横线（-）、号码符号（#），百分号（%）；</li>
<li>最长40个字符（实际最大长度可达99个），中间不能有空格；</li>
<li>不区分大小写。</li>
</ol>

<p>在PB.INI的[pb]节中将DashesInIdentifiers=1修改为DashesInIdentifiers=0可以禁止在标志符中使用短横线（-）。</p>
]]></content>
  </entry>
  
</feed>
