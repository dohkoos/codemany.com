<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: WebWork | 乐者为王]]></title>
  <link href="http://codemany.com/tags/webwork/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-10-04T18:41:38+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在WebWork的资源文件中获取验证字段的值]]></title>
    <link href="http://codemany.com/blog/how-to-obtain-verification-field-value-in-resource-file-of-webwork/"/>
    <updated>2006-03-30T14:56:37+08:00</updated>
    <id>http://codemany.com/blog/how-to-obtain-verification-field-value-in-resource-file-of-webwork</id>
    <content type="html"><![CDATA[<p>WebWork是一个非常不错的MVC框架，有着众多的优点，也有着细微的缺陷。在实现一个用户注册验证的例子时，发现在资源文件中不能获取验证字段的值，只能每个字段一个message。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class User {
    private String username;
    private String password;
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">&lt;field name=&quot;username&quot;&gt;
    &lt;field-validator type=&quot;stringlength&quot; short-circuit=&quot;true&quot;&gt;
        &lt;param name=&quot;minLength&quot;&gt;5&lt;/param&gt;
        &lt;param name=&quot;maxLength&quot;&gt;15&lt;/param&gt;
        &lt;message key=&quot;errors.username.range&quot; /&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;

&lt;field name=&quot;password&quot;&gt;
    &lt;field-validator type=&quot;stringlength&quot; short-circuit=&quot;true&quot;&gt;
        &lt;param name=&quot;minLength&quot;&gt;5&lt;/param&gt;
        &lt;param name=&quot;maxLength&quot;&gt;15&lt;/param&gt;
        &lt;message key=&quot;errors.password.range&quot; /&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre></div>
<p>资源文件中的消息内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">errors.username.range=${username} is not in the range ${minLength} through ${maxLength}.
errors.password.range=${password} is not in the range ${minLength} through ${maxLength}.
</code></pre></div>
<p>到xwork的站点上去查找解决方法，在Issue Tracker里看到有人提交了一个<a href="http://jira.opensymphony.com/browse/XW-184">Feature</a>，采用的办法是给message传递参数，看了xwork的代码后，发现这样子的做法要修改的代码量非常大，所以只能另外想办法解决。</p>

<p>在资源文件中可以用${fieldName}来获取要验证的字段变量名，那是否可以用${fieldValue}来得到验证字段的值呢？查看代码后发现这种办法行不通。那么是否可以用${${fieldName}}来获得字段变量的值呢？查看代码发现验证失败后会调用Validator.getMessage()方法，追踪代码来到TextParseUtil.translateVariables()方法中，找到代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">while (start != -1 &amp;&amp; x &lt; length &amp;&amp; count != 0) {    // 该部分代码负责查找变量，即${}包围的字符串
    c = expression.charAt(x++);
    if (c == &#39;{&#39;) {
        count++;
    } else if (c == &#39;}&#39;) {
        count--;
    }
}
end = x - 1;

if ((start != -1) &amp;&amp; (end != -1) &amp;&amp; (count == 0)) {
    String var = expression.substring(start + 2, end);

    Object o = stack.findValue(var, asType);    // 此处就是获取变量值的地方

    String left = expression.substring(0, start);
    String right = expression.substring(end + 1);
</code></pre></div>
<p>由上面的代码可以看出WebWork只处理了最外围的${}，所以要让它处理像${${}}这样的格式就需要在获取变量前再次处理变量。修改后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if ((start != -1) &amp;&amp; (end != -1) &amp;&amp; (count == 0)) {
    String nestedExpression = expression.substring(start + 2, end);
    String var = translateVariables(nestedExpression, stack);
    //String var = expression.substring(start + 2, end);

    Object o = stack.findValue(var, asType);

    String left = expression.substring(0, start);
    String right = expression.substring(end + 1);
</code></pre></div>
<p>现在就可以处理资源文件中的多重嵌套变量了。接着把修改验证文件和资源文件修改一下就可以了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;field name=&quot;username&quot;&gt;
    &lt;field-validator type=&quot;stringlength&quot; short-circuit=&quot;true&quot;&gt;
        &lt;param name=&quot;minLength&quot;&gt;5&lt;/param&gt;
        &lt;param name=&quot;maxLength&quot;&gt;15&lt;/param&gt;
        &lt;message key=&quot;errors.range&quot; /&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;

&lt;field name=&quot;password&quot;&gt;
    &lt;field-validator type=&quot;stringlength&quot; short-circuit=&quot;true&quot;&gt;
        &lt;param name=&quot;minLength&quot;&gt;5&lt;/param&gt;
        &lt;param name=&quot;maxLength&quot;&gt;15&lt;/param&gt;
        &lt;message key=&quot;errors.range&quot; /&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">errors.range=${${fieldName}} is not in the range ${minLength} through ${maxLength}.
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Struts-Menu能访问WebWork的ResourceBundle]]></title>
    <link href="http://codemany.com/blog/allow-struts-menu-to-access-resourcebundle-of-webwork/"/>
    <updated>2006-03-12T07:01:48+08:00</updated>
    <id>http://codemany.com/blog/allow-struts-menu-to-access-resourcebundle-of-webwork</id>
    <content type="html"><![CDATA[<p>Struts-Menu默认是通过JSTL或者Struts来读取ResourceBundle的，这就需要在web.xml中配置要读取的properties文件（JSTL方式）或在struts-config.xml中配置（Struts方式）。
WebWork也有自己的ResourceBundle配置方式，而且Struts-Menu也不支持访问WebWork的ResourceBundle的功能。所以参考着DisplayTag的实现对Struts-Menu进行了一番手术，实现了可访问WebWork的ResourceBundle的功能。</p>

<p>下面是修改步骤：</p>

<ul>
<li>在Struts-Menu项目中增加net/sf/navigator/localization目录，将org.displaytag.localization中的*.java移到该目录中；</li>
<li>将org.displaytag下的Message.java和messages.properties移到net/sf/navigator目录下；</li>
<li>给MenuDisplayerMapping添加两个属性localeResover和ResourceProvider；</li>
<li>在struts-menu.xml的Displayer标签下添加：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;setProperty property=&quot;localeResover&quot; value=&quot;net.sf.navigator.localization.I18nWebworkAdapter&quot; /&gt;
&lt;setProperty property=&quot;resourceProvider&quot; value=&quot;net.sf.navigator.localization.I18nWebworkAdapter&quot; /&gt;
</code></pre></div>
<ul>
<li>在MenuDisplayer中添加以下四个接口方法，并在AbstractMenuDisplayer里实现它们：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">public LocaleResolver getLocaleResolver();
public void setLocaleResolver(LocaleResolver localeResolver);
public I18nResourceProvider getResourceProvider();
public void setResourceProvider(I18nResourceProvider resourceProvider);
</code></pre></div>
<ul>
<li>在AbstractMenuDisplayer里添加protected的PageContext对象，并在init方法里初始化它；</li>
<li>覆写MessageResourcesMenuDisplayer.getMessage方法，代码如下：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">public String getMessage(String key) {
    String message = null;

    if (resourceProvider != null) {
        message = resourceProvider.getResource(key, &quot;???&quot;, null, pageContext);
    }
    if (message == null) {
        message = key;
    }

    return message;
}
</code></pre></div>
<ul>
<li>在UseMenuDisplayerTag文件里添加代码（+后的代码是增加的）：</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">  // get an instance of the menu displayer
  MenuDisplayer displayerInstance = null;
+ LocaleResolver localeResolver = null;
+ I18nResourceProvider resourceProvider = null;

  // default to use the config on the mapping
  if (displayerMapping.getConfig() != null) {
      // this value (config) is set on the displayer below
      setConfig(displayerMapping.getConfig());
  }
+ localeResolver =
+         (LocaleResolver) Class.forName(displayerMapping.getLocaleResover()).newInstance();
+ resourceProvider =
+         (I18nResourceProvider) Class.forName(displayerMapping.getLocaleProvider()).newInstance();

  displayerInstance.setConfig(config);
+ displayerInstance.setResourceProvider(resourceProvider);
+ displayerInstance.setLocaleResolver(localeResolver);
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebWork中如何实现i18n]]></title>
    <link href="http://codemany.com/blog/how-to-implement-i18n-in-webwork/"/>
    <updated>2005-11-17T13:57:14+08:00</updated>
    <id>http://codemany.com/blog/how-to-implement-i18n-in-webwork</id>
    <content type="html"><![CDATA[<p>ognl-2.6.5.jar + oscore-2.2.4.jar + webwork-2.1.7.jar + xwork-1.0.5.jar</p>

<p>web.xml配置文件的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE web-app PUBLIC
    &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;
    &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;&gt;

&lt;web-app&gt;
    &lt;display-name&gt;i18n&lt;/display-name&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;action&lt;/servlet-name&gt;
        &lt;servlet-class&gt;com.opensymphony.webwork.dispatcher.ServletDispatcher&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;action&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;taglib&gt;
        &lt;taglib-uri&gt;webwork&lt;/taglib-uri&gt;
        &lt;taglib-location&gt;/WEB-INF/webwork.tld&lt;/taglib-location&gt;
    &lt;/taglib&gt;
&lt;/web-app&gt;
</code></pre></div>
<p>webwork.properties配置文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">### This can be used to set your locale and encoding scheme
#webwork.locale=en_US    &lt;- 这行一定要注释掉，因为WebWork首先判断webwork.locale有没有被设置，
                            如有则始终以该locale为准，忽略浏览器的locale
webwork.i18n.encoding=utf-8

### Load custom default resource bundles
webwork.custom.i18n.resources=ApplicationResources
</code></pre></div>
<p>xwork.xml配置文件的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE xwork PUBLIC
    &quot;-//OpenSymphony Group//XWork 1.0//EN&quot;
    &quot;http://www.opensymphony.com/xwork/xwork-1.0.dtd&quot;&gt;

&lt;xwork&gt;
    &lt;include file=&quot;webwork-default.xml&quot; /&gt;

    &lt;package name=&quot;default&quot; extends=&quot;webwork-default&quot;&gt;
        &lt;action name=&quot;hello&quot; class=&quot;com.codemany.i18n.action.HelloAction&quot;&gt;
            &lt;result name=&quot;success&quot; type=&quot;dispatcher&quot;&gt;/i18n.jsp&lt;/result&gt;
        &lt;/action&gt;
    &lt;/package&gt;
&lt;/xwork&gt;
</code></pre></div>
<p>HelloAction.java实现代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import com.opensymphony.xwork.ActionSupport;

public class HelloAction extends ActionSupport {

    public String execute() throws Exception {
        return SUCCESS;
    }
}
</code></pre></div>
<p>i18n.jsp的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%@ page pageEncoding=&quot;utf-8&quot; contentType=&quot;text/html; charset=utf-8&quot; %&gt;

&lt;%@ taglib uri=&quot;webwork&quot; prefix=&quot;ww&quot; %&gt;

&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;ww:property value=&quot;getText(&#39;i18n.value&#39;)&quot; /&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div>
<p>ApplicationResources_zh_CN.properties的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">i18n.value=国际化
</code></pre></div>
<p>ApplicationResources_en_US.properties的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">i18n.value=internationalization
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步整合WebWork和Spring]]></title>
    <link href="http://codemany.com/blog/webwork-and-spring-integration-step-by-step/"/>
    <updated>2005-09-26T10:50:27+08:00</updated>
    <id>http://codemany.com/blog/webwork-and-spring-integration-step-by-step</id>
    <content type="html"><![CDATA[<p>把webwork-2.1.7.jar、spring-1.2.1.jar以及webwork2-srping.jar复制到WEB-INF/lib目录下。</p>

<p>添加以下内容到web.xml文件中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;

&lt;listener&gt;
    &lt;listener-class&gt;com.atlassian.xwork.ext.ResolverSetupServletContextListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre></div>
<p>applicationContext.xml中的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.SingleConnectionDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;${driver}&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;${url}&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;${username}&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;${password}&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;sqlMapClient&quot; class=&quot;org.springframework.orm.ibatis.SqlMapClientFactoryBean&quot;&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;/WEB-INF/sql-map-config.xml&quot; /&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;userManager&quot; class=&quot;com.codemany.netlink.service.impl.UserManagerImpl&quot; singleton=&quot;true&quot;&gt;
        &lt;property name=&quot;sqlMapClient&quot; ref=&quot;sqlMapClient&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>配置文件sql-map-config.xml中的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;sqlMapConfig&gt;
    &lt;sqlMap resource=&quot;com/codemany/netlink/dao/impl/User.xml&quot; /&gt;
&lt;/sqlMapConfig&gt;
</code></pre></div>
<p>在xwork.xml中添加以下内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;package name=&quot;default&quot; extends=&quot;webwork-default&quot;
        externalReferenceResolver=&quot;com.atlassian.xwork.ext.SpringServletContextReferenceResolver&quot;&gt;

    &lt;interceptors&gt;
        &lt;interceptor name=&quot;reference-resolver&quot;
                class=&quot;com.opensymphony.xwork.interceptor.ExternalReferencesInterceptor&quot; /&gt;

        &lt;interceptor-stack name=&quot;interceptors&quot;&gt;
            &lt;interceptor-ref name=&quot;params&quot; /&gt;
            &lt;interceptor-ref name=&quot;reference-resolver&quot; /&gt;
        &lt;/interceptor-stack&gt;
    &lt;/interceptors&gt;

    &lt;default-interceptor-ref name=&quot;default-interceptor&quot; /&gt;

    &lt;action name=&quot;login&quot; class=&quot;com.codemany.netlink.action.LoginAction&quot;&gt;
        &lt;external-ref name=&quot;userManager&quot;&gt;userManager&lt;/external-ref&gt;
        &lt;result name=&quot;success&quot; type=&quot;dispatcher&quot;&gt;/success.jsp&lt;/result&gt;
        &lt;result name=&quot;error&quot; type=&quot;dispatcher&quot;&gt;/error.jsp&lt;/result&gt;
    &lt;/action&gt;
&lt;/package&gt;
</code></pre></div>
<p>在LoginAction.java中添加代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private UserManager userManager = null;

public void setUserManager(UserManager userManager) {
    this.userManager = userManager;
</code></pre></div>
<p>建立UserManager.java接口文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public interface UserManager {
    public User login(String username, String password) throws UserLoginException;
}
</code></pre></div>
<p>UserManagerImpl.java实现代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class UserManagerImpl extends SqlMapClientDaoSupport implements UserManager {

    public User login(String username, String password) throws UserLoginException {
        // do something
    }
}
</code></pre></div>]]></content>
  </entry>
  
</feed>
