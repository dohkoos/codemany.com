<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: WebWork | 乐者为王]]></title>
  <link href="http://codemany.com/tags/webwork/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-13T18:49:25+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WebWork的资源文件中如何动态取得验证字段的值]]></title>
    <link href="http://codemany.com/blog/2006/03/30/webwork-document-how-the-resources-to-obtain-verification-of-dynamic-field-values/"/>
    <updated>2006-03-30T14:56:37+08:00</updated>
    <id>http://codemany.com/blog/2006/03/30/webwork-document-how-the-resources-to-obtain-verification-of-dynamic-field-values</id>
    <content type="html"><![CDATA[<p>WebWork是一个非常不错的MVC框架，有着众多的优点，不过也有许多的缺陷。在实现一个用户注册验证的例子时，发现在资源文件中不能动态的或的验证字段的值。只能每个字段一个message。</p>

<p>```
class User {</p>

<pre><code>private String username;
private String password;
</code></pre>

<p>}
```</p>

<p>```
<field name="username"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.username.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field></p>

<p><field name="password"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.password.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field>
```</p>

<p><code>
errors.username.range=${username} is not in the range ${minLength} through ${maxLength}.
errors.password.range=${password} is not in the range ${minLength} through ${maxLength}.
</code></p>

<p>到xwork的站点上去查找解决方法，在Issue Tracker里看到有人提交了一个Feature，采用的办法是给message传递参数(<a href="http://jira.opensymphony.com/browse/XW-184">http://jira.opensymphony.com/browse/XW-184</a>)，看了xwork的代码后，发现这样子的做法要修改的代码量非常大，所以只能另外想办法解决。</p>

<p>在资源文件中可以用${fieldName}来获取要验证的字段变量名，那是否可以用${fieldValue}来得到验证字段的值呢？查看代码后发现这种办法也不可行。既然${fieldName}获得的是字段变量名，那么是否可以用${${fieldName}}来获取字段变量的值呢？验证失败后会调用Validator.getMessage()方法，追踪代码来到TextParseUtil.translateVariables()方法中，找到代码：</p>

<p>```
while (start != -1 &amp;&amp; x &lt; length &amp;&amp; count != 0) { // 该部分代码负责查找变量，即${}包围的字符串</p>

<pre><code>c = expression.charAt(x++);
if (c == '{') {
    count++;
} else if (c == '}') {
    count--;
}
</code></pre>

<p>}
end = x - 1;</p>

<p>if ((start != -1) &amp;&amp; (end != -1) &amp;&amp; (count == 0)) {</p>

<pre><code>String var = expression.substring(start + 2, end);

Object o = stack.findValue(var, asType); // 此处就是获取变量值的地方

String left = expression.substring(0, start);
String right = expression.substring(end + 1);
...
</code></pre>

<p>```</p>

<p>由上面的代码可以看出WebWork只处理了最外围的${}，所以要让它处理像${${}}这样的格式就需要在获取变量前再次处理变量。修改后的代码如下：</p>

<p>```
if ((start != -1) &amp;&amp; (end != -1) &amp;&amp; (count == 0)) {</p>

<pre><code>String nestedExpression = expression.substring(start + 2, end);
String var = translateVariables(nestedExpression, stack);
//String var = expression.substring(start + 2, end);

Object o = stack.findValue(var, asType);    // 此处就是获取变量值的地方

String left = expression.substring(0, start);
String right = expression.substring(end + 1);
</code></pre>

<p>```</p>

<p>现在就可以处理资源文件中的多重嵌套变量了。接着把修改验证文件和资源文件修改一下就可以了。</p>

<p>```
<field name="username"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field></p>

<p><field name="password"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field>
```</p>

<p><code>
errors.range=${${fieldName}} is not in the range ${minLength} through ${maxLength}.
</code></p>

<p>注：以上的解决方案只是权宜之计，可能会出现多重嵌套降低效率的问题。最好的方法我觉得还是 <a href="http://jira.opensymphony.com/browse/XW-184">http://jira.opensymphony.com/browse/XW-184</a> 建议的那样传递参数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Struts-Menu通过WebWork来读取ResourceBundle]]></title>
    <link href="http://codemany.com/blog/2006/03/12/struts-menu-allow-webwork-to-read-through-the-resourcebundle/"/>
    <updated>2006-03-12T07:01:48+08:00</updated>
    <id>http://codemany.com/blog/2006/03/12/struts-menu-allow-webwork-to-read-through-the-resourcebundle</id>
    <content type="html"><![CDATA[<p>struts-menu默认是通过jstl或者struts来读取ResourceBundle的，&#36825;就&#38656;&#35201;在web.xml中&#37197;&#32622;&#35201;读取的properties文件&#65288;jstl&#65289;或在struts-config.xml中&#37197;&#32622;&#65288;struts&#65289;。<br />
webwork&#20063;&#26377;&#33258;&#24049;的ResourceBundle&#37197;&#32622;&#26041;&#24335;，&#36825;样&#24863;&#35273;&#36215;来&#22826;不&#32479;&#19968;了，&#32780;&#19988;如果&#35201;&#35753;struts-menu通过spring&#20043;&#31867;的web&#26694;&#26550;来读ResourceBundle的&#35805;&#20063;&#20570;不到。&#25152;以&#21442;&#32771;&#30528;displaytag的&#23454;现&#23545;struts-menu&#36827;行了&#19968;&#30058;&#20462;改，&#23454;现了可通过web&#26694;&#26550;来读取ResourceBundle的&#21151;能。<br /></p>

<br />


<p>&#26242;时&#21482;是&#23454;现了webwork，下&#38754;是&#20462;改步骤<br />
1、&#22686;加net.sf.navigator.localization&#21253;，将org.displaytag.localization中的*.java&#31227;到&#35813;&#21253;中<br />
2、将org.displaytag下的Message.java&#21644;messages.properties&#31227;到net.sf.navigator目录下<br />
3、&#32473;MenuDisplayerMapping添加&#20004;个&#23646;&#24615;localeResover&#21644;ResourceProvider，&#19988;&#37117;&#23454;现get&#21644;set&#26041;&#27861;<br />
4、在struts-menu.xml的Displayer标签下添加：</p>

<p><code>
&lt;setProperty property="localeResover" value="net.sf.navigator.localization.I18nWebworkAdapter" /&gt;
&lt;setProperty property="resourceProvider" value="net.sf.navigator.localization.I18nWebworkAdapter" /&gt;
</code></p>

<p>5、在MenuDisplayer添加四个&#25509;&#21475;&#26041;&#27861;</p>

<p>```</p>

<pre><code>public LocaleResolver getLocaleResolver();&lt;br /&gt;
  public void setLocaleResolver(LocaleResolver localeResolver);&lt;br /&gt;
  public I18nResourceProvider getResourceProvider();&lt;br /&gt;
  public void setResourceProvider(I18nResourceProvider resourceProvider);&lt;br /&gt;
   &amp;#24182;在AbstractMenuDisplayer&amp;#37324;&amp;#23454;现&amp;#36825;四个&amp;#26041;&amp;#27861;&lt;br /&gt;
</code></pre>

<p>6、在AbstractMenuDisplayer&#37324;添加protected的PageContext&#23545;&#35937;，&#24182;在init&#26041;&#27861;&#37324;&#21021;&#22987;&#21270;&#23427;<br />
7、&#37325;写MessageResourcesMenuDisplayer.getMessage&#26041;&#27861;，&#20195;&#30721;如下<br /></p>

<pre><code>  public String getMessage(String key) {&lt;br /&gt;
      String message = null;&lt;br /&gt;
</code></pre>

<br />


<pre><code>      if (resourceProvider != null) {&lt;br /&gt;
          message = resourceProvider.getResource(key, "???", null, pageContext);&lt;br /&gt;
      }&lt;br /&gt;
      if (message == null) {&lt;br /&gt;
          message = key;&lt;br /&gt;
      }&lt;br /&gt;
</code></pre>

<br />


<pre><code>      return message;&lt;br /&gt;
  }&lt;br /&gt;
</code></pre>

<p>8、在UseMenuDisplayerTag文件&#37324;添加&#20195;&#30721;&#65288;+后的&#20195;&#30721;是&#22686;加的&#65289;<br /></p>

<pre><code>  //get an instance of the menu displayer&lt;br /&gt;
  MenuDisplayer displayerInstance = null;&lt;br /&gt;
+ LocaleResolver localeResolver = null;&lt;br /&gt;
+ I18nResourceProvider resourceProvider = null;&lt;br /&gt;
</code></pre>

<br />


<pre><code>  // default to use the config on the mapping&lt;br /&gt;
  if (displayerMapping.getConfig() != null) {&lt;br /&gt;
      // this value (config) is set on the displayer below&lt;br /&gt;
      setConfig(displayerMapping.getConfig());&lt;br /&gt;
  }&lt;br /&gt;
+ localeResolver =&lt;br /&gt;
+         (LocaleResolver) Class.forName(displayerMapping.getLocaleResover()).newInstance();&lt;br /&gt;
+ resourceProvider =&lt;br /&gt;
+         (I18nResourceProvider) Class.forName(displayerMapping.getLocaleProvider()).newInstance();&lt;br /&gt;
</code></pre>

<br />


<pre><code>  displayerInstance.setConfig(config);&lt;br /&gt;
+ displayerInstance.setResourceProvider(resourceProvider);&lt;br /&gt;
+ displayerInstance.setLocaleResolver(localeResolver);&lt;br /&gt;
</code></pre>

<br />


<p>如果&#35201;&#23454;现jstl、spring等&#26694;&#26550;的&#35805;，可以将org.displaytag.localization&#30456;&#24212;的java文件&#31227;到net.sf.navigator.localization目录下就可以了。</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebWork如何实现I18n]]></title>
    <link href="http://codemany.com/blog/2005/11/17/webwork-how-to-achieve-i18n/"/>
    <updated>2005-11-17T13:57:14+08:00</updated>
    <id>http://codemany.com/blog/2005/11/17/webwork-how-to-achieve-i18n</id>
    <content type="html"><![CDATA[<p>ognl-2.6.5.jar<br />
oscore-2.2.4.jar<br />
webwork-2.1.7.jar<br />
xwork-1.0.5.jar</p>

<p>web.xml配置文件内容：
```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE web-app PUBLIC</p>

<pre><code>"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
"http://java.sun.com/dtd/web-app_2_3.dtd"&gt;
</code></pre>

<p>&lt;web-app></p>

<pre><code>&lt;display-name&gt;i18n&lt;/display-name&gt;

&lt;servlet&gt;
    &lt;servlet-name&gt;action&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.opensymphony.webwork.dispatcher.ServletDispatcher&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;action&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;taglib&gt;
    &lt;taglib-uri&gt;webwork&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/webwork.tld&lt;/taglib-location&gt;
&lt;/taglib&gt;
</code></pre>

<p>&lt;/web-app>
```</p>

<p>// webwork.properties<br /></p>

<h3>This can be used to set your locale and encoding scheme<br /></h3>

<h1>webwork.locale=en_US    &lt;----- &#36825;&#19968;&#34892;&#19968;&#23450;&#35201;&#27880;&#37322;&#25481;&#65292;&#22240;&#20026;webwork&#39318;&#20808;&#21028;&#26029;webwork.locale&#26377;&#27809;&#26377;&#34987;&#35774;&#32622;&#65292;<br /></h1>

<p>&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#12288;&#22914;&#26377;&#21017;&#22987;&#32456;&#20197;&#35813;locale&#20026;&#20934;&#65292;&#24573;&#30053;&#27983;&#35272;&#22120;&#30340;locale<br />
webwork.i18n.encoding=utf-8<br /></p>

<h3>Load custom default resource bundles<br /></h3>

<p>webwork.custom.i18n.resources=ApplicationResources<br />
```</p>

<p>xwork.xml配置文件：
```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE xwork PUBLIC</p>

<pre><code>"-//OpenSymphony Group//XWork 1.0//EN"
"http://www.opensymphony.com/xwork/xwork-1.0.dtd"&gt;
</code></pre>

<p><xwork></p>

<pre><code>&lt;include file="webwork-default.xml" /&gt;

&lt;package name="default" extends="webwork-default"&gt;
    &lt;action name="hello" class="com.example.i18n.action.HelloAction"&gt;
        &lt;result name="success" type="dispatcher"&gt;/i18n.jsp&lt;/result&gt;&lt;br /&gt;
    &lt;/action&gt;&lt;br /&gt;
&lt;/package&gt;&lt;br /&gt;
</code></pre>

<p></xwork><br />
```</p>

<p>I18NAction.java
```
package test.example.i18n;<br /></p>

<br />


<p>import com.opensymphony.xwork.ActionSupport;<br /></p>

<br />


<p>public class I18NAction extends ActionSupport {<br /></p>

<br />


<pre><code>public String execute() throws Exception {&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}<br />
```</p>

<p>// i18n.jsp
```
&lt;%@ page pageEncoding="utf-8" contentType="text/html; charset=utf-8" %><br /></p>

<br />


<p>&lt;%@ taglib uri="webwork" prefix="ww" %><br /></p>

<br />


<p><html><br />
<head><br /></p>

<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;br /&gt;
</code></pre>

<p></head><br /></p>

<br />


<p><body><br /></p>

<pre><code>&lt;ww:property value="getText(&amp;#39;i18n.value&amp;#39;)" /&gt;&lt;br /&gt;
</code></pre>

<p></body><br />
</html><br />
```</p>

<p>// ApplicationResources_zh_CN.properties<br />
i18n.value=&#22269;&#38469;&#21270;<br /></p>

<p>// ApplicationResources_en_US.properties<br />
i18n.value=internationalization</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步教你整合WebWork和Spring]]></title>
    <link href="http://codemany.com/blog/2005/09/26/teach-you-step-by-step-integration-of-webwork-and-spring/"/>
    <updated>2005-09-26T10:50:27+08:00</updated>
    <id>http://codemany.com/blog/2005/09/26/teach-you-step-by-step-integration-of-webwork-and-spring</id>
    <content type="html"><![CDATA[<p>拷贝webwork-2.1.7.jar、spring-1.2.1.jar以及webwork2-srping.jar到WEB-INF/lib目录下。</p>

<p>添加以下内容到web.xml文件中：
```
<listener></p>

<pre><code>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</code></pre>

<p></listener></p>

<p><listener></p>

<pre><code>&lt;listener-class&gt;com.atlassian.xwork.ext.ResolverSetupServletContextListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>applicationContext.xml中的内容如下：
```
<beans></p>

<pre><code>&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource"&gt;
    &lt;property name="driverClassName" value="${driver}" /&gt;
    &lt;property name="url" value="${url}" /&gt;
    &lt;property name="username" value="${username}" /&gt;
    &lt;property name="password" value="${password}" /&gt;
&lt;/bean&gt;

&lt;bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"&gt;
    &lt;property name="configLocation" value="/WEB-INF/sql-map-config.xml" /&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
&lt;/bean&gt;

&lt;bean id="userManager" class="com.example.integration.service.impl.UserManagerImpl" singleton="true"&gt;
    &lt;property name="sqlMapClient" ref="sqlMapClient" /&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>配置文件sql-map-config.xml中的内容如下：
```
<sqlMapConfig></p>

<pre><code>&lt;sqlMap resource="com/example/integration/persistence/sql/User.xml" /&gt;
</code></pre>

<p></sqlMapConfig>
```</p>

<p>在xwork.xml中添加以下内容：
```
&lt;package name="default" extends="webwork-default"</p>

<pre><code>    externalReferenceResolver="com.atlassian.xwork.ext.SpringServletContextReferenceResolver"&gt;

&lt;interceptors&gt;
    &lt;interceptor name="reference-resolver"
            class="com.opensymphony.xwork.interceptor.ExternalReferencesInterceptor" /&gt;

    &lt;interceptor-stack name="interceptors"&gt;
        &lt;interceptor-ref name="params" /&gt;
        &lt;interceptor-ref name="reference-resolver" /&gt;
    &lt;/interceptor-stack&gt;
&lt;/interceptors&gt;

&lt;default-interceptor-ref name="default-interceptor" /&gt;

&lt;action name="login" class="com.example.integration.presentation.LoginAction"&gt;
    &lt;external-ref name="userManager"&gt;userManager&lt;/external-ref&gt;
    &lt;result name="success" type="dispatcher"&gt;/success.jsp&lt;/result&gt;
    &lt;result name="error" type="dispatcher"&gt;/error.jsp&lt;/result&gt;
&lt;/action&gt;
</code></pre>

<p></package>
```</p>

<p>在LoginAction.java中添加代码：
```
private UserManager userManager = null;</p>

<p>public void setUserManager(UserManager userManager) {</p>

<pre><code>this.userManager = userManager;
</code></pre>

<p>}
```</p>

<p>建立UserManager.java接口文件：
```
public interface UserManager {</p>

<pre><code>public User login(String username, String password) throws UserLoginException;
</code></pre>

<p>}
```</p>

<p>UserManagerImpl.java实现代码：
```
public class UserManagerImpl extends SqlMapClientDaoSupport implements UserManager {</p>

<pre><code>public User login(String username, String password) throws UserLoginException {
    // do something
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
