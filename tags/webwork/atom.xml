<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: WebWork | 乐者为王]]></title>
  <link href="http://codemany.com/tags/webwork/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-04T00:34:54+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WebWork的资源文件中如何动态取得验证字段的值]]></title>
    <link href="http://codemany.com/blog/2006/03/30/webwork-document-how-the-resources-to-obtain-verification-of-dynamic-field-values/"/>
    <updated>2006-03-30T14:56:37+08:00</updated>
    <id>http://codemany.com/blog/2006/03/30/webwork-document-how-the-resources-to-obtain-verification-of-dynamic-field-values</id>
    <content type="html"><![CDATA[<p>WebWork是一个非常不错的MVC框架，有着众多的优点，不过也有许多的缺陷。在实现一个用户注册验证的例子时，发现在资源文件中不能动态的或的验证字段的值。只能每个字段一个message。<br />
```
class User {<br /></p>

<pre><code>private String username;&lt;br /&gt;
private String password;&lt;br /&gt;
[...]&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>```
<field name="username"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.username.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field></p>

<p><field name="password"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.password.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field>
```</p>

<p><code>
errors.username.range=${username} is not in the range ${minLength} through ${maxLength}.&lt;br /&gt;
errors.password.range=${password} is not in the range ${minLength} through ${maxLength}.&lt;br /&gt;
</code></p>

<p>到xwork的站点上去查找解决方法，在Issue Tracker里看到有人提交了一个Feature，采用的办法是给<br />
message传递参数(<a href="http://jira.opensymphony.com/browse/XW-184">http://jira.opensymphony.com/browse/XW-184</a>)，看了xwork的代码后，发现这样<br />
子的做法要修改的代码量非常大，所以只能另外想办法解决。</p>

<p>在资源文件中可以用${fieldName}来获取要验证的字段变量名，那是否可以用${fieldValue}来得到验<br />
证字段的值呢？查看代码后发现这种办法也不可行。既然${fieldName}获得的是字段变量名，那么是否<br />
可以用${${fieldName}}来获取字段变量的值呢？验证失败后会调用Validator.getMessage()方法，追<br />
踪代码来到TextParseUtil.translateVariables()方法中，找到代码：<br />
```
while (start != -1 &amp;&amp; x &lt; length &amp;&amp; count != 0) { // 该部分代码负责查找变量，即${}包围的字符串</p>

<pre><code>c = expression.charAt(x++);
if (c == '{') {
    count++;
} else if (c == '}') {
    count--;
}
</code></pre>

<p>}
end = x &ndash; 1;</p>

<p>if ((start != -1) &amp;&amp; (end != -1) &amp;&amp; (count == 0)) {</p>

<pre><code>String var = expression.substring(start + 2, end);

Object o = stack.findValue(var, asType); // 此处就是获取变量值的地方

String left = expression.substring(0, start);
String right = expression.substring(end + 1);
...
</code></pre>

<p>```</p>

<p>由上面的代码可以看出WebWork只处理了最外围的${}，所以要让它处理像${${}}这样的格式就需要在<br />
获取变量前再次处理变量。修改后的代码如下：<br />
```
if ((start != -1) &amp;&amp; (end != -1) &amp;&amp; (count == 0)) {<br /></p>

<pre><code>String nestedExpression = expression.substring(start + 2, end);&lt;br /&gt;
String var = translateVariables(nestedExpression, stack);&lt;br /&gt;
//String var = expression.substring(start + 2, end);

Object o = stack.findValue(var, asType);     --&gt; 此处就是获取变量值的地方

String left = expression.substring(0, start);&lt;br /&gt;
String right = expression.substring(end + 1);&lt;br /&gt;
[...]&lt;br /&gt;
</code></pre>

<p>```</p>

<p>现在就可以处理资源文件中的多重嵌套变量了。接着把修改验证文件和资源文件修改一下就可以了。<br />
```
<field name="username"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field></p>

<p><field name="password"></p>

<pre><code>&lt;field-validator type="stringlength" short-circuit="true"&gt;
    &lt;param name="minLength"&gt;5&lt;/param&gt;
    &lt;param name="maxLength"&gt;15&lt;/param&gt;
    &lt;message key="errors.range" /&gt;
&lt;/field-validator&gt;
</code></pre>

<p></field>
```</p>

<p><code>
errors.range=${${fieldName}} is not in the range ${minLength} through ${maxLength}.&lt;br /&gt;
</code></p>

<p>注：以上的解决方案只是权宜之计，可能会出现多重嵌套降低效率的问题。最好的方法我觉得还是<a href="http://jira.opensymphony.com/browse/XW-184" title="XW-184"><a href="http://jira.opensymphony.com/browse/XW-184">http://jira.opensymphony.com/browse/XW-184</a><a>建议的那样传递参数。</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Struts-Menu通过WebWork来读取ResourceBundle]]></title>
    <link href="http://codemany.com/blog/2006/03/12/struts-menu-allow-webwork-to-read-through-the-resourcebundle/"/>
    <updated>2006-03-12T07:01:48+08:00</updated>
    <id>http://codemany.com/blog/2006/03/12/struts-menu-allow-webwork-to-read-through-the-resourcebundle</id>
    <content type="html"><![CDATA[<p>struts-menu&#40664;&#35748;是&#36890;过jstl&#25110;&#32773;struts来&#35835;取ResourceBundle的，&#36825;就&#38656;&#35201;在web.xml中&#37197;&#32622;&#35201;&#35835;取的properties文件&#65288;jstl&#65289;&#25110;在struts-config.xml中&#37197;&#32622;&#65288;struts&#65289;。<br />webwork&#20063;&#26377;&#33258;&#24049;的ResourceBundle&#37197;&#32622;&#26041;&#24335;，&#36825;样&#24863;&#35273;&#36215;来&#22826;不&#32479;&#19968;了，&#32780;&#19988;如果&#35201;&#35753;struts-menu&#36890;过spring&#20043;&#31867;的web&#26694;&#26550;来&#35835;ResourceBundle的&#35805;&#20063;&#20570;不到。&#25152;以&#21442;&#32771;&#30528;displaytag的&#23454;现&#23545;struts-menu&#36827;行了&#19968;&#30058;&#20462;改，&#23454;现了可&#36890;过web&#26694;&#26550;来&#35835;取ResourceBundle的&#21151;能。<br /><br />&#26242;时&#21482;是&#23454;现了webwork，下&#38754;是&#20462;改步骤<br />1&#12289;&#22686;加net.sf.navigator.localization&#21253;，将org.displaytag.localization中的*.java&#31227;到&#35813;&#21253;中<br />2&#12289;将org.displaytag下的Message.java&#21644;messages.properties&#31227;到net.sf.navigator目录下<br />3&#12289;&#32473;MenuDisplayerMapping添加&#20004;&#20010;&#23646;&#24615;localeResover&#21644;ResourceProvider，&#19988;&#37117;&#23454;现get&#21644;set&#26041;&#27861;<br />4&#12289;在struts-menu.xml的<Displayer>下添加<br />      <setProperty property="localeResover" value="net.sf.navigator.localization.I18nWebworkAdapter" /><br />      <setProperty property="resourceProvider" value="net.sf.navigator.localization.I18nWebworkAdapter" /><br />5&#12289;在MenuDisplayer添加&#22235;&#20010;&#25509;&#21475;&#26041;&#27861;<br />    public LocaleResolver getLocaleResolver();<br />      public void setLocaleResolver(LocaleResolver localeResolver);<br />      public I18nResourceProvider getResourceProvider();<br />      public void setResourceProvider(I18nResourceProvider resourceProvider);<br />       &#24182;在AbstractMenuDisplayer&#37324;&#23454;现&#36825;&#22235;&#20010;&#26041;&#27861;<br />6&#12289;在AbstractMenuDisplayer&#37324;添加protected的PageContext&#23545;&#35937;，&#24182;在init&#26041;&#27861;&#37324;&#21021;&#22987;&#21270;&#23427;<br />7&#12289;&#37325;写MessageResourcesMenuDisplayer.getMessage&#26041;&#27861;，&#20195;&#30721;如下<br />      public String getMessage(String key) {<br />          String message = null;<br /><br />          if (resourceProvider != null) {<br />              message = resourceProvider.getResource(key, &ldquo;???&rdquo;, null, pageContext);<br />          }<br />          if (message == null) {<br />              message = key;<br />          }<br /><br />          return message;<br />      }<br />8&#12289;在UseMenuDisplayerTag文件&#37324;添加&#20195;&#30721;&#65288;+后的&#20195;&#30721;是&#22686;加的&#65289;<br />      //get an instance of the menu displayer<br />      MenuDisplayer displayerInstance = null;<br />    + LocaleResolver localeResolver = null;<br />    + I18nResourceProvider resourceProvider = null;<br /><br />      // default to use the config on the mapping<br />      if (displayerMapping.getConfig() != null) {<br />          // this value (config) is set on the displayer below<br />          setConfig(displayerMapping.getConfig());<br />      }<br />    + localeResolver =<br />    +         (LocaleResolver) Class.forName(displayerMapping.getLocaleResover()).newInstance();<br />    + resourceProvider =<br />    +         (I18nResourceProvider) Class.forName(displayerMapping.getLocaleProvider()).newInstance();<br /><br />      displayerInstance.setConfig(config);<br />    + displayerInstance.setResourceProvider(resourceProvider);<br />    + displayerInstance.setLocaleResolver(localeResolver);<br /><br />如果&#35201;&#23454;现jstl&#12289;spring等&#26694;&#26550;的&#35805;，可以将org.displaytag.localization&#30456;&#24212;的java文件&#31227;到net.sf.navigator.localization目录下就可以了。</p></p>
]]></content>
  </entry>
  
</feed>
