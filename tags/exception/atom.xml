<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Exception | 乐者为王]]></title>
  <link href="http://codemany.com/tags/exception/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2018-01-10T18:49:29+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[checked/unchecked应该翻译成什么？]]></title>
    <link href="http://codemany.com/blog/what-should-checked-and-unchecked-translate/"/>
    <updated>2017-07-29T12:17:06+08:00</updated>
    <id>http://codemany.com/blog/what-should-checked-and-unchecked-translate</id>
    <content type="html"><![CDATA[<p>翻译有关Java异常的文章时，总是犹豫是否该把checked/unchecked也翻译过来。原因是，不是很清楚该如何优雅传神地翻译这两个单词。</p>

<p>《Java核心技术》将它们翻译成“已检查/未检查”。《Java编程思想》和《Effictive Java中文版》则翻译成“被检查的/不检查的”。至于技术文章的翻译更是花样百出，有“检测/非检测”、“可检测/非检测”、“可查/不可查”、“受查/非受查”、“检查型/非检查型”、“检查/非检查”等。</p>

<p>到底该翻译成什么呢？在回答这个问题前，让我们先确定什么是checked/unchecked异常？</p>

<p><img src="/uploads/exception-hierarchy.png" alt="exception-hierarchy"></p>

<p>上图是Java中的异常层次结构图。Java语言规范将派生自RuntimeException类和Error类的所有异常称为“unchecked异常”，其它的异常称为“checked异常”。</p>

<blockquote>
<p>The unchecked exception classes are the run-time exception classes and the error classes.</p>

<p>The checked exception classes are all exception classes other than the unchecked exception classes. That is, the checked exception classes are Throwable and all its subclasses other than RuntimeException and its subclasses and Error and its subclasses.</p>
</blockquote>

<p>并且，在编译时编译器会检查程序是否为所有的“checked异常”提供处理器。</p>

<blockquote>
<p>This compile-time checking for the presence of exception handlers is designed to reduce the number of exceptions which are not properly handled.</p>
</blockquote>

<p>从上述的描述可以得出，“checked异常”和“unchecked异常”是两种异常类型，且“checked异常”隐含有必须要检查的思想。</p>

<p>紧紧围绕这些描述，细细地思考和比较，个人认为：1. 《Java核心技术》的翻译存在问题，“已检查”和“未检查”说明的是异常的检查状态，没有表达出异常的分类这个概念。2. 《Java编程思想》和《Effictive Java中文版》的翻译则正确地表达了异常的分类，但“被检查”翻译的有点无厘头，如果能改成“要检查”则会更好，缺陷是连接“异常”这个词组后是短语，而非名词，读来费劲，也不上口；如果去掉“的”的话，后者会有歧义，听起来像是命令。3. “检测/非检测”和“检查/非检查”是同个意思。4. “可检测”这个翻译看上去似乎表示异常是可以检查的，和Java语言规范要求的该类异常必须要检查不符。5. “可查/不可查”也是如此。6. “受查/非受查”的翻译则有些莫名其妙的感觉。7. “检查型/非检查型”翻译的很好，既表达了异常的分类，也表达了一种异常是要检查的，另一种异常是不要检查的意义，只是前者还缺少点强制的意味。</p>

<p>分析到这里，结果已经是不言而明。“要检查的/不检查的”和“检查型/非检查型”是两种更好的翻译，都能把Java语言规范对checked/unchecked异常的描述尽量地表述出来。而后者在实际使用中更为简洁适宜。</p>

<p>接下来的事情就是把以前译文中未翻译的checked/unchecked修改成“检查型/非检查型”。在以后的翻译中也继续使用这个翻译结果，除非能找到更好的表述方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[异常处理最佳实践]]></title>
    <link href="http://codemany.com/blog/best-practices-for-exception-handling/"/>
    <updated>2005-08-12T10:02:48+08:00</updated>
    <id>http://codemany.com/blog/best-practices-for-exception-handling</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html">http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html</a></p>

<p>异常处理的问题之一是知道何时以及如何使用它。在这篇文章中，我将讨论一些异常处理的最佳实践。我也会总结最近关于使用检查型异常的争论。</p>

<p>作为程序员，我们想要编写解决问题的高质量的代码。不幸的是，异常作为我们代码的意外结果出现。没有人喜欢意外结果，因此我们很快找到我们自己的方法去解决它们。我曾经见过一些聪明的程序员以下列方式处理异常：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void consumeAndForgetAllExceptions() {
    try {
        // some code that throws exceptions
    } catch (Exception ex) {
        ex.printStacktrace();
    }
}
</code></pre></div>
<p>上面的代码有什么问题？</p>

<p>一旦异常被抛出，正常的程序执行被挂起，并且控制权转移到catch块。catch块捕获异常后什么也没做。在catch块后面的程序继续执行，就好象什么也没发生。</p>

<p>下面的代码怎么样？</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void someMethod() throws Exception {
}
</code></pre></div>
<p>这是一个空方法，它里面没有任何代码。空方法如何能抛出异常呢？Java不能阻止你这么做。最近我正好遇见过类似的代码：方法声明抛出异常，但方法里没有实际产生那个异常的代码。当我问那个程序员时，他回复说：“我知道，它会让API变得糟糕，但我一直都是这么做的，而且这样做很管用。”</p>

<p>C++社区花了好几年去确定如何使用异常。这种争论在Java社区刚刚开始。我曾经见过几个Java程序员与异常的使用作斗争。如果没有正确使用，异常会导致你的程序变慢，因为它需要内存和CPU去创建、抛出和捕获异常。如果过度使用，会使代码难以阅读，让使用API的程序员感到挫折。我们都知道挫折感（frustrations）会导致特殊技巧（ hacks）和代码味道。客户端代码只要忽略异常或者抛出它们就可以规避这个问题，就像前面的两个示例。</p>

<h3 id="异常的本质">异常的本质</h3>

<p>大体上说，有3种不同的情况可以导致异常被抛出：</p>

<ul>
<li><strong>由于编程错误的异常：</strong> 这种异常是由于编程错误产生的（比如，NullPointerException和IllegalArgumentException）。客户端代码通常不能做关于编程错误的任何事情。</li>
<li><strong>由于客户端代码错误的异常：</strong> 客户端代码尝试API不允许的东西，从而违反它的契约。如果异常有提供有用的信息，客户端可以采取一些替代的做法。例如：当分析一个非格式良好的XML文档时有异常被抛出。异常包含XML文档中引起问题的位置信息。客户端可以使用该信息去采取恢复措施。</li>
<li><strong>由于资源失败的异常：</strong> 当资源失败时生成的异常。例如：系统内存不足或者网络连接失败。资源失败的客户端响应是上下文驱动的。客户端可以过段时间重试操作或者仅仅记录资源失败和停止应用程序。</li>
</ul>

<h3 id="java中的异常类型">Java中的异常类型</h3>

<p>Java定义了两类异常：</p>

<ul>
<li><strong>检查型异常：</strong> 继承自Exception类的异常是检查型异常。客户端代码必须处理被API抛出的检查型异常，不是在catch子句中就是通过throw子句向外转发。</li>
<li><strong>非检查型异常：</strong> RuntimeException也是扩展自Exception。不过，所有从RuntimeException继承的异常享有特殊待遇。对客户端代码是否处理它们没有要求，因此被称为非检查型异常。</li>
</ul>

<p>举例来说，下图显示了NullPointerException的层次结构。</p>

<p><img src="/uploads/nullpointer-exception-hierarchy.gif" alt="nullpointer-exception-hierarchy"></p>

<p>在这个图中，NullPointerException扩展自RuntimeException，因此是非检查型异常。</p>

<p>我曾经见过检查型异常的重度使用和非检查型异常的最小使用。最近，在Java社区有关于检查型异常和其真正价值的激烈争论。这场争论源于Java似乎是第一个带有检查型异常的主流OO语言这个事实。C++和C#根本没有检查型异常，在这些语言中所有的异常都是非检查型的。</p>

<p>由较低层抛出的检查型异常是强制性的，要求调用层必须捕获或者抛出它。如果客户端代码无法有效地处理异常，在API和它的客户端之间的检查型异常契约很快就会转变为不必要的负担。客户端代码的程序员可能会走捷径，通过使用一个空的catch块抑制异常或者仅仅抛出它。实际上，它只是把负担放到客户端的调用者身上。</p>

<p>检查型异常也被指责破坏封装。考虑以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public List getAllAccounts() throws FileNotFoundException, SQLException {
}
</code></pre></div>
<p>方法getAllAccounts()抛出两个检查型异常。该方法的客户端必须显式地处理这些特定实现的异常，即使它也不知道在getAllAccounts()中什么文件或数据库调用失败，或者没有业务提供文件系统或数据库逻辑。因此，异常处理在方法和它的调用者之间强制造成了一个不适当的紧密耦合。</p>

<h3 id="设计api的最佳实践">设计API的最佳实践</h3>

<p>说了这么多，现在让我们谈谈如何设计一个正确抛出异常的API。</p>

<h4 id="1-当确定使用检查型异常还是非检查型异常时，问问你自己：“当异常发生时客户端代码可以采取什么措施？”">1. 当确定使用检查型异常还是非检查型异常时，问问你自己：“当异常发生时客户端代码可以采取什么措施？”</h4>

<p>如果客户端可以采取一些替代措施来从异常中恢复，把它设置为检查型异常。如果客户端不能做任何有用的事情，那么就把它设置为非检查型异常。这里的“有用的”的意思是采取措施从异常中恢复而不是仅仅记录异常。总的来说：</p>

<table><thead>
<tr>
<th>当异常发生时客户端的反应</th>
<th>异常类型</th>
</tr>
</thead><tbody>
<tr>
<td>客户端代码将基于异常中的信息采取一些有用的恢复操作</td>
<td>把它设置为检查型异常</td>
</tr>
<tr>
<td>客户端代码不能做任何事情</td>
<td>把它设置为非检查型异常</td>
</tr>
</tbody></table>

<p>此外，对于所有的编程错误尽量使用非检查型异常。非检查型异常有个好处就是不会强制客户端代码显式地处理它们。它们传播到你想捕获它们的地方，或者直接就是报告异常。Java的API有许多非检查型异常，像NullPointerException、IllegalArgumentException和IllegalStateException。我更倾向于使用Java提供的标准异常而不是创建自己的。这会让我的代码容易理解和避免增加代码的内存占用。</p>

<h4 id="2-保持封装性。">2. 保持封装性。</h4>

<p>不要让特定实现的检查型异常逐步上升到更高的层。例如，不要把来自数据访问代码中的SQLException传播到业务对象层。业务对象层不需要了解SQLException。你有两个选择：</p>

<ul>
<li>如果客户端代码期望从异常中恢复，把SQLException转换成别的检查型异常。</li>
<li>如果客户端代码不能做关于它的任何事情，把SQLException转换成一个非检查型异常。</li>
</ul>

<p>大多数时候，客户端代码不能做关于SQLException的任何事情。不要犹豫去把它们转换成非检查型异常。考虑下面的代码片段：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void dataAccessCode() {
    try {
        // some code that throws SQLException
    } catch (SQLException ex) {
        ex.printStacktrace();
    }
}
</code></pre></div>
<p>这里的catch块只是抑制异常而且什么也不做。理由是对于SQLException我的客户端没有什么能做的。以下列方式处理它怎么样？</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void dataAccessCode() {
    try {
        // some code that throws SQLException
    } catch (SQLException ex) {
        throw new RuntimeException(ex);
    }
}
</code></pre></div>
<p>它把SQLException转换成RuntimeException。如果SQLException发生，catch子句会抛出一个新的RuntimeException。执行线程挂起，报告异常。不管怎样，我没有用不必要的异常处理让我的业务对象层变得糟糕，特别是因为它不能做关于SQLException的任何事情。如果我的catch子句需要根异常的原因，我可以利用自JDK 1.4起就在所有异常类中有效的getCause()方法。</p>

<p>当SQLException发生时如果你确信业务层能采取一些恢复动作，你可以把它转换成一个更有意义的检查型异常。但我发现大多数时间仅仅抛出RuntimeException就足够。</p>

<h4 id="3-如果不能给客户端代码提供有用的信息就不要试图去创建新的定制异常。">3. 如果不能给客户端代码提供有用的信息就不要试图去创建新的定制异常。</h4>

<p>下面的代码有什么问题？</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class DuplicateUsernameException extends Exception {
}
</code></pre></div>
<p>它没有给客户端代码提供任何有用的信息，除了一个指示的异常名字。不要忘记Java的异常类就像其它类，在其中你可以添加你认为客户端代码将会调用以便获得更多信息的方法。</p>

<p>我们可以给DuplicateUsernameException添加有用的方法，像：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class DuplicateUsernameException extends Exception {
    public DuplicateUsernameException(String username) {}
    public String requestedUsername() {}
    public String[] availableNames() {}
}
</code></pre></div>
<p>新版本提供两个有用的方法：requestedUsername()返回请求的名字；availableNames()返回与请求的名字相似的一组有效用户名。客户端可以使用这些方法去告知请求的用户名是无效的和其它的用户名是有效的。但如果你不打算添加额外的信息，那么就抛出一个标准的异常：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">throw new Exception(&quot;Username already taken&quot;);
</code></pre></div>
<p>如果你认为当用户名已被占用时客户端代码除了日志记录不打算采取任何动作，那么抛出一个非检查型异常就更好：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">throw new RuntimeException(&quot;Username already taken&quot;);
</code></pre></div>
<p>或者，你甚至可以提供一个方法检查是否用户名已被占用。</p>

<p>值得重复的是，检查型异常被用于那些客户端API可以基于异常中的信息采取一些富有成效的动作的情况中。对于所有的编程式错误尽量使用非检查型异常。它们让你的代码可读性更强。</p>

<h4 id="4-用文档说明异常。">4. 用文档说明异常。</h4>

<p>你可以使用Javadoc的@throws标签来说明API抛出的检查型和非检查型异常。不过，我倾向于编写单元测试来说明异常。测试允许我看见动作中的异常，因此能被当作可以执行的文档。无论你做什么，都有一些办法让客户端代码可以通过它们了解你的API抛出的异常。这里是一个用于测试IndexOutOfBoundsException的示例单元测试：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void testIndexOutOfBoundsException() {
    ArrayList blankList = new ArrayList();
    try {
        blankList.get(10);
        fail(&quot;Should raise an IndexOutOfBoundsException&quot;);
    } catch (IndexOutOfBoundsException success) {
    }
}
</code></pre></div>
<p>当blankList.get(10)被调用时上面的代码将会抛出IndexOutOfBoundsException。如果没有抛出异常，fail(&quot;Should raise an IndexOutOfBoundsException&quot;)语句会显式地让测试失败。通过为异常编写单元测试，你不仅说明异常是如何工作的，也通过测试特殊场景让你的代码更加健壮。</p>

<h3 id="使用异常的最佳实践">使用异常的最佳实践</h3>

<p>下一组最佳实践显示客户端代码将如何处理抛出检查型异常的API。</p>

<h4 id="1-总是要做些清理工作">1.总是要做些清理工作</h4>

<p>如果你使用像数据库连接或网络连接这样的资源，确保你已经把它们清理干净。如果你调用的API只使用非检查型异常，你仍然应该在使用后用try-finally块清理资源。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void dataAccessCode() {
    Connection conn = null;
    try {
        conn = getConnection();
        // some code that throws SQLException
    } catch (SQLException ex) {
        ex.printStacktrace();
    } finally {
        DBUtil.closeConnection(conn);
    }
}

class DBUtil {
    public static void closeConnection(Connection conn) {
        try {
            conn.close();
        } catch (SQLException ex) {
            logger.error(&quot;Cannot close connection&quot;);
            throw new RuntimeException(ex);
        }
    }
}
</code></pre></div>
<p>DBUtil是一个可以关闭连接的实用工具类。重点是finally块的使用，无论异常是否被捕获它都会执行。在这个例子中，finally关闭连接，如果关闭连接有问题就抛出一个RuntimeException。</p>

<h4 id="2-不要使用异常控制流程">2. 不要使用异常控制流程</h4>

<p>生成栈跟踪是昂贵的，栈跟踪的价值是在调试。在一个流程控制的情况中，栈跟踪将被忽略，因为客户端仅仅想知道如何处理。</p>

<p>在下面的代码中，一个定制的异常MaximumCountReachedException被用来控制流程。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void useExceptionsForFlowControl() {
    try {
        while (true) {
            increaseCount();
        }
    } catch (MaximumCountReachedException ex) {
    }
    // continue execution
}

public void increaseCount()
    throws MaximumCountReachedException {
    if (count &gt;= 5000)
        throw new MaximumCountReachedException();
}
</code></pre></div>
<p>useExceptionsForFlowControl()使用一个无限循环增加计数直到异常被抛出。这不仅使代码难以阅读，而且让代码变得更慢。仅在特殊情况下使用异常处理。</p>

<h4 id="3-不要抑制或忽略异常">3. 不要抑制或忽略异常</h4>

<p>当来自API的一个方法抛出检查型异常时，它试图告诉你应该采取一些反向动作。如果检查型异常对你毫无意义，不要犹豫去把它转换成一个非检查型异常并且再次抛出它，但是不要通过用{}捕获异常来忽略它，然后继续，好像什么也没发生过。</p>

<h4 id="4-不要捕获顶级异常">4. 不要捕获顶级异常</h4>

<p>非检查型异常继承自RuntimeException类，RuntimeException又继承自Exception。通过捕获Exception类，你也捕获了RuntimeException，如以下代码所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">try {
} catch (Exception ex) {
}
</code></pre></div>
<p>上面的代码同样忽略了非检查型异常。</p>

<h4 id="5-只记录异常一次">5. 只记录异常一次</h4>

<p>多次记录相同的异常栈跟踪可能会让程序员在检查关于异常原始源的栈跟踪时被迷惑。因此，只记录它一次。</p>

<h3 id="总结">总结</h3>

<p>这些都是异常处理最佳实践的一些建议。我无意开始一场检查型异常与非检查型异常之间的宗教战争。你必须根据你的需求自定义设计和用法。我相信，假以时日，我们会找到更好的用异常编码的方法。</p>

<p>我要感谢Bruce Eckel、Joshua Kerievsky和Somik Raha他们对我在写这篇文章时的支持。</p>

<h3 id="相关资源">相关资源</h3>

<ul>
<li><a href="http://www.mindview.net/Etc/Discussions/CheckedExceptions">Does Java need Checked Exceptions?</a> by Bruce Eckel</li>
<li><a href="http://www.octopull.co.uk/java/ExceptionalJava.html">Exceptional Java</a> by Alan Griffiths</li>
<li><a href="http://www.artima.com/intv/handcuffs.html">The Trouble with Checked Exceptions: A Conversation with Anders Hejlsberg, Part II</a> by Bill Venners with Bruce Eckel</li>
<li><a href="http://www.c2.com/cgi/wiki?CheckedExceptionsAreOfDubiousValue">Checked Exceptions Are Of Dubious Value</a> on C2.com</li>
<li><a href="http://www.artima.com/intv/solid.html">Failure and Exceptions: A Conversation with James Gosling, Part II</a> by Bill Venners</li>
</ul>
]]></content>
  </entry>
  
</feed>
