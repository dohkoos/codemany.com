<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JSON | 乐者为王]]></title>
  <link href="http://codemany.com/tags/json/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-09-17T11:16:21+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON in JavaScript]]></title>
    <link href="http://codemany.com/blog/2007/02/09/json-in-javascript/"/>
    <updated>2007-02-09T23:29:14+08:00</updated>
    <id>http://codemany.com/blog/2007/02/09/json-in-javascript</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.json.org/js.html">http://www.json.org/js.html</a></p>

<p><a href="http://www.crockford.com/javascript">JavaScript</a>是一种通用的编程语言，被当作页面脚本语言引入Netscape Navigator。<a href="http://www.crockford.com/javascript/javascript.html">它仍被广泛地认为是Java的一个子集，但它不是。</a>它是一门有着<a href="http://www.crockford.com/javascript/survey.html">类C语法</a>和<a href="http://www.crockford.com/javascript/inheritance.html">soft objects</a>的类<a href="http://www.crockford.com/javascript/little.html">Scheme</a>语言，JavaScript在<a href="http://www.ecma-international.org/publications/files/ecma-st/ECMA-262.pdf">ECMAScript Language Specification, <del>Third Edition</del>当前版本已经是5.1了，下个版本将是6</a>中被标准化。</p>

<p><a href="http://www.json.org/">JSON</a>是JavaScript对象字面量表示法（object literal notation）的一个子集。因为JSON是JavaScript的一个子集，所以在语言中可以毫不费力地使用它。</p>

<p>```
var myJSONObject = {"bindings": [</p>

<pre><code>    {"ircEvent": "PRIVMSG", "method": "newURI", "regex": "^http://.*"},
    {"ircEvent": "PRIVMSG", "method": "deleteURI", "regex": "^delete.*"},
    {"ircEvent": "PRIVMSG", "method": "randomURI", "regex": "^random.*"}
]
</code></pre>

<p>};
```</p>

<p>在这个例子中，创建了一个包含单个成员“bindings”的对象，该成员又包含了一个拥有三个对象的数组，每个对象含有“ircEvent”，“method”和“regex”三个成员。</p>

<p>成员可以通过点或下标操作符检索。</p>

<p><code>
myJSONObject.bindings[0].method    // "newURI"
</code></p>

<p>你可以使用eval()函数把JSON文本转换成对象，eval()会调用JavaScript编译器。因为JSON是JavaScript的一个真子集（a proper subset），编译器将正确的分析文本并产生一个对象结构。文本必须被包裹在括号内，避免在JavaScript的语法歧义上失误。</p>

<p><code>
var myObject = eval('(' + myJSONtext + ')');
</code></p>

<p>eval函数是非常快的。然而，它可以编译和执行任何JavaScript程序，所以可能会有安全问题。当源代码是可信的与完善的时候才可以使用eval函数。使用JSON语法分析器则安全的多。在基于XMLHttpRequest的web应用中，通讯只被允许朝着提供该页面的同源的方向，所以是可信的。但它可能不胜任。如果服务器在它的JSON编码里不是严格的，或者它没有严谨地校验所有它的输入，然后它可能投递无效的JSON文本，这些文本可能携带危险的脚本。eval函数将执行脚本，释放恶意。</p>

<p>为了抵御这些，应该使用JSON语法分析器。JSON分析器只能识别JSON文本，拒绝所有的脚本。在提供本地JSON支持的浏览器里，JSON分析器也远远快于eval。预计本地JSON支持将会被包含在下一个ECMAScript标准中。</p>

<p><code>
var myObject = JSON.parse(myJSONtext, reviver);
</code></p>

<p>可选的reviver参数是一个函数，它会被最终结果的各个层面上的每个键值调用。每个值都会被reviver函数的返回结果替换。这可以用来把通用对象转变为伪类实例，或者将date字符串转换为Date对象。</p>

<p>```
myData = JSON.parse(text, function (key, value) {</p>

<pre><code>var type;
if (value &amp;&amp; typeof value === 'object') {
    type = value.type;
    if (typeof type === 'string' &amp;&amp; typeof window[type] === 'function') {
        return new (window[type])(value);
    }
}
return value;
</code></pre>

<p>});
```</p>

<p>JSON字符串转化器（stringifier）则作相反的工作，它将JavaScript数据结构转换为JSON文本。JSON不支持循环的数据结构，所以注意不要把循环的结构交给JSON字符串转化器。</p>

<p><code>
var myJSONText = JSON.stringify(myObject, replacer);
</code></p>

<p>如果stringify方法看到某个对象含有toJSON方法，会调用该方法，并且把转化成字符串后的值被返回。这允许一个对象去确定其自己的JSON表示。</p>

<p>字符转化器方法可以接收一个可选的字符串数组。这些字符串用于选取那些将会被包含在JSON文本中的属性。</p>

<p>字符转化器方法可以接收一个可选的replacer函数。该函数将会在结构中每个值的toJSON方法（如果有）后面被调用。它将每个键和值作为参数传递，this将会被绑定到持有键的对象上。返回的值会被字符串化。</p>

<p>没有在JSON中表示的值（例如函数和undefined）会被排除。</p>

<p>非限定的数字被替换为null。要替换成其它的值，你可以使用像这样的replacer函数：</p>

<p>```
function replacer(key, value) {</p>

<pre><code>if (typeof value === 'number' &amp;&amp; !isFinite(value)) {
    return String(value);
}
return value;
</code></pre>

<p>}
```</p>

<p>给JSON.parse一个相应的reviver可以还原那些。</p>

<p><a href="https://github.com/douglascrockford/JSON-js">The open source code of a JSON parser and JSON stringifier is available.</a> When <a href="http://www.crockford.com/javascript/jsmin.html">minified</a> it is less than 2.5K.</p>
]]></content>
  </entry>
  
</feed>
