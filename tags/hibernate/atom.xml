<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Hibernate | 乐者为王]]></title>
  <link href="http://codemany.com/tags/hibernate/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-25T12:59:46+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Spring 3 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample/"/>
    <updated>2012-09-04T06:54:27+08:00</updated>
    <id>http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>在pom.xml中添加依赖包：<br />
```
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-web&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency></p>

<!-- 没有这个plugin包会导致Spring无法注入bean到Struts 2的Action中 -->


<p><dependency></p>

<pre><code>&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
&lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;
&lt;version&gt;2.3.4.1&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>配置web.xml文件：<br />
```
&lt;context-param></p>

<pre><code>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
</code></pre>

<p>&lt;/context-param></p>

<p><listener></p>

<pre><code>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>删除hibernate.cfg.xml，添加applicationContext.xml，内容为：<br />
```
&lt;?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"<br /></p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;
xsi:schemaLocation="http://www.springframework.org/schema/beans&lt;br /&gt;
    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;!-- DriverManagerDataSource在每个连接请求时都新建一个connection。&lt;br /&gt;
     与DBCP的BasicDataSource不同，DriverManagerDataSource提供的连接没有进行池管理 --&gt;
&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
    &lt;property name="url" value="jdbc:mysql://localhost:3306/jbookshelf" /&gt;
    &lt;property name="username" value="root" /&gt;
    &lt;property name="password" value="123456" /&gt;
&lt;/bean&gt;

&lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
            &lt;prop key="hibernate.connection.pool_size"&gt;1&lt;/prop&gt;
            &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;
            &lt;prop key="hibernate.cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/prop&gt;
            &lt;prop key="show_sql"&gt;true&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
    &lt;property name="mappingResources"&gt;
        &lt;list&gt;
            &lt;value&gt;com/codemany/account/model/User.hbm.xml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="userDao" class="com.codemany.account.dao.UserDao"&gt;
    &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
&lt;/bean&gt;

&lt;!-- Struts 2的action是有状态的，必须显示设置scope为prototype，每次请求过来都会创建一个action --&gt;
&lt;bean id="loginAction" class="com.codemany.account.action.LoginAction" scope="prototype"&gt;
    &lt;property name="userDao" ref="userDao" /&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>删除HibernateUtil.java，修改UserDao.java为以下内容：<br />
```
package com.codemany.account.dao;</p>

<p>import org.hibernate.Query;<br />
import org.hibernate.Session;<br />
import org.hibernate.SessionFactory;</p>

<p>import com.codemany.account.model.User;</p>

<p>public class UserDao {<br /></p>

<pre><code>// Spring 3集成Hibernate 4不再需要HibernateDaoSupport或HibernateTemplate了，&lt;br /&gt;
// 直接使用原生API即可。&lt;br /&gt;
private SessionFactory sessionFactory;

public void setSessionFactory(SessionFactory sessionFactory) {&lt;br /&gt;
    this.sessionFactory = sessionFactory;&lt;br /&gt;
}

public User getUser(String username) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from User u where u.username = ?");&lt;br /&gt;
        query.setString(0, username);&lt;br /&gt;
        query.setMaxResults(1);&lt;br /&gt;
        return (User)query.uniqueResult();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在struts.xml中将action元素中login的class属性改为applicationContext.xml配置文件中的loginAction： <br />
```
<action name="login" class="loginAction"></p>

<pre><code>&lt;result name="success"&gt;/index.jsp&lt;/result&gt;
&lt;result name="input"&gt;/index.jsp&lt;/result&gt;
</code></pre>

<p></action>
```</p>

<p>修改LoginAction.java的代码：<br />
```
package com.codemany.account.action;</p>

<p>import com.codemany.account.dao.UserDao;<br />
import com.codemany.account.model.User;</p>

<p>import com.opensymphony.xwork2.ActionContext;<br />
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class LoginAction extends ActionSupport {<br /></p>

<pre><code>private static final long serialVersionUID = -389833745243649130L;

private String username;&lt;br /&gt;
private String password;

private UserDao userDao;

public String execute() throws Exception {&lt;br /&gt;
    if (username == null || username.length() == 0&lt;br /&gt;
            || password == null || password.length() == 0) {&lt;br /&gt;
        return INPUT;&lt;br /&gt;
    }

    User u = userDao.getUser(username);&lt;br /&gt;
    if (u == null || !password.equals(u.getPassword())) {&lt;br /&gt;
        return INPUT;&lt;br /&gt;
    }

    ActionContext.getContext().getSession().put("logined", true);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}

public void setUsername(String username) {&lt;br /&gt;
    this.username = username;&lt;br /&gt;
}

public void setPassword(String password) {&lt;br /&gt;
    this.password = password;&lt;br /&gt;
}

public void setUserDao(UserDao userDao) {&lt;br /&gt;
    this.userDao = userDao;&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/2012/08/31/struts2-hibernate4-login-sample/"/>
    <updated>2012-08-31T07:41:05+08:00</updated>
    <id>http://codemany.com/blog/2012/08/31/struts2-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>使用以下代码创建数据库：<br />
```
CREATE DATABASE IF NOT EXISTS jbookshelf;</p>

<p>USE jbookshelf;</p>

<p>DROP TABLE IF EXISTS users;</p>

<p>CREATE TABLE users (<br /></p>

<pre><code>id int NOT NULL AUTO_INCREMENT,&lt;br /&gt;
username varchar(20) NOT NULL,&lt;br /&gt;
password varchar(50) NOT NULL,&lt;br /&gt;
PRIMARY KEY(id)&lt;br /&gt;
</code></pre>

<p>) ENGINE=InnoDB DEFAULT CHARSET=utf-8;<br />
```</p>

<p>在pom.xml中添加Hibernate的依赖配置：<br />
```
<dependency></p>

<pre><code>&lt;groupId&gt;org.hibernate&lt;/groupId&gt;
&lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
&lt;version&gt;4.1.6.Final&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;mysql&lt;/groupId&gt;
&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;version&gt;5.1.21&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>创建User.java类：<br />
```
package com.codemany.account.model;</p>

<p>public class User {<br /></p>

<pre><code>private Long id;

private String username;&lt;br /&gt;
private String password;

public Long getId() {&lt;br /&gt;
    return id;&lt;br /&gt;
}

public void setId(Long id) {&lt;br /&gt;
    this.id = id;&lt;br /&gt;
}

public String getUsername() {&lt;br /&gt;
    return username;&lt;br /&gt;
}

public void setUsername(String username) {&lt;br /&gt;
    this.username = username;&lt;br /&gt;
}

public String getPassword() {&lt;br /&gt;
    return password;&lt;br /&gt;
}

public void setPassword(String password) {&lt;br /&gt;
    this.password = password;&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在同一目录下创建User.hbm.xml文件：<br />
```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE hibernate-mapping PUBLIC<br /></p>

<pre><code>"-//Hibernate/Hibernate Mapping DTD 3.0//EN"&lt;br /&gt;
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;
</code></pre>

<p>&lt;hibernate-mapping package="com.codemany.account.model"></p>

<pre><code>&lt;class name="User" table="users"&gt;
    &lt;id name="id"&gt;
        &lt;generator class="increment" /&gt;
    &lt;/id&gt;

    &lt;property name="username" length="20" /&gt;
    &lt;property name="password" length="50" /&gt;
&lt;/class&gt;
</code></pre>

<p>&lt;/hibernate-mapping>
```</p>

<p>在resources目录下创建hibernate.cfg.xml配置文件，内容如下：<br />
```
&lt;?xml version='1.0' encoding='utf-8'?>
&lt;!DOCTYPE hibernate-configuration PUBLIC<br /></p>

<pre><code>"-//Hibernate/Hibernate Configuration DTD 3.0//EN"&lt;br /&gt;
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
</code></pre>

<p>&lt;hibernate-configuration></p>

<pre><code>&lt;session-factory&gt;
    &lt;!-- MySQL connection settings --&gt;
    &lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;
    &lt;property name="connection.url"&gt;jdbc:mysql://localhost:3306/jbookshelf&lt;/property&gt;
    &lt;property name="connection.username"&gt;yourname&lt;/property&gt;
    &lt;property name="connection.password"&gt;yourpassword&lt;/property&gt;

    &lt;!-- JDBC connection pool (use the built-in) --&gt;
    &lt;property name="connection.pool_size"&gt;1&lt;/property&gt;

    &lt;!-- SQL dialect --&gt;
    &lt;property name="dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;

    &lt;!-- Disable the second-level cache  --&gt;
    &lt;property name="cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/property&gt;

    &lt;!-- Echo all executed SQL to stdout --&gt;
    &lt;property name="show_sql"&gt;true&lt;/property&gt;

    &lt;mapping resource="com/codemany/account/model/User.hbm.xml" /&gt;
&lt;/session-factory&gt;
</code></pre>

<p>&lt;/hibernate-configuration>
```</p>

<p>建立管理Session的HibernateUtil.java类：<br />
```
package com.codemany.account.dao.hibernate;</p>

<p>import org.hibernate.Session;<br />
import org.hibernate.SessionFactory;<br />
import org.hibernate.cfg.Configuration;</p>

<p>public class HibernateUtil {<br /></p>

<pre><code>private static final SessionFactory sessionFactory;

static {&lt;br /&gt;
    try {&lt;br /&gt;
        // Create the SessionFactory from hibernate.cfg.xml&lt;br /&gt;
        Configuration configuration = new Configuration();&lt;br /&gt;
        configuration.configure();&lt;br /&gt;
        Properties props = configuration.getProperties();

        ServiceRegistry serviceRegistry =&lt;br /&gt;
                new ServiceRegistryBuilder().applySettings(props).buildServiceRegistry();

        sessionFactory = configuration.buildSessionFactory(serviceRegistry);&lt;br /&gt;
    } catch (Throwable ex) {&lt;br /&gt;
        // Make sure you log the exception, as it might be swallowed&lt;br /&gt;
        System.err.println("Initial SessionFactory creation failed." + ex);&lt;br /&gt;
        throw new ExceptionInInitializerError(ex);&lt;br /&gt;
    }&lt;br /&gt;
}

public static Session getSession() {&lt;br /&gt;
    return sessionFactory.openSession();&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在dao包创建数据访问对象：<br />
```
package com.codemany.account.dao;</p>

<p>import org.hibernate.Query;<br />
import org.hibernate.Session;<br />
import org.hibernate.Transaction;</p>

<p>import com.codemany.account.model.User;</p>

<p>public class UserDao {<br /></p>

<pre><code>public static User getUser(String username) {&lt;br /&gt;
    Session session = HibernateUtil.getSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from User u where u.username = ?");&lt;br /&gt;
        query.setMaxResults(1);&lt;br /&gt;
        query.setString(0, username);&lt;br /&gt;
        return (User)query.uniqueResult();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>现在可以访问数据库了，所以要修改LoginAction.java的execute方法：<br />
```
public String execute() throws Exception {<br /></p>

<pre><code>if (username == null || username.length() == 0&lt;br /&gt;
        || password == null || password.length() == 0) {&lt;br /&gt;
    return INPUT;&lt;br /&gt;
}

User u = UserDao.getUser(username);&lt;br /&gt;
if (u == null) {&lt;br /&gt;
    return INPUT;&lt;br /&gt;
}&lt;br /&gt;
if (username.equals(u.getUsername()) &amp;&amp; password.equals(u.getPassword())) {&lt;br /&gt;
    ActionContext.getContext().getSession().put("logined", true);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}

return INPUT;&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>PS：如果显示jta-1.0.1b.jar缺失的错误，可以在pom.xml中添加以下语句：<br />
```
<repositories></p>

<pre><code>&lt;repository&gt;
    &lt;id&gt;java.net&lt;/id&gt;
    &lt;url&gt;http://download.java.net/maven/2/&lt;/url&gt;
&lt;/repository&gt;
</code></pre>

<p></repositories>
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
</feed>
