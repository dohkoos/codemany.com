<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Hibernate | 乐者为王]]></title>
  <link href="http://codemany.com/tags/hibernate/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2015-11-03T15:18:05+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Spring 3 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/struts2-spring3-hibernate4-login-sample/"/>
    <updated>2012-09-04T06:54:27+08:00</updated>
    <id>http://codemany.com/blog/struts2-spring3-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>在pom.xml中添加Spring的依赖包：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
    &lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
    &lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- 注意：没有这个plugin包会导致Spring无法注入bean到Struts 2的Action中 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
    &lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.3.4.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div>
<p>配置web.xml文件，加上Spring的监听器：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre></div>
<p>删除hibernate.cfg.xml，添加applicationContext.xml，内容为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;!-- DriverManagerDataSource在每个连接请求时都新建一个connection。
         与DBCP的BasicDataSource不同，DriverManagerDataSource提供的连接没有进行池管理 --&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/jbookshelf&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
        &lt;property name=&quot;hibernateProperties&quot;&gt;
            &lt;props&gt;
                &lt;prop key=&quot;hibernate.connection.pool_size&quot;&gt;1&lt;/prop&gt;
                &lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;
                &lt;prop key=&quot;hibernate.cache.provider_class&quot;&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/prop&gt;
                &lt;prop key=&quot;show_sql&quot;&gt;true&lt;/prop&gt;
            &lt;/props&gt;
        &lt;/property&gt;
        &lt;property name=&quot;mappingResources&quot;&gt;
            &lt;list&gt;
                &lt;value&gt;com/codemany/account/model/User.hbm.xml&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;userDao&quot; class=&quot;com.codemany.account.dao.UserDao&quot;&gt;
        &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;
    &lt;/bean&gt;

    &lt;!-- Struts 2的action是有状态的，必须显式设置scope为prototype，这样每次请求过来都会创建新的action --&gt;
    &lt;bean id=&quot;loginAction&quot; class=&quot;com.codemany.account.action.LoginAction&quot; scope=&quot;prototype&quot;&gt;
        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>删除HibernateUtil.java，修改UserDao.java为以下内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.dao;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.codemany.account.model.User;

public class UserDao {
    // Spring 3集成Hibernate 4不再需要HibernateDaoSupport或HibernateTemplate了，
    // 直接使用原生API即可。
    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public User getUser(String username) {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery(&quot;from User u where u.username = ?&quot;);
            query.setString(0, username);
            query.setMaxResults(1);
            return (User)query.uniqueResult();
        } finally {
            session.close();
        }
    }
}
</code></pre></div>
<p>在struts.xml中将action元素中login的class属性改为applicationContext.xml配置文件中的loginAction：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;action name=&quot;login&quot; class=&quot;loginAction&quot;&gt;
    &lt;result name=&quot;success&quot;&gt;/index.jsp&lt;/result&gt;
    &lt;result name=&quot;input&quot;&gt;/index.jsp&lt;/result&gt;
&lt;/action&gt;
</code></pre></div>
<p>修改LoginAction.java的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.action;

import com.codemany.account.dao.UserDao;
import com.codemany.account.model.User;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class LoginAction extends ActionSupport {
    private static final long serialVersionUID = -389833745243649130L;

    private String username;
    private String password;

    private UserDao userDao;

    public String execute() throws Exception {
        if (username == null || username.length() == 0
                || password == null || password.length() == 0) {
            return INPUT;
        }

        User u = userDao.getUser(username);
        if (u == null || !password.equals(u.getPassword())) {
            return INPUT;
        }

        ActionContext.getContext().getSession().put(&quot;logined&quot;, true);
        return SUCCESS;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }
}
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/struts2-hibernate4-login-sample/"/>
    <updated>2012-08-31T07:41:05+08:00</updated>
    <id>http://codemany.com/blog/struts2-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>使用以下代码创建数据库：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">CREATE DATABASE IF NOT EXISTS jbookshelf;

USE jbookshelf;

DROP TABLE IF EXISTS users;

CREATE TABLE users (
    id int NOT NULL AUTO_INCREMENT,
    username varchar(20) NOT NULL,
    password varchar(50) NOT NULL,
    PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
</code></pre></div>
<p>在pom.xml中添加Hibernate的依赖配置：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
    &lt;version&gt;4.1.6.Final&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;5.1.21&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div>
<p>创建User.java类：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.model;

public class User {
    private Long id;

    private String username;
    private String password;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
</code></pre></div>
<p>在同一目录下创建User.hbm.xml文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;

&lt;hibernate-mapping package=&quot;com.codemany.account.model&quot;&gt;
    &lt;class name=&quot;User&quot; table=&quot;users&quot;&gt;
        &lt;id name=&quot;id&quot;&gt;
            &lt;generator class=&quot;increment&quot; /&gt;
        &lt;/id&gt;

        &lt;property name=&quot;username&quot; length=&quot;20&quot; /&gt;
        &lt;property name=&quot;password&quot; length=&quot;50&quot; /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre></div>
<p>在resources目录下创建hibernate.cfg.xml配置文件，内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt;
&lt;!DOCTYPE hibernate-configuration PUBLIC
    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;

&lt;hibernate-configuration&gt;
    &lt;session-factory&gt;
        &lt;!-- MySQL connection settings --&gt;
        &lt;property name=&quot;connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;
        &lt;property name=&quot;connection.url&quot;&gt;jdbc:mysql://localhost:3306/jbookshelf&lt;/property&gt;
        &lt;property name=&quot;connection.username&quot;&gt;yourname&lt;/property&gt;
        &lt;property name=&quot;connection.password&quot;&gt;yourpassword&lt;/property&gt;

        &lt;!-- JDBC connection pool (use the built-in) --&gt;
        &lt;property name=&quot;connection.pool_size&quot;&gt;1&lt;/property&gt;

        &lt;!-- SQL dialect --&gt;
        &lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;

        &lt;!-- Disable the second-level cache  --&gt;
        &lt;property name=&quot;cache.provider_class&quot;&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/property&gt;

        &lt;!-- Echo all executed SQL to stdout --&gt;
        &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;

        &lt;mapping resource=&quot;com/codemany/account/model/User.hbm.xml&quot; /&gt;
    &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</code></pre></div>
<p>建立管理Session的HibernateUtil.java类：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.dao.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {
    private static final SessionFactory sessionFactory;

    static {
        try {
            // Create the SessionFactory from hibernate.cfg.xml
            Configuration configuration = new Configuration();
            configuration.configure();
            Properties props = configuration.getProperties();

            ServiceRegistry serviceRegistry =
                    new ServiceRegistryBuilder().applySettings(props).buildServiceRegistry();

            sessionFactory = configuration.buildSessionFactory(serviceRegistry);
        } catch (Throwable ex) {
            // Make sure you log the exception, as it might be swallowed
            System.err.println(&quot;Initial SessionFactory creation failed.&quot; + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static Session getSession() {
        return sessionFactory.openSession();
    }
}
</code></pre></div>
<p>在dao包创建数据访问对象：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.dao;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.codemany.account.model.User;

public class UserDao {
    public static User getUser(String username) {
        Session session = HibernateUtil.getSession();
        try {
            Query query = session.createQuery(&quot;from User u where u.username = ?&quot;);
            query.setMaxResults(1);
            query.setString(0, username);
            return (User)query.uniqueResult();
        } finally {
            session.close();
        }
    }
}
</code></pre></div>
<p>现在可以访问数据库了，所以要修改LoginAction.java的execute方法：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public String execute() throws Exception {
    if (username == null || username.length() == 0
            || password == null || password.length() == 0) {
        return INPUT;
    }

    User u = UserDao.getUser(username);
    if (u == null) {
        return INPUT;
    }
    if (username.equals(u.getUsername()) &amp;&amp; password.equals(u.getPassword())) {
        ActionContext.getContext().getSession().put(&quot;logined&quot;, true);
        return SUCCESS;
    }

    return INPUT;
}
</code></pre></div>
<p>如果显示jta-1.0.1b.jar缺失的错误，可以在pom.xml中添加以下语句：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;java.net&lt;/id&gt;
        &lt;url&gt;http://download.java.net/maven/2/&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
</feed>
