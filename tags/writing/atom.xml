<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Writing | 乐者为王]]></title>
  <link href="http://codemany.com/tags/writing/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-11-12T13:39:35+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[写出受欢迎的编程文章的10个技巧]]></title>
    <link href="http://codemany.com/blog/10-tips-for-writing-consistently-popular-programming-articles/"/>
    <updated>2015-10-30T15:16:29+08:00</updated>
    <id>http://codemany.com/blog/10-tips-for-writing-consistently-popular-programming-articles</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.devx.com/blog/2009/01/10-tips-for-writing-consistent.html">http://www.devx.com/blog/2009/01/10-tips-for-writing-consistent.html</a></p>

<p>对于作者，这是一个可悲的事实。当谈到受大众欢迎时，不是所有的文章都是平等的，一些文章被证明比其它的更受欢迎。事实是，不管你选的主题有多好，或者你写的有多好，你都无法保证每次都能打出本垒打。尽管如此，如果你已经在写编程的文章（或者你正在考虑写），这里列出的技巧被证明能帮助文章从沉闷乏味的堆里跃升至最多查看次数列表的顶部。</p>

<h3 id="1-选择一个简练的话题">1. 选择一个简练的话题</h3>

<p>挑选一个简练的话题是艰难的，因为很多有趣的话题一点也不简洁，它们是冗长的和复杂的。有时候你可以创建很好的独立文章作为一个较长的话题，但通常不要这样做。相反，你可能需要写一个系列或一本书。要么选择别的，要么把这个话题分成简练的块。</p>

<p>接下来的几个技巧可以帮助你满足技巧#1的要求：</p>

<h3 id="2-增强现有的文档">2. 增强现有的文档</h3>

<p>一些最受欢迎的文章本质上是增强文档。那并没有什么错，因为技术文档通常是匆忙产生的，是不完整的，不是由开发者编写的，或缺乏相关的例子。在几乎所有情况下，文档（或文档的缺乏）给作者提供了丰富的话题。</p>

<h3 id="3-比较事物">3. 比较事物</h3>

<p>另一个屡屡受欢迎的策略是写比较两个或多个受欢迎的项目的文章。这些可以是语言、语言版本、APIs、数据库、操作系统、框架、编程方法、模式——在快速变化的开发者世界中，有着无数的机会。挑两个或多个开发者使用的技术，并且写那种最好能帮助开发者转型或选择它们的文章。</p>

<h3 id="4-列个清单">4. 列个清单</h3>

<p>你可能会认为这是陈词滥调，但“10 for/about”类型的文章往往表现的很好。（如果这篇博文做的很好，我会认为它验证了这个观点，如果没有的话，或许我会减少成“9个技巧……”）。编辑们和出版商们喜欢这些文章，因为读者喜欢它们。我怀疑读者喜欢它们是因为包含很多内容的文章增加了概率，因为这些文章至少包含有一个需要的或有趣的材料，但也许人们只是喜欢列表。无论如何……</p>

<p>在你有一个坚实的话题后，你准备开始写作，请记住这些观点：</p>

<h3 id="5-忽视历史">5. 忽视历史</h3>

<p>是的，我知道你认为每个人在切入正题前都需要了解特定主题的历史背景，但事实是，他们很少这样做。比起你在高中学习代数时让你的父亲解释数学的历史，你的读者不再想思考你的历史评论。这里有个读者行为分析的内部技巧：大部分读者从来没有读完过第一页。所以，如果你没有回答他们的问题，或立即抓住他们的兴趣，不管你的文章的其余部分有多么正确，他们都不会看。链接到历史，切入正题。</p>

<h3 id="6-避免“helloworld”例子">6. 避免“HelloWorld”例子</h3>

<p>在你读过的文章和书里你看到过一千个“HelloWorld”的代码例子，但这并不意味着它们是好的！它们不是。没有人喜欢它们。对于学习编程的任何事情它们是完全无用的。它们也不是娱乐。完全有可能写出清晰而简单的既可以教又不烦闷的例子。</p>

<h3 id="7-说明你的观点">7. 说明你的观点</h3>

<p>开发者喜欢代码，的确，但你也可以通过包含插图和截图帮他们节省时间和精力。这是因为他们中的许多人可能不会运行你那迷人的示例代码，但如果他们正在阅读你的文章，他们很可能对结果感兴趣。显示输入或输出无论何时都很重要。</p>

<h3 id="8-显示有趣的代码">8. 显示有趣的代码</h3>

<p>许多技术作者似乎认为，在简短的解释之后提供大量的示例代码（或者更糟糕的是，只是显示代码而没有解释）将刺激他们的读者研究代码以获得启示。我向你保证那不是真的。最好的文章解释了话题，但只显示代码片断，然后解释或说明（或两者）代码做了什么，它如何与周围的代码或整体的话题适应，什么时候你应该使用它，什么时候不应该，也只有到那时——仅且当它是真正有用的时候——他们会向你打听更长的代码块。相反，只放有趣的代码在你的文章里，并将其余部分作为可运行的、完整的项目以供下载。</p>

<h3 id="9-化繁为简">9. 化繁为简</h3>

<p>避免冲动去告诉人们你的主题是多么地复杂。他们知道它是复杂的，或者他们很可能不会读你的文章。相反，想办法去让复杂的主题看起来更简单。</p>

<p>也许是所有技巧中最重要的一点：</p>

<h3 id="10-简明扼要">10. 简明扼要</h3>

<p>最受欢迎的技术文章只给读者他们需要的——没有更多。</p>

<p>最后，这是真的，有些文章很受欢迎，尽管它很少有甚至没有在这里列出的特性——但那并不是你可以控制的东西。尝试去写那种文章就像是博顺子，你会浪费大部分的时间。专注于基础，写大量的文章，然后其中的某些人将会成为赢家。</p>

<p>快乐写作。</p>
]]></content>
  </entry>
  
</feed>
