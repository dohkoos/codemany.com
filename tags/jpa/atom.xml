<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JPA | 乐者为王]]></title>
  <link href="http://codemany.com/tags/jpa/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-05-31T15:07:04+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JPA + Spring 2入门]]></title>
    <link href="http://codemany.com/blog/getting-started-jpa-with-spring2/"/>
    <updated>2007-08-10T18:33:42+08:00</updated>
    <id>http://codemany.com/blog/getting-started-jpa-with-spring2</id>
    <content type="html"><![CDATA[<p>JPA（Java Persistence API）是EJB 3.0 新引入的一个把Java数据对象映射成关系数据库对象的数据持久化编程模型，它弥补了JDBC、ORM、EJB 2等在Java对象持久化方面的不足之处，并且非常易于使用。JPA可以被当作一个单独的 POJO（Plain Old Java Object）持续化使用，或者被集成到任意Java EE兼容的容器或其它的轻量级框架（例如Spring）等一起使用。</p>

<h3 id="配置jpa">配置JPA</h3>

<p>Spring提供了两种方法创建JPA的EntityManagerFactory对象。</p>

<p>方法1：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalEntityManagerFactoryBean&quot;&gt;
        &lt;property name=&quot;persistenceUnitName&quot; value=&quot;persistenceUnit&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>FactoryBean创建的EntityManagerFactory适用于仅通过JPA进行数据访问的环境。由于使用了PersistenceProvider自动侦测机制，所以只能从默认路径classpath:META-INF/persistence.xml中读取配置信息。</p>

<p>方法2：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;someDataSource&quot; /&gt;
        &lt;property name=&quot;loadTimeWeaver&quot;&gt;
            &lt;bean class=&quot;org.springframework.instrument.classloading.SimpleLoadTimeWeaver&quot; /&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>FactoryBean提供了对JPA EntityManagerFactory的完整控制，非常适合那种有简单定制需要的环境。你可以处理多个persistence.xml配置文件；覆盖persistence.xml文件的默认路径；可以传递Spring托管的JDBC DataSource给JPA PersistenceProvider，用来替代persistence.xml中的JDBC配置（这个Spring托管的DataSource通常被作为nonJtaDataSource传送给PersistenceProvider，并且覆盖persistence.xml中相同的nonJtaDataSource）。</p>

<h3 id="数据访问">数据访问</h3>

<p>基于JPA的DAO可以通过三种方式进行数据访问JpaDaoSupport，JpaTemplate和plain JPA。其中JpaTemplate是plain JPA的封装，而JpaDaoSupport又是JpaTemplate的封装。无疑，使用不对Spring产生任何依赖的Plain JPA的API进行编程是最好选择。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class ProductDaoImpl implements ProductDao {
    private EntityManager entityManager = null;

    @PersistenceContext
    public void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    public Collection loadProductsByCategory(String category) {
         Query query = em.createQuery(&quot;from Product as p where p.category = :category&quot;);
         query.setParameter(&quot;category&quot;, category);
         return query.getResultList();
    }
}
</code></pre></div>
<p>需要注意的是，必须激活PersistenceAnnotationBeanPostProcessor功能才能让Spring识别@PersistenceContext注解。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;!-- JPA annotations bean post processor --&gt;
    &lt;bean class=&quot;org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor&quot; /&gt;

    &lt;bean id=&quot;productDao&quot; class=&quot;com.codemany.netlink.dao.impl.ProductDaoImpl&quot; /&gt;
&lt;/beans&gt;
</code></pre></div>
<h3 id="异常转化">异常转化</h3>

<p>Spring提供了一个允许通过使用@Repository注解进行透明的异常转化的解决方案。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@Repository
public class ProductDaoImpl implements ProductDao {
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;!-- Exception translation bean post processor --&gt;
    &lt;bean class=&quot;org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor&quot; /&gt;
</code></pre></div>
<p>后置处理器将自动的寻找所有的异常转化器（PersistenceExceptionTranslator这个接口的实现类）并通知所有打上@Repository注解的bean，从而能够使得被找到的异常转化器能够在抛出异常时做相应的异常转化工作。</p>

<p>总的来说，DAO能够基于普通的Java持久层API和注解来实现，但同样也能享受到由Spring管理事务、IoC和透明的异常转化（转化成为Spring的异常体系）等好处。</p>
]]></content>
  </entry>
  
</feed>
