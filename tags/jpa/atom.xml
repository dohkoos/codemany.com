<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JPA | 乐者为王]]></title>
  <link href="http://codemany.com/tags/jpa/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-24T22:32:13+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JPA + Spring 2入门]]></title>
    <link href="http://codemany.com/blog/2007/08/10/jpa-spring-2-entry/"/>
    <updated>2007-08-10T18:33:42+08:00</updated>
    <id>http://codemany.com/blog/2007/08/10/jpa-spring-2-entry</id>
    <content type="html"><![CDATA[<p><strong>配置JPA</strong><br />
Spring JPA提供了两种方法创建JPA EntityManagerFactory<br />
<beans><br /></p>

<pre><code>&lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean"&gt;&lt;br /&gt;
    &lt;property name="persistenceUnitName" value="myPersistenceUnit" /&gt;&lt;br /&gt;
&lt;/bean&gt;&lt;br /&gt;
</code></pre>

<p></beans><br />
FactoryBean创建的EntityManagerFactory适用于仅通过JPA进行数据访问的环境。由于使用了PersistenceProvider自动侦测机制，所以只能从默认路径classpath:META-INF/persistence.xml中读取配置信息。<br /></p>

<br />


<p><beans><br /></p>

<pre><code>&lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;&lt;br /&gt;
    &lt;property name="dataSource" ref="someDataSource" /&gt;&lt;br /&gt;
    &lt;property name="loadTimeWeaver"&gt;&lt;br /&gt;
        &lt;bean class="org.springframework.instrument.classloading.SimpleLoadTimeWeaver" /&gt;&lt;br /&gt;
    &lt;/property&gt;&lt;br /&gt;
&lt;/bean&gt;&lt;br /&gt;
</code></pre>

<p></beans><br />
FactoryBean提供了对JPA EntityManagerFactory的完整控制，非常适合那种有简单定制需要的环境。你可以处理多个persistence.xml配置文件；覆盖persistence.xml文件的默认路径；可以传递Spring托管的JDBC DataSource给JPA PersistenceProvider，用来替代persistence.xml中的JDBC配置(这个Spring托管的DataSource通常被作为nonJtaDataSource传送给PersistenceProvider，并且覆盖persistence.xml中相同的nonJtaDataSource)。<br /></p>

<br />


<p><strong>数据访问</strong><br />
基于JPA的DAO可以通过三种方式进行数据访问JpaDaoSupport，JpaTemplate和plain JPA。其中JpaTemplate是plain JPA的封装，而JpaDaoSupport又是JpaTemplate的封装。无疑，使用不对Spring产生任何依赖的Plain JPA的API进行编程是最好选择。<br />
public class ProductDaoImpl implements ProductDao {<br /></p>

<pre><code>private EntityManager entityManager = null;&lt;br /&gt;
</code></pre>

<br />


<pre><code>@PersistenceContext&lt;br /&gt;
public void setEntityManager(EntityManager entityManager) {&lt;br /&gt;
    this.entityManager = entityManager;&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<br />


<pre><code>public Collection loadProductsByCategory(String category) {&lt;br /&gt;
     Query query = em.createQuery("from Product as p where p.category = :category");&lt;br /&gt;
     query.setParameter("category", category);&lt;br /&gt;
     return query.getResultList();&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}<br />
注意，必须激活PersistenceAnnotationBeanPostProcessor功能才能让Spring识别@PersistenceContext注解。<br />
<beans><br /></p>

<pre><code>&lt;!-- JPA annotations bean post processor --&gt;&lt;br /&gt;
&lt;bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/&gt;&lt;br /&gt;
</code></pre>

<br />


<pre><code>&lt;bean id="myProductDao" class="product.ProductDaoImpl" /&gt;&lt;br /&gt;
</code></pre>

<p></beans><br /></p>

<br />


<p><strong>异常转化</strong><br />
Spring提供了一个允许通过使用@Repository注解进行透明的异常转化的解决方案。<br />
@Repository<br />
public class ProductDaoImpl implements ProductDao {<br /></p>

<pre><code>...&lt;br /&gt;
</code></pre>

<p>}<br /></p>

<br />


<p><beans><br /></p>

<pre><code>&lt;!-- Exception translation bean post processor --&gt;&lt;br /&gt;
&lt;bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" /&gt;&lt;br /&gt;
</code></pre>

<br />


<pre><code>&lt;bean id="myProductDao" class="product.ProductDaoImpl" /&gt;&lt;br /&gt;
</code></pre>

<p></beans><br />
后置处理器将自动的寻找所有的异常转化器(PersistenceExceptionTranslator这个接口的实现类)并通知所有打上@Repository注解的bean，从而能够使得被找到的异常转化器能够在抛出异常时做相应的异常转化工作。<br /></p>

<br />


<p>总结来说：DAO能够基于普通的Java持久层API和注解来实现，但同样也能享受到由Spring管理事务、IoC和透明的异常转化(转化成为Spring的异常体系)等好处。</p></p>
]]></content>
  </entry>
  
</feed>
