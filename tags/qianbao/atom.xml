<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Qianbao | 乐者为王]]></title>
  <link href="http://codemany.com/tags/qianbao/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-09-20T18:12:25+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[部署Qianbao到Heroku时的问题]]></title>
    <link href="http://codemany.com/blog/2013/05/21/problem-when-deploying-qianbao-to-heroku/"/>
    <updated>2013-05-21T06:25:33+08:00</updated>
    <id>http://codemany.com/blog/2013/05/21/problem-when-deploying-qianbao-to-heroku</id>
    <content type="html"><![CDATA[<p>Heroku现在已经是纯粹的只读PaaS了，也就是说以前还支持的SQlite现在也不能使用了。因此部署到Heroku上的Rails应用需要把使用的数据库改成PostgreSQL，并且要关闭assets的预编译功能。</p>

<p>修改Gemfile，将SQLite换成PostgreSQL：</p>

<p>```</p>

<h1>gem 'sqlite3'</h1>

<p>gem 'pg'
```</p>

<p>在config/application.rb中添加：</p>

<p><code>
config.assets.initialize_on_precompile = false
</code></p>

<p>股票功能需要导入交割单文件。因为导入后的文本文件不再使用，可以把上传路径由public/uploads改为tmp。这样就避免了不能Heroku不能写文件的问题。</p>

<p>应用上传后运行时出现异常，使用heroku logs -t查看日志发现有如下错误：</p>

<p><code>
Error: column "stocks.share_name" must appear in the GROUP BY clause or be used in an aggregate function
</code></p>

<p>这是因为在controller中有这么一行代码：</p>

<p><code>
current_user.stocks.select("share_code, share_name, sum(actual_amount) as amount").group("share_code")
</code></p>

<p>在PostgreSQL中这会有问题。比如下面的数据表：</p>

<p><img src="/uploads/qianbao-stocks-table.png" title="qianbao-stocks-table" ></p>

<p>执行上面的SQL语句后，share_name的值到底是取Ruby呢还是ST Ruby？解决这个问题的方法是使用aggregate函数。</p>

<p><code>
current_user.stocks.select("share_code, max(share_name) as share_name, sum(actual_amount) as amount").group("share_code")
</code></p>

<p>使用PostgreSQL还有个问题，就是decimal类型的字段，取出来的值是字符串类型。例如：</p>

<p><code>
if stock.amount &lt; 0
</code></p>

<p>它会报错误：</p>

<p><code>
ArgumentError (comparison of String with 0 failed)
</code></p>

<p>这个可以使用to_f函数解决：</p>

<p><code>
if stock.amount.to_f &lt; 0
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 3.2打造简单记账应用]]></title>
    <link href="http://codemany.com/blog/2012/04/18/using-rails-32-to-create-a-simple-accounting-application/"/>
    <updated>2012-04-18T07:49:27+08:00</updated>
    <id>http://codemany.com/blog/2012/04/18/using-rails-32-to-create-a-simple-accounting-application</id>
    <content type="html"><![CDATA[<p>Rails已经到3.2版本了，和以前的2.3版本有了很大的不同，决定把原来老版本的记账应用重新写一遍，更新部分插件。</p>

<p>记账应用的核心功能：</p>

<ol>
<li>可以输入花钱的记录；</li>
<li>可以修改输入了的记录；</li>
<li>可以删除输入了的记录；</li>
<li>可以显示所有的记录。</li>
</ol>


<p>创建项目</p>

<p><code>
rails new qianbao
cd qianbao
rails g scaffold entry amount:decimal tags:string effective_date:date
rails g controller home index
</code></p>

<p>删除public/index.html，在config/routes.rb中添加根路由：</p>

<p><code>
root :to =&gt; 'home#index'
</code></p>

<p>现在要给应用加上一个认证系统（注册、激活、登录、登出），这次使用<a href="https://github.com/plataformatec/devise">devise</a>插件实现。</p>

<p>在Gemfile中添加：</p>

<p><code>
gem 'devise'
</code></p>

<p>然后执行下列命令：</p>

<p><code>
bundle install
rails g devise:install
rails g devise user
rails g devise:views
</code></p>

<p>创建一个migration，把User和Entry关联起来：</p>

<p>```
class AddUserToEntry &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :entries, :user_id, :integer

add_index :entries, :user_id
</code></pre>

<p>  end
end
```</p>

<p>修改Entry和User模型：</p>

<p>```
class Entry &lt; ActiveRecord::Base
  validates :effective_date, :presence => true
  validates :amount,         :presence => true,</p>

<pre><code>                         :numericality =&gt; {:greater_than =&gt; 0.0},
                         :format =&gt; {:with =&gt; /^\d+??(?:\.\d{0,2})?$/}
</code></pre>

<p>  validates :tags,           :presence => true,</p>

<pre><code>                         :length =&gt; { :within =&gt; 1..255 }
</code></pre>

<p>  belongs_to :user
```</p>

<p><code>
class User &lt; ActiveRecord::Base
  has_many :users
</code></p>

<p>修改app/views/home/index.html.erb为如下内容：</p>

<p>```</p>

<h1>Welcom to Qianbao!</h1>


<p>&lt;% if user_signed_in? %>
  <p></p>

<pre><code>&lt;strong&gt;&lt;%=link_to current_user.email, edit_user_registration_path %&gt;&lt;/strong&gt;
&lt;%= link_to 'Logout', destroy_user_session_path, :method =&gt; :delete %&gt;
</code></pre>

<p>  </p>
  &lt;%= link_to "All Entries", entries_path %>
&lt;% else %>
  <p></p>

<pre><code>&lt;strong&gt;You are currently not logged in.&lt;/strong&gt;
&lt;%= link_to 'Login', new_user_session_path %&gt; or
&lt;%= link_to 'Sign up', new_user_registration_path %&gt;
</code></pre>

<p>  </p>
&lt;% end %>
```</p>

<p>修改app/controller/entries_controller.rb：</p>

<p>```
class EntriesController &lt; ApplicationController
  before_filter :authenticate_user!</p>

<p>  # GET /entries
  # GET /entries.json
  def index</p>

<pre><code>@entries = current_user.entries

respond_to do |format|
  format.html # index.html.erb
  format.json { render json: @entries }
end
</code></pre>

<p>  end</p>

<p>  # GET /entries/1
  # GET /entries/1.json
  def show</p>

<pre><code>@entry = current_user.entries.find(params[:id])

respond_to do |format|
  format.html # show.html.erb
  format.json { render json: @entry }
end
</code></pre>

<p>  end</p>

<p>  # GET /entries/new
  # GET /entries/new.json
  def new</p>

<pre><code>@entry = current_user.entries.new

respond_to do |format|
  format.html # new.html.erb
  format.json { render json: @entry }
end
</code></pre>

<p>  end</p>

<p>  # GET /entries/1/edit
  def edit</p>

<pre><code>@entry = current_user.entries.find(params[:id])
</code></pre>

<p>  end</p>

<p>  # POST /entries
  # POST /entries.json
  def create</p>

<pre><code>@entry = current_user.entries.new(params[:entry])
@entry.user = current_user

respond_to do |format|
  if @entry.save
    format.html { redirect_to @entry, notice: 'Entry was successfully created.' }
    format.json { render json: @entry, status: :created, location: @entry }
  else
    format.html { render action: "new" }
    format.json { render json: @entry.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end</p>

<p>  # PUT /entries/1
  # PUT /entries/1.json
  def update</p>

<pre><code>@entry = current_user.entries.find(params[:id])

respond_to do |format|
  if @entry.update_attributes(params[:entry])
    format.html { redirect_to @entry, notice: 'Entry was successfully updated.' }
    format.json { head :no_content }
  else
    format.html { render action: "edit" }
    format.json { render json: @entry.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end</p>

<p>  # DELETE /entries/1
  # DELETE /entries/1.json
  def destroy</p>

<pre><code>@entry = current_user.entries.find(params[:id])
@entry.destroy

respond_to do |format|
  format.html { redirect_to entries_url }
  format.json { head :no_content }
end
</code></pre>

<p>  end
end
```</p>

<p>执行以下命令启动应用：</p>

<p><code>
rake db:migrate
rails s
</code></p>

<p>以前的版本用的CSS框架是<a href="http://blueprintcss.org/">Blueprint</a>，这次使用比它更方便快捷的<a href="https://github.com/twitter/bootstrap">Bootstrap</a>。Bootstrap建立在Less上，有个<a href="https://github.com/metaskills/less-rails-bootstrap">less-rails-bootstrap</a>，不过在安装libv8时竟然要提示缺少Python，拜托！我用的是Ruby，要我装Python，啥意思啊！还是找个Sass版的Bootstrap吧。</p>

<p>下载<a href="https://github.com/jlong/sass-twitter-bootstrap">sass-twitter-bootstrap</a>：</p>

<p><code>
git clone https://github.com/jlong/sass-twitter-bootstrap.git
</code></p>

<p>将sass-twitter-bootstrap/lib中的文件拷贝到app/assets/stylesheets/twitter目录下。然后将app/assets/stylesheets/application.css中的</p>

<p><code>
*= require_tree .
</code></p>

<p>修改为</p>

<p><code>
*= require twitter/bootstrap
</code></p>

<p>再在文件末尾添加：</p>

<p><code>
body { padding-top: 60px; }
</code></p>

<p>现在就可以使用Bootstrap来布局美化应用了。</p>

<p>代码下载：<a href="https://github.com/dohkoos/qianbao">https://github.com/dohkoos/qianbao</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账软件（12）]]></title>
    <link href="http://codemany.com/blog/2010/01/08/using-rails-23-to-create-a-simple-accounting-app-part12/"/>
    <updated>2010-01-08T08:31:28+08:00</updated>
    <id>http://codemany.com/blog/2010/01/08/using-rails-23-to-create-a-simple-accounting-app-part12</id>
    <content type="html"><![CDATA[<p>在这以前我们把tags作为Entry的一个字段来实现，这样做有很大的局限性，而且还有好多插件可以实现这个功能，现在我们就来把它替换用插件<a href="https://github.comjviney/acts_as_taggable_on_steroids">acts_as_taggable_on_steroids</a>实现。</p>

<p>安装插件</p>

<p><code>
script/plugin install git://github.com/jviney/acts_as_taggable_on_steroids.git
script/generate acts_as_taggable_migration
rake db:migrate
</code></p>

<p>在Entry中添加一句代码：</p>

<p>```
class Entry &lt; ActiveRecord::Base
  acts_as_taggable</p>

<p>  belongs_to :user
end
```</p>

<p>还要将所有视图中原来的tags字段替换成tag_list字段。</p>

<p>```</p>

<h1>index.html.erb</h1>

<p>&lt;%= h entry.tag_list %>
```</p>

<p>```</p>

<h1>edit.html.erb</h1>

<p>&lt;%= f.text_field :tag_list %>
```</p>

<p>```</p>

<h1>new.html.erb</h1>

<p>&lt;%= f.text_field :tag_list %>
```</p>

<p>还要将Entry模型中的验证字段tags改成tag_list。做完这些插件也就安装完成了。</p>

<p>既然用了插件，那么原来的tags字段就不需要了，写个迁移任务把它处理掉吧！</p>

<p><code>
script/generate migration remove_tags_from_entry
</code></p>

<p>迁移代码如下：</p>

<p>```
class RemoveTagsFromEntry &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>remove_column :entries, :tags
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>add_column :entries, :tags, :string
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账软件（11）]]></title>
    <link href="http://codemany.com/blog/2010/01/05/using-rails-23-to-create-a-simple-accounting-app-part11/"/>
    <updated>2010-01-05T20:43:29+08:00</updated>
    <id>http://codemany.com/blog/2010/01/05/using-rails-23-to-create-a-simple-accounting-app-part11</id>
    <content type="html"><![CDATA[<p>当网站出现问题时，让它发送一份错误报告到你的邮箱是件挺不错的事，这样你就不必再担心不能及时发现问题了。</p>

<p><a href="https://github.comrails/exception_notification">exception_notification</a>插件的功能就是当你的Rails应用出错时，它会向指定的邮箱地址发送错误日志。</p>

<p>使用很简单，安装插件后配置一下邮件接受者就可以了。</p>

<p>安装插件</p>

<p><code>
script/plugin install git://github.com/rails/exception_notification.git
</code></p>

<p>在config/environment.rb中增加邮件接收者的地址：</p>

<p>```
Rails::Initializer.run do |config|
  # Settings in config/environments/* take precedence over those specified here.
  # Application configuration should go into files in config/initializers
  # -- all .rb files in that directory are automatically loaded.</p>

<p>  config.i18n.default_locale = :zh
end</p>

<p>ExceptionNotifier.exception_recipients = %w(<a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x79;&#x6f;&#x75;&#x72;&#x6e;&#97;&#109;&#x65;&#x40;&#x65;&#120;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x79;&#111;&#x75;&#x72;&#x6e;&#x61;&#109;&#x65;&#x40;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#99;&#x6f;&#x6d;</a>)
```</p>

<p>然后告诉Exception Notifier哪些controller出错才发送日志，当然是全部啦：</p>

<p><code>
class ApplicationController &lt; ActionController::Base
  include ExceptionNotifiable
</code></p>

<p>Exception Notifier采用Rails中的ActionMailer发送邮件，所以使用的前提是确保ActionMailer可以正常发送邮件。还有就是Exception Notifier默认只在production环境下才会生效，如果想要在development下也生效，需要将development.rb文件中的：</p>

<p><code>
config.action_mailer.raise_delivery_errors = false
</code></p>

<p>修改为</p>

<p><code>
config.action_mailer.raise_delivery_errors = true
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账软件（10）]]></title>
    <link href="http://codemany.com/blog/2010/01/04/using-rails-23-to-create-a-simple-accounting-app-part10/"/>
    <updated>2010-01-04T20:34:41+08:00</updated>
    <id>http://codemany.com/blog/2010/01/04/using-rails-23-to-create-a-simple-accounting-app-part10</id>
    <content type="html"><![CDATA[<p>从2.2版本起Rails开始内置支持i18n，因此以后实现国际化/本地化就可以不再需要各种各样的插件了。</p>

<p>Rails默认的Locale文件夹是config/locales，假设你要支持中文和英文，那么你需要在这个文件夹下放置zh.yml和en.yml两个文件。</p>

<p>相应的入门教程网上有不少，我也就不多讲了。这里主要说一下如何在记账应用中实现可以让用户指定语言的i18n实现，即当用户选择English，那么界面就切换成英文界面，并且以后打开的页面也是以英文出现，反之亦如此。</p>

<p>首先在header区添加以下代码：</p>

<p><code>
&lt; %= link_to 'Chinese', :locale =&gt; 'zh' %&gt;
&lt; %= link_to 'English', :locale =&gt; 'en' %&gt;
</code></p>

<p>点击其中某个链接后，浏览器就会传递对应的参数zh或en到后台。</p>

<p>然后在app/controllers/application_controller.rb中添加以下代码：</p>

<p>```
before_filter :set_locale</p>

<p>def set_locale
  I18n.locale = params[:locale]
end
```</p>

<p>不过这里有个问题就是url中必须得带着参数，不然的话用户的选择就会失效。要想使选择达到持续的效果，可以考虑把这些信息保存在session中，改进后的代码如下：</p>

<p><code>
def set_locale
  I18n.locale = params[:locale] || session[:locale]
  session[:locale] = I18n.locale
end
</code></p>

<p>现在这样就基本上差不多了。剩下的就是处理第一次访问时的语言，这个可以从http头中的ACCEPT_LANGUAGE参数获取。最终实现的代码：</p>

<p><code>
def set_locale
  accept_lang = request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first
  I18n.locale = params[:locale] || session[:locale] || accept_lang || 'zh'
  session[:locale] = I18n.locale
end
</code></p>

<p>不过当用户设置Locale后，在添加Entry时会报以下错误：</p>

<p>```
can't convert Symbol into String</p>

<p>Extracted source (around line #8):</p>

<pre><code>6:   &lt;p&gt;
7:     &lt; %= t(:effective_date) %&gt;&lt;br /&gt;
8:     &lt; %= f.date_select :effective_date %&gt;
</code></pre>

<p>```</p>

<p>查找资料后发现可以通过在date_select中加入order来解决。但日期下拉列表中的月份还有问题，出现的不是正常月份，而是一些随机数。这个可以通过添加month_names解决。</p>

<p>```</p>

<h1>new.html.erb</h1>

<p><p>
  &lt; %= t(:effective_date) %><br />
  &lt; %= f.date_select :effective_date %>
</p>
```</p>

<p>```</p>

<h1>en.yml</h1>

<p>en:
  date:</p>

<pre><code>month_names: [~, January, February, ..., November, December]
order: [ :year, :month, :day ]
</code></pre>

<p>```</p>

<p>```</p>

<h1>zh.yml</h1>

<p>zh:
  date:</p>

<pre><code>month_names: [~, 一月, 二月, ..., 十一月, 十二月]
order: [ :year, :month, :day ]
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
