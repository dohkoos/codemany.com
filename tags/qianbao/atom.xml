<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Qianbao | 乐者为王]]></title>
  <link href="http://codemany.com/tags/qianbao/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-04-08T20:35:58+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Rails 3.2打造简单记账应用]]></title>
    <link href="http://codemany.com/blog/using-rails-32-to-create-a-simple-accounting-application/"/>
    <updated>2012-04-18T07:49:27+08:00</updated>
    <id>http://codemany.com/blog/using-rails-32-to-create-a-simple-accounting-application</id>
    <content type="html"><![CDATA[<p>Rails已经到3.2版本了，和以前的2.3版本有了很大的不同，决定把原来老版本的记账应用重新写一遍，更新部分插件。</p>

<p>首先是创建项目：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails new qianbao
cd qianbao
rails g scaffold entry amount:decimal tags:string comment:text effective_date:date
rails g controller home index
</code></pre></div>
<p>删除public/index.html，在config/routes.rb中添加根路由：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root :to =&gt; &#39;home#index&#39;
</code></pre></div>
<p>现在要给应用加上一个认证系统（注册、激活、登录、登出），这次使用<a href="https://github.com/plataformatec/devise">devise</a>插件实现。</p>

<p>在Gemfile中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;devise&#39;
</code></pre></div>
<p>然后执行下列命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">bundle install
rails g devise:install
rails g devise user
rails g devise:views
</code></pre></div>
<p>创建一个迁移任务，把User和Entry模型关联起来：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class AddUserIdToEntries &lt; ActiveRecord::Migration
  def change
    add_column :entries, :user_id, :integer

    add_index :entries, :user_id
  end
end
</code></pre></div>
<p>修改Entry和User模型：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Entry &lt; ActiveRecord::Base
  validates :effective_date, :presence =&gt; true
  validates :amount,         :presence =&gt; true,
                             :numericality =&gt; { :greater_than =&gt; 0.0 },
                             :format =&gt; { :with =&gt; /^\d+??(?:\.\d{0,2})?$/ }
  validates :tags,           :presence =&gt; true,
                             :length =&gt; { :within =&gt; 1..255 }

  belongs_to :user
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">class User &lt; ActiveRecord::Base
  has_many :entries
</code></pre></div>
<p>修改app/views/layouts/application.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;
  &lt;% if user_signed_in? %&gt;
    &lt;p&gt;
      &lt;strong&gt;&lt;%= link_to current_user.email, edit_user_registration_path %&gt;&lt;/strong&gt;
      &lt;%= link_to &#39;Logout&#39;, destroy_user_session_path, :method =&gt; :delete %&gt;
    &lt;/p&gt;
    &lt;%= link_to &quot;All Entries&quot;, entries_path %&gt;
  &lt;% else %&gt;
    &lt;p&gt;
      &lt;strong&gt;You are currently not logged in.&lt;/strong&gt;
      &lt;%= link_to &#39;Sign in&#39;, new_user_session_path %&gt; or
      &lt;%= link_to &#39;Sign up&#39;, new_user_registration_path %&gt;
    &lt;/p&gt;
  &lt;% end %&gt;

  &lt;%= yield %&gt;
&lt;/body&gt;
</code></pre></div>
<p>修改app/controller/entries_controller.rb：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class EntriesController &lt; ApplicationController
  before_filter :authenticate_user!

  # GET /entries
  # GET /entries.json
  def index
    @entries = current_user.entries

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @entries }
    end
  end

  # GET /entries/1
  # GET /entries/1.json
  def show
    @entry = current_user.entries.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @entry }
    end
  end

  # GET /entries/new
  # GET /entries/new.json
  def new
    @entry = Entry.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @entry }
    end
  end

  # GET /entries/1/edit
  def edit
    @entry = current_user.entries.find(params[:id])
  end

  # POST /entries
  # POST /entries.json
  def create
    @entry = Entry.new(params[:entry])
    @entry.user = current_user

    respond_to do |format|
      if @entry.save
        format.html { redirect_to @entry, notice: &#39;Entry was successfully created.&#39; }
        format.json { render json: @entry, status: :created, location: @entry }
      else
        format.html { render action: &quot;new&quot; }
        format.json { render json: @entry.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /entries/1
  # PUT /entries/1.json
  def update
    @entry = current_user.entries.find(params[:id])

    respond_to do |format|
      if @entry.update_attributes(params[:entry])
        format.html { redirect_to @entry, notice: &#39;Entry was successfully updated.&#39; }
        format.json { head :no_content }
      else
        format.html { render action: &quot;edit&quot; }
        format.json { render json: @entry.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /entries/1
  # DELETE /entries/1.json
  def destroy
    @entry = current_user.entries.find(params[:id])
    @entry.destroy

    respond_to do |format|
      format.html { redirect_to entries_url }
      format.json { head :no_content }
    end
  end
end
</code></pre></div>
<p>执行以下命令启动应用：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rake db:migrate
rails s
</code></pre></div>
<p>以前的版本用的CSS框架是<a href="http://blueprintcss.org/">Blueprint</a>，这次使用比它更方便快捷的<a href="https://github.com/twitter/bootstrap">Bootstrap</a>。Bootstrap建立在Less上，有个<a href="https://github.com/metaskills/less-rails-bootstrap">less-rails-bootstrap</a>，不过在安装libv8时竟然要提示缺少Python，拜托！我用的是Ruby，要我装Python，啥意思啊！还是找个Sass版的Bootstrap吧。</p>

<p>下载<a href="https://github.com/jlong/sass-twitter-bootstrap">sass-twitter-bootstrap</a>：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/jlong/sass-twitter-bootstrap.git
</code></pre></div>
<p>将sass-twitter-bootstrap/lib中的文件拷贝到app/assets/stylesheets/twitter目录下。然后将app/assets/stylesheets/application.css中的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">*= require_tree .
</code></pre></div>
<p>修改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">*= require twitter/bootstrap
</code></pre></div>
<p>再在文件末尾添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">body { padding-top: 60px; }
</code></pre></div>
<p>现在就可以使用Bootstrap来布局美化应用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账应用（12）]]></title>
    <link href="http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part12/"/>
    <updated>2010-01-08T08:31:28+08:00</updated>
    <id>http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part12</id>
    <content type="html"><![CDATA[<p>在这以前我们把tags作为Entry模型的一个字段来实现，这样做有很大的局限性，而且还有好多插件可以实现这个功能，现在我们就来把它替换用插件<a href="https://github.com/jviney/acts_as_taggable_on_steroids">acts_as_taggable_on_steroids</a>实现。</p>

<p>安装插件</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/jviney/acts_as_taggable_on_steroids.git
script/generate acts_as_taggable_migration
rake db:migrate
</code></pre></div>
<p>在Entry模型中添加一句代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Entry &lt; ActiveRecord::Base
  acts_as_taggable
</code></pre></div>
<p>还要将所有视图中原来的tags字段替换成tag_list字段。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># index.html.erb
&lt;%=h entry.tag_list %&gt;
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"># edit.html.erb
&lt;%= f.text_field :tag_list %&gt;
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"># new.html.erb
&lt;%= f.text_field :tag_list %&gt;
</code></pre></div>
<p>还要将Entry模型中的验证字段tags改成tag_list。做完这些插件也就安装完成了。</p>

<p>既然用了插件，那么原来的tags字段就不需要了，写个迁移任务把它处理掉吧！</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/generate migration remove_tags_from_entries
</code></pre></div>
<p>迁移代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class RemoveTagsFromEntries &lt; ActiveRecord::Migration
  def self.up
    remove_column :entries, :tags
  end

  def self.down
    add_column :entries, :tags, :string
  end
end
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/qianbao">https://github.com/dohkoos/qianbao</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账应用（11）]]></title>
    <link href="http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part11/"/>
    <updated>2010-01-05T20:43:29+08:00</updated>
    <id>http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part11</id>
    <content type="html"><![CDATA[<p>当网站出现问题时，让它发送一份错误报告到你的邮箱是件挺不错的事，这样你就不必再担心不能及时发现问题了。</p>

<p><a href="https://github.com/rails/exception_notification">exception_notification</a>插件的功能就是当你的Rails应用出错时，它会向指定的邮箱地址发送错误日志。</p>

<p>使用很简单，安装插件后配置一下邮件接受者就可以了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/rails/exception_notification.git
</code></pre></div>
<p>在config/environment.rb中的最后添加邮件接收者的地址：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ExceptionNotifier.exception_recipients = %w(yourname@example.com)
</code></pre></div>
<p>然后告诉exception_notification哪些controller出错才发送日志，当然是全部啦：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class ApplicationController &lt; ActionController::Base
  include ExceptionNotifiable
</code></pre></div>
<p>exception_notification采用ActionMailer发送邮件，所以使用的前提是确保ActionMailer可以正常发送邮件。还有就是exception_notification默认只在production环境下才会生效，如果想要在development下也生效，需要将config/environments/development.rb文件中的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">config.action_mailer.raise_delivery_errors = false
</code></pre></div>
<p>修改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">config.action_mailer.raise_delivery_errors = true
# Let exception_notification generate email notifications
config.action_controller.consider_all_requests_local = false
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/qianbao">https://github.com/dohkoos/qianbao</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账应用（10）]]></title>
    <link href="http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part10/"/>
    <updated>2010-01-04T20:34:41+08:00</updated>
    <id>http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part10</id>
    <content type="html"><![CDATA[<p>从2.2版本起Rails开始内置支持i18n，因此以后实现国际化/本地化就可以不再需要各种各样的插件了。</p>

<p>Rails默认的Locale文件夹是config/locales，假设你要支持中文和英文，那么你需要在这个文件夹下放置zh.yml和en.yml两个文件。</p>

<p>相应的入门教程网上有不少，我也就不多讲了。这里主要说一下如何在记账应用中实现可以让用户指定语言的i18n实现，即当用户选择English，那么界面就切换成英文界面，并且以后打开的页面也是以英文出现，反之亦如此。</p>

<p>首先在header区添加以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= link_to &#39;Chinese&#39;, :locale =&gt; &#39;zh&#39; %&gt;
&lt;%= link_to &#39;English&#39;, :locale =&gt; &#39;en&#39; %&gt;
</code></pre></div>
<p>点击其中某个链接后，浏览器就会传递对应的参数zh或en到后台。</p>

<p>然后在app/controllers/application_controller.rb中添加以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">before_filter :set_locale

protected
  def set_locale
    I18n.locale = params[:locale]
  end
</code></pre></div>
<p>不过这里有个问题就是url中必须得带着参数，不然的话用户的选择就会失效。要想使选择达到持续的效果，可以考虑把这些信息保存在session中，改进后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def set_locale
  I18n.locale = params[:locale] || session[:locale]
  session[:locale] = I18n.locale
end
</code></pre></div>
<p>现在这样就基本上差不多了。剩下的就是处理第一次访问时的语言，这个可以从request的ACCEPT_LANGUAGE参数中获取。最终实现的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def set_locale
  accept_lang = request.env[&#39;HTTP_ACCEPT_LANGUAGE&#39;].scan(/^[a-z]{2}/).first
  I18n.locale = params[:locale] || session[:locale] || accept_lang || &#39;zh&#39;
  session[:locale] = I18n.locale
end
</code></pre></div>
<p>不过当用户选择中文后，在新建记录时会报以下错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">can&#39;t convert Symbol into String

Extracted source (around line #8):

    6:   &lt;p&gt;
    7:     &lt;%= t(:effective_date) %&gt;&lt;br /&gt;
    8:     &lt;%= f.date_select :effective_date %&gt;
    9:   &lt;/p&gt;
</code></pre></div>
<p>查找资料后发现可以通过在date_select中加入order来解决，不过日期下拉列表中的月份还有问题，出现的是一些随机数，不是正常月份。这个也可以通过添加month_names参数解决。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= t(:effective_date) %&gt;&lt;br /&gt;
&lt;%= f.date_select :effective_date, :order =&gt; [:year, :month, :day] %&gt;
</code></pre></div>
<p>更好的办法是把它们放到对应的Locale文件里：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># en.yml
en:
  date:
    month_names: [~, January, February, ..., November, December]
    order: [:year, :month, :day]
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"># zh.yml
zh:
  date:
    month_names: [~, 一月, 二月, ..., 十一月, 十二月]
    order: [:year, :month, :day]
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/qianbao">https://github.com/dohkoos/qianbao</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账应用（9）]]></title>
    <link href="http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part9/"/>
    <updated>2009-12-20T20:45:19+08:00</updated>
    <id>http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part9</id>
    <content type="html"><![CDATA[<p>没啥多说的，继续开始干活。</p>

<p>修改app/views/entries/index.html.erb为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h1&gt;Listing entries&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th class=&quot;center&quot;&gt;Date&lt;/th&gt;
      &lt;th class=&quot;center&quot;&gt;Amount&lt;/th&gt;
      &lt;th class=&quot;center&quot;&gt;Tags&lt;/th&gt;
      &lt;th class=&quot;center&quot;&gt;Comment&lt;/th&gt;
      &lt;th class=&quot;center&quot;&gt;Action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;

  &lt;tbody&gt;
    &lt;% @entries.each do |entry| %&gt;
    &lt;tr class=&quot;&lt;%= cycle(&#39;odd&#39;, &#39;even&#39;) %&gt;&quot;&gt;
      &lt;td class=&quot;center&quot;&gt;&lt;%=h entry.effective_date %&gt;&lt;/td&gt;
      &lt;td class=&quot;right&quot;&gt;&lt;%=h number_to_currency(entry.amount) %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%=h entry.tags %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%=h entry.comment %&gt;&lt;/td&gt;
      &lt;td class=&quot;center&quot;&gt;
        &lt;%= link_to &#39;Edit&#39;, edit_entry_path(entry) %&gt;
        &lt;%= link_to &#39;Destroy&#39;, entry, :confirm =&gt; &#39;Are you sure?&#39;, :method =&gt; :delete %&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;% end %&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;%= link_to &#39;New entry&#39;, new_entry_path %&gt;
</code></pre></div>
<p>修改app/views/layouts/application.html.erb文件的内容为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!DOCTYPE html PUBLIC
  &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;

&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;title&gt;Qianbao: &lt;%= controller.action_name %&gt;&lt;/title&gt;
  &lt;%= stylesheet_link_tag &#39;scaffold&#39; %&gt;
  &lt;%= stylesheet_link_tag &#39;qianbao&#39; %&gt;
  &lt;%= stylesheet_link_tag &#39;table&#39; %&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;container&quot;&gt;
    &lt;%= render :partial =&gt; &#39;layouts/header&#39; %&gt;

    &lt;div id=&quot;content&quot;&gt;
      &lt;p style=&quot;color: green&quot;&gt;&lt;%= flash[:notice] %&gt;&lt;/p&gt;

      &lt;%= yield %&gt;
    &lt;/div&gt;

    &lt;%= render :partial =&gt; &#39;layouts/footer&#39; %&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div>
<p>新建app/views/layouts/_header.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;header&quot;&gt;
  &lt;%= link_to &#39;Home&#39;, root_path %&gt;
  &lt;% if logged_in? %&gt;
    &lt;%= link_to &#39;All entries&#39;, entries_path %&gt;
    &lt;strong&gt;You are logged in as &lt;%= current_user.login %&gt;&lt;/strong&gt;
    &lt;%= link_to &#39;Logout&#39;, logout_path %&gt;
  &lt;% else %&gt;
    &lt;%= link_to &#39;Login&#39;, login_path %&gt;
    &lt;%= link_to &#39;Sign Up&#39;, signup_path %&gt;
  &lt;% end %&gt;
&lt;/div&gt;
</code></pre></div>
<p>新建app/views/layouts/_footer.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;footer&quot;&gt;&amp;copy; 2009&lt;/div&gt;
</code></pre></div>
<p>在public/stylesheets/qianbao.css的末尾添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.center {
  text-align: center;
}

.right {
  text-align: right;
}
</code></pre></div>
<p>新建public/stylesheets/table.css，内容为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">table {
  border-collapse: collapse;
  text-align: left;
  width: 90%;
}

thead {
  height: 30px;
}

thead th {
  padding: 5px;
  background: #efefef;
}

tbody td {
  padding: 5px;
}

th, td {
  border: 1px solid #e6e6e6;
}

tr.odd {
  background: #fff;
}

tr.even {
  background: #f9f9f9;
}
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/qianbao">https://github.com/dohkoos/qianbao</a></p>
]]></content>
  </entry>
  
</feed>
