<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Progress Bar | 乐者为王]]></title>
  <link href="http://codemany.com/tags/progress-bar/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-09-12T10:08:36+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用showDialog()创建的ProgressDialog再次打开时进度条不变化]]></title>
    <link href="http://codemany.com/blog/progress-bar-does-not-work-when-reopen-progressdialog-using-showdialog/"/>
    <updated>2012-04-15T13:15:24+08:00</updated>
    <id>http://codemany.com/blog/progress-bar-does-not-work-when-reopen-progressdialog-using-showdialog</id>
    <content type="html"><![CDATA[<p>先来看段代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;fill_parent&quot;
    android:orientation=&quot;vertical&quot;&gt;
    &lt;Button
        android:layout_width=&quot;fill_parent&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;Copy Contacts&quot;
        android:onClick=&quot;copyContacts&quot; /&gt;
&lt;/LinearLayout&gt;
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;

public class DialogActivity extends Activity {
    private static final int COPY_CONTACTS = 0;

    private ProgressDialog mProgressDialog;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }

    public void copyContacts(View target) {
        showDialog(COPY_CONTACTS);
    }

    @Override
    protected Dialog onCreateDialog(int id) {
        switch (id) {
        case COPY_CONTACTS:
            mProgressDialog = new ProgressDialog(this);
            mProgressDialog.setTitle(&quot;Copy contacts&quot;);
            mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
            mProgressDialog.setMax(100);
            new AsyncCopyContactsTask().execute();
            break;
        }
        return mProgressDialog;
    }

    private class AsyncCopyContactsTask extends AsyncTask&lt;Void, Void, Integer&gt; {
        @Override
        protected Integer doInBackground(Void... params) {
            for (int i = 0; i &lt; 100; i++) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                }
                publishProgress();
            }
            return 0;
        }

        protected void onProgressUpdate(Void... progress) {
            mProgressDialog.incrementProgressBy(1);
        }

        protected void onPostExecute(Integer result) {
            mProgressDialog.dismiss();
        }
    }
}
</code></pre></div>
<p>第一次点击按钮会显示一个进度条，上面的数字处于变动当中，到达最大值后进度条会消失不见；再次点击按钮后，就会发现进度条上的数值和消失前相同，并且不再变化，而且进度条也不会消失。这是为什么呢？</p>

<p>Activity中有三个和对话框显示有关的方法：showDialog()，dismissDialog()和removeDialog()。其中showDialog()用于显示一个对话框；dismissDialog()使对话框消失，但仍然处于内存中，只是不显示而已，如果再次调用showDialog()方法，则缓存在内存中的对话框会重新显示，而不需要重新创建。removeDialog()使对话框消失，并从内存中将对话框清除，如果再次调用showDialog()来显示它，则在显示之前需要重新创建对话框。</p>

<p>在一个对话框的声明周期内，onCreateDialog()仅被调用一次，但onPrepareDialog()方法会每次被调用。比如，第一次调用 showDialog()方法显示某个对话框时，会先触发onCreateDialog()的执行，然后再触发onPrepareDialog()方法；如果将某个对话框 removeDialog()后再showDialog()，也会先触发onCreateDialog()，接着触发onPrepareDialog()方法；如果某个对话框是被dismiss()掉的，再调用 showDialog()方法来显示它时就不会触发onCreateDialog()方法的执行，只会触发onPrepareDialog()方法。</p>

<p>这是因为第一次调用showDialog()时，Android从你的Activity中调用onCreateDialog()方法，得到返回的Dialog对象。把当前Activity设置为该对话框的所有者，从而把对话框挂靠到Activity上，让Activity自动管理该对话框的状态。这样，下次调用showDialog()时就不用重新创建Dialog对象，而是复用旧的。</p>

<p>所以，解决再次打开ProgressDialog时进度条不变化的最好方法就是将mProgressDialog.dismiss()改成removeDialog(COPY_CONTACTS)。</p>

<p>注意：如果你决定在onCreateDialog()方法之外创建一个对话框，它将不会被附着到活动上。不过，你可以通过setOwnerActivity()把它附着到一个Activity上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进度条的再思考]]></title>
    <link href="http://codemany.com/blog/rethinking-the-progress-bar/"/>
    <updated>2007-11-08T20:26:41+08:00</updated>
    <id>http://codemany.com/blog/rethinking-the-progress-bar</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://chrisharrison.net/projects/progressbars/ProgBarHarrison.pdf">http://chrisharrison.net/projects/progressbars/ProgBarHarrison.pdf</a></p>

<h3 id="摘要">摘要</h3>

<p>进度条在现代用户界面中是普遍存在的。通常，线性函数的使用使得条的进度和已经完成多少工作成正比。然而，许多因素会导致进度条以非线性的速率前进。此外，人类以一种非线性的方式感知时间。这篇论文探讨各种进度条行为在用户感知过程持续时间上的影响。结果被用来提出一些设计考量——可以使进度条看起来更快，最终改善用户的计算体验。</p>

<h3 id="简介">简介</h3>

<p>大多数软件包使用进度条显示一个持续过程的状态。用户依靠进度条来验证操作进展顺利，以及估算它的完成时间。通常，线性函数的应用使得进度条的前进和已经完成工作的数量成正比。然而，为复杂的或多阶段的过程估算进度可能是困难的。不同的磁盘，内存，处理器，带宽和其它因素使这个问题进一步复杂化。因而，进度条经常表现出非线性的行为，例如加速、减速和停顿。</p>

<p>再者，人类不以线性的方式感知时间的流逝。再加上进度条的不规则行为，导致人类感知过程持续时间的不同。了解哪些行为感知缩短或延长过程持续时间可以被用来改变进度条让它看起来更快，尽管实际的持续时间保持不变。这篇论文描述一个实验，它试图识别在用户感知进度条行为中的模式。结果然后被分析去划分感知加速或减速过程执行的行为。我们得出一些设计建议，它们可以被应用于使用进度条的应用，有助于一种总体上反应更灵敏、令人愉悦的和以人为中心的计算体验。</p>

<h3 id="相关工作">相关工作</h3>

<p>Myers调查研究了图形用户界面中进度指示器对用户体验的影响。他得出用户在长期的任务过程中对进度指示器有着强烈的偏好，并且，总的来说，发现它们是有用的。Conn在《Time Affordances: The Time Factor in Diagnostic Usability Heuristics》一文中探讨了时间可见性的概念，文中还列举了一系列理想的进度条的属性。范例给用户提供了一个准确易懂的方法以帮助测量交互系统中的进度。Conn也定义了其它概念——时间容忍窗口，它是用户在判定任务没有取得足够进展前愿意等待的时间长度。Conn接着描述了可以被应用于设置用户期望进行更长等待的预测算法，以非线性方法基本上报告进度来增强用户体验。</p>

<p>Fredrickson等人提出持续时间对于情感体验在多大程度上令人满意的评估影响不大（持续时间忽视）。相反，在体验期间和在体验结束时（峰端效应）感知受到显著特征（好的和坏的）的影响最严重。出现这种情况是因为人类不能以一种一致的和线性的方式记住体验，而是有选择地和带着各种偏见地回忆事件。持续时间忽视（duration neglect）和峰端效应（peak-and-end effects）可以在各种各样的领域中看到，包括医学、经济学、广告和人机交互。</p>

<h3 id="实验">实验</h3>

<p>我们识别并开发了8个非线性函数，它们体现不同的进度行为。包含一个线性函数作为比较的基线。Table 1和Figure 1描述了每个进度函数的行为。为测试这些函数的人类感知，开发了一个实验应用，它同时给用户提供像Figure 2这样的两个进度条。这些进度条逐次运行：当第一个进度条完成时第二个进度条自动开始。每个进度条充当控件的持续时间保持在一个恒定的5.5秒。界面提供三个响应按钮，允许用户选择是否第一个或第二个进度条显示更快些或者它们在持续时间上是相等的。另一个按钮允许用户在继续随后的一对进度条之前重放每次测试。一旦提供了答案，下一次测试就会被启动。响应和重放按钮可以在任何时候被按下。</p>

<p><img src="/uploads/progress-bar-table-1.png" title="progress-bar-table-1" ></p>

<p>基于Java的应用运行在一台12”显示器1024x768分辨率的Apple笔记本上。进度条是使用Java Graphics2D原语定制的，600x50像素大小（大约1.2cm x 14.3cm）。一套着色和命名方案被应用于更好地可视化地通知用户：运行的进度条显示成蓝色并且题为“running”，而完成的进度条染成绿色并且题为“finished”。用户通过带有一个集成的、单独的鼠标按钮的触摸板和界面交互。</p>

<p>比较9个进度函数的所有不同顺序对需要81次测试。最初的试点测试显示，在大约50套进度条后用户发现任务是相当乏味的并开始失去兴趣。为了保持主题的关注和确保响应完整的高水平，我们决定给每个用户展示9个进度函数的所有组合（36次测试）以及与自己配对的函数组合（9次测试）总计45次测试。这保持总的任务时间在15分钟以下。展示的顺序在两个方面被抵消。首先，对每对用户来说45次测试的序列是随机选择的。其次，在每对用户中，每次测试的展示顺序是相反的（也就是说，如果配对中第一个用户看见linear/power，第二个用户将看见power/linear）。</p>

<p><img src="/uploads/progress-bar-figure-1.png" title="progress-bar-figure-1" ></p>

<p>我们从两个大的计算机研究实验室招募了平均年龄约为37岁的22名参与者（14名男性，8名女性）。实验在参与者的办公室里进行。简易比较界面的一个简短口头解释被给出。参与者被告知进度条可能以不同速率前进，他们应该选择他们认为更快的进度条或者如果速度相同就选择等于。</p>

<p><img src="/uploads/progress-bar-figure-2.png" title="progress-bar-figure-2" ></p>

<h3 id="分析和结果">分析和结果</h3>

<p>参与者倾向于偏好（也就是说，认为快）哪个函数被第一次看到。在990对比较中，第一个函数被优先考虑376次（38%），第二个262次（26%），没有任何偏好352次（36%）。这一发现被随后讨论的卡方检验结果所支持。</p>

<p>参与者在9个函数中有着强烈的偏好。对函数的任何配对比较，我们指派一个+1的偏好分数如果第一个函数被优先考虑，如果第二个函数被优先考虑则是-1，如果参与者没有偏好就是0。Table 2显示了36个函数对中每一个的平均偏好分数。例如，在22个Slow Wavy和Fast Wavy的比较中（每个出现11次），10名参与者优先考虑Fast Wavy，5名优先考虑Slow Wavy，7名认为函数是相等的。因此，平均偏好分数是(10 – 5) / 22 = 0.23。表的行和列根据增长的总体偏好排序。粗体表示统计显著性从0开始在0.05水平上使用每个函数同样可能是被优先考虑的无效假设的一个双边符号测试。</p>

<p><img src="/uploads/progress-bar-table-2.png" title="progress-bar-table-2" ></p>

<p>使用Table 2中的平均偏好分数，我们为9个进度函数生成一个粗略的偏好排序，如Figure 3所示。</p>

<p><img src="/uploads/progress-bar-figure-3.png" title="progress-bar-figure-3" ></p>

<p>为了有效地跨单元组合信息，while controlling  for  presentation  order,  we  fit  a  logistic回归模型  to  the  638  cases  where  a  preference  was  given.
The probability of preferring Function i  to Function j  given that Function  i  was seen first was modeled as</p>

<p><img src="/uploads/progress-bar-formula.png" title="progress-bar-formula" ></p>

<p>A  Hosmer-Lemeshow卡方检验（8.87  with  7  d.f.）failed  to  show  lack  of  fit  of  the  model.  The  parameter &alpha; &alpha;, 
estimated  to  be  0.42  with  standard  error  0.09,  reflects  the<br>
tendency  for  participants  to  prefer  the  first  function  they<br>
saw.  The  estimated  &alpha;’s  measure  the  relative  preferences<br>
among the functions. Because the probabilities only depend 
on  differences  between  the  &alpha;’s,  we  fixed  the  estimated<br>
&alpha; for  linear  at  0  (Figure  4).  Standard  errors  for  differences<br>
between &alpha;’s ranged between 0.28 and 0.37. </p>

<p><img src="/uploads/progress-bar-figure-4.png" title="progress-bar-figure-4" > </p>

<p>The nine functions clustered cleanly into three groups (Fig-
ure 4): three that were 认为比linear更慢, four 
that  were  认为接近linear,  and  two  which  were<br>
perceived  faster  than  linear.  Differences  between  all  three<br>
groups   were   significant   but   not   necessarily   significant<br>
within groups. The &alpha; for each function differs significantly 
at  the  0.05水平  from  each  function  in  any  of  the  other<br>
clusters.  The  two  functions  that  were  perceived  as  faster<br>
than  linear,  Power  and  Fast  Power,  were  both  exponential<br>
functions,  with  the  fastest  progress  occurring  near  the  end<br>
of the process. Slow Wavy, Fast Wavy and Late Pause, the 
only  functions  with  pauses  near  the  process  conclusion,<br>
were all 认为比linear更慢.   </p>

<p>Three  general  findings  explain  the  pattern  of  estimates,<br>
which  are  in  line  with  the  peak-and-end  effects  mentioned<br>
previously.  First,  participants  perceived  progress  bars  with<br>
pauses  as  taking  longer  to  complete  (peak  effect).  Sec-
ondly, accelerating progress was strongly favored. The lat-
ter two effects had an exaggerated perceptual impact when 
located towards the end of the process (end effect). Interest-
ingly,  the  two  factors  appear  to  combine  in  the  case  of<br>
Early Pause, making it essentially equivalently preferred to 
the linear function.  </p>

<h3 id="论述">论述</h3>

<p>Although  our  results  could  be  used  to  enhance  progress<br>
bars  system-wide,  there  are  many  cases  where  modifying<br>
progress  behavior  seems  inappropriate.  In  general,  proc-
esses  with  known  static  completion  conditions  and  stable<br>
progress  are  not  good  candidates  –  standard  progress  bars<br>
can  visualize  these  effectively  and  accurately.  In  addition,<br>
these  types  of  processes  tend  to  be  less  affected  by  pauses<br>
or  other  negative  progress  behavior  (sufficiently  so  that<br>
they  are  frequently  accompanied  by  accurate  time  esti-
mates). Examples of this type of process include copying a 
file to disk, scanning a photograph, or playing an audio file.</p>

<p>However,  progress  bars  with  dynamic  completion  condi-
tions  and  roughly  estimated  durations  (e.g.,  defragmenting<br>
a  hard  drive)  can  be  augmented  in  two  significant  ways.<br>
First,  since  users  seem  to  have  a  strong  aversion  to  pauses<br>
especially  towards  the  end  of  an  operation,  progress  bars<br>
can  be  designed  to  compensate  for  this  behavior.  An  intel-
ligent  progress  bar  can  cache  progress  when  the  operation<br>
is  first  starting  to  mitigate  negative  progress  behaviors<br>
(e.g.,  pauses  or  slow-downs)  later  on.  Secondly,  progress<br>
can  be  downplayed  in  the  beginning  and  accelerated  to-
wards the end, providing a sense of a rapid conclusion that 
is highly favored by users in our experiment.  </p>

<p>Perceptual  enhancements  can  also  be  integrated  into  the<br>
design  of  multi-stage  processes,  such  as  the  installation  of<br>
software. Our results suggest that users are most willing to 
tolerate  negative  progress  behavior  (e.g.,  stalls  and  incon-
sistent  progress)  at  the  beginning  of  an  operation.  Hence,<br>
process stages can be arranged such that the slower or vari-
able operations are completed first. For example, if part of 
an  installer  requires  fetching  updates  from  a  remote  server<br>
and network connectivity could be irregular or unreliable, it 
may  be  best  to  run  this  stage  early  in  the  install  sequence.<br>
The  updates  themselves  can  always  be  applied  later,  since<br>
they run locally, with more predictable behavior. </p>

<h3 id="总结">总结</h3>

<p>不同的进度条行为在用户感知进度持续时间上似乎有显著影响。通过最小化负面行为和结合正面行为，可以有效地使进度条及其相关过程看起来更快。此外，如果一个多阶段操作的元素可以被重新排列，它可能会用更令人满意和似乎更快的序列重新排序阶段。</p>

<h3 id="未来工作">未来工作</h3>

<p>在此次实验中，所有进度条在5.5秒内完成。然而许多使用进度条的操作有相当长的运行时。如果我们的发现扩展到其它持续时间，调查研究应该会很有趣。此外，其它进度行为和行为组合的研究可能揭示新的感知影响。同时，一个自适应实验可以被进行，在此实验中，单独的进度条时间将被动态调整到所有函数在持续时间上被认为相等的一个状态。这将允许相关感知的变体被定量评估。</p>
]]></content>
  </entry>
  
</feed>
