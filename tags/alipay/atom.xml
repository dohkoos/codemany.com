<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Alipay | 乐者为王]]></title>
  <link href="http://codemany.com/tags/alipay/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-04T00:34:54+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Rails应用中集成支付宝]]></title>
    <link href="http://codemany.com/blog/2011/03/18/rails-applications-integrated-in-the-payment-of-po/"/>
    <updated>2011-03-18T06:28:29+08:00</updated>
    <id>http://codemany.com/blog/2011/03/18/rails-applications-integrated-in-the-payment-of-po</id>
    <content type="html"><![CDATA[<p>参考资料：
<a href="https://github.com/flyerhzm/activemerchant_patch_for_china"><a href="https://github.com/flyerhzm/activemerchant_patch_for_china">https://github.com/flyerhzm/activemerchant_patch_for_china</a></a>
<a href="https://github.com/flyerhzm/donatecn"><a href="https://github.com/flyerhzm/donatecn">https://github.com/flyerhzm/donatecn</a></a>
<a href="http://xinghu.javaeye.com/blog/669092"><a href="http://xinghu.javaeye.com/blog/669092">http://xinghu.javaeye.com/blog/669092</a></a>
<a href="http://hi.baidu.com/frothring/blog/item/67f5b28c1473ffe5f01f3605.html"><a href="http://hi.baidu.com/frothring/blog/item/67f5b28c1473ffe5f01f3605.html">http://hi.baidu.com/frothring/blog/item/67f5b28c1473ffe5f01f3605.html</a></a>
<a href="https://github.com/daceice/alipay-demo-in-rails"><a href="https://github.com/daceice/alipay-demo-in-rails">https://github.com/daceice/alipay-demo-in-rails</a></a>
<a href="http://stephen830.javaeye.com/blog/254827"><a href="http://stephen830.javaeye.com/blog/254827">http://stephen830.javaeye.com/blog/254827</a></a>
<a href="https://github.com/xiaods/alipay-lib"><a href="https://github.com/xiaods/alipay-lib">https://github.com/xiaods/alipay-lib</a></a></p>

<p>注意事项：<br />
notify_url为服务器通知，支付宝可以保证99.9999%的通知到达率，前提是您的网络通畅。<br />
notify_url中可以做对数据库的业务操作。return_url中可以做数据库的更新也可以做显示。<br />
第一次交易状态改变（即时到帐中的交易完成的交易状态）时，支付宝发起的通知的时间与返回页自动跳转回的时间近乎同时。</p>

<p>支付处理代码：<br />
```
class OrdersController &lt; ApplicationController<br />
  before_filter :login_required</p>

<p>  # place order<br />
  def place_order<br /></p>

<pre><code>parameters = {&lt;br /&gt;
  'service' =&gt; 'create_direct_pay_by_user',&lt;br /&gt;
  'partner' =&gt; ALIPAY_ACCOUNT,&lt;br /&gt;
  'seller_email' =&gt; ALIPAY_EMAIL,&lt;br /&gt;
  'out_trade_no' =&gt; @order.out_trade_no,&lt;br /&gt;
  'subject' =&gt; 'payment subject',&lt;br /&gt;
  'body' =&gt; 'payment body',&lt;br /&gt;
  'price' =&gt; @order.price.to_s,&lt;br /&gt;
  'quantity' =&gt; @order.quantity.to_s,&lt;br /&gt;
  'payment_type' =&gt; '1',&lt;br /&gt;
  '_input_charset' =&gt; 'utf-8',&lt;br /&gt;
  'notify_url' =&gt; url_for(:only_path =&gt; false, :action =&gt; 'notify'),&lt;br /&gt;
  'return_url' =&gt; url_for(:only_path =&gt; false, :action =&gt; 'done')&lt;br /&gt;
}

# 即时到帐中交易状态为“等待买家付款”的状态默认是不会发送通知的，自己手动设置一下&lt;br /&gt;
@order.status = 'WAIT_BUYER_PAY'&lt;br /&gt;
@order.user = current_user&lt;br /&gt;
@order.save

values = {}&lt;br /&gt;
# 支付宝要求传递的参数必须要按照首字母的顺序传递，所以这里要sort&lt;br /&gt;
parameters.keys.sort.each do |k|&lt;br /&gt;
  values[k] = parameters[k];&lt;br /&gt;
end

# 一定要先unescape后再生成sign，否则支付宝会报ILLEGAL SIGN &lt;br /&gt;
sign = Digest::MD5.hexdigest(CGI.unescape(values.to_query) + ALIPAY_KEY)&lt;br /&gt;
gateway = 'https://www.alipay.com/cooperate/gateway.do?'&lt;br /&gt;
redirect_to gateway + values.to_query + '&amp;sign=' + sign + '&amp;sign_type=MD5'&lt;br /&gt;
</code></pre>

<p>  end</p>

<p>  # 返回success或fail。如果返回fail，支付宝会每隔一段时间就自动调用notify_url通信接口 <br />
  def notify<br /></p>

<pre><code>render :text =&gt; 'success'&lt;br /&gt;
</code></pre>

<p>  end</p>

<p>  def done<br /></p>

<pre><code>if verify_sign&lt;br /&gt;
  order = Order.find_by_out_trade_no(params[:out_trade_no])&lt;br /&gt;
  # 支付宝即时到帐接口只有一种交易状态，就是“交易成功”，更新一下&lt;br /&gt;
  order.update_attributes(params[:trade_status])&lt;br /&gt;
  render :text =&gt; 'Payment successful'&lt;br /&gt;
else&lt;br /&gt;
  render :text =&gt; 'Alipay Error: ILLEGAL_SIGN'&lt;br /&gt;
end&lt;br /&gt;
</code></pre>

<p>  end</p>

<p>protected<br />
  def verify_sign<br /></p>

<pre><code>params.delete("sign_type")&lt;br /&gt;
sign = params.delete("sign")

values = {}&lt;br /&gt;
params.keys.sort.each do |k|&lt;br /&gt;
  values[k] = params[k];&lt;br /&gt;
end

sign.downcase == Digest::MD5.hexdigest(CGI.unescape(values.to_query) + ALIPAY_KEY)&lt;br /&gt;
</code></pre>

<p>  end<br />
end<br />
```</p>
]]></content>
  </entry>
  
</feed>
