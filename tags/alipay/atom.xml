<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Alipay | 乐者为王]]></title>
  <link href="http://codemany.com/tags/alipay/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-09-13T09:27:26+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Rails应用中集成支付宝]]></title>
    <link href="http://codemany.com/blog/integrate-alipay-into-rails-application/"/>
    <updated>2011-03-18T06:28:29+08:00</updated>
    <id>http://codemany.com/blog/integrate-alipay-into-rails-application</id>
    <content type="html"><![CDATA[<p>注意：notify_url为服务器通知，支付宝可以保证99.9999%的通知到达率，前提是你的网络通畅，在notify_url中可以做对数据库的业务操作。return_url中可以做数据库的更新也可以做显示。第一次交易状态改变（即时到帐中的交易完成的交易状态）时，支付宝发起的通知的时间与返回页自动跳转回的时间近乎同时。</p>

<p>支付处理代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class OrdersController &lt; ApplicationController
  before_filter :login_required

  # place order
  def place_order
    parameters = {
      &#39;service&#39; =&gt; &#39;create_direct_pay_by_user&#39;,
      &#39;partner&#39; =&gt; ALIPAY_ACCOUNT,
      &#39;seller_email&#39; =&gt; ALIPAY_EMAIL,
      &#39;out_trade_no&#39; =&gt; @order.out_trade_no,
      &#39;subject&#39; =&gt; &#39;payment subject&#39;,
      &#39;body&#39; =&gt; &#39;payment body&#39;,
      &#39;price&#39; =&gt; @order.price.to_s,
      &#39;quantity&#39; =&gt; @order.quantity.to_s,
      &#39;payment_type&#39; =&gt; &#39;1&#39;,
      &#39;_input_charset&#39; =&gt; &#39;utf-8&#39;,
      &#39;notify_url&#39; =&gt; url_for(:only_path =&gt; false, :action =&gt; &#39;notify&#39;),
      &#39;return_url&#39; =&gt; url_for(:only_path =&gt; false, :action =&gt; &#39;done&#39;)
    }

    # 即时到帐中交易状态为“等待买家付款”的状态默认是不会发送通知的，自己手动设置一下
    @order.status = &#39;WAIT_BUYER_PAY&#39;
    @order.user = current_user
    @order.save

    values = {}
    # 支付宝要求传递的参数必须要按照首字母的顺序传递，所以这里要sort
    parameters.keys.sort.each do |k|
      values[k] = parameters[k];
    end

    # 一定要先unescape后再生成sign，否则支付宝会报ILLEGAL SIGN
    sign = Digest::MD5.hexdigest(CGI.unescape(values.to_query) + ALIPAY_KEY)
    gateway = &#39;https://www.alipay.com/cooperate/gateway.do?&#39;
    redirect_to gateway + values.to_query + &#39;&amp;sign=&#39; + sign + &#39;&amp;sign_type=MD5&#39;
  end

  # 返回success或fail。如果返回fail，支付宝会每隔一段时间就自动调用notify_url通信接口
  def notify
    render :text =&gt; &#39;success&#39;
  end

  def done
    if verify_sign
      order = Order.find_by_out_trade_no(params[:out_trade_no])
      # 支付宝即时到帐接口只有一种交易状态，就是“交易成功”，更新一下
      order.update_attributes(params[:trade_status])
      render :text =&gt; &#39;Payment successful&#39;
    else
      render :text =&gt; &#39;Alipay Error: ILLEGAL_SIGN&#39;
    end
  end

protected
  def verify_sign
    params.delete(&quot;sign_type&quot;)
    sign = params.delete(&quot;sign&quot;)

    values = {}
    params.keys.sort.each do |k|
      values[k] = params[k];
    end

    sign.downcase == Digest::MD5.hexdigest(CGI.unescape(values.to_query) + ALIPAY_KEY)
  end
end
</code></pre></div>]]></content>
  </entry>
  
</feed>
