<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Memory Leak | 乐者为王]]></title>
  <link href="http://codemany.com/tags/memory-leak/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-06-01T15:27:12+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用VisualVM检测Java内存泄漏]]></title>
    <link href="http://codemany.com/blog/how-to-detect-java-memory-leak-using-visualvm/"/>
    <updated>2015-10-12T13:08:19+08:00</updated>
    <id>http://codemany.com/blog/how-to-detect-java-memory-leak-using-visualvm</id>
    <content type="html"><![CDATA[<p>Java的一个重要优点是通过垃圾收集器（Garbage Collection）自动管理内存的回收，程序员不需要关注它。程序员真的不需要关注内存管理吗？只要你碰到过OutOfMemoryError你就知道它不是真的。</p>

<p>这里我会展示如何使用VisualVM快速定位内存泄漏。先看下面这段代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import java.util.List;
import java.util.ArrayList;

public class MemoryLeakDemo {
    public static void main(String[] args) {
        new Thread(new MemoryLeak(), &quot;MemoryLeak&quot;).start();
    }
}

class MemoryLeak implements Runnable {
    public static List&lt;Integer&gt; leakList = new ArrayList&lt;Integer&gt;();

    public void run() {
        int count = 0;
        while (true) {
            try {
                Thread.sleep(3);
            } catch (InterruptedException e) {
            }
            count++;
            Integer i = new Integer(count);
            leakList.add(i);
        }
    }
}
</code></pre></div>
<p>执行下列命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">java -verbose:gc -XX:+PrintGCDetails -Xmx20m MemoryLeakDemo
</code></pre></div>
<p>等待一段时间后，你会看到：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Exception in thread &quot;MemoryLeak&quot; java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Arrays.java:3181)
        at java.util.ArrayList.grow(ArrayList.java:261)
        at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
        at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)
        at java.util.ArrayList.add(ArrayList.java:458)
        at MemoryLeak.run(MemoryLeakDemo.java:22)
        at java.lang.Thread.run(Thread.java:745)
Heap
 PSYoungGen      total 3584K, used 298K [0x00000000ff980000, 0x00000000ffe80000, 0x0000000100000000)
  eden space 3072K, 9% used [0x00000000ff980000,0x00000000ff9ca908,0x00000000ffc80000)
  from space 512K, 0% used [0x00000000ffc80000,0x00000000ffc80000,0x00000000ffd00000)
  to   space 512K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000ffe80000)
 ParOldGen       total 13824K, used 12156K [0x00000000fec00000, 0x00000000ff980000, 0x00000000ff980000)
  object space 13824K, 87% used [0x00000000fec00000,0x00000000ff7df3e8,0x00000000ff980000)
 Metaspace       used 7993K, capacity 8164K, committed 8448K, reserved 1056768K
  class space    used 912K, capacity 954K, committed 1024K, reserved 1048576K
</code></pre></div>
<p>打开VisualVM开始监测MemoryLeakDemo，在Monitor标签页我们可以看到实时的程序内存堆的使用情况：</p>

<p><img src="/uploads/visualvm-heap.png" title="visualvm-heap" ></p>

<p>波峰到波谷处是执行了GC的，明显可以看到执行GC后内存曲线仍旧呈上扬趋势，也就是说，内存占用是只升不降。到底是什么原因导致的呢？</p>

<p>打开Sampler标签页，点击Memory按钮启动一个内存分析会话，VisualVM会定期获取所有执行线程的转储，分析栈跟踪信息，实时显示成堆直方图。通过堆直方图，我们就可以知道哪个对象占用了较多的内存，以便做进一步的优化。</p>

<p><img src="/uploads/visualvm-sampler.png" title="visualvm-sampler" ></p>

<p>如上图所示，第1行的Integer对象占用内存最大，已经有41万多实例了，并且还在持续增加中。很显然，罪魁祸首就是它了！</p>
]]></content>
  </entry>
  
</feed>
