<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Git | 乐者为王]]></title>
  <link href="http://codemany.com/tags/git/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-01-23T14:09:39+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git笔记之rebase --onto]]></title>
    <link href="http://codemany.com/blog/git-notes-rebase-onto/"/>
    <updated>2014-10-26T13:41:19+08:00</updated>
    <id>http://codemany.com/blog/git-notes-rebase-onto</id>
    <content type="html"><![CDATA[<p>有的时候，可能需要修改某个已提交commit。如果是修改最近提交的commit，可以使用git commit --amend命令；如果是修改更早提交的commit，可以使用git rebase -i HEAD~n。不过这个命令有个缺陷，就是不能修改最早提交的那个commit。假设有如下提交历史：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C1--C2--C3--C4
</code></pre></div>
<p>要修改C4可以使用git commit --amend；要修改C2、C3或C4可以使用git rebase -i HEAD~n；但是如果要修改C1呢？这就需要rebase --onto出场了。下面就来实例讲解如何使用rebase --onto命令。</p>

<p>因为要修改C1这个commit，所以先在它之上创建临时分支tb：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git checkout -b tb C1
</code></pre></div>
<p>然后就可以在tb分支上做想要的修改，改完之后用下面的命令提交更改的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git commit -a --amend
</code></pre></div>
<p>这时查看tb分支的提交历史，可以发现SHA1值已经发生了变化（master分支的SHA1值仍然不变）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C1&#39;
</code></pre></div>
<p>接着可以把修改后的内容和master分支合并：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git rebase --onto tb C1 master
</code></pre></div>
<p>表示把master分支上从C1之后的所有commit重新apply到tb分支最新的commit之后。</p>

<p>这里有两点要注意：一个是C1处的开闭问题，rebase --onto的机制是左开右闭，也就是说上述命令只会apply三个提交C2、C3和C4；第二个是rebase --onto之后tb分支的提交历史没有改变，还是只有一个提交C1’，当前分支也切换到了master，并且所有commit的SHA1值都发生了改变。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C1&#39;--C2&#39;--C3&#39;--C4&#39;
</code></pre></div>
<p>最后就是正常的rebase --continue流程了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git笔记之branch，merge和rebase]]></title>
    <link href="http://codemany.com/blog/git-notes-branch-merge-and-rebase/"/>
    <updated>2011-08-05T21:05:02+08:00</updated>
    <id>http://codemany.com/blog/git-notes-branch-merge-and-rebase</id>
    <content type="html"><![CDATA[<div class="highlight"><pre><code class="language-text" data-lang="text">git branch  # 列出所有分支以及当前在哪个分支上
git branch &lt;branch&gt;  # 建立分支
git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;  # 修改分支的名字
git checkout &lt;branch&gt;  # 切换分支
git checkout -b &lt;branch&gt; &lt;commit&gt;  # 新建分支并切换过去
git branch -d &lt;branch&gt;  # 刪除分支
git merge &lt;branch&gt;  # 合并分支到当前分支上
git rebase &lt;branch&gt;  # 将提交迁移到上游分支
</code></pre></div>
<p>在merge/rebase的过程中，也许会出现冲突。在这种情况，Git会停止merge/rebase并让你去解决冲突，冲突内容以如下形式存在：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Here is the original change.
=======
Here is the modified chagne.
&gt;&gt;&gt;&gt;&gt;&gt;&gt;
</code></pre></div>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;下面的是当前版本的内容；=======和&gt;&gt;&gt;&gt;&gt;&gt;&gt;之间的则是分支里与之对应的有冲突的内容。修复冲突要做的就是把&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD和&gt;&gt;&gt;&gt;&gt;&gt;&gt;之间的内容改成我们想要的。在解决完冲突后，用git add命令去更新这些内容，如果是rebase，那么你无需执行git commit，只要执行git rebase --continue命令即可，这样Git会继续apply余下的补丁。</p>

<p>rebase的做法是先将HEAD指向目标分支的最新commit，这时HEAD的内容变为目标分支最新commit的SHA1值，然后将当前分支的commit，一个个重新apply到目标分支上，完成后再将HEAD指向新的commit。例如，当前分支是master，然后执行git rebase dev，就会把两个分支的共同祖先的commit之后的所有master的commit记录，重新在dev分支上再commit一遍。</p>

<p><img src="/uploads/git-rebase.png" title="git-rebase" ></p>

<p>fast-forward在Git中是一种merge术语，当dev分支是从master分支的最新commit分出来的时候，那么如果master要把dev分支merge进来，由于dev的parent commit是master的最新commit，所以这两个分支的合并不会有任何冲突，实际上的动作只是把master的HEAD指向dev的最新commit而已。线图上来看两个分支根本是同一条线。</p>

<p><img src="/uploads/git-merge-ff.png" title="git-merge-ff" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git笔记之项目创建]]></title>
    <link href="http://codemany.com/blog/git-notes-create-project/"/>
    <updated>2009-01-04T13:42:54+08:00</updated>
    <id>http://codemany.com/blog/git-notes-create-project</id>
    <content type="html"><![CDATA[<p>Git的官网地址：<a href="http://git-scm.com/">http://git-scm.com/</a></p>

<p>学习路线推介：新手请浏览<a href="https://www.kernel.org/pub/software/scm/git/docs/gittutorial.html">gittutorial(7)</a>，然后是<a href="https://www.kernel.org/pub/software/scm/git/docs/giteveryday.html">Everyday Git</a>，接着是“git help command”，需要更全面的了解Git请看<a href="https://www.kernel.org/pub/software/scm/git/docs/user-manual.html">Git User&#39;s Manual</a>。</p>

<p>1、初始化仓库</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mkdir gittest
cd gittest
git init  # 创建一个.git文件夹，用来存储项目的所有历史和元信息
</code></pre></div>
<p>2、告诉项目你的信息</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git config --global user.name &quot;yourname&quot;
git config --global user.email yourname@example.com
</code></pre></div>
<p>3、跟踪新文件</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">echo &#39;Hello, Git!&#39; &gt; greeting
git add greeting  # 将文件放到暂存区
</code></pre></div>
<p>git add实际上是个脚本命令，它是对Git内核命令git-update-index的调用。git-update-index只是刷新了Git的跟踪信息，并不会将greeting这个文件提交到仓库。你也可以使用git add .来将当前目录下的所有内容加入到暂存区。删除文件可以使用git rm命令。</p>

<p>4、查看项目当前状态</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git status
</code></pre></div>
<p>5、提交内容到仓库</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git commit  # 将暂存区的内容写入仓库
</code></pre></div>
<p>在输入git commit后按回车会跳出一个文本编辑器窗口，要求开发者输入这次提交的开发信息。</p>

<p>git commit的选项：</p>

<ul>
<li>-s 在提交日志信息末尾添加提交者的Signed-off-by行。</li>
<li>-m 使用给定的信息作为提交信息。没有该选项会自动打开一个编辑器以填写提交信息。</li>
<li>-a 自动将修改过的文件添到暂存区中（新建但没有git add的文件不会受到影响）。</li>
</ul>

<p>6、查看项目历史</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git log
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在EGit-0.3.1中使用Compare With Git Revision]]></title>
    <link href="http://codemany.com/blog/using-compare-with-git-revision-in-egit-031/"/>
    <updated>2008-08-28T17:51:20+08:00</updated>
    <id>http://codemany.com/blog/using-compare-with-git-revision-in-egit-031</id>
    <content type="html"><![CDATA[<p>EGit是一个Eclipse环境下的Git客户端插件，EGit的0.3.1版本已经提供了Compare With Revision功能，只是还没有注册到plugin.xml中。所以要使用该功能的话，必须自己动手在ui包中的plugin.xml中添加一些代码，即下面的action部分：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;objectContribution
        adaptable=&quot;true&quot;
        id=&quot;org.spearce.egit.ui.fileFolderContributions&quot;
        objectClass=&quot;org.eclipse.core.resources.IResource&quot;&gt;
    &lt;filter name=&quot;projectPersistentProperty&quot;
        value=&quot;org.eclipse.team.core.repository=org.spearce.egit.core.GitProvider&quot;&gt;
    &lt;/filter&gt;
    &lt;action
        class=&quot;org.spearce.egit.ui.internal.actions.CompareWithRevisionAction&quot;
        id=&quot;org.spearce.egit.ui.internal.actions.CompareWithRevisionAction&quot;
        label=&quot;%CompareWithRevisionAction_label&quot;
        menubarPath=&quot;compareWithMenu/compareWithGroup&quot;
        overrideActionId=&quot;org.eclipse.team.ui.compareLocalHistory&quot;
        tooltip=&quot;%CompareWithRevisionAction_tooltip&quot; /&gt;
&lt;/objectContribution&gt;
</code></pre></div>
<p>另外，还要将CompareWithRevisionAction.java中run方法里的super.action(action)注释掉，否则会报StackOverflow异常。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public void run(IAction action) {
    // super.action(action);
</code></pre></div>]]></content>
  </entry>
  
</feed>
