<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ant | 乐者为王]]></title>
  <link href="http://codemany.com/tags/ant/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-13T19:51:39+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ant系列之用EMMA测量测试覆盖率时的问题]]></title>
    <link href="http://codemany.com/blog/2006/01/16/ant-series-emma-measuring-test-coverage-with-the-question-of-when/"/>
    <updated>2006-01-16T09:12:26+08:00</updated>
    <id>http://codemany.com/blog/2006/01/16/ant-series-emma-measuring-test-coverage-with-the-question-of-when</id>
    <content type="html"><![CDATA[<p>EMMA是一个coverage工具，有on-the-fly和offline两种使用方式，在Ant里通常采用offline方式。</p>

<p>到sourceforge下载了2.0版本的EMMA下来，由于将EMMA的生成文件做了重定向，因此遇到了些问题，比如出现以下错误：</p>

<p><code>
nothing to do: no runtime coverage data found in any of the data files
</code></p>

<p>查找EMMA的FAQ 3.7节，只是告诉你可能少了metadata和runtime coverate date（对Ant用户来说一般是少了runtime coveraget date，它的后缀名默认是ec）。</p>

<p>由FAQ 3.15节可以知道runtime coverage data文件默认是生成在user.dir目录下的（即build.xml中的basedir目录下），而由instr指令生成的metadata文件（后缀名默认为em）则已经被重定向到另外的目录（用来生成coverage report的地方），所以必须重新设置coverage.out.file的值，用来重定向生成的runtime coverage data。因为runtime coverage data是在Junit任务执行时产生的，所以我们可以在junit任务中添加一行代码：</p>

<p><code>
&lt;sysproperty key="emma.coverage.out.file" value="${coverage.dir}/coverage.emma" /&gt;
</code></p>

<p>注意：<br />
1、metadata和runtime文件的后缀名最好设置相同；<br />
2、一定要将junit task的fork属性设置为true，这是因为EMMA 2.0的runtime coverage data是在JVM退出后生成的；<br />
3、instrumented classes必须是第一个被JVM执行的，所以instrumented classes目录必须处在junit task的classpath的第一行，具体原因不明，如果谁知道还请说一下。</p>

<p>其实EMMA附带的examples目录下的build-offline.xml里已经说明的很详细了，只不过下载后没有仔细看，才遇到了一些问题。下面是build.xml的部分代码：</p>

<p>```
<path id="classpath">
  <pathelement location="${instrumentedclasses}" />
  <pathelement location="${classes}" />
  <pathelement location="${testclasses}" />
  <fileset dir="${lib}" includes="**/*.jar" />
</path></p>

<p><target name="compile" depends="prepare">
  <javac srcdir="${src}" destdir="${classes}" debug="on"></p>

<pre><code>&lt;classpath refid="classpath" /&gt;
</code></pre>

<p>  </javac>
  <javac srcdir="${test}" destdir="${testclasses}" debug="on"></p>

<pre><code>&lt;classpath refid="classpath" /&gt;
</code></pre>

<p>  </javac>
</target></p>

<p><target name="coverage.instrument" depends="compile">
  <emma enabled="yes"></p>

<pre><code>&lt;instr instrpath="${classes}" destdir="${instrumentedclasses}"&lt;br /&gt;
    metadatafile="{coveragereports}/metadata.emma" merge="true"&gt;
&lt;/instr&gt;
</code></pre>

<p>  </emma>
</target></p>

<p><target name="test" depends="coverage.instrument">
  <junit printsummary="yes" haltonfailure="no" fork="true"></p>

<pre><code>&lt;sysproperty key="emma.coverage.out.file" value="${coveragereports}/coverage.emma" /&gt;
&lt;classpath refid="classpath" /&gt;

&lt;formatter type="xml" /&gt;

&lt;batchtest fork="yes" todir="${junitreports}"&gt;
  &lt;fileset dir="${test}"&gt;
    &lt;include name="**/*Test*.java" /&gt;
  &lt;/fileset&gt;
&lt;/batchtest&gt;
</code></pre>

<p>  </junit>
</target></p>

<p><target name="coverage.report" depends="test">
  <emma enabled="yes"></p>

<pre><code>&lt;report sourcepath="${src}"&gt;
  &lt;fileset dir="${coveragereports}"&gt;
    &lt;include name="*.emma" /&gt;
  &lt;/fileset&gt;

  &lt;html outfile="${coveragereports}/coverage.html" depth="method" /&gt;
&lt;/report&gt;
</code></pre>

<p>  </emma>
</target>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ant系列之用JDepend生成package依赖性度量的问题]]></title>
    <link href="http://codemany.com/blog/2005/12/29/ant-series-jdepend-generated-by-the-issue-of-package-dependent-measure/"/>
    <updated>2005-12-29T18:04:59+08:00</updated>
    <id>http://codemany.com/blog/2005/12/29/ant-series-jdepend-generated-by-the-issue-of-package-dependent-measure</id>
    <content type="html"><![CDATA[<p>首先获取JDepend的最新jar文件，当前最新版本是2.9。把jdepend-2.9.jar添加到ANT_HOME/lib目录下。</p>

<p>在build.xml中添加：
```
<target name="jdepend" description="Generate dependency metrics for each package"></p>

<pre><code>&lt;jdepend format="xml" outputfile="${jdepend.dir}/jdepend-report.xml"&gt;
    &lt;classpath&gt;
        &lt;pathelement path="classes" /&gt;
    &lt;/classpath&gt;
&lt;/jdepend&gt;
</code></pre>

<p></target>
```</p>

<p>运行任务后出现如下的错误：
```
BUILD FAILED
C:examplebuild.xml:59: Missing classespath required argument</p>

<pre><code>at org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask.execute(JDependTask.java:397)
at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
at org.apache.tools.ant.Task.perform(Task.java:364)
at org.apache.tools.ant.Target.execute(Target.java:341)
at org.apache.tools.ant.Target.performTasks(Target.java:369)
at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)
at org.apache.tools.ant.Project.executeTarget(Project.java:1185)
at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)
at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)
at org.apache.tools.ant.Project.executeTargets(Project.java:1068)
at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:423)
at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:137)
</code></pre>

<p>```</p>

<p>查看JDependTask.java文件的397行：
```
if (getSourcespath() == null &amp;&amp; getClassespath() == null) {</p>

<pre><code>throw new BuildException("Missing classespath required argument");
</code></pre>

<p>} else if (getClassespath() == null) {</p>

<pre><code>String msg = "sourcespath is deprecated in JDepend &gt;= 2.5 "
        + "- please convert to classespath";
log(msg);
</code></pre>

<p>}
```</p>

<p>发现是getClassespath() == null了，跳到221行：
```
public Path getClassespath() {</p>

<pre><code>return classesPath;
</code></pre>

<p>}
```</p>

<p>不是写了classpath吗？怎么classesPath的值会等于null呢？结果发现在247行有：
```
public void setClasspath(Path classpath) {</p>

<pre><code>if (compileClasspath == null) {
    compileClasspath = classpath;
} else {
    compileClasspath.append(classpath);
}
</code></pre>

<p>}
```</p>

<p>原来是在build.xml中把classespath错写成classpath了，那样当然有问题啦。改过来，再运行就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ant系列之用Checkstyle检查代码规范的问题]]></title>
    <link href="http://codemany.com/blog/2005/12/17/ant-series-checkstyle-check-code-with-the-problem-of-norms/"/>
    <updated>2005-12-17T04:33:54+08:00</updated>
    <id>http://codemany.com/blog/2005/12/17/ant-series-checkstyle-check-code-with-the-problem-of-norms</id>
    <content type="html"><![CDATA[<p>首先将checkstyle-all-4.1.jar文件拷贝到项目的lib目录下，并建立CheckStyle配置文件。</p>

<p>然后在build.xml文件中声明CheckStyle任务:
<code>
&lt;taskdef resource="checkstyletask.properties" classpath="${lib.dir}/checkstyle-all-4.1.jar" /&gt;
</code></p>

<p>接着是建立CheckStyle任务：
```
<target name="checkstyle" description="Generates a report of code convention violations."></p>

<pre><code>&lt;checkstyle config="${docs.dir}/checkstyle_checks.xml" failOnViolation="false"&gt;
    &lt;fileset dir="${src.dir}" includes="**/*.java" /&gt;
    &lt;formatter type="xml" toFile="${checkstyle.dir}/checkstyle_report.xml" /&gt;
&lt;/checkstyle&gt;
&lt;xslt basedir="${checkstyle.dir}" destdir="${checkstyle.dir}/html" extension=".html"
        style="${docs.dir}/checkstyle-frames.xsl"&gt;
    &lt;param name="output.dir" expression="${checkstyle.dir}/html" /&gt;
&lt;/xslt&gt;
</code></pre>

<p></target>
```</p>

<p>其中output.dir是checkstyle-frames.xsl中的参数：
<code>
&lt;xsl:param name="output.dir" /&gt;
</code></p>

<p>在运行任务时可能会出现如下异常：
<code>
javax.xml.transform.TransformerException: java.lang.RuntimeException: Unrecognized XSLTC extension 'org.apache.xalan.xslt.extensions.Redirect:write'
</code></p>

<p>可以将checkstyle-frames.xsl中的
<code>
xmlns:redirect="org.apache.xalan.xslt.extensions.Redirect"
</code></p>

<p>改成下面的内容就行。
<code>
xmlns:redirect="http://xml.apache.org/xalan/redirect"
</code></p>

<p>如果出现这样的异常：
<code>
Got an exception - java.lang.RuntimeException: Unable to get class information for HelloException.
</code></p>

<p>可以修改对Throws的限制：允许Throws Unchecked Exception以及Throws Subclass Of Another Declared Exception。
```
<module name="RedundantThrows"><br /></p>

<pre><code>&lt;property name="allowUnchecked" value="true" /&gt;
&lt;property name="allowSubclasses" value="true" /&gt;
</code></pre>

<p></module>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse中Ant结合Junit自动测试的问题（2）]]></title>
    <link href="http://codemany.com/blog/2005/02/22/problem-running-junit-tests-with-ant-in-eclipse-2/"/>
    <updated>2005-02-22T22:02:00+08:00</updated>
    <id>http://codemany.com/blog/2005/02/22/problem-running-junit-tests-with-ant-in-eclipse-2</id>
    <content type="html"><![CDATA[<p>Eclipse 3.0.3<br />
Ant 1.6.2<br />
Junit 3.8.1</p>

<p>构建配置文件build.xml：</p>

<p>```
<target name="junit"></p>

<pre><code>&lt;junit&gt;
    &lt;formatter type="xml" /&gt;
    &lt;batchtest todir="${report.dir}"&gt;
        &lt;fileset dir="${classes.dir}" includes="**/*Test.class" /&gt;
    &lt;/batchtest&gt;
&lt;/junit&gt;
</code></pre>

<p></target>
```</p>

<p>执行构建的时候出现了以下错误：</p>

<p>```
java.lang.ClassNotFoundException: com.example.lesson.HelloTest</p>

<pre><code>at java.net.URLClassLoader$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClassInternal(Unknown Source)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Unknown Source)
</code></pre>

<p>```</p>

<p>网上搜索没有找到答案，到Ant官网 <a href="http://ant.apache.org/faq.html#delegating-classloader">http://ant.apache.org/faq.html#delegating-classloader</a> 上去才查到原因。只要在junit任务里加入classpath指出要加载类的路径就可以了。修改后的build.xml文件如下：</p>

<p>```
<target name="junit"></p>

<pre><code>&lt;junit&gt;
    &lt;classpath&gt;
        &lt;pathelement location="${classes.dir}" /&gt;
    &lt;/classpath&gt;
    &lt;formatter type="xml" /&gt;
    &lt;batchtest todir="${report.dir}"&gt;
        &lt;fileset dir="${classes.dir}" includes="**/*Test.class" /&gt;
    &lt;/batchtest&gt;
&lt;/junit&gt;
</code></pre>

<p></target>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse中Ant结合Junit自动测试的问题（1）]]></title>
    <link href="http://codemany.com/blog/2005/02/05/problem-running-junit-tests-with-ant-in-eclipse-1/"/>
    <updated>2005-02-05T18:33:00+08:00</updated>
    <id>http://codemany.com/blog/2005/02/05/problem-running-junit-tests-with-ant-in-eclipse-1</id>
    <content type="html"><![CDATA[<p>Eclipse 3.0.3<br />
Ant 1.6.2<br />
Junit 3.8.1</p>

<p>构建配置文件build.xml：</p>

<p>```
<target name="junit"></p>

<pre><code>&lt;junit&gt;
    &lt;formatter type="xml" /&gt;
&lt;/junit&gt;
</code></pre>

<p></target>
```</p>

<p>在执行时出现了以下问题：</p>

<p>```
BUILD FAILED: build.xml:44: Could not create task or type of type: junit.</p>

<p>Ant could not find the task or a class this task relies upon.</p>

<p>This is common and has a number of causes; the usual
solutions are to read the manual pages then download and
install needed JAR files, or fix the build file:
 - You have misspelt 'junit'.
   Fix: check your spelling.
 - The task needs an external JAR file to execute</p>

<pre><code> and this is not found at the right place in the classpath.
</code></pre>

<p>   Fix: check the documentation for dependencies.
   Fix: declare the task.
 - The task is an Ant optional task and the JAR file and/or libraries</p>

<pre><code> implementing the functionality were not found at the time you
 yourself built your installation of Ant from the Ant sources.
</code></pre>

<p>   Fix: Look in the ANT_HOME/lib for the 'ant-' JAR corresponding to the</p>

<pre><code> task and make sure it contains more than merely a META-INF/MANIFEST.MF.
 If all it contains is the manifest, then rebuild Ant with the needed
 libraries present in ${ant.home}/lib/optional/, or alternatively,
 download a pre-built release version from apache.org
</code></pre>

<ul>
<li>The build file was written for a later version of Ant
Fix: upgrade to at least the latest release version of Ant</li>
<li>The task is not an Ant core or optional task
  and needs to be declared using <taskdef>.</li>
<li>You are attempting to use a task defined using
 <presetdef> or <macrodef> but have spelt wrong or not
defined it at the point of use</li>
</ul>


<p>Remember that for JAR files to be visible to Ant tasks implemented
in ANT_HOME/lib, the files must be in the same directory or on the
classpath</p>

<p>Please neither file bug reports on this problem, nor email the
Ant mailing lists, until all of these causes have been explored,
as this is not an Ant bug.
```</p>

<p>产生上面错误的原因是Ant在执行junit任务时没有找到junit.jar这个文件，将junit.jar文件copy到ANT_HOME/lib目录下，再次执行junit任务，这下该OK了吧^_^</p>

<p>有没有搞错，还产生同样的错误！到命令行下试试。在命令行下输入ant junit，然后出现：</p>

<p>```
Buildfile: build.xml</p>

<p>junit:</p>

<p>BUILD SUCCESSFUL
Total time: 1 second
```</p>

<p>怎么会这样？命令行下可以，Eclipse中就不行了？</p>

<p>到Preferences -> Ant -> Runtime -> Classpath下设置一下junit.jar的路径，再次执行test任务，终于在Console视图中看到了成功的消息：</p>

<p>```
junit:</p>

<p>BUILD SUCCESSFUL
Total time: 4 seconds
```</p>
]]></content>
  </entry>
  
</feed>
