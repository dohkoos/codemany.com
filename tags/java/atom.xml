<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Java | 乐者为王]]></title>
  <link href="http://codemany.com/tags/java/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-04-27T09:39:51+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用VisualVM检测Java内存泄漏]]></title>
    <link href="http://codemany.com/blog/how-to-detect-java-memory-leak-using-visualvm/"/>
    <updated>2015-10-12T13:08:19+08:00</updated>
    <id>http://codemany.com/blog/how-to-detect-java-memory-leak-using-visualvm</id>
    <content type="html"><![CDATA[<p>Java的一个重要优点是通过垃圾收集器（Garbage Collection）自动管理内存的回收，程序员不需要关注它。程序员真的不需要关注内存管理吗？只要你碰到过OutOfMemoryError你就知道它不是真的。</p>

<p>这里我会展示如何使用VisualVM快速定位内存泄漏。先看下面这段代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import java.util.List;
import java.util.ArrayList;

public class MemoryLeakDemo {
    public static void main(String[] args) {
        new Thread(new MemoryLeak(), &quot;MemoryLeak&quot;).start();
    }
}

class MemoryLeak implements Runnable {
    public static List&lt;Integer&gt; leakList = new ArrayList&lt;Integer&gt;();

    public void run() {
        int count = 0;
        while (true) {
            try {
                Thread.sleep(3);
            } catch (InterruptedException e) {
            }
            count++;
            Integer i = new Integer(count);
            leakList.add(i);
        }
    }
}
</code></pre></div>
<p>执行下列命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">java -verbose:gc -XX:+PrintGCDetails -Xmx20m MemoryLeakDemo
</code></pre></div>
<p>等待一段时间后，你会看到：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Exception in thread &quot;MemoryLeak&quot; java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Arrays.java:3181)
        at java.util.ArrayList.grow(ArrayList.java:261)
        at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
        at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)
        at java.util.ArrayList.add(ArrayList.java:458)
        at MemoryLeak.run(MemoryLeakDemo.java:22)
        at java.lang.Thread.run(Thread.java:745)
Heap
 PSYoungGen      total 3584K, used 298K [0x00000000ff980000, 0x00000000ffe80000, 0x0000000100000000)
  eden space 3072K, 9% used [0x00000000ff980000,0x00000000ff9ca908,0x00000000ffc80000)
  from space 512K, 0% used [0x00000000ffc80000,0x00000000ffc80000,0x00000000ffd00000)
  to   space 512K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000ffe80000)
 ParOldGen       total 13824K, used 12156K [0x00000000fec00000, 0x00000000ff980000, 0x00000000ff980000)
  object space 13824K, 87% used [0x00000000fec00000,0x00000000ff7df3e8,0x00000000ff980000)
 Metaspace       used 7993K, capacity 8164K, committed 8448K, reserved 1056768K
  class space    used 912K, capacity 954K, committed 1024K, reserved 1048576K
</code></pre></div>
<p>打开VisualVM开始监测MemoryLeakDemo，在Monitor标签页我们可以看到实时的程序内存堆的使用情况：</p>

<p><img src="/uploads/visualvm-heap.png" title="visualvm-heap" ></p>

<p>波峰到波谷处是执行了GC的，明显可以看到执行GC后内存曲线仍旧呈上扬趋势，也就是说，内存占用是只升不降。到底是什么原因导致的呢？</p>

<p>打开Sampler标签页，点击Memory按钮启动一个内存分析会话，VisualVM会定期获取所有执行线程的转储，分析栈跟踪信息，实时显示成堆直方图。通过堆直方图，我们就可以知道哪个对象占用了较多的内存，以便做进一步的优化。</p>

<p><img src="/uploads/visualvm-sampler.png" title="visualvm-sampler" ></p>

<p>如上图所示，第1行的Integer对象占用内存最大，已经有41万多实例了，并且还在持续增加中。很显然，罪魁祸首就是它了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用SiteMesh做网页布局]]></title>
    <link href="http://codemany.com/blog/page-layout-using-sitemesh/"/>
    <updated>2013-04-09T08:18:33+08:00</updated>
    <id>http://codemany.com/blog/page-layout-using-sitemesh</id>
    <content type="html"><![CDATA[<p>SiteMesh是一个基于GoF的Decorator模式，用于页面布局的框架。能帮助我们在由大量页面构成的项目中创建一致的页面布局和外观。</p>

<p>这里我们将会把它整合到JBookShelf里去。要和Struts 2整合，先在pom.xml添加以下插件，该插件会将依赖的SiteMesh也一并包含到项目中。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;dependency&gt;
    &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
    &lt;artifactId&gt;struts2-sitemesh-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.3.12&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div>
<p>将web.xml配置中原来的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;filter&gt;
    &lt;filter-name&gt;struts2&lt;/filter-name&gt;
    &lt;filter-class&gt;
        org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
    &lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;struts2&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre></div>
<p>改成</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;filter&gt;
    &lt;filter-name&gt;struts-prepare&lt;/filter-name&gt;
    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter&gt;
    &lt;filter-name&gt;sitemesh&lt;/filter-name&gt;
    &lt;filter-class&gt;com.opensymphony.sitemesh.webapp.SiteMeshFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter&gt;
    &lt;filter-name&gt;struts-execute&lt;/filter-name&gt;
    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;struts-prepare&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;sitemesh&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;struts-execute&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre></div>
<p>这里要注意过滤器的位置。SiteMesh过滤器必须在StrutsPrepareFilter之后和StrutsExecuteFilter之前，否则在SiteMesh的修饰器页面中将访问不到ActionContext。这是因为Struts 2的所有值是保存在Stack Context或者ValueStack中的。默认情况下，某个过滤器一旦访问了该Stack Context或ValueStack，里面对应的值会被清洗掉。如果先使用Struts 2的StrutsPrepareAndExecuteFilter来过滤用户请求，则SiteMesh的过滤器将无法取得Stack Context或者ValueStack中的数据。为了解决这个问题，Struts 2提供了StrutsPrepareFilter和StrutsExecuteFilter类（在2.1.3版本前是ActionContextCleanUp和FilterDispatcher），通过它们协同来确保SiteMesh正常工作。</p>

<p>在WEB-INF下添加decorators.xml文档：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;decorators defaultdir=&quot;/layouts&quot;&gt;
    &lt;excludes&gt;
        &lt;pattern&gt;/stylesheets/*&lt;/pattern&gt;
        &lt;pattern&gt;/javascripts/*&lt;/pattern&gt;
        &lt;pattern&gt;/images/*&lt;/pattern&gt;
    &lt;/excludes&gt;

    &lt;decorator name=&quot;application&quot; page=&quot;application.jsp&quot;&gt;
        &lt;pattern&gt;/*&lt;/pattern&gt;
    &lt;/decorator&gt;
&lt;/decorators&gt;
</code></pre></div>
<p>stylesheets、javascripts、images目录下的内容是不需要被修饰的，可以把它们放到execludes块中排除掉。</p>

<p>新建/layouts/application.jsp模版页：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;
&lt;%@ taglib uri=&quot;http://www.opensymphony.com/sitemesh/decorator&quot; prefix=&quot;decorator&quot; %&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;&lt;decorator:title default=&quot;JBookShelf&quot; /&gt;&lt;/title&gt;
    &lt;decorator:head /&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div&gt;
        &lt;s:if test=&quot;#session.user_session_key != null&quot;&gt;
        &lt;s:a action=&quot;listBook&quot;&gt;All Books&lt;/s:a&gt;
        Welcome, you have logined.
        &lt;s:a action=&quot;logout&quot;&gt;Logout&lt;/s:a&gt;
        &lt;/s:if&gt;
        &lt;s:else&gt;
        &lt;s:a action=&quot;login!input&quot;&gt;Login&lt;/s:a&gt; |
        &lt;s:a action=&quot;register!input&quot;&gt;Register&lt;/s:a&gt;
        &lt;/s:else&gt;
    &lt;/div&gt;
    &lt;hr /&gt;
    &lt;div&gt;Navigation&lt;/div&gt;
    &lt;hr /&gt;
    &lt;decorator:body /&gt;
    &lt;hr /&gt;
    &lt;div&gt;Footer&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Interceptor禁止用户访问未授权的图书信息]]></title>
    <link href="http://codemany.com/blog/using-interceptor-to-prohibit-users-from-accessing-unauthorized-books-information/"/>
    <updated>2013-02-01T18:50:02+08:00</updated>
    <id>http://codemany.com/blog/using-interceptor-to-prohibit-users-from-accessing-unauthorized-books-information</id>
    <content type="html"><![CDATA[<p>现在的JBookShelf有两个问题：</p>

<ol>
<li>未登录的用户可以访问图书信息；</li>
<li>登录后的用户可以访问其他用户的图书信息。</li>
</ol>

<p>第一个问题可以使用Struts 2的Interceptor来解决：</p>

<ol>
<li>创建一个实现了Interceptor接口的类；</li>
<li>在struts.xml配置中定义这个拦截器；</li>
<li>在struts.xml中定义一个使用了上面拦截器的拦截栈；</li>
<li>在struts.xml中定义一个全局转向配置。</li>
</ol>

<p>实现自己的拦截器有点要注意的是，拦截器必须是无状态的，不要使用在API提供的ActionInvocation之外的任何东西。要求拦截器是无状态的原因是Struts 2不能保证为每一个请求或者action创建一个实例，所以如果拦截器带有状态，会引发并发问题。</p>

<p>创建AuthorizationInterceptor类，继承类AbstractInterceptor。为什么继承它呢？而不是直接实现接口Interceptor。这是因为AbstractInterceptor已经实现了Interceptor接口，并且实现了接口中的init和destroy方法。而在这个拦截器中，我们并不需要使用这两个方法。下面上代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.interceptor;

import java.util.Collections;
import java.util.Set;

import com.codemany.account.model.User;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;
import com.opensymphony.xwork2.util.TextParseUtil;

public class AuthorizationInterceptor extends AbstractInterceptor {
    private static final long serialVersionUID = -5140884040684756043L;

    protected Set&lt;String&gt; skipActions = Collections.emptySet();

    public void setSkipActions(String skipActions) {
        this.skipActions = TextParseUtil.commaDelimitedStringToSet(skipActions);
    }

    @Override
    public String intercept(ActionInvocation invocation) throws Exception {
        User user = (User)invocation.getInvocationContext()
                .getSession().get(User.SESSION_KEY);

        boolean isLogined = user != null;
        String action = invocation.getProxy().getActionName();
        // 如果用户未登录，并且访问的是需要登录权限的Action，就跳转到全局转向配置login上
        if (isLogined || skipActions.contains(action)) {
            return invocation.invoke();
        } else {
            return Action.LOGIN;
        }
    }
}
</code></pre></div>
<p>这里的skipActions目的是为了跳过一些不需要拦截的Action。因为默认情况下，拦截器会拦截Action中的所有的方法。像login，register这类Action是任何用户在任何状态下都可以访问的，所以不需要拦截，这里就可以将这些Action放到skipActions中来跳过拦截。</p>

<p>实现了拦截类后还要在struts.xml进行配置使它起作用，以下是struts.xml的完整代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE struts PUBLIC
    &quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;
    &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;

&lt;struts&gt;
    &lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot; /&gt;
    &lt;constant name=&quot;struts.devMode&quot; value=&quot;true&quot; /&gt;

    &lt;package name=&quot;default&quot; extends=&quot;struts-default&quot;&gt;
        &lt;interceptors&gt;
            &lt;interceptor name=&quot;authorization&quot;
                class=&quot;com.codemany.account.interceptor.AuthorizationInterceptor&quot; /&gt;

            &lt;interceptor-stack name=&quot;authorizationStack&quot;&gt;
                &lt;interceptor-ref name=&quot;authorization&quot;&gt;
                    &lt;param name=&quot;skipActions&quot;&gt;login, logout, register&lt;/param&gt;
                &lt;/interceptor-ref&gt;
                &lt;interceptor-ref name=&quot;defaultStack&quot; /&gt;
            &lt;/interceptor-stack&gt;
        &lt;/interceptors&gt;

        &lt;default-interceptor-ref name=&quot;authorizationStack&quot; /&gt;

        &lt;!-- 全局转向配置 --&gt;
        &lt;!-- 还记得拦截器里面的return Action.LOGIN这句吧，当程序执行完这一行后，--&gt;
        &lt;!-- 就会到struts.xml文件的global-results中找name为login的全局转向配置。--&gt;
        &lt;global-results&gt;
            &lt;result name=&quot;login&quot; type=&quot;redirectAction&quot;&gt;login!input&lt;/result&gt;
        &lt;/global-results&gt;
    &lt;/package&gt;

    &lt;include file=&quot;account.xml&quot; /&gt;
    &lt;include file=&quot;book.xml&quot; /&gt;
&lt;/struts&gt;
</code></pre></div>
<p>然后将account.xml和book.xml中package继承的父包改成struts.xml配置中的default包：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;package name=&quot;account&quot; extends=&quot;default&quot;&gt;

&lt;package name=&quot;book&quot; extends=&quot;default&quot;&gt;
</code></pre></div>
<p>第二个问题的解决就是修改BookAction.java的代码，不再从数据库中读取Book数据，而是从当前登录用户的books属性中查找Book信息。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.book.action;

import java.util.ArrayList;
import java.util.List;

import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class BookAction extends ActionSupport {
    private static final long serialVersionUID = 2538923417705852774L;

    private Long bookId;
    private Book book;
    private List&lt;Book&gt; bookList;

    private BookService bookService;

    public String list() throws Exception {
        if (bookList == null) {
            bookList = new ArrayList&lt;Book&gt;();
        }
        bookList.addAll(getCurrentUser().getBooks());
        return &quot;list&quot;;
    }

    public String show() throws Exception {
        book = getCurrentUser().getBook(bookId);
        return &quot;show&quot;;
    }

    public String input() throws Exception {
        if (bookId != null) {
            book = getCurrentUser().getBook(bookId);
        }
        return INPUT;
    }

    public String saveOrUpdate() throws Exception {
        book.setUser(getCurrentUser());
        bookService.saveOrUpdateBook(book);
        return SUCCESS;
    }

    public String delete() throws Exception {
        Book book = getCurrentUser().getBook(bookId);
        if (book != null) {
            bookService.deleteBook(bookId);
            getCurrentUser().getBooks().remove(book);
        }
        return SUCCESS;
    }

    public List&lt;Book&gt; getBookList() {
        return bookList;
    }

    public Book getBook() {
        return book;
    }

    public void setBook(Book book) {
        this.book = book;
    }

    public void setBookId(Long bookId) {
        this.bookId = bookId;
    }

    public void setBookService(BookService bookService) {
        this.bookService = bookService;
    }

    private User getCurrentUser() {
        return (User)ActionContext.getContext()
                .getSession().get(User.SESSION_KEY);
    }
}
</code></pre></div>
<p>上面的代码会产生异常，提示取出的Book数据为空，所以要在User.hbm.xml中set标签后添加属性lazy=“false”，这样Hibernate从数据库中读取User数据时会连带取出对应的Book数据：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;set name=&quot;books&quot; inverse=&quot;true&quot; lazy=&quot;false&quot;&gt;
</code></pre></div>
<p>下面是BookAction类中用到的User.getBook(bookId)代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class User {

    public Book getBook(Long bookId) {
        for (Book book : books) {
            if (bookId != null &amp;&amp; bookId.equals(book.getId())) {
                return book;
            }
        }
        return null;
    }
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现图书的增删查改（CRUD）]]></title>
    <link href="http://codemany.com/blog/implement-crud-for-books/"/>
    <updated>2012-12-22T14:25:20+08:00</updated>
    <id>http://codemany.com/blog/implement-crud-for-books</id>
    <content type="html"><![CDATA[<p>图书的MySQL数据库创建脚本：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">CREATE TABLE books (
    id int NOT NULL AUTO_INCREMENT,
    title varchar(255) NOT NULL,
    description text,
    image_url varchar(255),
    price decimal(8, 2) NOT NULL,
    author varchar(255) NOT NULL,
    isbn varchar(255) NOT NULL,
    publisher varchar(255) NOT NULL,
    user_id int NOT NULL,
    PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
</code></pre></div>
<p>图书实体类文件Book.java主要代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class Book {
    private Long id;
    private String title;
    private String description;
    private String image_url;
    private double price;
    private String author;
    private String isbn;
    private String publisher;
    private User user;
</code></pre></div>
<p>在User类中添加集合变量books：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class User {
    private Set&lt;Book&gt; books = new HashSet&lt;Book&gt;();
</code></pre></div>
<p>在User.hbm.xml中配置和图书的一对多关联：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- Bidirectional one-to-many association to Book --&gt;
&lt;set name=&quot;books&quot; inverse=&quot;true&quot;&gt;
    &lt;key column=&quot;user_id&quot; not-null=&quot;true&quot; /&gt;
    &lt;one-to-many class=&quot;com.codemany.book.model.Book&quot; /&gt;
&lt;/set&gt;
</code></pre></div>
<p>图书的表映射文件Book.hbm.xml代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;hibernate-mapping&gt;
    &lt;class name=&quot;com.codemany.book.model.Book&quot; table=&quot;books&quot;&gt;
        &lt;id name=&quot;id&quot;&gt;
            &lt;generator class=&quot;increment&quot; /&gt;
        &lt;/id&gt;

        &lt;property name=&quot;title&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;description&quot; /&gt;
        &lt;property name=&quot;image_url&quot; /&gt;
        &lt;property name=&quot;price&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;author&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;isbn&quot; not-null=&quot;true&quot; /&gt;
        &lt;property name=&quot;publisher&quot; not-null=&quot;true&quot; /&gt;

        &lt;many-to-one name=&quot;user&quot; column=&quot;user_id&quot; not-null=&quot;true&quot; /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre></div>
<p>BookService.java中的代码相对简单，因为没什么复杂的业务逻辑，只是负责把Action和Dao这两层连接起来。</p>

<p>BookDao.java中的代码主要实现图书的读取，更新和删除：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.book.dao;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.codemany.book.model.Book;

public class BookDao {
    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public List&lt;Book&gt; getBookList() {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery(&quot;from Book b&quot;);
            List&lt;Book&gt; bookList = query.list();
            return bookList;
        } finally {
            session.close();
        }
    }

    public Book getBook(Long bookId) {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery(&quot;from Book b where b.id = :id&quot;);
            query.setLong(&quot;id&quot;, bookId);
            query.setMaxResults(1);
            return (Book)query.uniqueResult();
        } finally {
            session.close();
        }
    }

    public void saveOrUpdateBook(Book book) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            session.saveOrUpdate(book);
            ts.commit();
        } finally {
            session.close();
        }
    }

    public void deleteBook(Long bookId) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            Book book = (Book)session.get(Book.class, bookId);
            session.delete(book);
            ts.commit();
        } finally {
            session.close();
        }
    }
}
</code></pre></div>
<p>BookAction.java负责协调图书应用程序间的运转。接收访问请求，与模型进行交互，将合适的视图展示给用户：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.book.action;

import java.util.List;

import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class BookAction extends ActionSupport {
    private static final long serialVersionUID = 2538923417705852774L;

    private Long bookId;
    private Book book;
    private List&lt;Book&gt; bookList;
    private BookService bookService;

    public String list() throws Exception {
        bookList = bookService.getBookList();
        return &quot;list&quot;;
    }

    public String show() throws Exception {
        book = bookService.getBook(bookId);
        return &quot;show&quot;;
    }

    public String input() throws Exception {
        if (bookId != null) {
            book = bookService.getBook(bookId);
        }
        return INPUT;
    }

    public String saveOrUpdate() throws Exception {
        User user = (User)ActionContext.getContext().getSession().get(&quot;user&quot;);
        book.setUser(user);
        bookService.saveOrUpdateBook(book);
        return SUCCESS;
    }

    public String delete() throws Exception {
        bookService.deleteBook(bookId);
        return SUCCESS;
    }
</code></pre></div>
<p>在applicationContext.xml中添加Book的相关配置，如下面代码所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;
    &lt;property name=&quot;mappingResources&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;com/codemany/book/model/Book.hbm.xml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;!-- book --&gt;
&lt;bean id=&quot;bookDao&quot; class=&quot;com.codemany.book.dao.BookDao&quot;&gt;
    &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;bookService&quot; class=&quot;com.codemany.book.service.BookService&quot;&gt;
    &lt;property name=&quot;bookDao&quot; ref=&quot;bookDao&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;bookAction&quot; class=&quot;com.codemany.book.action.BookAction&quot; scope=&quot;prototype&quot;&gt;
    &lt;property name=&quot;bookService&quot; ref=&quot;bookService&quot; /&gt;
&lt;/bean&gt;
</code></pre></div>
<p>在Struts 2配置文件struts.xml中include文件book.xml。以下是book.xml文件的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE struts PUBLIC
    &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;
    &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt;

&lt;struts&gt;
    &lt;package name=&quot;book&quot; extends=&quot;struts-default&quot;&gt;
        &lt;action name=&quot;*Book&quot; method=&quot;{1}&quot; class=&quot;bookAction&quot;&gt;
            &lt;result name=&quot;list&quot;&gt;/books/list.jsp&lt;/result&gt;
            &lt;result name=&quot;show&quot;&gt;/books/show.jsp&lt;/result&gt;
            &lt;result name=&quot;input&quot;&gt;/books/form.jsp&lt;/result&gt;
            &lt;result type=&quot;redirectAction&quot;&gt;listBook&lt;/result&gt;
        &lt;/action&gt;
    &lt;/package&gt;
&lt;/struts&gt;
</code></pre></div>
<p>视图文件show.jsp作为显示单本图书的信息，代码很简单，就不放出来了，只把list.jsp和form.jsp的代码列出来。</p>

<p>list.jsp用来显示所有的图书：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;
    &lt;h1&gt;Listing books&lt;/h1&gt;

    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;Title&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
            &lt;th&gt;Image url&lt;/th&gt;
            &lt;th&gt;Price&lt;/th&gt;
            &lt;th&gt;Author&lt;/th&gt;
            &lt;th&gt;ISBN&lt;/th&gt;
            &lt;th&gt;Publisher&lt;/th&gt;
            &lt;th&gt;Action&lt;/th&gt;
        &lt;/tr&gt;

        &lt;s:iterator value=&quot;bookList&quot;&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;s:property value=&quot;title&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;description&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;image_url&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;price&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;author&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;isbn&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value=&quot;publisher&quot; /&gt;&lt;/td&gt;
            &lt;td&gt;
                &lt;s:a href=&quot;showBook.action?bookId=%{id}&quot;&gt;Show&lt;/s:a&gt;
                &lt;s:a href=&quot;inputBook.action?bookId=%{id}&quot;&gt;Edit&lt;/s:a&gt;
                &lt;s:a href=&quot;deleteBook.action?bookId=%{id}&quot; method=&quot;delete&quot;&gt;Destroy&lt;/s:a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/s:iterator&gt;
    &lt;/table&gt;

    &lt;s:a action=&quot;inputBook&quot;&gt;Add&lt;/s:a&gt;
&lt;/body&gt;
</code></pre></div>
<p>当用户新建或者更新图书时，视图form.jsp就上场了。因为被两个逻辑使用，显示的标题等信息也不相同，所以需要判断图书的id是否存在，如果不存在的话即是新建业务，否则就是更新操作。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;
    &lt;s:if test=&quot;book.id != null&quot;&gt;
        &lt;h1&gt;Editing book&lt;/h1&gt;
    &lt;/s:if&gt;
    &lt;s:else&gt;
        &lt;h1&gt;Add book&lt;/h1&gt;
    &lt;/s:else&gt;

    &lt;s:form action=&quot;saveOrUpdateBook&quot; method=&quot;post&quot;&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:hidden name=&quot;book.id&quot; value=&quot;%{book.id}&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.title&quot; label=&quot;Title&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textarea name=&quot;book.description&quot; label=&quot;Description&quot; rows=&quot;5&quot; cols=&quot;25&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.image_url&quot; label=&quot;Image URL&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.price&quot; label=&quot;Price&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.author&quot; label=&quot;Author&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.isbn&quot; label=&quot;ISBN&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
            &lt;s:textfield name=&quot;book.publisher&quot; label=&quot;Publisher&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;actions&quot;&gt;
            &lt;s:if test=&quot;book.id != null&quot;&gt;
            &lt;s:submit value=&quot;Update&quot; /&gt;
            &lt;/s:if&gt;
            &lt;s:else&gt;
            &lt;s:submit value=&quot;Save&quot; /&gt;
            &lt;/s:else&gt;
      &lt;/div&gt;
    &lt;/s:form&gt;

    &lt;s:if test=&quot;book.id != null&quot;&gt;
        &lt;s:a href=&quot;showBook.action?bookId=%{book.id}&quot;&gt;Show&lt;/s:a&gt; |
    &lt;/s:if&gt;
    &lt;s:a action=&quot;listBook&quot;&gt;Back&lt;/s:a&gt;
&lt;/body&gt;
</code></pre></div>
<p>最后还要完成图书模型的服务端校验。Struts 2的校验文件有两种格式：ActionName-validation.xml和ActionName-alias-validation.xml。第一种会对该Action中的每个方法进行校验，不符合只对saveOrUpdate校验的要求。在BookAction.java同目录下创建BookAction-saveOrUpdateBook-validation.xml文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;validators&gt;
    &lt;field name=&quot;book&quot;&gt;
        &lt;field-validator type=&quot;visitor&quot;&gt;
            &lt;param name=&quot;appendPrefix&quot;&gt;true&lt;/param&gt;
            &lt;message /&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre></div>
<p>当然，还要在Book.java所在的位置创建Book-validation.xml文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;validators&gt;
    &lt;field name=&quot;title&quot;&gt;
        &lt;field-validator type=&quot;required&quot;&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;

    &lt;field name=&quot;price&quot;&gt;
        &lt;field-validator type=&quot;required&quot;&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
        &lt;field-validator type=&quot;double&quot;&gt;
            &lt;param name=&quot;minInclusive&quot;&gt;0.01&lt;/param&gt;
            &lt;message&gt;Price should be at least 0.01&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
</code></pre></div>
<p>看着BookAction-saveOrUpdateBook-validation.xml这么长的文件名是不是有点无语，没关系，BookAction-validation.xml配置文件还是可以用的，只要在BookAction.java中那些不需要进行校验的方法上添加@SkipValidation；也可以在action配置中启用validation.excludeMethods参数：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;action name=&quot;*Book&quot; method=&quot;{1}&quot; class=&quot;bookAction&quot;&gt;
    &lt;interceptor-ref name=&quot;defaultStack&quot;&gt;
        &lt;param name=&quot;validation.excludeMethods&quot;&gt;list,show,input,delete&lt;/param&gt;
    &lt;/interceptor-ref&gt;
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何从数组中抽取随机不重复的数字]]></title>
    <link href="http://codemany.com/blog/how-to-extract-random-digit-without-replacement-from-array/"/>
    <updated>2012-12-06T21:49:29+08:00</updated>
    <id>http://codemany.com/blog/how-to-extract-random-digit-without-replacement-from-array</id>
    <content type="html"><![CDATA[<p>今天浏览订阅的博客时发现了一个巧妙的从数组中抽取随机不重复数字的算法。譬如，在100个不重复的数字中选择10个不相同的数字，通过这个算法就不需要修改数组长度和删除数组元素等。具体算法如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">int[] numbers = new int[100];
int[] selected = new int[10];

for (int i = 0, n = numbers.length; i &lt; selected.length; i++) {
    int idx = (int)(Math.random() * n);    // 随机产生一个从0 - (n-1)的数字
    selected[i] = numbers[idx];
    numbers[idx] = numbers[n - 1];
    n--;    // 减1，从而在下次循环时产生的随机的numbers数组下标的范围从0 - (n-1)-1，
            // 保证了上一步中已经赋值给数组中其它数的numbers[n-1]不会在下次循环中给
            // 取得，确保了产生的数组selected中的数为不重复的。
}
</code></pre></div>]]></content>
  </entry>
  
</feed>
