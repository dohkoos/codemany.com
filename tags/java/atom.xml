<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Java | 乐者为王]]></title>
  <link href="http://codemany.com/tags/java/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-13T18:58:20+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Interceptor禁止用户访问未授权的图书信息]]></title>
    <link href="http://codemany.com/blog/2013/02/01/interceptor-prohibit-users-from-accessing-unauthorized-books/"/>
    <updated>2013-02-01T02:50:02+08:00</updated>
    <id>http://codemany.com/blog/2013/02/01/interceptor-prohibit-users-from-accessing-unauthorized-books</id>
    <content type="html"><![CDATA[<p>现在的JBookShelf有两个问题：<br />
1. 未登录的用户可以访问图书信息；<br />
2. 登录后的用户可以访问其他用户的图书信息。</p>

<p>第一个问题可以使用Struts 2的Interceptor来解决：<br />
1. 创建一个实现了Interceptor接口的类；<br />
2. 在struts.xml配置中定义这个拦截器；<br />
3. 在struts.xml中定义一个使用了上面拦截器的拦截栈；<br />
4. 在struts.xml中定义一个全局转向配置。</p>

<p>实现自己的拦截器有点要注意的是，拦截器必须是无状态的，不要使用在API提供的ActionInvocation之外的任何东西。要求拦截器是无状态的原因是Struts 2不能保证为每一个请求或者action创建一个实例，所以如果拦截器带有状态，会引发并发问题。</p>

<p>创建AuthorizationInterceptor类，继承类AbstractInterceptor。为什么继承它呢？而不是直接实现接口Interceptor。这是因为AbstractInterceptor已经实现了Interceptor接口，并且实现了接口中的init和destroy方法。而在这个拦截器中，我们并不需要使用这两个方法。下面上代码：
```
package com.codemany.account.interceptor;</p>

<p>import java.util.Collections;
import java.util.Set;</p>

<p>import com.codemany.account.model.User;</p>

<p>import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;
import com.opensymphony.xwork2.util.TextParseUtil;</p>

<p>public class AuthorizationInterceptor extends AbstractInterceptor {</p>

<pre><code>private static final long serialVersionUID = -5140884040684756043L;

protected Set&lt;String&gt; skipActions = Collections.emptySet();

public void setSkipActions(String skipActions) {
    this.skipActions = TextParseUtil.commaDelimitedStringToSet(skipActions);
}

@Override
public String intercept(ActionInvocation invocation) throws Exception {
    User user = (User)invocation.getInvocationContext()
            .getSession().get(User.SESSION_KEY);

    boolean isLogined = user != null;
    String action = invocation.getProxy().getActionName();
    // 如果用户未登录，并且访问的是需要登录权限的Action，就跳转到全局转向配置login上
    if (isLogined || skipActions.contains(action)) {
        return invocation.invoke();
    } else {
        return Action.LOGIN;
    }
}
</code></pre>

<p>}
```</p>

<p>这里的skipActions目的是为了跳过一些不需要拦截的Action。因为默认情况下，拦截器会拦截Action中的所有的方法。像login，register这类Action是任何用户在任何状态下都可以访问的，所以不需要拦截，这里就可以将这些Action放到skipActions中来跳过拦截。</p>

<p>实现了拦截类后还要在struts.xml进行配置使它起作用，以下是struts.xml的完整代码：
```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE struts PUBLIC</p>

<pre><code>"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;
</code></pre>

<p><struts></p>

<pre><code>&lt;constant name="struts.enable.DynamicMethodInvocation" value="true" /&gt;
&lt;constant name="struts.devMode" value="true" /&gt;

&lt;package name="default" extends="struts-default"&gt;
    &lt;interceptors&gt;
        &lt;interceptor name="authorization"
            class="com.codemany.account.interceptor.AuthorizationInterceptor" /&gt;

        &lt;interceptor-stack name="authorizationStack"&gt;
            &lt;interceptor-ref name="authorization"&gt;
                &lt;param name="skipActions"&gt;login, logout, register&lt;/param&gt;
            &lt;/interceptor-ref&gt;
            &lt;interceptor-ref name="defaultStack" /&gt;
        &lt;/interceptor-stack&gt;
    &lt;/interceptors&gt;

    &lt;default-interceptor-ref name="authorizationStack" /&gt;

    &lt;!-- 全局转向配置 --&gt;
    &lt;!-- 还记得拦截器里面的return Action.LOGIN这句吧，当程序执行完这一行后，--&gt;
    &lt;!-- 就会到struts.xml文件的global-results中找name为login的全局转向配置。--&gt;
    &lt;global-results&gt;
        &lt;result name="login" type="redirectAction"&gt;login!input&lt;/result&gt;
    &lt;/global-results&gt;
&lt;/package&gt;

&lt;include file="account.xml" /&gt;
&lt;include file="book.xml" /&gt;
</code></pre>

<p></struts>
```</p>

<p>然后将account.xml和book.xml中package继承的父包改成struts.xml配置中的default包：
<code>
&lt;package name="xxx" extends="default"&gt;
</code></p>

<p>第二个问题的解决就是重写BookAction.java的代码，不再从数据库中读取Book数据，而是从当前登录用户的books属性中查找Book信息。
```
package com.codemany.book.action;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;</p>

<p>import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class BookAction extends ActionSupport {</p>

<pre><code>private static final long serialVersionUID = 2538923417705852774L;

private Long bookId;
private Book book;
private List&lt;Book&gt; bookList;

private BookService bookService;

public String list() throws Exception {
    if (bookList == null) {
        bookList = new ArrayList&lt;Book&gt;();
    }
    bookList.addAll(getCurrentUser().getBooks());
    return "list";
}

public String show() throws Exception {
    book = getCurrentUser().getBook(bookId);
    return "show";
}

public String input() throws Exception {
    if (bookId != null) {
        book = getCurrentUser().getBook(bookId);
    }
    return INPUT;
}

public String saveOrUpdate() throws Exception {
    book.setUser(getCurrentUser());
    bookService.saveOrUpdateBook(book);
    return SUCCESS;
}

public String delete() throws Exception {
    Book book = getCurrentUser().getBook(bookId);
    if (book != null) {
        bookService.deleteBook(bookId);
        getCurrentUser().getBooks().remove(book);
    }
    return SUCCESS;
}

public List&lt;Book&gt; getBookList() {
    return bookList;
}

public Book getBook() {
    return book;
}

public void setBook(Book book) {
    this.book = book;
}

public void setBookId(Long bookId) {
    this.bookId = bookId;
}

public void setBookService(BookService bookService) {
    this.bookService = bookService;
}

private User getCurrentUser() {
    return (User)ActionContext.getContext()
            .getSession().get(User.SESSION_KEY);
}
</code></pre>

<p>}
```</p>

<p>上面的代码会产生异常，提示取出的Book数据为空，所以要在User.hbm.xml中set标签后添加属性lazy=“false”，这样Hibernate从数据库中读取User数据时会连带取出对应的Book数据：
<code>
&lt;set name="books" inverse="true" lazy="false"&gt;
</code></p>

<p>下面是BookAction类中用到的User.getBook(bookId)代码：
```
public class User {</p>

<pre><code>public Book getBook(Long bookId) {
    for (Book book : books) {
        if (bookId != null &amp;&amp; bookId.equals(book.getId())) {
            return book;
        }
    }
    return null;
}
</code></pre>

<p>}
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现图书的增删查改（CRUD）]]></title>
    <link href="http://codemany.com/blog/2012/12/22/book-additions-and-deletions-investigation-changed-crud/"/>
    <updated>2012-12-22T14:25:20+08:00</updated>
    <id>http://codemany.com/blog/2012/12/22/book-additions-and-deletions-investigation-changed-crud</id>
    <content type="html"><![CDATA[<p>图书的MySQL数据库创建脚本：<br />
<code>
CREATE TABLE books (&lt;br /&gt;
  id int NOT NULL AUTO_INCREMENT,&lt;br /&gt;
  title varchar(255) NOT NULL,&lt;br /&gt;
  description text,&lt;br /&gt;
  image_url varchar(255),&lt;br /&gt;
  price decimal(8, 2) NOT NULL,&lt;br /&gt;
  author varchar(255) NOT NULL,&lt;br /&gt;
  isbn varchar(255) NOT NULL,&lt;br /&gt;
  publisher varchar(255) NOT NULL,&lt;br /&gt;
  user_id int NOT NULL,&lt;br /&gt;
  PRIMARY KEY (id)&lt;br /&gt;
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;&lt;br /&gt;
</code></p>

<p>图书实体类文件Book.java主要代码：<br />
```
public class Book {<br /></p>

<pre><code>private Long id;&lt;br /&gt;
private String title;&lt;br /&gt;
private String description;&lt;br /&gt;
private String image_url;&lt;br /&gt;
private double price;&lt;br /&gt;
private String author;&lt;br /&gt;
private String isbn;&lt;br /&gt;
private String publisher;&lt;br /&gt;
private User user;&lt;br /&gt;
...&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在User类中添加集合变量books：<br />
```
public class User {<br /></p>

<pre><code>...&lt;br /&gt;
private Set&lt;Book&gt; books = new HashSet&lt;Book&gt;();&lt;br /&gt;
...&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在User.hbm.xml中配置和图书的一对多关联：<br />
```</p>

<!-- Bidirectional one-to-many association to Book -->


<p><set name="books" inverse="true"></p>

<pre><code>&lt;key column="user_id" not-null="true" /&gt;
&lt;one-to-many class="com.codemany.book.model.Book" /&gt;
</code></pre>

<p></set>
```</p>

<p>图书的表映射文件Book.hbm.xml代码：<br />
```
&lt;hibernate-mapping></p>

<pre><code>&lt;class name="com.codemany.book.model.Book" table="books"&gt;
    &lt;id name="id"&gt;
        &lt;generator class="increment" /&gt;
    &lt;/id&gt;

    &lt;property name="title" not-null="true" /&gt;
    &lt;property name="description" /&gt;
    &lt;property name="image_url" /&gt;
    &lt;property name="price" not-null="true" /&gt;
    &lt;property name="author" not-null="true" /&gt;
    &lt;property name="isbn" not-null="true" /&gt;
    &lt;property name="publisher" not-null="true" /&gt;

    &lt;many-to-one name="user" column="user_id" not-null="true" /&gt;
&lt;/class&gt;
</code></pre>

<p>&lt;/hibernate-mapping>
```</p>

<p>BookService.java中的代码相对简单，因为没什么复杂的业务逻辑，只是负责把Action和Dao这两层连接起来。</p>

<p>BookDao.java中的代码主要实现图书的读取，更新和删除：<br />
```
package com.codemany.book.dao;</p>

<p>import java.util.List;</p>

<p>import org.hibernate.Query;<br />
import org.hibernate.Session;<br />
import org.hibernate.SessionFactory;<br />
import org.hibernate.Transaction;</p>

<p>import com.codemany.book.model.Book;</p>

<p>public class BookDao {<br /></p>

<pre><code>private SessionFactory sessionFactory;

public void setSessionFactory(SessionFactory sessionFactory) {&lt;br /&gt;
    this.sessionFactory = sessionFactory;&lt;br /&gt;
}

public List&lt;Book&gt; getBookList() {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from Book b");&lt;br /&gt;
        List&lt;Book&gt; bookList = query.list();&lt;br /&gt;
        return bookList;&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}

public Book getBook(Long bookId) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from Book b where b.id = :id");&lt;br /&gt;
        query.setLong("id", bookId);&lt;br /&gt;
        query.setMaxResults(1);&lt;br /&gt;
        return (Book)query.uniqueResult();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}

public void saveOrUpdateBook(Book book) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    Transaction ts = null;&lt;br /&gt;
    try {&lt;br /&gt;
        ts = session.beginTransaction();&lt;br /&gt;
        session.saveOrUpdate(book);&lt;br /&gt;
        ts.commit();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}

public void deleteBook(Long bookId) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    Transaction ts = null;&lt;br /&gt;
    try {&lt;br /&gt;
        ts = session.beginTransaction();&lt;br /&gt;
        Book book = (Book)session.get(Book.class, bookId);&lt;br /&gt;
        session.delete(book);&lt;br /&gt;
        ts.commit();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>BookAction.java负责协调图书应用程序间的运转。接收访问请求，与模型进行交互，将合适的视图展示给用户：<br />
```
package com.codemany.book.action;</p>

<p>import java.util.List;</p>

<p>import com.codemany.account.model.User;<br />
import com.codemany.book.model.Book;<br />
import com.codemany.book.service.BookService;</p>

<p>import com.opensymphony.xwork2.ActionContext;<br />
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class BookAction extends ActionSupport {<br /></p>

<pre><code>private static final long serialVersionUID = 2538923417705852774L;

private Long bookId;&lt;br /&gt;
private Book book;&lt;br /&gt;
private List&lt;Book&gt; bookList;&lt;br /&gt;
private BookService bookService;

public String list() throws Exception {&lt;br /&gt;
    bookList = bookService.getBookList();&lt;br /&gt;
    return "list";&lt;br /&gt;
}

public String show() throws Exception {&lt;br /&gt;
    book = bookService.getBook(bookId);&lt;br /&gt;
    return "show";&lt;br /&gt;
}

public String input() throws Exception {&lt;br /&gt;
    if (bookId != null) {&lt;br /&gt;
        book = bookService.getBook(bookId);&lt;br /&gt;
    }&lt;br /&gt;
    return INPUT;&lt;br /&gt;
}

public String saveOrUpdate() throws Exception {&lt;br /&gt;
    User user = (User)ActionContext.getContext().getSession().get("user");&lt;br /&gt;
    book.setUser(user);&lt;br /&gt;
    bookService.saveOrUpdateBook(book);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}

public String delete() throws Exception {&lt;br /&gt;
    bookService.deleteBook(bookId);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}&lt;br /&gt;
...&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在applicationContext.xml中添加Book的相关配置，如下面代码所示：<br />
```
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"></p>

<pre><code>...&lt;br /&gt;
&lt;property name="mappingResources"&gt;
    &lt;list&gt;
        ...&lt;br /&gt;
        &lt;value&gt;com/codemany/book/model/Book.hbm.xml&lt;/value&gt;
    &lt;/list&gt;
&lt;/property&gt;
</code></pre>

<p></bean>
...</p>

<!-- book -->


<p><bean id="bookDao" class="com.codemany.book.dao.BookDao"></p>

<pre><code>&lt;property name="sessionFactory" ref="sessionFactory" /&gt;
</code></pre>

<p></bean></p>

<p><bean id="bookService" class="com.codemany.book.service.BookService"></p>

<pre><code>&lt;property name="bookDao" ref="bookDao" /&gt;
</code></pre>

<p></bean></p>

<p><bean id="bookAction" class="com.codemany.book.action.BookAction" scope="prototype"></p>

<pre><code>&lt;property name="bookService" ref="bookService" /&gt;
</code></pre>

<p></bean>
```</p>

<p>在Struts 2配置文件struts.xml中include文件book.xml。以下是book.xml文件的内容：<br />
```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE struts PUBLIC<br /></p>

<pre><code>"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"&lt;br /&gt;
"http://struts.apache.org/dtds/struts-2.0.dtd"&gt;
</code></pre>

<p><struts></p>

<pre><code>&lt;package name="book" extends="struts-default"&gt;
    &lt;action name="*Book" method="{1}" class="bookAction"&gt;
        &lt;result name="list"&gt;/books/list.jsp&lt;/result&gt;
        &lt;result name="show"&gt;/books/show.jsp&lt;/result&gt;
        &lt;result name="input"&gt;/books/form.jsp&lt;/result&gt;
        &lt;result type="redirectAction"&gt;listBook&lt;/result&gt;
    &lt;/action&gt;
&lt;/package&gt;
</code></pre>

<p></struts>
```</p>

<p>视图文件show.jsp作为显示单本图书的信息，代码很简单，就不放出来了，只把list.jsp和form.jsp的代码列出来。</p>

<p>list.jsp用来显示所有的图书：<br />
```
<body></p>

<h1>Listing books</h1>




<table>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Image url</th>
        <th>Price</th>
        <th>Author</th>
        <th>ISBN</th>
        <th>Publisher</th>
        <th>Action</th>
    </tr>

    <s:iterator value="bookList">
    <tr>
        <td><s:property value="title" /></td>
        <td><s:property value="description" /></td>
        <td><s:property value="image_url" /></td>
        <td><s:property value="price" /></td>
        <td><s:property value="author" /></td>
        <td><s:property value="isbn" /></td>
        <td><s:property value="publisher" /></td>
        <td>
            <s:a href="showBook.action?bookId=%{id}">Show</s:a>
            <s:a href="inputBook.action?bookId=%{id}">Edit</s:a>
            <s:a href="deleteBook.action?bookId=%{id}" method="delete">Destroy</s:a>
        </td>
    </tr>
    </s:iterator>
</table>


<p>&lt;s:a action="inputBook">Add&lt;/s:a>
</body>
```</p>

<p>当用户新建或者更新图书时，视图form.jsp就上场了。因为被两个逻辑使用，显示的标题等信息也不相同，所以需要判断图书的id是否存在，如果不存在的话即是新建业务，否则就是更新操作。<br />
```
<body>
&lt;s:if test="book.id != null"></p>

<pre><code>&lt;h1&gt;Editing book&lt;/h1&gt;
</code></pre>

<p>&lt;/s:if>
&lt;s:else></p>

<pre><code>&lt;h1&gt;Add book&lt;/h1&gt;
</code></pre>

<p>&lt;/s:else></p>

<p>&lt;s:form action="saveOrUpdateBook" method="post"></p>

<pre><code>&lt;div class="field"&gt;
    &lt;s:hidden name="book.id" value="%{book.id}" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.title" label="Title" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textarea name="book.description" label="Description" rows="5" cols="25" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.image_url" label="Image URL" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.price" label="Price" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.author" label="Author" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.isbn" label="ISBN" /&gt;
&lt;/div&gt;
&lt;div class="field"&gt;
    &lt;s:textfield name="book.publisher" label="Publisher" /&gt;
&lt;/div&gt;
&lt;div class="actions"&gt;
    &lt;s:if test="book.id != null"&gt;
    &lt;s:submit value="Update" /&gt;
    &lt;/s:if&gt;
    &lt;s:else&gt;
    &lt;s:submit value="Save" /&gt;
    &lt;/s:else&gt;
</code></pre>

<p>  </div>
&lt;/s:form></p>

<p>&lt;s:if test="book.id != null">
&lt;s:a href="showBook.action?bookId=%{book.id}">Show&lt;/s:a> |
&lt;/s:if>
&lt;s:a action="listBook">Back&lt;/s:a>
</body>
```</p>

<p>最后还要完成图书模型的服务端校验。Struts 2的校验文件有两种格式：ActionName-validation.xml和ActionName-alias-validation.xml。第一种会对该Action中的每个方法进行校验，不符合只对saveOrUpdate校验的要求。在BookAction.java同目录下创建BookAction-saveOrUpdateBook-validation.xml文件：<br />
```
<validators></p>

<pre><code>&lt;field name="book"&gt;
    &lt;field-validator type="visitor"&gt;
        &lt;param name="appendPrefix"&gt;true&lt;/param&gt;
        &lt;message /&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre>

<p></validators>
```</p>

<p>当然，还要在Book.java所在的位置创建Book-validation.xml文件：<br />
```
<validators></p>

<pre><code>&lt;field name="title"&gt;
    &lt;field-validator type="required"&gt;
        &lt;message&gt;Price is required&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
...&lt;br /&gt;
&lt;field name="price"&gt;
    &lt;field-validator type="required"&gt;
        &lt;message&gt;Price is required&lt;/message&gt;
    &lt;/field-validator&gt;
    &lt;field-validator type="double"&gt;
        &lt;param name="minInclusive"&gt;0.01&lt;/param&gt;
        &lt;message&gt;Price should be at least 0.01&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre>

<p></validators>
```</p>

<p>看着BookAction-saveOrUpdateBook-validation.xml这么长的文件名是不是有点无语:)没关系，BookAction-validation.xml配置文件还是可以用的，只要在BookAction.java中那些不需要进行校验的方法上添加@SkipValidation；也可以在action配置中启用validation.excludeMethods参数：<br />
```
<action name="*Book" method="{1}" class="bookAction"></p>

<pre><code>&lt;interceptor-ref name="defaultStack"&gt;
    &lt;param name="validation.excludeMethods"&gt;list,show,input,delete&lt;/param&gt;
&lt;/interceptor-ref&gt;
...
</code></pre>

<p></action>
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从数组中抽取随机不重复数字的算法]]></title>
    <link href="http://codemany.com/blog/2012/12/06/the-random-repeat-digital-algorithms-extract-from-the-array/"/>
    <updated>2012-12-06T05:49:29+08:00</updated>
    <id>http://codemany.com/blog/2012/12/06/the-random-repeat-digital-algorithms-extract-from-the-array</id>
    <content type="html"><![CDATA[<p>今天阅读订阅文章时发现了一个巧妙的从数组中抽取随机不重复数字的算法。譬如，在100个不重复的数字中选择10个不相同的数字，通过这个算法就不需要修改数组长度和删除数组元素等。具体算法如下：</p>

<p>```
int[] numbers = new int[100];
int[] selected = new int[10];</p>

<p>int n = numbers.length;
for (int i = 0; i &lt; selected.length; i++) {</p>

<pre><code>int idx = (int)(Math.random() * n);  // 随机产生一个从0 - (n-1)的数字
selected[i] = numbers[idx];
numbers[idx] = numbers[n - 1];
n--;  // 减1，从而在下次循环时产生的随机的numbers数组下标的范围从0 - (n-1)-1，
      // 保证了上一步中已经赋值给数组中其它数的numbers[n-1]不会在下次循环中给
      // 取得，确保了产生的数组selected中的数为不重复的。
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现用户注册的功能]]></title>
    <link href="http://codemany.com/blog/2012/09/22/register-functions/"/>
    <updated>2012-09-22T11:11:25+08:00</updated>
    <id>http://codemany.com/blog/2012/09/22/register-functions</id>
    <content type="html"><![CDATA[<p>已经两个星期没有更新代码了，这次来给加上用户注册的功能。</p>

<p>先在User.java中添加confirmPassword字段。然后在UserDao.java中添加保存用户的代码：<br />
```
public void addUser(User user) {<br /></p>

<pre><code>Session session = sessionFactory.openSession();&lt;br /&gt;
Transaction ts = null;&lt;br /&gt;
try {&lt;br /&gt;
    ts = session.beginTransaction();&lt;br /&gt;
    session.save(user);&lt;br /&gt;
    ts.commit();&lt;br /&gt;
} finally {&lt;br /&gt;
    session.close();&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在UserService.java中添加以下代码：<br />
```
public void addUser(User user) throws UserAlreadyExistsException {<br /></p>

<pre><code>User u = getUser(user.getUsername());&lt;br /&gt;
if (u != null) {&lt;br /&gt;
    //register.user.already.exists&lt;br /&gt;
    throw new UserAlreadyExistsException();&lt;br /&gt;
}&lt;br /&gt;
userDao.addUser(user);&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>其中UserAlreadyExistsException.java代码如下：<br />
```
package com.codemany.account.service;</p>

<p>public class UserAlreadyExistsException extends Exception {<br /></p>

<pre><code>private static final long serialVersionUID = -7518737598462419360L;

public UserAlreadyExistsException() {&lt;br /&gt;
    super();&lt;br /&gt;
}

public UserAlreadyExistsException(String message) {&lt;br /&gt;
    super(message);&lt;br /&gt;
}

public UserAlreadyExistsException(String message, Throwable cause) {&lt;br /&gt;
    super(message, cause);&lt;br /&gt;
}

public UserAlreadyExistsException(Throwable cause) {&lt;br /&gt;
    super(cause);&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在applicationContext.xml中加上一个bean：<br />
```
<bean id="registerAction" scope="prototype"<br /></p>

<pre><code>    class="com.codemany.account.action.RegisterAction"&gt;
&lt;property name="userService" ref="userService" /&gt;
</code></pre>

<p></bean>
```</p>

<p>然后在account.xml中添加register动作，并修改login动作相应的页面：<br />
```
<action name="login" class="loginAction"></p>

<pre><code>&lt;result name="success"&gt;/index.jsp&lt;/result&gt;
&lt;result name="input"&gt;/login.jsp&lt;/result&gt;
</code></pre>

<p></action></p>

<p><action name="register" class="registerAction"></p>

<pre><code>&lt;result name="success"&gt;/index.jsp&lt;/result&gt;
&lt;result name="input"&gt;/register.jsp&lt;/result&gt;
</code></pre>

<p></action>
```</p>

<p>建立RegisterAction.java类：<br />
```
package com.codemany.account.action;</p>

<p>import com.codemany.account.model.User;<br />
import com.codemany.account.service.UserAlreadyExistsException;<br />
import com.codemany.account.service.UserService;</p>

<p>import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class RegisterAction extends ActionSupport {<br /></p>

<pre><code>private static final long serialVersionUID = 7021982816578678150L;

private User user;

private UserService userService;

public String execute() throws Exception {&lt;br /&gt;
    try {&lt;br /&gt;
        userService.addUser(user);&lt;br /&gt;
    } catch (UserAlreadyExistsException e) {&lt;br /&gt;
        return INPUT;&lt;br /&gt;
    }&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}

public User getUser() {&lt;br /&gt;
    return user;&lt;br /&gt;
}

public void setUser(User user) {&lt;br /&gt;
    this.user = user;&lt;br /&gt;
}

public void setUserService(UserService userService) {&lt;br /&gt;
    this.userService = userService;&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>新建校验配置文件。先是对应RegisterAction类的RegisterAction-validation.xml配置：<br />
```
&lt;!DOCTYPE validators PUBLIC<br /></p>

<pre><code>"-//OpenSymphony Group//XWork Validator 1.0.2//EN"&lt;br /&gt;
"http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd"&gt;
</code></pre>

<p><validators></p>

<pre><code>&lt;field name="user"&gt;
    &lt;field-validator type="visitor"&gt;
        &lt;param name="appendPrefix"&gt;true&lt;/param&gt;
        &lt;message /&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre>

<p></validators>
```</p>

<p>这里的校验使用了visitor类型，它是用于检测action里的复合属性的。这里的复合属性是User，所以要在User.java同一个目录下建立校验配置文件User-validation.xml，内容如下：<br />
```
&lt;!DOCTYPE validators PUBLIC<br /></p>

<pre><code>"-//OpenSymphony Group//XWork Validator 1.0.2//EN"&lt;br /&gt;
"http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd"&gt;
</code></pre>

<p><validators></p>

<pre><code>&lt;field name="username"&gt;
    &lt;field-validator type="requiredstring"&gt;
        &lt;message&gt;Username is required&lt;/message&gt;
    &lt;/field-validator&gt;
    &lt;field-validator type="stringlength"&gt;
        &lt;param name="minLength"&gt;2&lt;/param&gt;
        &lt;param name="maxLength"&gt;20&lt;/param&gt;
        &lt;message&gt;Username must be between ${minLength} and ${maxLength} characters&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;

&lt;field name="password"&gt;
    &lt;field-validator type="requiredstring"&gt;
        &lt;message&gt;Password is required&lt;/message&gt;
    &lt;/field-validator&gt;
    &lt;field-validator type="stringlength"&gt;
        &lt;param name="minLength"&gt;6&lt;/param&gt;
        &lt;param name="maxLength"&gt;50&lt;/param&gt;
        &lt;message&gt;Password must be between ${minLength} and ${maxLength} characters&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;

&lt;field name="confirmPassword"&gt;
    &lt;field-validator type="fieldexpression"&gt;
        &lt;param name="expression"&gt;confirmPassword.equals(password)&lt;/param&gt;
        &lt;message&gt;Password does not match the confirm password&lt;/message&gt;
    &lt;/field-validator&gt;
&lt;/field&gt;
</code></pre>

<p></validators>
```</p>

<p>修改index.jsp，将登录表单移到单独的login.jsp页面中:<br />
```
&lt;%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8" %></p>

<p>&lt;%@ taglib uri="/struts-tags" prefix="s" %></p>

<p>&lt;!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>JBookShelf</title>
</head></p>

<p><body></p>

<pre><code>&lt;s:if test="#session.logined"&gt;
    Welcome, you have logined.&lt;br /&gt;
    &lt;a href="&lt;%= request.getContextPath() %&gt;/logout.action"&gt;Logout&lt;/a&gt;
&lt;/s:if&gt;
&lt;s:else&gt;
    &lt;a href="&lt;%= request.getContextPath() %&gt;/login!input.action"&gt;Login&lt;/a&gt; |&lt;br /&gt;
    &lt;a href="&lt;%= request.getContextPath() %&gt;/register!input.action"&gt;Register&lt;/a&gt;
&lt;/s:else&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>这里是登录页面login.jsp，首页index.jsp中的登录表单就是被移到这个文件中：<br />
```
&lt;%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8" %></p>

<p>&lt;%@ taglib uri="/struts-tags" prefix="s" %></p>

<p>&lt;!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Login</title>
</head></p>

<p><body></p>

<pre><code>&lt;p&gt;User: test/test&lt;/p&gt;
&lt;s:form action="login"&gt;
    &lt;s:textfield key="username" label="Username" /&gt;
    &lt;s:password key="password" label="Password" /&gt;
    &lt;s:submit value="Login" /&gt;
&lt;/s:form&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>注册页面register.jsp，负责生成注册时的表单：<br />
```
&lt;%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8" %></p>

<p>&lt;%@ taglib uri="/struts-tags" prefix="s" %></p>

<p>&lt;!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Register</title>
</head></p>

<p><body></p>

<pre><code>&lt;s:form action="register"&gt;
    &lt;s:textfield key="user.username" label="Username" /&gt;
    &lt;s:password key="user.password" label="Password" /&gt;
    &lt;s:password key="user.confirmPassword" label="Password Confirmation" /&gt;
    &lt;s:submit value="Register" /&gt;
&lt;/s:form&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Spring 3 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample/"/>
    <updated>2012-09-04T06:54:27+08:00</updated>
    <id>http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>在pom.xml中添加依赖包：<br />
```
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-web&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency></p>

<!-- 没有这个plugin包会导致Spring无法注入bean到Struts 2的Action中 -->


<p><dependency></p>

<pre><code>&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
&lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;
&lt;version&gt;2.3.4.1&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>配置web.xml文件：<br />
```
&lt;context-param></p>

<pre><code>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
</code></pre>

<p>&lt;/context-param></p>

<p><listener></p>

<pre><code>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>删除hibernate.cfg.xml，添加applicationContext.xml，内容为：<br />
```
&lt;?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"<br /></p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;
xsi:schemaLocation="http://www.springframework.org/schema/beans&lt;br /&gt;
    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;!-- DriverManagerDataSource在每个连接请求时都新建一个connection。&lt;br /&gt;
     与DBCP的BasicDataSource不同，DriverManagerDataSource提供的连接没有进行池管理 --&gt;
&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
    &lt;property name="url" value="jdbc:mysql://localhost:3306/jbookshelf" /&gt;
    &lt;property name="username" value="root" /&gt;
    &lt;property name="password" value="123456" /&gt;
&lt;/bean&gt;

&lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
            &lt;prop key="hibernate.connection.pool_size"&gt;1&lt;/prop&gt;
            &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;
            &lt;prop key="hibernate.cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/prop&gt;
            &lt;prop key="show_sql"&gt;true&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
    &lt;property name="mappingResources"&gt;
        &lt;list&gt;
            &lt;value&gt;com/codemany/account/model/User.hbm.xml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="userDao" class="com.codemany.account.dao.UserDao"&gt;
    &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
&lt;/bean&gt;

&lt;!-- Struts 2的action是有状态的，必须显示设置scope为prototype，每次请求过来都会创建一个action --&gt;
&lt;bean id="loginAction" class="com.codemany.account.action.LoginAction" scope="prototype"&gt;
    &lt;property name="userDao" ref="userDao" /&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>删除HibernateUtil.java，修改UserDao.java为以下内容：<br />
```
package com.codemany.account.dao;</p>

<p>import org.hibernate.Query;<br />
import org.hibernate.Session;<br />
import org.hibernate.SessionFactory;</p>

<p>import com.codemany.account.model.User;</p>

<p>public class UserDao {<br /></p>

<pre><code>// Spring 3集成Hibernate 4不再需要HibernateDaoSupport或HibernateTemplate了，&lt;br /&gt;
// 直接使用原生API即可。&lt;br /&gt;
private SessionFactory sessionFactory;

public void setSessionFactory(SessionFactory sessionFactory) {&lt;br /&gt;
    this.sessionFactory = sessionFactory;&lt;br /&gt;
}

public User getUser(String username) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from User u where u.username = ?");&lt;br /&gt;
        query.setString(0, username);&lt;br /&gt;
        query.setMaxResults(1);&lt;br /&gt;
        return (User)query.uniqueResult();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在struts.xml中将action元素中login的class属性改为applicationContext.xml配置文件中的loginAction： <br />
```
<action name="login" class="loginAction"></p>

<pre><code>&lt;result name="success"&gt;/index.jsp&lt;/result&gt;
&lt;result name="input"&gt;/index.jsp&lt;/result&gt;
</code></pre>

<p></action>
```</p>

<p>修改LoginAction.java的代码：<br />
```
package com.codemany.account.action;</p>

<p>import com.codemany.account.dao.UserDao;<br />
import com.codemany.account.model.User;</p>

<p>import com.opensymphony.xwork2.ActionContext;<br />
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class LoginAction extends ActionSupport {<br /></p>

<pre><code>private static final long serialVersionUID = -389833745243649130L;

private String username;&lt;br /&gt;
private String password;

private UserDao userDao;

public String execute() throws Exception {&lt;br /&gt;
    if (username == null || username.length() == 0&lt;br /&gt;
            || password == null || password.length() == 0) {&lt;br /&gt;
        return INPUT;&lt;br /&gt;
    }

    User u = userDao.getUser(username);&lt;br /&gt;
    if (u == null || !password.equals(u.getPassword())) {&lt;br /&gt;
        return INPUT;&lt;br /&gt;
    }

    ActionContext.getContext().getSession().put("logined", true);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}

public void setUsername(String username) {&lt;br /&gt;
    this.username = username;&lt;br /&gt;
}

public void setPassword(String password) {&lt;br /&gt;
    this.password = password;&lt;br /&gt;
}

public void setUserDao(UserDao userDao) {&lt;br /&gt;
    this.userDao = userDao;&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
</feed>
