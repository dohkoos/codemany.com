<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Spring | 乐者为王]]></title>
  <link href="http://codemany.com/tags/spring/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-13T18:49:25+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Spring 3 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample/"/>
    <updated>2012-09-04T06:54:27+08:00</updated>
    <id>http://codemany.com/blog/2012/09/04/struts2-spring3-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>在pom.xml中添加依赖包：<br />
```
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-web&lt;/artifactId&gt;
&lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
</code></pre>

<p></dependency></p>

<!-- 没有这个plugin包会导致Spring无法注入bean到Struts 2的Action中 -->


<p><dependency></p>

<pre><code>&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
&lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;
&lt;version&gt;2.3.4.1&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>配置web.xml文件：<br />
```
&lt;context-param></p>

<pre><code>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
</code></pre>

<p>&lt;/context-param></p>

<p><listener></p>

<pre><code>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>删除hibernate.cfg.xml，添加applicationContext.xml，内容为：<br />
```
&lt;?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"<br /></p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;
xsi:schemaLocation="http://www.springframework.org/schema/beans&lt;br /&gt;
    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;!-- DriverManagerDataSource在每个连接请求时都新建一个connection。&lt;br /&gt;
     与DBCP的BasicDataSource不同，DriverManagerDataSource提供的连接没有进行池管理 --&gt;
&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
    &lt;property name="url" value="jdbc:mysql://localhost:3306/jbookshelf" /&gt;
    &lt;property name="username" value="root" /&gt;
    &lt;property name="password" value="123456" /&gt;
&lt;/bean&gt;

&lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
            &lt;prop key="hibernate.connection.pool_size"&gt;1&lt;/prop&gt;
            &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;
            &lt;prop key="hibernate.cache.provider_class"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/prop&gt;
            &lt;prop key="show_sql"&gt;true&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
    &lt;property name="mappingResources"&gt;
        &lt;list&gt;
            &lt;value&gt;com/codemany/account/model/User.hbm.xml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="userDao" class="com.codemany.account.dao.UserDao"&gt;
    &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
&lt;/bean&gt;

&lt;!-- Struts 2的action是有状态的，必须显示设置scope为prototype，每次请求过来都会创建一个action --&gt;
&lt;bean id="loginAction" class="com.codemany.account.action.LoginAction" scope="prototype"&gt;
    &lt;property name="userDao" ref="userDao" /&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>删除HibernateUtil.java，修改UserDao.java为以下内容：<br />
```
package com.codemany.account.dao;</p>

<p>import org.hibernate.Query;<br />
import org.hibernate.Session;<br />
import org.hibernate.SessionFactory;</p>

<p>import com.codemany.account.model.User;</p>

<p>public class UserDao {<br /></p>

<pre><code>// Spring 3集成Hibernate 4不再需要HibernateDaoSupport或HibernateTemplate了，&lt;br /&gt;
// 直接使用原生API即可。&lt;br /&gt;
private SessionFactory sessionFactory;

public void setSessionFactory(SessionFactory sessionFactory) {&lt;br /&gt;
    this.sessionFactory = sessionFactory;&lt;br /&gt;
}

public User getUser(String username) {&lt;br /&gt;
    Session session = sessionFactory.openSession();&lt;br /&gt;
    try {&lt;br /&gt;
        Query query = session.createQuery("from User u where u.username = ?");&lt;br /&gt;
        query.setString(0, username);&lt;br /&gt;
        query.setMaxResults(1);&lt;br /&gt;
        return (User)query.uniqueResult();&lt;br /&gt;
    } finally {&lt;br /&gt;
        session.close();&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>在struts.xml中将action元素中login的class属性改为applicationContext.xml配置文件中的loginAction： <br />
```
<action name="login" class="loginAction"></p>

<pre><code>&lt;result name="success"&gt;/index.jsp&lt;/result&gt;
&lt;result name="input"&gt;/index.jsp&lt;/result&gt;
</code></pre>

<p></action>
```</p>

<p>修改LoginAction.java的代码：<br />
```
package com.codemany.account.action;</p>

<p>import com.codemany.account.dao.UserDao;<br />
import com.codemany.account.model.User;</p>

<p>import com.opensymphony.xwork2.ActionContext;<br />
import com.opensymphony.xwork2.ActionSupport;</p>

<p>public class LoginAction extends ActionSupport {<br /></p>

<pre><code>private static final long serialVersionUID = -389833745243649130L;

private String username;&lt;br /&gt;
private String password;

private UserDao userDao;

public String execute() throws Exception {&lt;br /&gt;
    if (username == null || username.length() == 0&lt;br /&gt;
            || password == null || password.length() == 0) {&lt;br /&gt;
        return INPUT;&lt;br /&gt;
    }

    User u = userDao.getUser(username);&lt;br /&gt;
    if (u == null || !password.equals(u.getPassword())) {&lt;br /&gt;
        return INPUT;&lt;br /&gt;
    }

    ActionContext.getContext().getSession().put("logined", true);&lt;br /&gt;
    return SUCCESS;&lt;br /&gt;
}

public void setUsername(String username) {&lt;br /&gt;
    this.username = username;&lt;br /&gt;
}

public void setPassword(String password) {&lt;br /&gt;
    this.password = password;&lt;br /&gt;
}

public void setUserDao(UserDao userDao) {&lt;br /&gt;
    this.userDao = userDao;&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPA + Spring 2入门]]></title>
    <link href="http://codemany.com/blog/2007/08/10/jpa-spring-2-entry/"/>
    <updated>2007-08-10T18:33:42+08:00</updated>
    <id>http://codemany.com/blog/2007/08/10/jpa-spring-2-entry</id>
    <content type="html"><![CDATA[<p><strong>配置JPA</strong><br />Spring JPA提供了两种方法创建JPA EntityManagerFactory<br /><beans><br />    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean"><br />        <property name="persistenceUnitName" value="myPersistenceUnit" /><br />    </bean><br /></beans><br />FactoryBean创建的EntityManagerFactory适用于仅通过JPA进行数据访问的环境。由于使用了PersistenceProvider自动侦测机制，所以只能从默认路径classpath:META-INF/persistence.xml中读取配置信息。<br /><br /><beans><br />    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"><br />        <property name="dataSource" ref="someDataSource" /><br />        <property name="loadTimeWeaver"><br />            <bean class="org.springframework.instrument.classloading.SimpleLoadTimeWeaver" /><br />        </property><br />    </bean><br /></beans><br />FactoryBean提供了对JPA EntityManagerFactory的完整控制，非常适合那种有简单定制需要的环境。你可以处理多个persistence.xml配置文件；覆盖persistence.xml文件的默认路径；可以传递Spring托管的JDBC DataSource给JPA PersistenceProvider，用来替代persistence.xml中的JDBC配置(这个Spring托管的DataSource通常被作为nonJtaDataSource传送给PersistenceProvider，并且覆盖persistence.xml中相同的nonJtaDataSource)。<br /><br /><strong>数据访问</strong><br />基于JPA的DAO可以通过三种方式进行数据访问JpaDaoSupport，JpaTemplate和plain JPA。其中JpaTemplate是plain JPA的封装，而JpaDaoSupport又是JpaTemplate的封装。无疑，使用不对Spring产生任何依赖的Plain JPA的API进行编程是最好选择。<br />public class ProductDaoImpl implements ProductDao {<br />    private EntityManager entityManager = null;<br /><br />    @PersistenceContext<br />    public void setEntityManager(EntityManager entityManager) {<br />        this.entityManager = entityManager;<br />    }<br /><br />    public Collection loadProductsByCategory(String category) {<br />         Query query = em.createQuery("from Product as p where p.category = :category");<br />         query.setParameter("category", category);<br />         return query.getResultList();<br />    }<br />}<br />注意，必须激活PersistenceAnnotationBeanPostProcessor功能才能让Spring识别@PersistenceContext注解。<br /><beans><br />    <!-- JPA annotations bean post processor --><br />    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/><br /><br />    <bean id="myProductDao" class="product.ProductDaoImpl" /><br /></beans><br /><br /><strong>异常转化</strong><br />Spring提供了一个允许通过使用@Repository注解进行透明的异常转化的解决方案。<br />@Repository<br />public class ProductDaoImpl implements ProductDao {<br />    ...<br />}<br /><br /><beans><br />    <!-- Exception translation bean post processor --><br />    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" /><br /><br />    <bean id="myProductDao" class="product.ProductDaoImpl" /><br /></beans><br />后置处理器将自动的寻找所有的异常转化器(PersistenceExceptionTranslator这个接口的实现类)并通知所有打上@Repository注解的bean，从而能够使得被找到的异常转化器能够在抛出异常时做相应的异常转化工作。<br /><br />总结来说：DAO能够基于普通的Java持久层API和注解来实现，但同样也能享受到由Spring管理事务、IoC和透明的异常转化(转化成为Spring的异常体系)等好处。</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成P6Spy到Spring后没有产生log文件的问题的解决]]></title>
    <link href="http://codemany.com/blog/2007/01/22/integrated-p6spy-to-spring-did-not-have-a-log-file-problem/"/>
    <updated>2007-01-22T17:41:32+08:00</updated>
    <id>http://codemany.com/blog/2007/01/22/integrated-p6spy-to-spring-did-not-have-a-log-file-problem</id>
    <content type="html"><![CDATA[<p>网上关于集成p6spy到spring的帖子说：在spring的配置文件中添加<br /><bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource" destroy-method="close"><br />    &lt;constructor-arg ref="dataSourceTarget" /><br /></bean><br />然后将原来dataSource bean definition的id值改为dataSourceTarget，如下：<br /><bean id="myDataSourceTarget" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"><br />    ...<br /></bean><br />但是照着这样做了以后却发现没有生成log文件。下载p6spy的源代码进行阅读之后终于找到了问题所在（我的<br />syp.properties放在了C:\Tomcat 5.5\webapps\p6spy\WEB-INF\classes目录下）。<br />打开P6Util.java文件，在classPathFile方法中有这样一条语句（file的值就是spy.properties）<br />fp = classLoadPropertyFile(Thread.currentThread().getContextClassLoader().getResource(file))<br />它调用web容器Tomcat的classloader来取得资源文件，通常web容器默认编码是iso-8859-1，<br />所以它返回的URL的file值是C:/Tomcat%205.5/webapps/netlink/WEB-INF/classes/spy.properties，<br />其中Tomcat 5.5中的空格被编码成了%20。<br />接着在classLoadPropertyFile方法中p6spy就直接使用了URL的file值来创建File对象，而没有使用任何的编码格式，</p>

<pre><code>public static File classLoadPropertyFile(java.net.URL purl) {&lt;br /&gt;        try {&lt;br /&gt;            if (purl != null) {&lt;br /&gt;                // modified by jayakumar for JDK 1.2 support&lt;br /&gt;                //return new File(purl.getPath());&lt;br /&gt;                return new File(getPath(purl));&lt;br /&gt;                // end of modification&lt;br /&gt;            }&lt;br /&gt;        } catch (Exception e) {&lt;br /&gt;            // we ignore this, since JDK 1.2 does not suppport this method&lt;br /&gt;        }&lt;br /&gt;        return null;&lt;br /&gt;    }
</code></pre>

<p>然后在classPathFile方法中通过判断fp.exists()来决定是否返回log文件的路径。因为使用的中文操作系统，<br />本地编码是gbk，可以知道fp.exists()肯定不可能为true了，因此log文件也就不可能被创建了。那么该怎样解<br />决这个问题呢？其实我们只要将classLoadPropertyFile()方法中的return new File(getPath(purl))改成<br />return new File(URLDecoder.decode(getPath(purl)))就可以了。</p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DbUnit结合Spring进行SqlMap的单元测试]]></title>
    <link href="http://codemany.com/blog/2006/04/11/spring-for-dbunit-combination-of-unit-testing-sqlmap/"/>
    <updated>2006-04-11T04:39:04+08:00</updated>
    <id>http://codemany.com/blog/2006/04/11/spring-for-dbunit-combination-of-unit-testing-sqlmap</id>
    <content type="html"><![CDATA[<p>使用DbUnit，开发人员可以控制测试数据库的状态。进行一个DAO单元测试之前，DbUnit为数据库准备好初始化数据；而在测试结束时，DbUnit会把数据库状态恢复到测试前的状态。下面的例子使用DbUnit为SqlMap编写单元测试。</p>

<p>SqlMap映射文件如下所示：<br />
```
<select id="getUser" parameterClass="String" resultClass="User"></p>

<pre><code>SELECT username, password, first_name, last_name&lt;br /&gt;
FROM user WHERE username = #username#
</code></pre>

<p></select></p>

<p><delete id="removeUser" parameterClass="String"></p>

<pre><code>DELETE FROM user WHERE username = #username#
</code></pre>

<p></delete></p>

<p><update id="updateUser" parameterClass="User"></p>

<pre><code>UPDATE user SET&lt;br /&gt;
    password = #password#,&lt;br /&gt;
    first_name = #firstName#,&lt;br /&gt;
    last_name = #lastName#&lt;br /&gt;
WHERE username =#username#
</code></pre>

<p></update></p>

<p><insert id="insertUser" parameterClass="User"></p>

<pre><code>INSERT INTO user (username, password, first_name, last_name)&lt;br /&gt;
VALUES (#username#, #password#, #firstName#, #lastName#)
</code></pre>

<p></insert>
```</p>

<p>SqlMapConfig配置文件内容如下：<br />
```
<sqlMapConfig></p>

<pre><code>&lt;settings lazyLoadingEnabled="true"&lt;br /&gt;
          cacheModelsEnabled="true"&lt;br /&gt;
          enhancementEnabled="true"&lt;br /&gt;
          maxSessions="64"&lt;br /&gt;
          maxTransactions="8"&lt;br /&gt;
          maxRequests="128" /&gt;

&lt;sqlMap resource="org/dbunit/example/dao/impl/sql/UserSQL.xml" /&gt;
</code></pre>

<p></sqlMapConfig>
```</p>

<p>首先，要为单元测试准备测试数据。我们可以用DbUnit的Flat XML格式来准备测试数据集。下面的XML文件称为目标数据库的Seed File，它为测试准备了两个User数据。其中元素名user对应数据库的表名，属性username，password，first_name和last_name是表user的列名，属性值就是记录值。<br />
```
&lt;?xml version="1.0" encoding="utf-8"?>
<dataset></p>

<pre><code>&lt;user username="john"&lt;br /&gt;
    password="john"&lt;br /&gt;
    first_name="dbunit"&lt;br /&gt;
    last_name="john" /&gt;

&lt;user username="peter"&lt;br /&gt;
    password="peter"&lt;br /&gt;
    first_name="ibatis"&lt;br /&gt;
    last_name="peter" /&gt;
</code></pre>

<p></dataset>
```</p>

<p>缺省情况下，DbUnit在单元测试开始之前执行CLEAN_INSERT操作，删除Seed File中所有表的数据，并导入Seed File的测试数据。我们可以通过覆盖getSetUpOperation()和getTearDownOperation()方法来控制单元测试前和测试后的数据库状态。一种高效的实施方案就是让getSetUpOperation()方法执行REFRESH操作，通过执行这个操作，我们可以用Seed File中的数据去更新目标数据库里的数据。接下来，就是getTearDownOperation()，让他执行一个NONE操作，也就是什么也不执行。<br />
```
protected DatabaseOperation getSetUpOperation() throws Exception {<br /></p>

<pre><code>return DatabaseOperation.REFRESH;&lt;br /&gt;
</code></pre>

<p>}</p>

<p>protected DatabaseOperation getTearDownOperation() throws Exception {<br /></p>

<pre><code>return DatabaseOperation.NONE;&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>为了方便测试，我们为SqlMap的单元测试编写一个抽象的测试基类，代码如下：<br />
```
public abstract class SqlMapTestCase extends DatabaseTestCase {<br /></p>

<pre><code>protected SqlMapClient sqlMapClient = null;&lt;br /&gt;
protected Properties props = new Properties();

protected IDatabaseConnection getConnection() throws Exception {&lt;br /&gt;
    props.load(Resources.getResourceAsStream("properties/database.properties"));

    Class.forName(props.getProperty("driver"));&lt;br /&gt;
    Connection conn = DriverManager.getConnection(props.getProperty("url"),&lt;br /&gt;
            props.getProperty("username"), props.getProperty("password"));&lt;br /&gt;
    return new DatabaseConnection(conn);&lt;br /&gt;
}

protected IDataSet getDataSet() throws Exception {&lt;br /&gt;
    String resource = "org/dbunit/example/dao/impl/sql/dataset.xml";&lt;br /&gt;
    return new FlatXmlDataSet(Resources.getResourceAsStream(resource));&lt;br /&gt;
}

protected void setUp() throws Exception {&lt;br /&gt;
    super.setUp();

    // Build the SqlMapClient&lt;br /&gt;
    Reader reader = Resources.getResourceAsReader("sql-map-config.xml");&lt;br /&gt;
    sqlMapClient = SqlMapClientBuilder.buildSqlMapClient(reader);

    // Tell the SqlMapClient to use the given DataSource&lt;br /&gt;
    DataSource dataSource = getDataSource();&lt;br /&gt;
    TransactionConfig transactionConfig = getTransactionConfig(dataSource);&lt;br /&gt;
    // Apply the given TransactionConfig to the SqlMapClient&lt;br /&gt;
    applyTransactionConfig(sqlMapClient, transactionConfig);&lt;br /&gt;
}

protected void tearDown() throws Exception {&lt;br /&gt;
    super.tearDown();

    if (sqlMapClient != null) {&lt;br /&gt;
        DataSource ds = sqlMapClient.getDataSource();&lt;br /&gt;
        Connection conn = ds.getConnection();&lt;br /&gt;
        conn.close();&lt;br /&gt;
    }&lt;br /&gt;
}

private DataSource getDataSource() throws Exception {&lt;br /&gt;
    DriverManagerDataSource dataSource = new DriverManagerDataSource();&lt;br /&gt;
    dataSource.setDriverClassName(props.getProperty("driver"));&lt;br /&gt;
    dataSource.setUrl(props.getProperty("url"));&lt;br /&gt;
    dataSource.setUsername(props.getProperty("username"));&lt;br /&gt;
    dataSource.setPassword(props.getProperty("password"));&lt;br /&gt;
    return dataSource;&lt;br /&gt;
}

private TransactionConfig getTransactionConfig(DataSource dataSource) throws Exception {&lt;br /&gt;
    Properties transactionConfigProperties = new Properties();&lt;br /&gt;
    transactionConfigProperties.setProperty("SetAutoCommitAllowed", "false");

    TransactionConfig transactionConfig = (TransactionConfig)ExternalTransactionConfig.class.newInstance();&lt;br /&gt;
    transactionConfig.setDataSource(dataSource);&lt;br /&gt;
    transactionConfig.initialize(transactionConfigProperties);&lt;br /&gt;
    return transactionConfig;&lt;br /&gt;
}

private void applyTransactionConfig(SqlMapClient sqlMapClient, TransactionConfig transactionConfig) {&lt;br /&gt;
    if (!(sqlMapClient instanceof ExtendedSqlMapClient)) {&lt;br /&gt;
        throw new IllegalArgumentException("Cannot set TransactionConfig with DataSource"&lt;br /&gt;
                + "for SqlMapClient if not of type ExtendedSqlMapClient: " + sqlMapClient);&lt;br /&gt;
    }&lt;br /&gt;
    ExtendedSqlMapClient extendedClient = (ExtendedSqlMapClient)sqlMapClient;&lt;br /&gt;
    transactionConfig.setMaximumConcurrentTransactions(extendedClient.getDelegate().getMaxTransactions());&lt;br /&gt;
    extendedClient.getDelegate().setTxManager(new TransactionManager(transactionConfig));&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>然后为每个SqlMap映射文件编写一个测试类，继承上面的抽象类：<br />
```
public class UserSqlMapTest extends SqlMapTestCase {</p>

<pre><code>public void testGetUser() throws Exception {&lt;br /&gt;
    User user = (User)sqlMapClient.queryForObject("getUser", "john");&lt;br /&gt;
    assertNotNull(user);&lt;br /&gt;
    assertEquals("john", user.getName());&lt;br /&gt;
}&lt;br /&gt;
</code></pre>

<p>}
```</p>

<p>如此就可以进行单元测试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步教你整合WebWork和Spring]]></title>
    <link href="http://codemany.com/blog/2005/09/26/teach-you-step-by-step-integration-of-webwork-and-spring/"/>
    <updated>2005-09-26T10:50:27+08:00</updated>
    <id>http://codemany.com/blog/2005/09/26/teach-you-step-by-step-integration-of-webwork-and-spring</id>
    <content type="html"><![CDATA[<p>拷贝webwork-2.1.7.jar、spring-1.2.1.jar以及webwork2-srping.jar到WEB-INF/lib目录下。</p>

<p>添加以下内容到web.xml文件中：
```
<listener></p>

<pre><code>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</code></pre>

<p></listener></p>

<p><listener></p>

<pre><code>&lt;listener-class&gt;com.atlassian.xwork.ext.ResolverSetupServletContextListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>applicationContext.xml中的内容如下：
```
<beans></p>

<pre><code>&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource"&gt;
    &lt;property name="driverClassName" value="${driver}" /&gt;
    &lt;property name="url" value="${url}" /&gt;
    &lt;property name="username" value="${username}" /&gt;
    &lt;property name="password" value="${password}" /&gt;
&lt;/bean&gt;

&lt;bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"&gt;
    &lt;property name="configLocation" value="/WEB-INF/sql-map-config.xml" /&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
&lt;/bean&gt;

&lt;bean id="userManager" class="com.example.integration.service.impl.UserManagerImpl" singleton="true"&gt;
    &lt;property name="sqlMapClient" ref="sqlMapClient" /&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>配置文件sql-map-config.xml中的内容如下：
```
<sqlMapConfig></p>

<pre><code>&lt;sqlMap resource="com/example/integration/persistence/sql/User.xml" /&gt;
</code></pre>

<p></sqlMapConfig>
```</p>

<p>在xwork.xml中添加以下内容：
```
&lt;package name="default" extends="webwork-default"</p>

<pre><code>    externalReferenceResolver="com.atlassian.xwork.ext.SpringServletContextReferenceResolver"&gt;

&lt;interceptors&gt;
    &lt;interceptor name="reference-resolver"
            class="com.opensymphony.xwork.interceptor.ExternalReferencesInterceptor" /&gt;

    &lt;interceptor-stack name="interceptors"&gt;
        &lt;interceptor-ref name="params" /&gt;
        &lt;interceptor-ref name="reference-resolver" /&gt;
    &lt;/interceptor-stack&gt;
&lt;/interceptors&gt;

&lt;default-interceptor-ref name="default-interceptor" /&gt;

&lt;action name="login" class="com.example.integration.presentation.LoginAction"&gt;
    &lt;external-ref name="userManager"&gt;userManager&lt;/external-ref&gt;
    &lt;result name="success" type="dispatcher"&gt;/success.jsp&lt;/result&gt;
    &lt;result name="error" type="dispatcher"&gt;/error.jsp&lt;/result&gt;
&lt;/action&gt;
</code></pre>

<p></package>
```</p>

<p>在LoginAction.java中添加代码：
```
private UserManager userManager = null;</p>

<p>public void setUserManager(UserManager userManager) {</p>

<pre><code>this.userManager = userManager;
</code></pre>

<p>}
```</p>

<p>建立UserManager.java接口文件：
```
public interface UserManager {</p>

<pre><code>public User login(String username, String password) throws UserLoginException;
</code></pre>

<p>}
```</p>

<p>UserManagerImpl.java实现代码：
```
public class UserManagerImpl extends SqlMapClientDaoSupport implements UserManager {</p>

<pre><code>public User login(String username, String password) throws UserLoginException {
    // do something
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
