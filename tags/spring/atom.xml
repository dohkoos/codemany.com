<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Spring | 乐者为王]]></title>
  <link href="http://codemany.com/tags/spring/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-05-01T15:17:52+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts 2 + Spring 3 + Hibernate 4登录实例]]></title>
    <link href="http://codemany.com/blog/struts2-spring3-hibernate4-login-sample/"/>
    <updated>2012-09-04T06:54:27+08:00</updated>
    <id>http://codemany.com/blog/struts2-spring3-hibernate4-login-sample</id>
    <content type="html"><![CDATA[<p>在pom.xml中添加Spring的依赖包：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
    &lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
    &lt;version&gt;3.1.2.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- 注意：没有这个plugin包会导致Spring无法注入bean到Struts 2的Action中 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
    &lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.3.4.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div>
<p>配置web.xml文件，加上Spring的监听器：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre></div>
<p>删除hibernate.cfg.xml，添加applicationContext.xml，内容为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;!-- DriverManagerDataSource在每个连接请求时都新建一个connection。
         与DBCP的BasicDataSource不同，DriverManagerDataSource提供的连接没有进行池管理 --&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/jbookshelf&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
        &lt;property name=&quot;hibernateProperties&quot;&gt;
            &lt;props&gt;
                &lt;prop key=&quot;hibernate.connection.pool_size&quot;&gt;1&lt;/prop&gt;
                &lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;
                &lt;prop key=&quot;hibernate.cache.provider_class&quot;&gt;org.hibernate.cache.internal.NoCacheProvider&lt;/prop&gt;
                &lt;prop key=&quot;show_sql&quot;&gt;true&lt;/prop&gt;
            &lt;/props&gt;
        &lt;/property&gt;
        &lt;property name=&quot;mappingResources&quot;&gt;
            &lt;list&gt;
                &lt;value&gt;com/codemany/account/model/User.hbm.xml&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;userDao&quot; class=&quot;com.codemany.account.dao.UserDao&quot;&gt;
        &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;
    &lt;/bean&gt;

    &lt;!-- Struts 2的action是有状态的，必须显式设置scope为prototype，这样每次请求过来都会创建新的action --&gt;
    &lt;bean id=&quot;loginAction&quot; class=&quot;com.codemany.account.action.LoginAction&quot; scope=&quot;prototype&quot;&gt;
        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>删除HibernateUtil.java，修改UserDao.java为以下内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.dao;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.codemany.account.model.User;

public class UserDao {
    // Spring 3集成Hibernate 4不再需要HibernateDaoSupport或HibernateTemplate了，
    // 直接使用原生API即可。
    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public User getUser(String username) {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery(&quot;from User u where u.username = ?&quot;);
            query.setString(0, username);
            query.setMaxResults(1);
            return (User)query.uniqueResult();
        } finally {
            session.close();
        }
    }
}
</code></pre></div>
<p>在struts.xml中将action元素中login的class属性改为applicationContext.xml配置文件中的loginAction：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;action name=&quot;login&quot; class=&quot;loginAction&quot;&gt;
    &lt;result name=&quot;success&quot;&gt;/index.jsp&lt;/result&gt;
    &lt;result name=&quot;input&quot;&gt;/index.jsp&lt;/result&gt;
&lt;/action&gt;
</code></pre></div>
<p>修改LoginAction.java的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package com.codemany.account.action;

import com.codemany.account.dao.UserDao;
import com.codemany.account.model.User;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class LoginAction extends ActionSupport {
    private static final long serialVersionUID = -389833745243649130L;

    private String username;
    private String password;

    private UserDao userDao;

    public String execute() throws Exception {
        if (username == null || username.length() == 0
                || password == null || password.length() == 0) {
            return INPUT;
        }

        User u = userDao.getUser(username);
        if (u == null || !password.equals(u.getPassword())) {
            return INPUT;
        }

        ActionContext.getContext().getSession().put(&quot;logined&quot;, true);
        return SUCCESS;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }
}
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPA + Spring 2入门]]></title>
    <link href="http://codemany.com/blog/getting-started-jpa-with-spring2/"/>
    <updated>2007-08-10T18:33:42+08:00</updated>
    <id>http://codemany.com/blog/getting-started-jpa-with-spring2</id>
    <content type="html"><![CDATA[<p>JPA（Java Persistence API）是EJB 3.0 新引入的一个把Java数据对象映射成关系数据库对象的数据持久化编程模型，它弥补了JDBC、ORM、EJB 2等在Java对象持久化方面的不足之处，并且非常易于使用。JPA可以被当作一个单独的 POJO（Plain Old Java Object）持续化使用，或者被集成到任意Java EE兼容的容器或其它的轻量级框架（例如Spring）等一起使用。</p>

<h3 id="配置jpa">配置JPA</h3>

<p>Spring提供了两种方法创建JPA的EntityManagerFactory对象。</p>

<p>方法1：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalEntityManagerFactoryBean&quot;&gt;
        &lt;property name=&quot;persistenceUnitName&quot; value=&quot;persistenceUnit&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>FactoryBean创建的EntityManagerFactory适用于仅通过JPA进行数据访问的环境。由于使用了PersistenceProvider自动侦测机制，所以只能从默认路径classpath:META-INF/persistence.xml中读取配置信息。</p>

<p>方法2：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;someDataSource&quot; /&gt;
        &lt;property name=&quot;loadTimeWeaver&quot;&gt;
            &lt;bean class=&quot;org.springframework.instrument.classloading.SimpleLoadTimeWeaver&quot; /&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>FactoryBean提供了对JPA EntityManagerFactory的完整控制，非常适合那种有简单定制需要的环境。你可以处理多个persistence.xml配置文件；覆盖persistence.xml文件的默认路径；可以传递Spring托管的JDBC DataSource给JPA PersistenceProvider，用来替代persistence.xml中的JDBC配置（这个Spring托管的DataSource通常被作为nonJtaDataSource传送给PersistenceProvider，并且覆盖persistence.xml中相同的nonJtaDataSource）。</p>

<h3 id="数据访问">数据访问</h3>

<p>基于JPA的DAO可以通过三种方式进行数据访问JpaDaoSupport，JpaTemplate和plain JPA。其中JpaTemplate是plain JPA的封装，而JpaDaoSupport又是JpaTemplate的封装。无疑，使用不对Spring产生任何依赖的Plain JPA的API进行编程是最好选择。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class ProductDaoImpl implements ProductDao {
    private EntityManager entityManager = null;

    @PersistenceContext
    public void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    public Collection loadProductsByCategory(String category) {
         Query query = em.createQuery(&quot;from Product as p where p.category = :category&quot;);
         query.setParameter(&quot;category&quot;, category);
         return query.getResultList();
    }
}
</code></pre></div>
<p>需要注意的是，必须激活PersistenceAnnotationBeanPostProcessor功能才能让Spring识别@PersistenceContext注解。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;!-- JPA annotations bean post processor --&gt;
    &lt;bean class=&quot;org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor&quot; /&gt;

    &lt;bean id=&quot;productDao&quot; class=&quot;com.codemany.netlink.dao.impl.ProductDaoImpl&quot; /&gt;
&lt;/beans&gt;
</code></pre></div>
<h3 id="异常转化">异常转化</h3>

<p>Spring提供了一个允许通过使用@Repository注解进行透明的异常转化的解决方案。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@Repository
public class ProductDaoImpl implements ProductDao {
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;!-- Exception translation bean post processor --&gt;
    &lt;bean class=&quot;org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor&quot; /&gt;
</code></pre></div>
<p>后置处理器将自动的寻找所有的异常转化器（PersistenceExceptionTranslator这个接口的实现类）并通知所有打上@Repository注解的bean，从而能够使得被找到的异常转化器能够在抛出异常时做相应的异常转化工作。</p>

<p>总的来说，DAO能够基于普通的Java持久层API和注解来实现，但同样也能享受到由Spring管理事务、IoC和透明的异常转化（转化成为Spring的异常体系）等好处。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成P6Spy到Spring后没有产生log文件的问题]]></title>
    <link href="http://codemany.com/blog/problem-does-not-generate-log-file-when-integrate-p6spy-into-spring/"/>
    <updated>2007-01-22T17:41:32+08:00</updated>
    <id>http://codemany.com/blog/problem-does-not-generate-log-file-when-integrate-p6spy-into-spring</id>
    <content type="html"><![CDATA[<p>网上关于集成P6Spy到Spring的帖子说：在Spring的配置文件中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;bean id=&quot;dataSource&quot; class=&quot;com.p6spy.engine.spy.P6DataSource&quot; destroy-method=&quot;close&quot;&gt;
    &lt;constructor-arg ref=&quot;dataSourceTarget&quot; /&gt;
&lt;/bean&gt;
</code></pre></div>
<p>然后将原来dataSource定义的id值改为dataSourceTarget：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;bean id=&quot;dataSourceTarget&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method=&quot;close&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;${driver}&quot; /&gt;
    &lt;property name=&quot;url&quot; value=&quot;${url}&quot; /&gt;
    &lt;property name=&quot;username&quot; value=&quot;${username}&quot; /&gt;
    &lt;property name=&quot;password&quot; value=&quot;${password}&quot; /&gt;
&lt;/bean&gt;
</code></pre></div>
<p>但是照着这样做了以后却发现没有生成log文件。</p>

<p>下载P6Spy的源代码进行阅读后找到了问题所在。打开P6Util.java文件，在classPathFile()方法中有这样一条语句：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">fp = classLoadPropertyFile(Thread.currentThread().getContextClassLoader().getResource(file))
</code></pre></div>
<p>getResource(file)用来读取spy.properties配置文件，file的值就是spy.properties的文件路径。我的syp.properties放在了C:\Tomcat 5.5\webapps\netlink\WEB-INF\classes目录下，所以它返回的值是C:/Tomcat%205.5/webapps/netlink/WEB-INF/classes/spy.properties，Tomcat 5.5中的空格被编码成了%20。然后在classLoadPropertyFile()方法中就直接使用该值来创建File对象。可想而知，肯定创建失败。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static File classLoadPropertyFile(java.net.URL purl) {
    try {
        if (purl != null) {
            // modified by jayakumar for JDK 1.2 support
            //return new File(purl.getPath());
            return new File(getPath(purl));
            // end of modification
        }
    } catch (Exception e) {
        // we ignore this, since JDK 1.2 does not suppport this method
    }
    return null;
}
</code></pre></div>
<p>在classPathFile()方法中通过判断fp.exists()来决定是否返回log文件的路径，既然上面创建File对象失败了，那fp.exists()肯定不可能为true了，log文件也就不可能被创建了。</p>

<p>解决问题的方法超简单，把Tomcat 5.5中的空格去掉就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DbUnit结合Spring进行SqlMap的单元测试]]></title>
    <link href="http://codemany.com/blog/sqlmap-unit-testing-with-spring-and-dbunit/"/>
    <updated>2006-04-11T20:39:04+08:00</updated>
    <id>http://codemany.com/blog/sqlmap-unit-testing-with-spring-and-dbunit</id>
    <content type="html"><![CDATA[<p>使用DbUnit，开发人员可以控制测试数据库的状态。进行一个DAO单元测试之前，DbUnit为数据库准备好初始化数据；而在测试结束时，DbUnit会把数据库状态恢复到测试前的状态。下面的例子使用DbUnit为SqlMap编写单元测试。</p>

<p>SqlMap映射文件User.xml的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;select id=&quot;getUser&quot; parameterClass=&quot;String&quot; resultClass=&quot;User&quot;&gt;
    SELECT username, password, first_name, last_name
    FROM user WHERE username = #username#
&lt;/select&gt;

&lt;delete id=&quot;removeUser&quot; parameterClass=&quot;String&quot;&gt;
    DELETE FROM user WHERE username = #username#
&lt;/delete&gt;

&lt;update id=&quot;updateUser&quot; parameterClass=&quot;User&quot;&gt;
    UPDATE user SET
        password = #password#,
        first_name = #firstName#,
        last_name = #lastName#
    WHERE username =#username#
&lt;/update&gt;

&lt;insert id=&quot;insertUser&quot; parameterClass=&quot;User&quot;&gt;
    INSERT INTO user (username, password, first_name, last_name)
    VALUES (#username#, #password#, #firstName#, #lastName#)
&lt;/insert&gt;
</code></pre></div>
<p>配置文件sql-map-config.xml中的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;sqlMapConfig&gt;
    &lt;settings lazyLoadingEnabled=&quot;true&quot;
              cacheModelsEnabled=&quot;true&quot;
              enhancementEnabled=&quot;true&quot;
              maxSessions=&quot;64&quot;
              maxTransactions=&quot;8&quot;
              maxRequests=&quot;128&quot; /&gt;

    &lt;sqlMap resource=&quot;com/codemany/netlink/dao/impl/User.xml&quot; /&gt;
&lt;/sqlMapConfig&gt;
</code></pre></div>
<p>首先，要为单元测试准备测试数据。我们可以用DbUnit的Flat XML格式来准备测试数据集。下面的XML文件称为目标数据库的Seed File，它为测试准备了两条数据。其中元素名user对应数据库的表名，属性username，password，first_name和last_name是表user的列名，属性值就是记录值。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;dataset&gt;
    &lt;user username=&quot;ford&quot;
        password=&quot;ford&quot;
        first_name=&quot;Henry&quot;
        last_name=&quot;Ford&quot; /&gt;

    &lt;user username=&quot;twain&quot;
        password=&quot;twain&quot;
        first_name=&quot;Mark&quot;
        last_name=&quot;twain&quot; /&gt;
&lt;/dataset&gt;
</code></pre></div>
<p>缺省情况下，DbUnit在单元测试开始之前执行CLEAN_INSERT操作，删除Seed File中所有表的数据，并导入Seed File的测试数据。我们可以通过覆盖getSetUpOperation()和getTearDownOperation()方法来控制单元测试前和测试后的数据库状态。一种高效的实施方案就是让getSetUpOperation()方法执行REFRESH操作，通过执行这个操作，我们可以用Seed File中的数据去更新目标数据库里的数据。接下来，就是getTearDownOperation()，让他执行一个NONE操作，也就是什么也不执行。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">protected DatabaseOperation getSetUpOperation() throws Exception {
    return DatabaseOperation.REFRESH;
}

protected DatabaseOperation getTearDownOperation() throws Exception {
    return DatabaseOperation.NONE;
}
</code></pre></div>
<p>为了方便测试，我们为SqlMap的单元测试编写一个抽象的测试基类，代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public abstract class SqlMapTestCase extends DatabaseTestCase {
    protected SqlMapClient sqlMapClient = null;
    protected Properties props = new Properties();

    protected IDatabaseConnection getConnection() throws Exception {
        props.load(Resources.getResourceAsStream(&quot;properties/database.properties&quot;));

        Class.forName(props.getProperty(&quot;driver&quot;));
        Connection conn = DriverManager.getConnection(props.getProperty(&quot;url&quot;),
                props.getProperty(&quot;username&quot;), props.getProperty(&quot;password&quot;));
        return new DatabaseConnection(conn);
    }

    protected IDataSet getDataSet() throws Exception {
        String resource = &quot;com/codemany/netlink/dao/impl/dataset.xml&quot;;
        return new FlatXmlDataSet(Resources.getResourceAsStream(resource));
    }

    protected void setUp() throws Exception {
        super.setUp();

        // Build the SqlMapClient
        Reader reader = Resources.getResourceAsReader(&quot;sql-map-config.xml&quot;);
        sqlMapClient = SqlMapClientBuilder.buildSqlMapClient(reader);

        // Tell the SqlMapClient to use the given DataSource
        DataSource dataSource = getDataSource();
        TransactionConfig transactionConfig = getTransactionConfig(dataSource);
        // Apply the given TransactionConfig to the SqlMapClient
        applyTransactionConfig(sqlMapClient, transactionConfig);
    }

    protected void tearDown() throws Exception {
        super.tearDown();

        if (sqlMapClient != null) {
            DataSource ds = sqlMapClient.getDataSource();
            Connection conn = ds.getConnection();
            conn.close();
        }
    }

    private DataSource getDataSource() throws Exception {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(props.getProperty(&quot;driver&quot;));
        dataSource.setUrl(props.getProperty(&quot;url&quot;));
        dataSource.setUsername(props.getProperty(&quot;username&quot;));
        dataSource.setPassword(props.getProperty(&quot;password&quot;));
        return dataSource;
    }

    private TransactionConfig getTransactionConfig(DataSource dataSource) throws Exception {
        Properties transactionConfigProperties = new Properties();
        transactionConfigProperties.setProperty(&quot;SetAutoCommitAllowed&quot;, &quot;false&quot;);

        TransactionConfig transactionConfig = (TransactionConfig)ExternalTransactionConfig.class.newInstance();
        transactionConfig.setDataSource(dataSource);
        transactionConfig.initialize(transactionConfigProperties);
        return transactionConfig;
    }

    private void applyTransactionConfig(SqlMapClient sqlMapClient, TransactionConfig transactionConfig) {
        if (!(sqlMapClient instanceof ExtendedSqlMapClient)) {
            throw new IllegalArgumentException(&quot;Cannot set TransactionConfig with DataSource&quot;
                    + &quot;for SqlMapClient if not of type ExtendedSqlMapClient: &quot; + sqlMapClient);
        }
        ExtendedSqlMapClient extendedClient = (ExtendedSqlMapClient)sqlMapClient;
        transactionConfig.setMaximumConcurrentTransactions(extendedClient.getDelegate().getMaxTransactions());
        extendedClient.getDelegate().setTxManager(new TransactionManager(transactionConfig));
    }
}
</code></pre></div>
<p>然后为每个SqlMap映射文件编写一个测试类，继承上面的抽象类：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class UserSqlMapTest extends SqlMapTestCase {

    public void testGetUser() throws Exception {
        User user = (User)sqlMapClient.queryForObject(&quot;getUser&quot;, &quot;ford&quot;);
        assertNotNull(user);
        assertEquals(&quot;ford&quot;, user.getName());
    }
}
</code></pre></div>
<p>如此就可以进行单元测试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步整合WebWork和Spring]]></title>
    <link href="http://codemany.com/blog/webwork-and-spring-integration-step-by-step/"/>
    <updated>2005-09-26T10:50:27+08:00</updated>
    <id>http://codemany.com/blog/webwork-and-spring-integration-step-by-step</id>
    <content type="html"><![CDATA[<p>拷贝webwork-2.1.7.jar、spring-1.2.1.jar以及webwork2-srping.jar到WEB-INF/lib目录下。</p>

<p>添加以下内容到web.xml文件中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;

&lt;listener&gt;
    &lt;listener-class&gt;com.atlassian.xwork.ext.ResolverSetupServletContextListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre></div>
<p>applicationContext.xml中的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;beans&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.SingleConnectionDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;${driver}&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;${url}&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;${username}&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;${password}&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;sqlMapClient&quot; class=&quot;org.springframework.orm.ibatis.SqlMapClientFactoryBean&quot;&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;/WEB-INF/sql-map-config.xml&quot; /&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;userManager&quot; class=&quot;com.codemany.netlink.service.impl.UserManagerImpl&quot; singleton=&quot;true&quot;&gt;
        &lt;property name=&quot;sqlMapClient&quot; ref=&quot;sqlMapClient&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></div>
<p>配置文件sql-map-config.xml中的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;sqlMapConfig&gt;
    &lt;sqlMap resource=&quot;com/codemany/netlink/dao/impl/User.xml&quot; /&gt;
&lt;/sqlMapConfig&gt;
</code></pre></div>
<p>在xwork.xml中添加以下内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;package name=&quot;default&quot; extends=&quot;webwork-default&quot;
        externalReferenceResolver=&quot;com.atlassian.xwork.ext.SpringServletContextReferenceResolver&quot;&gt;

    &lt;interceptors&gt;
        &lt;interceptor name=&quot;reference-resolver&quot;
                class=&quot;com.opensymphony.xwork.interceptor.ExternalReferencesInterceptor&quot; /&gt;

        &lt;interceptor-stack name=&quot;interceptors&quot;&gt;
            &lt;interceptor-ref name=&quot;params&quot; /&gt;
            &lt;interceptor-ref name=&quot;reference-resolver&quot; /&gt;
        &lt;/interceptor-stack&gt;
    &lt;/interceptors&gt;

    &lt;default-interceptor-ref name=&quot;default-interceptor&quot; /&gt;

    &lt;action name=&quot;login&quot; class=&quot;com.codemany.netlink.action.LoginAction&quot;&gt;
        &lt;external-ref name=&quot;userManager&quot;&gt;userManager&lt;/external-ref&gt;
        &lt;result name=&quot;success&quot; type=&quot;dispatcher&quot;&gt;/success.jsp&lt;/result&gt;
        &lt;result name=&quot;error&quot; type=&quot;dispatcher&quot;&gt;/error.jsp&lt;/result&gt;
    &lt;/action&gt;
&lt;/package&gt;
</code></pre></div>
<p>在LoginAction.java中添加代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private UserManager userManager = null;

public void setUserManager(UserManager userManager) {
    this.userManager = userManager;
</code></pre></div>
<p>建立UserManager.java接口文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public interface UserManager {
    public User login(String username, String password) throws UserLoginException;
}
</code></pre></div>
<p>UserManagerImpl.java实现代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class UserManagerImpl extends SqlMapClientDaoSupport implements UserManager {

    public User login(String username, String password) throws UserLoginException {
        // do something
    }
}
</code></pre></div>]]></content>
  </entry>
  
</feed>
