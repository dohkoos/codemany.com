<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JBookShelf | 乐者为王]]></title>
  <link href="http://codemany.com/tags/jbookshelf/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-12-09T20:15:34+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用SiteMesh做网页布局]]></title>
    <link href="http://codemany.com/blog/page-layout-using-sitemesh/"/>
    <updated>2013-04-09T08:18:33+08:00</updated>
    <id>http://codemany.com/blog/page-layout-using-sitemesh</id>
    <content type="html"><![CDATA[<p>SiteMesh是一个基于GoF的Decorator模式，用于页面布局的框架。能帮助我们在由大量页面构成的项目中创建一致的页面布局和外观。</p>

<p>这里我们将会把它整合到JBookShelf里去。要和Struts 2整合，先在pom.xml添加以下插件，该插件会将依赖的SiteMesh也一并包含到项目中。</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;
    &lt;artifactId&gt;struts2-sitemesh-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.3.12&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>将web.xml配置中原来的</p>

<pre><code>&lt;filter&gt;
    &lt;filter-name&gt;struts2&lt;/filter-name&gt;
    &lt;filter-class&gt;
        org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
    &lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;struts2&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre>

<p>改成</p>

<pre><code>&lt;filter&gt;
    &lt;filter-name&gt;struts-prepare&lt;/filter-name&gt;
    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter&gt;
    &lt;filter-name&gt;sitemesh&lt;/filter-name&gt;
    &lt;filter-class&gt;com.opensymphony.sitemesh.webapp.SiteMeshFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter&gt;
    &lt;filter-name&gt;struts-execute&lt;/filter-name&gt;
    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;struts-prepare&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;sitemesh&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;struts-execute&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre>

<p>这里要注意过滤器的位置。SiteMesh过滤器必须在StrutsPrepareFilter之后和StrutsExecuteFilter之前，否则在SiteMesh的修饰器页面中将访问不到ActionContext。这是因为Struts 2的所有值是保存在Stack Context或者ValueStack中的。默认情况下，某个过滤器一旦访问了该Stack Context或ValueStack，里面对应的值会被清洗掉。如果先使用Struts 2的StrutsPrepareAndExecuteFilter来过滤用户请求，则SiteMesh的过滤器将无法取得Stack Context或者ValueStack中的数据。为了解决这个问题，Struts 2提供了StrutsPrepareFilter和StrutsExecuteFilter类（在2.1.3版本前是ActionContextCleanUp和FilterDispatcher），通过它们协同来确保SiteMesh正常工作。</p>

<p>在WEB-INF下添加decorators.xml文档：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;decorators defaultdir="/layouts"&gt;
    &lt;excludes&gt;
        &lt;pattern&gt;/stylesheets/*&lt;/pattern&gt;
        &lt;pattern&gt;/javascripts/*&lt;/pattern&gt;
        &lt;pattern&gt;/images/*&lt;/pattern&gt;
    &lt;/excludes&gt;

    &lt;decorator name="application" page="application.jsp"&gt;
        &lt;pattern&gt;/*&lt;/pattern&gt;
    &lt;/decorator&gt;
&lt;/decorators&gt;
</code></pre>

<p>stylesheets、javascripts、images目录下的内容是不需要被修饰的，可以把它们放到execludes块中排除掉。</p>

<p>新建/layouts/application.jsp模版页：</p>

<pre><code>&lt;%@ taglib uri="/struts-tags" prefix="s" %&gt;
&lt;%@ taglib uri="http://www.opensymphony.com/sitemesh/decorator" prefix="decorator" %&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;&lt;decorator:title default="JBookShelf" /&gt;&lt;/title&gt;
    &lt;decorator:head /&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div&gt;
        &lt;s:if test="#session.user_session_key != null"&gt;
        &lt;s:a action="listBook"&gt;All Books&lt;/s:a&gt;
        Welcome, you have logined.
        &lt;s:a action="logout"&gt;Logout&lt;/s:a&gt;
        &lt;/s:if&gt;
        &lt;s:else&gt;
        &lt;s:a action="login!input"&gt;Login&lt;/s:a&gt; |
        &lt;s:a action="register!input"&gt;Register&lt;/s:a&gt;
        &lt;/s:else&gt;
    &lt;/div&gt;
    &lt;hr /&gt;
    &lt;div&gt;Navigation&lt;/div&gt;
    &lt;hr /&gt;
    &lt;decorator:body /&gt;
    &lt;hr /&gt;
    &lt;div&gt;Footer&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Interceptor禁止用户访问未授权的图书信息]]></title>
    <link href="http://codemany.com/blog/using-interceptor-to-prohibit-users-from-accessing-unauthorized-books-information/"/>
    <updated>2013-02-01T18:50:02+08:00</updated>
    <id>http://codemany.com/blog/using-interceptor-to-prohibit-users-from-accessing-unauthorized-books-information</id>
    <content type="html"><![CDATA[<p>现在的JBookShelf有两个问题：</p>

<ol>
<li>未登录的用户可以访问图书信息；</li>
<li>登录后的用户可以访问其他用户的图书信息。</li>
</ol>


<p>第一个问题可以使用Struts 2的Interceptor来解决：</p>

<ol>
<li>创建一个实现了Interceptor接口的类；</li>
<li>在struts.xml配置中定义这个拦截器；</li>
<li>在struts.xml中定义一个使用了上面拦截器的拦截栈；</li>
<li>在struts.xml中定义一个全局转向配置。</li>
</ol>


<p>实现自己的拦截器有点要注意的是，拦截器必须是无状态的，不要使用在API提供的ActionInvocation之外的任何东西。要求拦截器是无状态的原因是Struts 2不能保证为每一个请求或者action创建一个实例，所以如果拦截器带有状态，会引发并发问题。</p>

<p>创建AuthorizationInterceptor类，继承类AbstractInterceptor。为什么继承它呢？而不是直接实现接口Interceptor。这是因为AbstractInterceptor已经实现了Interceptor接口，并且实现了接口中的init和destroy方法。而在这个拦截器中，我们并不需要使用这两个方法。下面上代码：</p>

<pre><code>package com.codemany.account.interceptor;

import java.util.Collections;
import java.util.Set;

import com.codemany.account.model.User;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;
import com.opensymphony.xwork2.util.TextParseUtil;

public class AuthorizationInterceptor extends AbstractInterceptor {
    private static final long serialVersionUID = -5140884040684756043L;

    protected Set&lt;String&gt; skipActions = Collections.emptySet();

    public void setSkipActions(String skipActions) {
        this.skipActions = TextParseUtil.commaDelimitedStringToSet(skipActions);
    }

    @Override
    public String intercept(ActionInvocation invocation) throws Exception {
        User user = (User)invocation.getInvocationContext()
                .getSession().get(User.SESSION_KEY);

        boolean isLogined = user != null;
        String action = invocation.getProxy().getActionName();
        // 如果用户未登录，并且访问的是需要登录权限的Action，就跳转到全局转向配置login上
        if (isLogined || skipActions.contains(action)) {
            return invocation.invoke();
        } else {
            return Action.LOGIN;
        }
    }
}
</code></pre>

<p>这里的skipActions目的是为了跳过一些不需要拦截的Action。因为默认情况下，拦截器会拦截Action中的所有的方法。像login，register这类Action是任何用户在任何状态下都可以访问的，所以不需要拦截，这里就可以将这些Action放到skipActions中来跳过拦截。</p>

<p>实现了拦截类后还要在struts.xml进行配置使它起作用，以下是struts.xml的完整代码：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
    "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;

&lt;struts&gt;
    &lt;constant name="struts.enable.DynamicMethodInvocation" value="true" /&gt;
    &lt;constant name="struts.devMode" value="true" /&gt;

    &lt;package name="default" extends="struts-default"&gt;
        &lt;interceptors&gt;
            &lt;interceptor name="authorization"
                class="com.codemany.account.interceptor.AuthorizationInterceptor" /&gt;

            &lt;interceptor-stack name="authorizationStack"&gt;
                &lt;interceptor-ref name="authorization"&gt;
                    &lt;param name="skipActions"&gt;login, logout, register&lt;/param&gt;
                &lt;/interceptor-ref&gt;
                &lt;interceptor-ref name="defaultStack" /&gt;
            &lt;/interceptor-stack&gt;
        &lt;/interceptors&gt;

        &lt;default-interceptor-ref name="authorizationStack" /&gt;

        &lt;!-- 全局转向配置 --&gt;
        &lt;!-- 还记得拦截器里面的return Action.LOGIN这句吧，当程序执行完这一行后，--&gt;
        &lt;!-- 就会到struts.xml文件的global-results中找name为login的全局转向配置。--&gt;
        &lt;global-results&gt;
            &lt;result name="login" type="redirectAction"&gt;login!input&lt;/result&gt;
        &lt;/global-results&gt;
    &lt;/package&gt;

    &lt;include file="account.xml" /&gt;
    &lt;include file="book.xml" /&gt;
&lt;/struts&gt;
</code></pre>

<p>然后将account.xml和book.xml中package继承的父包改成struts.xml配置中的default包：</p>

<pre><code>&lt;package name="account" extends="default"&gt;

&lt;package name="book" extends="default"&gt;
</code></pre>

<p>第二个问题的解决就是重写BookAction.java的代码，不再从数据库中读取Book数据，而是从当前登录用户的books属性中查找Book信息。</p>

<pre><code>package com.codemany.book.action;

import java.util.ArrayList;
import java.util.List;

import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class BookAction extends ActionSupport {
    private static final long serialVersionUID = 2538923417705852774L;

    private Long bookId;
    private Book book;
    private List&lt;Book&gt; bookList;

    private BookService bookService;

    public String list() throws Exception {
        if (bookList == null) {
            bookList = new ArrayList&lt;Book&gt;();
        }
        bookList.addAll(getCurrentUser().getBooks());
        return "list";
    }

    public String show() throws Exception {
        book = getCurrentUser().getBook(bookId);
        return "show";
    }

    public String input() throws Exception {
        if (bookId != null) {
            book = getCurrentUser().getBook(bookId);
        }
        return INPUT;
    }

    public String saveOrUpdate() throws Exception {
        book.setUser(getCurrentUser());
        bookService.saveOrUpdateBook(book);
        return SUCCESS;
    }

    public String delete() throws Exception {
        Book book = getCurrentUser().getBook(bookId);
        if (book != null) {
            bookService.deleteBook(bookId);
            getCurrentUser().getBooks().remove(book);
        }
        return SUCCESS;
    }

    public List&lt;Book&gt; getBookList() {
        return bookList;
    }

    public Book getBook() {
        return book;
    }

    public void setBook(Book book) {
        this.book = book;
    }

    public void setBookId(Long bookId) {
        this.bookId = bookId;
    }

    public void setBookService(BookService bookService) {
        this.bookService = bookService;
    }

    private User getCurrentUser() {
        return (User)ActionContext.getContext()
                .getSession().get(User.SESSION_KEY);
    }
}
</code></pre>

<p>上面的代码会产生异常，提示取出的Book数据为空，所以要在User.hbm.xml中set标签后添加属性lazy=“false”，这样Hibernate从数据库中读取User数据时会连带取出对应的Book数据：</p>

<pre><code>&lt;set name="books" inverse="true" lazy="false"&gt;
</code></pre>

<p>下面是BookAction类中用到的User.getBook(bookId)代码：</p>

<pre><code>public class User {

    public Book getBook(Long bookId) {
        for (Book book : books) {
            if (bookId != null &amp;&amp; bookId.equals(book.getId())) {
                return book;
            }
        }
        return null;
    }
</code></pre>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现图书的增删查改（CRUD）]]></title>
    <link href="http://codemany.com/blog/implement-crud-for-books/"/>
    <updated>2012-12-22T14:25:20+08:00</updated>
    <id>http://codemany.com/blog/implement-crud-for-books</id>
    <content type="html"><![CDATA[<p>图书的MySQL数据库创建脚本：</p>

<pre><code>CREATE TABLE books (
    id int NOT NULL AUTO_INCREMENT,
    title varchar(255) NOT NULL,
    description text,
    image_url varchar(255),
    price decimal(8, 2) NOT NULL,
    author varchar(255) NOT NULL,
    isbn varchar(255) NOT NULL,
    publisher varchar(255) NOT NULL,
    user_id int NOT NULL,
    PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
</code></pre>

<p>图书实体类文件Book.java主要代码：</p>

<pre><code>public class Book {
    private Long id;
    private String title;
    private String description;
    private String image_url;
    private double price;
    private String author;
    private String isbn;
    private String publisher;
    private User user;
</code></pre>

<p>在User类中添加集合变量books：</p>

<pre><code>public class User {
    private Set&lt;Book&gt; books = new HashSet&lt;Book&gt;();
</code></pre>

<p>在User.hbm.xml中配置和图书的一对多关联：</p>

<p>&#8220;`</p>

<!-- Bidirectional one-to-many association to Book -->


<p><set name="books" inverse="true">
    <key column="user_id" not-null="true" />
    <one-to-many class="com.codemany.book.model.Book" />
</set>
&#8220;`</p>

<p>图书的表映射文件Book.hbm.xml代码：</p>

<pre><code>&lt;hibernate-mapping&gt;
    &lt;class name="com.codemany.book.model.Book" table="books"&gt;
        &lt;id name="id"&gt;
            &lt;generator class="increment" /&gt;
        &lt;/id&gt;

        &lt;property name="title" not-null="true" /&gt;
        &lt;property name="description" /&gt;
        &lt;property name="image_url" /&gt;
        &lt;property name="price" not-null="true" /&gt;
        &lt;property name="author" not-null="true" /&gt;
        &lt;property name="isbn" not-null="true" /&gt;
        &lt;property name="publisher" not-null="true" /&gt;

        &lt;many-to-one name="user" column="user_id" not-null="true" /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>

<p>BookService.java中的代码相对简单，因为没什么复杂的业务逻辑，只是负责把Action和Dao这两层连接起来。</p>

<p>BookDao.java中的代码主要实现图书的读取，更新和删除：</p>

<pre><code>package com.codemany.book.dao;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.codemany.book.model.Book;

public class BookDao {
    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public List&lt;Book&gt; getBookList() {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery("from Book b");
            List&lt;Book&gt; bookList = query.list();
            return bookList;
        } finally {
            session.close();
        }
    }

    public Book getBook(Long bookId) {
        Session session = sessionFactory.openSession();
        try {
            Query query = session.createQuery("from Book b where b.id = :id");
            query.setLong("id", bookId);
            query.setMaxResults(1);
            return (Book)query.uniqueResult();
        } finally {
            session.close();
        }
    }

    public void saveOrUpdateBook(Book book) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            session.saveOrUpdate(book);
            ts.commit();
        } finally {
            session.close();
        }
    }

    public void deleteBook(Long bookId) {
        Session session = sessionFactory.openSession();
        Transaction ts = null;
        try {
            ts = session.beginTransaction();
            Book book = (Book)session.get(Book.class, bookId);
            session.delete(book);
            ts.commit();
        } finally {
            session.close();
        }
    }
}
</code></pre>

<p>BookAction.java负责协调图书应用程序间的运转。接收访问请求，与模型进行交互，将合适的视图展示给用户：</p>

<pre><code>package com.codemany.book.action;

import java.util.List;

import com.codemany.account.model.User;
import com.codemany.book.model.Book;
import com.codemany.book.service.BookService;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class BookAction extends ActionSupport {
    private static final long serialVersionUID = 2538923417705852774L;

    private Long bookId;
    private Book book;
    private List&lt;Book&gt; bookList;
    private BookService bookService;

    public String list() throws Exception {
        bookList = bookService.getBookList();
        return "list";
    }

    public String show() throws Exception {
        book = bookService.getBook(bookId);
        return "show";
    }

    public String input() throws Exception {
        if (bookId != null) {
            book = bookService.getBook(bookId);
        }
        return INPUT;
    }

    public String saveOrUpdate() throws Exception {
        User user = (User)ActionContext.getContext().getSession().get("user");
        book.setUser(user);
        bookService.saveOrUpdateBook(book);
        return SUCCESS;
    }

    public String delete() throws Exception {
        bookService.deleteBook(bookId);
        return SUCCESS;
    }
</code></pre>

<p>在applicationContext.xml中添加Book的相关配置，如下面代码所示：</p>

<p>&#8220;`
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    <property name="mappingResources">
        <list>
            <value>com/codemany/book/model/Book.hbm.xml</value>
        </list>
    </property>
</bean></p>

<!-- book -->


<p><bean id="bookDao" class="com.codemany.book.dao.BookDao">
    <property name="sessionFactory" ref="sessionFactory" />
</bean></p>

<p><bean id="bookService" class="com.codemany.book.service.BookService">
    <property name="bookDao" ref="bookDao" />
</bean></p>

<p><bean id="bookAction" class="com.codemany.book.action.BookAction" scope="prototype">
    <property name="bookService" ref="bookService" />
</bean>
&#8220;`</p>

<p>在Struts 2配置文件struts.xml中include文件book.xml。以下是book.xml文件的内容：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;

&lt;struts&gt;
    &lt;package name="book" extends="struts-default"&gt;
        &lt;action name="*Book" method="{1}" class="bookAction"&gt;
            &lt;result name="list"&gt;/books/list.jsp&lt;/result&gt;
            &lt;result name="show"&gt;/books/show.jsp&lt;/result&gt;
            &lt;result name="input"&gt;/books/form.jsp&lt;/result&gt;
            &lt;result type="redirectAction"&gt;listBook&lt;/result&gt;
        &lt;/action&gt;
    &lt;/package&gt;
&lt;/struts&gt;
</code></pre>

<p>视图文件show.jsp作为显示单本图书的信息，代码很简单，就不放出来了，只把list.jsp和form.jsp的代码列出来。</p>

<p>list.jsp用来显示所有的图书：</p>

<pre><code>&lt;body&gt;
    &lt;h1&gt;Listing books&lt;/h1&gt;

    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;Title&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
            &lt;th&gt;Image url&lt;/th&gt;
            &lt;th&gt;Price&lt;/th&gt;
            &lt;th&gt;Author&lt;/th&gt;
            &lt;th&gt;ISBN&lt;/th&gt;
            &lt;th&gt;Publisher&lt;/th&gt;
            &lt;th&gt;Action&lt;/th&gt;
        &lt;/tr&gt;

        &lt;s:iterator value="bookList"&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;s:property value="title" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="description" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="image_url" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="price" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="author" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="isbn" /&gt;&lt;/td&gt;
            &lt;td&gt;&lt;s:property value="publisher" /&gt;&lt;/td&gt;
            &lt;td&gt;
                &lt;s:a href="showBook.action?bookId=%{id}"&gt;Show&lt;/s:a&gt;
                &lt;s:a href="inputBook.action?bookId=%{id}"&gt;Edit&lt;/s:a&gt;
                &lt;s:a href="deleteBook.action?bookId=%{id}" method="delete"&gt;Destroy&lt;/s:a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/s:iterator&gt;
    &lt;/table&gt;

    &lt;s:a action="inputBook"&gt;Add&lt;/s:a&gt;
&lt;/body&gt;
</code></pre>

<p>当用户新建或者更新图书时，视图form.jsp就上场了。因为被两个逻辑使用，显示的标题等信息也不相同，所以需要判断图书的id是否存在，如果不存在的话即是新建业务，否则就是更新操作。</p>

<pre><code>&lt;body&gt;
    &lt;s:if test="book.id != null"&gt;
        &lt;h1&gt;Editing book&lt;/h1&gt;
    &lt;/s:if&gt;
    &lt;s:else&gt;
        &lt;h1&gt;Add book&lt;/h1&gt;
    &lt;/s:else&gt;

    &lt;s:form action="saveOrUpdateBook" method="post"&gt;
        &lt;div class="field"&gt;
            &lt;s:hidden name="book.id" value="%{book.id}" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.title" label="Title" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textarea name="book.description" label="Description" rows="5" cols="25" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.image_url" label="Image URL" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.price" label="Price" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.author" label="Author" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.isbn" label="ISBN" /&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
            &lt;s:textfield name="book.publisher" label="Publisher" /&gt;
        &lt;/div&gt;
        &lt;div class="actions"&gt;
            &lt;s:if test="book.id != null"&gt;
            &lt;s:submit value="Update" /&gt;
            &lt;/s:if&gt;
            &lt;s:else&gt;
            &lt;s:submit value="Save" /&gt;
            &lt;/s:else&gt;
      &lt;/div&gt;
    &lt;/s:form&gt;

    &lt;s:if test="book.id != null"&gt;
        &lt;s:a href="showBook.action?bookId=%{book.id}"&gt;Show&lt;/s:a&gt; |
    &lt;/s:if&gt;
    &lt;s:a action="listBook"&gt;Back&lt;/s:a&gt;
&lt;/body&gt;
</code></pre>

<p>最后还要完成图书模型的服务端校验。Struts 2的校验文件有两种格式：ActionName-validation.xml和ActionName-alias-validation.xml。第一种会对该Action中的每个方法进行校验，不符合只对saveOrUpdate校验的要求。在BookAction.java同目录下创建BookAction-saveOrUpdateBook-validation.xml文件：</p>

<pre><code>&lt;validators&gt;
    &lt;field name="book"&gt;
        &lt;field-validator type="visitor"&gt;
            &lt;param name="appendPrefix"&gt;true&lt;/param&gt;
            &lt;message /&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre>

<p>当然，还要在Book.java所在的位置创建Book-validation.xml文件：</p>

<pre><code>&lt;validators&gt;
    &lt;field name="title"&gt;
        &lt;field-validator type="required"&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;

    &lt;field name="price"&gt;
        &lt;field-validator type="required"&gt;
            &lt;message&gt;Price is required&lt;/message&gt;
        &lt;/field-validator&gt;
        &lt;field-validator type="double"&gt;
            &lt;param name="minInclusive"&gt;0.01&lt;/param&gt;
            &lt;message&gt;Price should be at least 0.01&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
</code></pre>

<p>看着BookAction-saveOrUpdateBook-validation.xml这么长的文件名是不是有点无语:)没关系，BookAction-validation.xml配置文件还是可以用的，只要在BookAction.java中那些不需要进行校验的方法上添加@SkipValidation；也可以在action配置中启用validation.excludeMethods参数：</p>

<pre><code>&lt;action name="*Book" method="{1}" class="bookAction"&gt;
    &lt;interceptor-ref name="defaultStack"&gt;
        &lt;param name="validation.excludeMethods"&gt;list,show,input,delete&lt;/param&gt;
    &lt;/interceptor-ref&gt;
</code></pre>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现用户注册功能]]></title>
    <link href="http://codemany.com/blog/implement-user-registration/"/>
    <updated>2012-09-22T11:11:25+08:00</updated>
    <id>http://codemany.com/blog/implement-user-registration</id>
    <content type="html"><![CDATA[<p>已经两个星期没有更新代码了，这次来给加上用户注册的功能。</p>

<p>先在User.java中添加confirmPassword字段。然后在UserDao.java中添加保存用户的代码：</p>

<pre><code>public void addUser(User user) {
    Session session = sessionFactory.openSession();
    Transaction ts = null;
    try {
        ts = session.beginTransaction();
        session.save(user);
        ts.commit();
    } finally {
        session.close();
    }
}
</code></pre>

<p>在UserService.java中添加以下代码：</p>

<pre><code>public void addUser(User user) throws UserAlreadyExistsException {
    User u = getUser(user.getUsername());
    if (u != null) {
        throw new UserAlreadyExistsException();
    }
    userDao.addUser(user);
}
</code></pre>

<p>其中UserAlreadyExistsException.java代码如下：</p>

<pre><code>package com.codemany.account.service;

public class UserAlreadyExistsException extends Exception {
    private static final long serialVersionUID = -7518737598462419360L;

    public UserAlreadyExistsException() {
        super();
    }

    public UserAlreadyExistsException(String message) {
        super(message);
    }

    public UserAlreadyExistsException(String message, Throwable cause) {
        super(message, cause);
    }

    public UserAlreadyExistsException(Throwable cause) {
        super(cause);
    }
}
</code></pre>

<p>在applicationContext.xml中加上一个bean：</p>

<pre><code>&lt;bean id="registerAction" class="com.codemany.account.action.RegisterAction" scope="prototype"&gt;
    &lt;property name="userService" ref="userService" /&gt;
&lt;/bean&gt;
</code></pre>

<p>然后在account.xml中添加register动作，并修改login动作相应的页面：</p>

<pre><code>&lt;action name="login" class="loginAction"&gt;
    &lt;result name="success"&gt;/index.jsp&lt;/result&gt;
    &lt;result name="input"&gt;/login.jsp&lt;/result&gt;
&lt;/action&gt;

&lt;action name="register" class="registerAction"&gt;
    &lt;result name="success"&gt;/index.jsp&lt;/result&gt;
    &lt;result name="input"&gt;/register.jsp&lt;/result&gt;
&lt;/action&gt;
</code></pre>

<p>建立RegisterAction.java类：</p>

<pre><code>package com.codemany.account.action;

import com.codemany.account.model.User;
import com.codemany.account.service.UserAlreadyExistsException;
import com.codemany.account.service.UserService;

import com.opensymphony.xwork2.ActionSupport;

public class RegisterAction extends ActionSupport {
    private static final long serialVersionUID = 7021982816578678150L;

    private User user;

    private UserService userService;

    public String execute() throws Exception {
        try {
            userService.addUser(user);
        } catch (UserAlreadyExistsException e) {
            return INPUT;
        }
        return SUCCESS;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public void setUserService(UserService userService) {
        this.userService = userService;
    }
}
</code></pre>

<p>新建校验配置文件。先是对应RegisterAction类的RegisterAction-validation.xml配置：</p>

<pre><code>&lt;!DOCTYPE validators PUBLIC
    "-//OpenSymphony Group//XWork Validator 1.0.2//EN"
    "http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd"&gt;

&lt;validators&gt;
    &lt;field name="user"&gt;
        &lt;field-validator type="visitor"&gt;
            &lt;param name="appendPrefix"&gt;true&lt;/param&gt;
            &lt;message /&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre>

<p>这里的校验使用了visitor类型，它是用于检测action里的复合属性的。这里的复合属性是User对象，所以要在User.java同一个目录下建立校验配置文件User-validation.xml，内容如下：</p>

<pre><code>&lt;!DOCTYPE validators PUBLIC
    "-//OpenSymphony Group//XWork Validator 1.0.2//EN"
    "http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd"&gt;

&lt;validators&gt;
    &lt;field name="username"&gt;
        &lt;field-validator type="requiredstring"&gt;
            &lt;message&gt;Username is required&lt;/message&gt;
        &lt;/field-validator&gt;
        &lt;field-validator type="stringlength"&gt;
            &lt;param name="minLength"&gt;2&lt;/param&gt;
            &lt;param name="maxLength"&gt;20&lt;/param&gt;
            &lt;message&gt;Username must be between ${minLength} and ${maxLength} characters&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;

    &lt;field name="password"&gt;
        &lt;field-validator type="requiredstring"&gt;
            &lt;message&gt;Password is required&lt;/message&gt;
        &lt;/field-validator&gt;
        &lt;field-validator type="stringlength"&gt;
            &lt;param name="minLength"&gt;6&lt;/param&gt;
            &lt;param name="maxLength"&gt;50&lt;/param&gt;
            &lt;message&gt;Password must be between ${minLength} and ${maxLength} characters&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;

    &lt;field name="confirmPassword"&gt;
        &lt;field-validator type="fieldexpression"&gt;
            &lt;param name="expression"&gt;confirmPassword.equals(password)&lt;/param&gt;
            &lt;message&gt;Password does not match the confirm password&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre>

<p>修改index.jsp，将登录表单移到单独的login.jsp页面中:</p>

<pre><code>&lt;%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8" %&gt;

&lt;%@ taglib uri="/struts-tags" prefix="s" %&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;JBookShelf&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;s:if test="#session.logined"&gt;
        Welcome, you have logined. &lt;a href="&lt;%= request.getContextPath() %&gt;/logout.action"&gt;Logout&lt;/a&gt;
    &lt;/s:if&gt;
    &lt;s:else&gt;
        &lt;a href="&lt;%= request.getContextPath() %&gt;/login!input.action"&gt;Login&lt;/a&gt; |
        &lt;a href="&lt;%= request.getContextPath() %&gt;/register!input.action"&gt;Register&lt;/a&gt;
    &lt;/s:else&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>这里是登录页面login.jsp，首页index.jsp中的登录表单就是被移到这个文件中：</p>

<pre><code>&lt;%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8" %&gt;

&lt;%@ taglib uri="/struts-tags" prefix="s" %&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Login&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;p&gt;User: test/test&lt;/p&gt;
    &lt;s:form action="login"&gt;
        &lt;s:textfield key="username" label="Username" /&gt;
        &lt;s:password key="password" label="Password" /&gt;
        &lt;s:submit value="Login" /&gt;
    &lt;/s:form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>注册页面register.jsp，负责生成注册时的表单：</p>

<pre><code>&lt;%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8" %&gt;

&lt;%@ taglib uri="/struts-tags" prefix="s" %&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;Registration&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;s:form action="register"&gt;
        &lt;s:textfield key="user.username" label="Username" /&gt;
        &lt;s:password key="user.password" label="Password" /&gt;
        &lt;s:password key="user.confirmPassword" label="Password Confirmation" /&gt;
        &lt;s:submit value="Register" /&gt;
    &lt;/s:form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Struts 2 Validation框架校验登录]]></title>
    <link href="http://codemany.com/blog/validate-login-with-struts2-validation-framework/"/>
    <updated>2012-09-08T14:42:17+08:00</updated>
    <id>http://codemany.com/blog/validate-login-with-struts2-validation-framework</id>
    <content type="html"><![CDATA[<p>Struts 2有三种校验方式：</p>

<ol>
<li>使用Annotation进行校验。</li>
<li>使用XML配置校验。</li>
<li>使用覆盖validate方法校验。</li>
</ol>


<p>使用XML配置时validation.xml的命名规则和放置路径：</p>

<pre><code>&lt;ActionClassName&gt;-validation.xml
</code></pre>

<p><code>&lt;ActionClassName&gt;</code>就是要验证的Action类的名字，将此文件放在与Action类文件相同的目录下即可。如果该Action类在struts.xml配置中有多个action实例，那么对应某个action实例的校验文件命名规则如下：</p>

<pre><code>&lt;ActionClassName&gt;-&lt;aliasName&gt;-validation.xml
</code></pre>

<p>例如：UserAction-login-validation.xml。注意，这里的<code>&lt;aliasName&gt;</code>并不是方法名，而是struts.xml中配置的action实例的名字。</p>

<p>既然用框架来校验了，那么在LoginAction.java中判断用户名和密码是否为空的代码就可以删除了。还要记得加上username和passowrd的getter方法，不然校验器（validator）会因为取不到field而报错。</p>

<pre><code>public String execute() throws Exception {
    User u = userService.getUser(username);
    if (u == null || !password.equals(u.getPassword())) {
        return INPUT;
    }

    ActionContext.getContext().getSession().put("logined", true);
    return SUCCESS;
}

public String getUsername() {
    return username;
}

public String getPassword() {
    return password;
}
</code></pre>

<p>同时在LoginAction.java相同目录下创建LoginAction-validation.xml，内容如下：</p>

<pre><code>&lt;!DOCTYPE validators PUBLIC
    "-//OpenSymphony Group//XWork Validator 1.0.2//EN"
    "http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd"&gt;

&lt;validators&gt;
    &lt;field name="username"&gt;
        &lt;field-validator type="requiredstring"&gt;
            &lt;message&gt;Username is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
    &lt;field name="password"&gt;
        &lt;field-validator type="requiredstring"&gt;
            &lt;message&gt;Password is required&lt;/message&gt;
        &lt;/field-validator&gt;
    &lt;/field&gt;
&lt;/validators&gt;
</code></pre>

<p>message提供了校验出错的信息，消息中可以使用${}来引用被校验的对象。如果未出现异常，则转入用户请求的处理方法；出现异常则转入input所指定的视图。所以，对于校验的action实例，必须要在配置文件中为其指定input视图。</p>

<p>代码下载：<a href="https://github.com/dohkoos/JBookShelf">https://github.com/dohkoos/JBookShelf</a></p>
]]></content>
  </entry>
  
</feed>
