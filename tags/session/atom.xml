<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Session | 乐者为王]]></title>
  <link href="http://codemany.com/tags/session/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-12-01T09:38:11+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Web应用中保存Session数据]]></title>
    <link href="http://codemany.com/blog/save-session-data-in-web-application/"/>
    <updated>2013-01-30T14:34:05+08:00</updated>
    <id>http://codemany.com/blog/save-session-data-in-web-application</id>
    <content type="html"><![CDATA[<h3 id="保存在客户端">保存在客户端</h3>

<p>Cookie是一个很好的机制。有时候还可以使用隐藏的表单字段（hidden form fields）。</p>

<h3 id="保存在服务器上">保存在服务器上</h3>

<p>最自然的选择。问题是当不止一台前端服务器时，需要能支持Session复制（session replication）和故障转移（failover）的集群。不管哪个前端服务器收到请求，Session数据都在上面。问题是每次请求时可能都要有数据复制和故障转移的动作，影响性能。有个更简单的方法是Sticky session。即当客户第一次请求时，负载均衡服务器分配一个Cookie给客户，下次请求时就可以通过Cookie访问与上次相同的服务器，这样客户的Session数据就只要在单台服务器上。Sticky session也有两个问题：单点故障和负载均衡可能不是最优。</p>

<h3 id="保存在数据库中">保存在数据库中</h3>

<p>通常最后数据库成为了性能瓶颈。</p>

<h3 id="使用独立的session存储">使用独立的Session存储</h3>

<p>可以考虑Memcached或Redis。</p>
]]></content>
  </entry>
  
</feed>
