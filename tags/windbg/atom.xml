<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: WinDbg | 乐者为王]]></title>
  <link href="http://codemany.com/tags/windbg/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-10-22T13:37:00+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用WinDbg检测内存泄漏]]></title>
    <link href="http://codemany.com/blog/memory-leak-detection-using-windbg/"/>
    <updated>2008-12-27T09:34:17+08:00</updated>
    <id>http://codemany.com/blog/memory-leak-detection-using-windbg</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://www.codeproject.com/Articles/31382/Memory-Leak-Detection-Using-WinDbg">https://www.codeproject.com/Articles/31382/Memory-Leak-Detection-Using-WinDbg</a></p>

<h3 id="简介">简介</h3>

<p>内存泄漏是一种费时的bug，通常由C++开发者制造。内存泄漏的检测经常是令人厌烦的。如果代码不是你写的，或者代码库相当巨大，事情就会变得很糟糕。</p>

<p>尽管市场上有可用的工具帮助你检测内存泄露，但这些工具大多数不是免费的。我发现WinDbg作为一个免费的强大的工具可以用来解决内存泄漏bug。至少，我们可以知道可能涉嫌引起内存泄漏的代码位置。COM接口泄漏不在这篇文章范围内。</p>

<p>WinDbg是来自Microsoft的一个强大的用户/内核空间调试器，它可以从<a href="http://www.microsoft.com/whdc/devtools/debugging/installx86.mspx">这里</a>下载和安装。</p>

<h3 id="使用windbg">使用WinDbg</h3>

<p>开始使用WinDbg：</p>

<ol>
<li>配置符号文件路径指向Microsoft符号服务器<code>SRV*d:\symbols*http://msdl.microsoft.com/download/symbols</code>；</li>
<li>将你的程序EXE/DLL的PDB（程序数据库）路径添加到符号文件路径中；</li>
<li>你还需要配置操作系统的标记去启用有内存泄漏的进程上的用户栈跟踪。这很简单，可以用gflags.exe做到。gflags.exe在WinDbg安装期间被安装。或者也可以通过命令行来完成，使用命令gflags.exe /i MemoryLeak.exe +ust即可。我的程序名是Test2.exe。因此，为了演示，需要用Test2.exe替换掉MemoryLeak.exe。下面的快照显示了应用Test2.exe的OS标记的设置。</li>
</ol>

<p><img src="/uploads/cmd.jpg" alt="cmd"></p>

<p>一旦我们配置好WinDbg的符号文件路径，开启泄漏内存的进程，就可以把WinDbg挂载上去。挂载选项可以在WinDbg的File菜单下找到，或者可以使用F6快捷键启动。下面的快照显示了挂载界面：</p>

<p><img src="/uploads/attach.jpg" alt="attach"></p>

<p>WinDbg的!heap命令用来显示堆。在WinDbg帮助文件里有!heap的详尽文档。</p>

<p>我已经开发了一个泄漏内存的小程序，在后面也将使用这个程序来做演示。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">int _tmain(int argc, _TCHAR* argv[])
{
    while(1)
    {
        AllocateMemory();
    }
    return 0;
}
void AllocateMemory()
{
    int* a = new int[2000];
    ZeroMemory(a, 8000);
    Sleep(1);
}
</code></pre></div>
<p>上面的程序泄漏一个大小为2000*4字节的整型数组。</p>

<p>把WinDbg挂载到进程上后，执行命令!heap -s。-s代表概要。下面是泄漏进程上!heap -s的输出：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0:001&gt; !heap -s
NtGlobalFlag enables following debugging aids for new heaps:
    validate parameters
    stack back traces
  Heap     Flags   Reserv  Commit  Virt   Free  List   UCR  Virt  Lock  Fast
                    (k)     (k)    (k)     (k) length      blocks cont. heap
-----------------------------------------------------------------------------
   00150000 58000062    1024     12     12      1     1     1    0      0   L
   00250000 58001062      64     24     24     15     1     1    0      0   L
   00260000 58008060      64     12     12     10     1     1    0      0
   00330000 58001062   64576  47404  47404     13     4     1    0      0
-----------------------------------------------------------------------------
</code></pre></div>
<p>让进程执行一段时间，然后重新进入进程，再次执行!heap -s。下面显示的是该命令的输出：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0:001&gt; !heap -s
NtGlobalFlag enables following debugging aids for new heaps:
   validate parameters
   stack back traces
   Heap     Flags   Reserv  Commit  Virt   Free  List   UCR  Virt  Lock  Fast
                     (k)     (k)    (k)     (k) length      blocks cont. heap
   -----------------------------------------------------------------------------
    00150000 58000062    1024     12     12      1     1     1    0      0   L
    00250000 58001062      64     24     24     15     1     1    0      0   L
    00260000 58008060      64     12     12     10     1     1    0      0
    00330000 58001062  261184 239484 239484     14     4     1    0      0
   -----------------------------------------------------------------------------
</code></pre></div>
<p>第11行显示了增长堆。上面的快照显示一个句柄为00330000的堆在增长。</p>

<p>执行!heap -stat -h 00330000。这个命令用来显示增长堆的堆统计。下面显示的是该命令的输出：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0:001&gt; !heap -stat -h 00330000
heap @ 00330000
group-by: TOTSIZE max-display: 20
    size     #blocks     total     ( %) (percent of total busy bytes)
    1f64 76c6 - e905f58  (99.99)
    1800 1 - 1800  (0.00)
    824 2 - 1048  (0.00)
    238 2 - 470  (0.00)
    244 1 - 244  (0.00)
    4c 5 - 17c  (0.00)
    b0 2 - 160  (0.00)
    86 2 - 10c  (0.00)
    50 3 - f0  (0.00)
    74 2 - e8  (0.00)
    38 4 - e0  (0.00)
    48 3 - d8  (0.00)
    c4 1 - c4  (0.00)
    62 2 - c4  (0.00)
    be 1 - be  (0.00)
    b8 1 - b8  (0.00)
    ae 1 - ae  (0.00)
    ac 1 - ac  (0.00)
    55 2 - aa  (0.00)
    a4 1 - a4  (0.00)
</code></pre></div>
<p>上面的快照显示大小为1f64的76c6个块被分配（第5行）。如此巨大的相同大小的块的数量让我们怀疑这些可能是泄漏块。其余的块分配没有在增长的块数字。</p>

<p>下一步是去获得这些块的地址。使用命令!heap -flt s 1f64。这个命令过滤出堆的所有其它块，并且显示大小为1f64的块的详细信息。</p>

<p>下面显示的是该命令的输出：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0:001&gt; !heap -flt s 1f64
    _HEAP @ 150000
    _HEAP @ 250000
    _HEAP @ 260000
    _HEAP @ 330000
      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
        003360e0 03f0 0000  [07]   003360e8    01f64 - (busy)
        00338060 03f0 03f0  [07]   00338068    01f64 - (busy)
        00339fe0 03f0 03f0  [07]   00339fe8    01f64 - (busy)
        0033bf60 03f0 03f0  [07]   0033bf68    01f64 - (busy)
        0033dee0 03f0 03f0  [07]   0033dee8    01f64 - (busy)
        01420040 03f0 03f0  [07]   01420048    01f64 - (busy)
        01421fc0 03f0 03f0  [07]   01421fc8    01f64 - (busy)
        01423f40 03f0 03f0  [07]   01423f48    01f64 - (busy)
        01425ec0 03f0 03f0  [07]   01425ec8    01f64 - (busy)
        01427e40 03f0 03f0  [07]   01427e48    01f64 - (busy)
        01429dc0 03f0 03f0  [07]   01429dc8    01f64 - (busy)
        0142bd40 03f0 03f0  [07]   0142bd48    01f64 - (busy)
        0142dcc0 03f0 03f0  [07]   0142dcc8    01f64 - (busy)
        0142fc40 03f0 03f0  [07]   0142fc48    01f64 - (busy)
        01431bc0 03f0 03f0  [07]   01431bc8    01f64 - (busy)
        01433b40 03f0 03f0  [07]   01433b48    01f64 - (busy)
        01435ac0 03f0 03f0  [07]   01435ac8    01f64 - (busy)
        01437a40 03f0 03f0  [07]   01437a48    01f64 - (busy)
        014399c0 03f0 03f0  [07]   014399c8    01f64 - (busy)
        0143b940 03f0 03f0  [07]   0143b948    01f64 - (busy)
        0143d8c0 03f0 03f0  [07]   0143d8c8    01f64 - (busy)
        0143f840 03f0 03f0  [07]   0143f848    01f64 - (busy)
        014417c0 03f0 03f0  [07]   014417c8    01f64 - (busy)
        01443740 03f0 03f0  [07]   01443748    01f64 - (busy)
        014456c0 03f0 03f0  [07]   014456c8    01f64 - (busy)
        01447640 03f0 03f0  [07]   01447648    01f64 - (busy)
        014495c0 03f0 03f0  [07]   014495c8    01f64 - (busy)
        0144b540 03f0 03f0  [07]   0144b548    01f64 - (busy)
        0144d4c0 03f0 03f0  [07]   0144d4c8    01f64 - (busy)
        0144f440 03f0 03f0  [07]   0144f448    01f64 - (busy)
        014513c0 03f0 03f0  [07]   014513c8    01f64 - (busy)
        01453340 03f0 03f0  [07]   01453348    01f64 - (busy)
        014552c0 03f0 03f0  [07]   014552c8    01f64 - (busy)
        01457240 03f0 03f0  [07]   01457248    01f64 - (busy)
        014591c0 03f0 03f0  [07]   014591c8    01f64 - (busy)
        0145b140 03f0 03f0  [07]   0145b148    01f64 - (busy)
        0145d0c0 03f0 03f0  [07]   0145d0c8    01f64 - (busy)
        0145f040 03f0 03f0  [07]   0145f048    01f64 - (busy)
        01460fc0 03f0 03f0  [07]   01460fc8    01f64 - (busy)
        01462f40 03f0 03f0  [07]   01462f48    01f64 - (busy)
        01464ec0 03f0 03f0  [07]   01464ec8    01f64 - (busy)
        01466e40 03f0 03f0  [07]   01466e48    01f64 - (busy)
        01468dc0 03f0 03f0  [07]   01468dc8    01f64 - (busy)
</code></pre></div>
<p>使用任何来自上面输出中的UsrPtr列值，然后使用命令!heap -p -a UsrPtr去显示UsrPtr的调用栈。我选择了第27行的0143d8c8。</p>

<p>执行!heap -p -a 0143d8c8，我们得到下面显示的调用栈：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0:001&gt; !heap -p -a 0143d8c8
    address 0143d8c8 found in
    _HEAP @ 330000
      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
        0143d8c0 03f0 0000  [07]   0143d8c8    01f64 - (busy)
        Trace: 0025
        7c96d6dc ntdll!RtlDebugAllocateHeap+0x000000e1
        7c949d18 ntdll!RtlAllocateHeapSlowly+0x00000044
        7c91b298 ntdll!RtlAllocateHeap+0x00000e64
        102c103e MSVCR90D!_heap_alloc_base+0x0000005e
        102cfd76 MSVCR90D!_heap_alloc_dbg_impl+0x000001f6
        102cfb2f MSVCR90D!_nh_malloc_dbg_impl+0x0000001f
        102cfadc MSVCR90D!_nh_malloc_dbg+0x0000002c
        102db25b MSVCR90D!malloc+0x0000001b
        102bd691 MSVCR90D!operator new+0x00000011
        102bd71f MSVCR90D!operator new[]+0x0000000f
        4113d8 Test2!AllocateMemory+0x00000028
        41145c Test2!wmain+0x0000002c
        411a08 Test2!__tmainCRTStartup+0x000001a8
        41184f Test2!wmainCRTStartup+0x0000000f
        7c816fd7 kernel32!BaseProcessStart+0x00000023
</code></pre></div>
<p>第16-19行显示了来自我们代码的函数。</p>

<p>注意：有时候，可能发生!heap -s命令不显示增长堆的情况。如果那样的话，使用!heap -stat -h命令列出带有堆的大小和块的数量的所有堆。识别在增长的块的数量，然后使用!heap -flt s SIZE（SIZE = 涉嫌块的大小）命令。</p>
]]></content>
  </entry>
  
</feed>
