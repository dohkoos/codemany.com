<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SMS | 乐者为王]]></title>
  <link href="http://codemany.com/tags/sms/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-01-09T21:51:28+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将Nokia 6670的短信导入HTC Hero G3]]></title>
    <link href="http://codemany.com/blog/transfer-sms-from-nokia-6670-to-htc-hero-g3/"/>
    <updated>2011-06-21T08:43:10+08:00</updated>
    <id>http://codemany.com/blog/transfer-sms-from-nokia-6670-to-htc-hero-g3</id>
    <content type="html"><![CDATA[<p>这事本该N久前就该干了（09年末把手机从Nokia 6670换到HTC Hero G3），却一直拖着没有做，今天终于把这事作了一个了结。</p>

<p>Nokia下导出的短信是如Messages_Nokia 6670_20091215.xml这样的一个XML文件，文件内容的编码是unicode，格式就像下面这样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;unicode&quot;?&gt;
&lt;SMS PhoneModel=&quot;Nokia 6670&quot;&gt;
  &lt;Message DateTime=&quot;2011-06-21 10:10:10&quot;&gt;
    &lt;Sender&gt;路人甲&lt;/Sender&gt;
    &lt;PhoneNumber&gt;+8613988888888&lt;/PhoneNumber&gt;
    &lt;Location&gt;Inbox&lt;/Location&gt;
    &lt;Text&gt;我是路人甲&lt;/Text&gt;
  &lt;/Message&gt;

  &lt;Message DateTime=&quot;2011-06-21 11:11:11&quot;&gt;
    &lt;Sender&gt;路人乙&lt;/Sender&gt;
    &lt;PhoneNumber&gt;+8613966666666&lt;/PhoneNumber&gt;
    &lt;Location&gt;Outbox&lt;/Location&gt;
    &lt;Text&gt;我是路人乙&lt;/Text&gt;
  &lt;/Message&gt;
&lt;/SMS&gt;
</code></pre></div>
<p>本来是想写个Android应用来直接导入这些备份短信的，不过在实现的过程中发现了SMS Backup&amp;Restore应用导出的备份文件和Nokia的备份文件类似，产生了做个将Nokia备份文件转换成SMS Backup&amp;Restore备份文件的念头，又在网上发现了nicholashan的<a href="http://bbs.hiapk.com/thread-140564-1-1.html">将Nokia的短信导入Hero（可能适用所有Android机型）</a>，坚定了我的这个想法。</p>

<p>分析了一下SMS Backup&amp;Restore备份文件的格式，文件内容的编码是utf-8的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39; standalone=&#39;yes&#39; ?&gt;
&lt;smses count=&quot;3&quot;&gt;
  &lt;sms protocol=&quot;0&quot; address=&quot;10658658&quot; date=&quot;1308629532000&quot;
    type=&quot;1&quot; subject=&quot;null&quot; body=&quot;我是内容&quot; toa=&quot;null&quot;
    sc_toa=&quot;null&quot; service_center=&quot;null&quot; read=&quot;1&quot;
    status=&quot;-1&quot; locked=&quot;0&quot; /&gt;
  &lt;sms protocol=&quot;0&quot; address=&quot;13566666666&quot; date=&quot;1308633733000&quot;
    type=&quot;2&quot; subject=&quot;null&quot; body=&quot;我也是内容&quot; toa=&quot;null&quot;
    sc_toa=&quot;null&quot; service_center=&quot;null&quot; read=&quot;1&quot;
    status=&quot;-1&quot; locked=&quot;0&quot; /&gt;
  &lt;sms protocol=&quot;0&quot; address=&quot;+8613588888888&quot; date=&quot;1308641377000&quot;
    type=&quot;1&quot; subject=&quot;null&quot; body=&quot;我还是内容&quot; toa=&quot;null&quot;
    sc_toa=&quot;null&quot; service_center=&quot;null&quot; read=&quot;1&quot;
    status=&quot;-1&quot; locked=&quot;0&quot; /&gt;
&lt;/smses&gt;
</code></pre></div>
<p>与转换相关的就address、date、type和body四个属性。address是发信人的号码；date是短信发送日期的timestamp。这点nicholashan的确说错了，后面不需要加什么0的（实际上nicholashan自己也怀疑自己的说法）；type等于1表示别人发给你的短信，如果是2的话就是你发给其他人的短信；body就是短信内容了。</p>

<p>将Nokia中的时间转换到SMS Backup&amp;Restore的时间可以使用下面的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">DateFormat dt = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
long value = 1355296332000L;    // 2012-12-12 12:12:12
Element e = (Element)iter.next();
Attribute attr = e.attribute(&quot;DateTime&quot;);
try {
    value = dt.parse(attr.getValue()).getTime();
} catch (ParseException ex) {
}
</code></pre></div>
<p>完整的代码如下（使用dom4j实现XML解析）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;

public class Main {

    public static void main(String[] args) {
        try {
            SAXReader sr = new SAXReader();
            Document doc = sr.read(new File(args[0]));

            generateDocument(doc);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void generateDocument(Document doc) {
        List list = doc.selectNodes(&quot;//Message&quot;);

        Document document = DocumentHelper.createDocument();
        Element smses = document.addElement(&quot;smses&quot;);
        smses.addAttribute(&quot;count&quot;, String.valueOf(list.size()));

        DateFormat dt = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
        long value = 1355296332000L;    // 2012-12-12 12:12:12
        Iterator iter = list.iterator();
        while (iter.hasNext()) {
            Element e = (Element)iter.next();
            Attribute attr = e.attribute(&quot;DateTime&quot;);
            try {
                value = dt.parse(attr.getValue()).getTime();
            } catch (ParseException e) {
                System.out.println(e.getMessage());
            }
            Node phone = e.selectSingleNode(&quot;PhoneNumber&quot;);
            Node location = e.selectSingleNode(&quot;Location&quot;);
            Node text = e.selectSingleNode(&quot;Text&quot;);

            Element sms = smses.addElement(&quot;sms&quot;);
            sms.addAttribute(&quot;protocol&quot;, &quot;0&quot;);
            sms.addAttribute(&quot;address&quot;, phone.getText());
            sms.addAttribute(&quot;date&quot;, String.valueOf(value));
            if (&quot;Inbox&quot;.equals(location.getText())) {
                sms.addAttribute(&quot;type&quot;, &quot;1&quot;);
            } else if (&quot;Outbox&quot;.equals(location.getText())) {
                sms.addAttribute(&quot;type&quot;, &quot;2&quot;);
            }
            sms.addAttribute(&quot;subject&quot;, &quot;null&quot;);
            sms.addAttribute(&quot;body&quot;, text.getText());
            sms.addAttribute(&quot;toa&quot;, &quot;null&quot;);
            sms.addAttribute(&quot;sc_toa&quot;, &quot;null&quot;);
            sms.addAttribute(&quot;service_center&quot;, &quot;null&quot;);
            sms.addAttribute(&quot;read&quot;, &quot;1&quot;);
            sms.addAttribute(&quot;status&quot;, &quot;-1&quot;);
            sms.addAttribute(&quot;locked&quot;, &quot;0&quot;);
        }

        File f = new File(&quot;output.xml&quot;);
        XMLWriter output = new XMLWriter(new FileWriter(f));
        output.write(document);
        output.close();
    }
}
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[短信分拆算法]]></title>
    <link href="http://codemany.com/blog/sms-split-algorithm/"/>
    <updated>2007-11-22T21:34:47+08:00</updated>
    <id>http://codemany.com/blog/sms-split-algorithm</id>
    <content type="html"><![CDATA[<p>今天，突然心血来潮，写了一段分拆短信的代码。代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class SMSHelper {
    private static final int SMS_MAX_LENGTH = 70;

    public static List split(String msg) {
        if (msg.length() &lt;= SMS_MAX_LENGTH) {
            throw new IllegalArgumentException(&quot;被分拆的短信长度必须大于70个字符&quot;);
        }

        List&lt;String&gt; list = new ArrayList&lt;String&gt;();
        int i = 0, start = 0;
        while (true) {
            i++;
            String prompt = &quot;(第&quot; + i + &quot;条)&quot;;
            int remain = SMS_MAX_LENGTH - prompt.length();
            if (start + remain &gt; msg.length()) {
                list.add(prompt + msg.substring(start));
                break;
            }
            list.add(prompt + msg.substring(start, start + remain));
            start += remain;
        }
        return list;
    }
}
</code></pre></div>]]></content>
  </entry>
  
</feed>
