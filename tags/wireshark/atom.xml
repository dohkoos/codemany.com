<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Wireshark | 乐者为王]]></title>
  <link href="http://codemany.com/tags/wireshark/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-09-23T08:35:03+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[协议分析器的威力]]></title>
    <link href="http://codemany.com/blog/the-power-of-protocol-analyzers/"/>
    <updated>2016-09-20T18:06:40+08:00</updated>
    <id>http://codemany.com/blog/the-power-of-protocol-analyzers</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://arstechnica.com/information-technology/2016/09/the-power-of-protocol-analyzers/">http://arstechnica.com/information-technology/2016/09/the-power-of-protocol-analyzers/</a></p>

<p>问题发生在错综复杂的网络世界里。但要在一时激动之下确定一种新型问题的确切原因变得有些冒险。在这种情况下，当Google-fu耗尽的时候甚至其他能干的工程师也可能会被迫去依赖试错法。</p>

<p>幸运的是，有个秘密武器等待乐意的工程师去部署——协议分析器。该工具允许你明确地确定几乎任何错误的根源，给你提供在底层协议上自我学习的能力。现在唯一的问题是，许多工程师因为（毫无根据的）恐惧而完全回避它。</p>

<h3 id="什么是协议分析器？">什么是协议分析器？</h3>

<p>协议分析器，或者数据包嗅探器，是一个用于拦截通信量，存储它们，并以一个已解码的、人类可读的状态呈现它们的工具。现代协议分析器比如Wireshark甚至可以靠自己发现基本的问题，然后使用捕获的数据执行统计分析。</p>

<p>不理会功能，数据包嗅探器都以基本相同的方式工作。它们把自己插入到网络堆栈中，把所有通信量复制到一个缓冲区或文件。大部分还会将网络驱动置于“混杂模式”，该模式从根本上说允许这些工具取回所有进入网络堆栈的通信量，而不是只采集前往系统本身的通信量。</p>

<h3 id="how-protocol-analyzers-can-help">How protocol analyzers can help</h3>

<p>在很多情况下，解决一个困难的网络问题的最难部分是找到和理解问题的根源。这种困难的部分源于这样的事实，你对大多数问题使用的工具不是正确的对底层问题的工具。</p>

<p>如果你是一个系统管理员，很有可能你经常用于数据采集的工具是某种日志和错误消息。通常，这些都是解释工具。这些实体试图把原始数据总结为对非开发者或非工程师有意义的东西。因为解释工具是从应用层的视角提供问题的汇总数据，它们往往不能帮助你解决底层的问题。</p>

<p>例如，一条事件日志消息可以告诉你应用程序无法连接到服务器。它甚至可以告诉你根本原因是超时。但这条消息不大可能告诉你超时是由一个黑洞路由器丢弃一个大帧引起。它不能，因为事件日志消息服务不知道错误为何发生。为了使工具知道那个，它需要预测（不解释）这个非常问题，在MTU稳步减少的情况下发送数据包，直到一个通过。如果一个事件日志消息服务早就被编写好要做那件事，从一开始你就不会有这个问题。</p>

<p>当使用错误的工具时，你可能会在某处花上几个小时甚至几周的时间，直到你侥幸得到解决方案。然而，通过使用协议分析器和历久弥新的ping命令，你可以非常容易地在大约5分钟内诊断这个问题。就像我的汽车技术辅导员早在高中时就告诉我的，它全都是关于对任务使用恰当的工具。</p>

<p>Beyond identifying the error, protocol analyzers offer one of the few ways to prove the source of a problem. Back in my days at Microsoft, it was very common for tough problems to get shuttled back and forth between teams as each group misinterpreted the data provided by interpretive tools. First the issue might be sent to the Exchange team, then it might be shuttled to Active Directory team, and then finally to the Networking team.</p>

<p>Usually, this was because a problem would legitimately appear to be in another team’s wheelhouse. Often, however, the game of hot-potato stopped with the Networking team. Why? Because the Networking team’s number one tool is the one that proves the source of the problem.</p>

<p>Networking, like all of computing, is completely logical at its core. And once you understand how it works under the hood, you will be capable of identifying problems at the lowest level regardless of how unique an issue is. And as a great side-effect for protocol analysis, you’ll also learn an enormous amount about networking, which is knowledge that will carry through and help you solve all sorts of networking problems (even those that don’t require protocol analysis).</p>

<h3 id="wireshark基础">Wireshark基础</h3>

<p>These days, there are a variety of protocol analyzers to choose from, from the free and quite functional Microsoft Message Analyzer to the very feature-rich but quite expensive Savvius Omnipeek. I’ve used a number of analyzers over the years, but my favorite protocol analyzer for general troubleshooting is Wireshark. It’s a free, open-source, multi-platform analyzer with a lot of features. A vibrant community stands behind it, and Wireshark is also pretty easy to get used to. This makes it a fine place to start.</p>

<p>You can download Wireshark for your OS from <a href="https://www.wireshark.org/">https://www.wireshark.org/</a>. There’s nothing special about installing it, but if you are installing it for Windows, make sure you also install the bundled WinPCAP driver. This allows Wireshark to actually capture packets (without it, you can only view your archived captures).</p>

<p>Wireshark normally places your NIC in promiscuous mode. Normally, your NIC would only retain frames destined for either your MAC or the Broadcast MAC (FF-FF-FF-FF-FF-FF). With promiscuous mode enabled, however, your NIC retains all frames it hears.</p>

<p>Theoretically, this means that you should receive all packets on your Ethernet segment. Practically, however, almost all Ethernet networks these days are switched networks. If you want all the traffic, a little more work is required.</p>

<p>Once you have Wireshark installed, using it is pretty straightforward. Open it up, and you are presented with the screen shown below.</p>

<p><img src="/uploads/wireshark-network-analyzer.png" title="wireshark-network-analyzer" ></p>

<p>This screen presents you with the option of choosing a NIC to capture packets on and the option of entering a filter for capturing only a portion of inbound packets. If you select a NIC and click the little shark fin icon below the File menu, Wireshark will immediately begin capturing packets.</p>

<p>As packets are captured, Wireshark displays them in real time in the main interface. When you are ready to stop, you simply click on the little red square beside the shark fin icon.</p>

<p><img src="/uploads/wireshark-main-interface.png" title="wireshark-main-interface" ></p>

<p>The packet list section shows everything you have captured to this point, sorted (by default) in the order they were captured in. (You can sort these packets at will by clicking the heading you want to sort by.)</p>

<p>The packet details section shows you each header that Wireshark decoded in the packet. Basically, Wireshark has decoders for nearly every protocol in use today, and the decoder tool automatically applies to each packet in order to show you the data split into fields.</p>

<p>For instance, below, I’ve expanded the Ethernet II header for a typical HTTP packet.</p>

<p><img src="/uploads/wireshark-http-header.png" title="wireshark-http-header" ></p>

<p>You can clearly see that Wireshark has separated out the destination and source MAC addresses and the Type field, which is 0x800. The type field specifies that the next header should be an IP version 4 header, which Wireshark conveniently tells you.</p>

<p>This decoding feature saves you from having to count bytes and decode it yourself (though, if you are so inclined, you can still do so in the raw bytes section). Also of interest in the raw bytes section: Wireshark simultaneously provides an ASCII conversion for all data, which sometimes provides surprising data.</p>

<p><img src="/uploads/wireshark-ascii-view.png" title="wireshark-ascii-view" ></p>

<p>Wireshark comes with some pretty nifty analysis and statistical features, too, including the ability to measure response times and round-trip times. But by far, the most useful feature is the filtering function.</p>

<p>Directly above the packet list is a text box where you can enter display filters. By default, no filters are applied, meaning all packets that were captured are displayed. However, you often end up with information overload, and filtering out the noise is a very important part of packet analysis.</p>

<p>Filters in Wireshark follow a simple ‘language’ combining protocol fields, comparison operators, and logical operators in order to filter out packets that do not match the criteria. For example, the filter http will only display HTTP traffic, and the filter ip.addr == 192.168.1.10 will only display packets where either the source or destination IP address is 192.168.1.10.</p>

<p>When you are first getting started, the filtering can be a little intimidating, but often the easiest way to learn filters in Wireshark is to use the built-in expression tool. Accessing this starts by clicking the Expression button to the right of the filter text box.</p>

<p>This tool allows you to sort through all of the protocols Wireshark natively supports and pick the fields you want to filter by without knowing the filter verbs or syntax. Simply select the protocols, fill out the fields that appear, and the filter will be built for you.</p>

<p><img src="/uploads/wireshark-filter-expression.png" title="wireshark-filter-expression" ></p>
]]></content>
  </entry>
  
</feed>
