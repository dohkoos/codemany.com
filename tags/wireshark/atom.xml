<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Wireshark | 乐者为王]]></title>
  <link href="http://codemany.com/tags/wireshark/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-09-25T12:14:28+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[协议分析器的威力]]></title>
    <link href="http://codemany.com/blog/the-power-of-protocol-analyzers/"/>
    <updated>2016-09-20T18:06:40+08:00</updated>
    <id>http://codemany.com/blog/the-power-of-protocol-analyzers</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://arstechnica.com/information-technology/2016/09/the-power-of-protocol-analyzers/">http://arstechnica.com/information-technology/2016/09/the-power-of-protocol-analyzers/</a></p>

<p>问题发生在错综复杂的网络世界里。但要在一时激动之下确定一种新型问题的确切原因变得有些冒险。在这种情况下，当Google-fu耗尽的时候甚至其他能干的工程师也可能会被迫去依赖试错法。</p>

<p>幸运的是，有个秘密武器等待乐意的工程师去部署——协议分析器。该工具允许你明确地确定几乎任何错误的根源，给你提供在底层协议上自我学习的能力。现在唯一的问题是，许多工程师因为（毫无根据的）恐惧而完全回避它。</p>

<h3 id="什么是协议分析器？">什么是协议分析器？</h3>

<p>协议分析器，或者数据包嗅探器，是一个用于拦截通信量，存储它们，并以一个已解码的、人类可读的状态呈现它们的工具。现代协议分析器比如Wireshark甚至可以靠自己发现基本的问题，然后使用捕获的数据执行统计分析。</p>

<p>不理会特性，数据包嗅探器都以基本相同的方式工作。它们把自己插入到网络堆栈中，把所有通信量复制到一个缓冲区或文件。大部分还会将网络驱动置于“混杂模式”，该模式从根本上说允许这些工具取回所有进入网络堆栈的通信量，而不是只采集前往系统本身的通信量。</p>

<h3 id="协议分析仪如何帮助">协议分析仪如何帮助</h3>

<p>在很多情况下，解决一个困难的网络问题的最难部分是找到和理解问题的根源。这种困难的部分源于这样的事实，你对大多数问题使用的工具不是正确的对底层问题的工具。</p>

<p>如果你是一个系统管理员，很有可能你经常用于数据采集的工具是某种日志和错误消息。通常，这些都是解释工具。这些实体试图把原始数据总结为对非开发者或非工程师有意义的东西。因为解释工具是从应用层的视角提供问题的汇总数据，它们往往不能帮助你解决底层的问题。</p>

<p>例如，一条事件日志消息可以告诉你应用程序无法连接到服务器。它甚至可以告诉你根本原因是超时。但这条消息不大可能告诉你超时是由一个黑洞路由器丢弃一个大帧引起。它不能，因为事件日志消息服务不知道错误为何发生。为了使工具知道那个，它需要预测（不解释）这个非常问题，在MTU稳步减少的情况下发送数据包，直到一个通过。如果一个事件日志消息服务早就被编写好要做那件事，从一开始你就不会有这个问题。</p>

<p>当使用错误的工具时，你可能会在某处花上几个小时甚至几周的时间，直到你侥幸得到解决方案。然而，通过使用协议分析器和历久弥新的ping命令，你可以非常容易地在大约5分钟内诊断这个问题。就像早在高中时我的汽车技术辅导员就告诉我的，它全都是关于对任务使用恰当的工具。</p>

<p>除了确定错误，协议分析器提供为数不多的方法之一去证实问题的根源。以前我在微软的时候，棘手问题在团队间来回穿梭是很常见的，因为每个组误解由解释工具提供的数据。首先，问题可能被发送到Exchange团队，接着它可能被穿梭到Active Directory团队，然后最后到Networking团队。</p>

<p>通常，这是因为在其它团队的能力范围之内一个问题好像是合理的。然而，烫手山芋的游戏往往停止在Networking团队。为什么？因为Networking团队的头号工具是证实问题根源的救世主。</p>

<p>网络，像所有的计算，其核心是完全合乎逻辑的。一旦你了解它在幕后是如何工作的，你就有能力在底层确定问题，不论问题是多么独特。作为协议分析的一个伟大副作用，你也将学到很多关于网络的知识，它们将帮助你解决各种各样的网络问题（即使那些不需要协议分析）。</p>

<h3 id="wireshark基础">Wireshark基础</h3>

<p>现在，有各种各样的协议分析器可供选择，从免费的和相当功能的微软消息分析器到特性极其丰富但十分昂贵的Savvius Omnipeek。多年来我已经使用过大量的分析器，但我最喜欢的用于常规故障排除的协议分析器是Wireshark。它是免费的，开源的，多平台的具有很多特性的分析器。有个充满活力的社区站在它背后，而且Wireshark也相当容易习惯。这让它成为一个很好的开始的地方。</p>

<p>你可以从 <a href="https://www.wireshark.org/">https://www.wireshark.org/</a> 下载用于你操作系统的Wireshark。安装它没有什么特别的，但如果你是安装在Windows上，确保也安装了捆绑的WinPCAP驱动程序。这允许Wireshark实际上捕获数据包（没有它，你只能观看存档的数据包）。</p>

<p>Wireshark通常将你的NIC置于混杂模式。正常情况下，你的NIC只会保留前往你的MAC或者广播MAC（FF-FF-FF-FF-FF-FF）的帧。启用混杂模式后，不管怎样，你的NIC保留所有它听到的帧。</p>

<p>从理论上讲，这意味着你应该接收所有的在你Ethernet段上的数据包。不过，实际上如今几乎所有的Ethernet网络都是交换网络。如果你想接收所有的通信量，必须多做些工作。</p>

<p>一旦你已经安装了Wireshark，使用它是相当简单的。把它打开，你将看到如下显示的屏幕：</p>

<p><img src="/uploads/wireshark-network-analyzer.png" title="wireshark-network-analyzer" ></p>

<p>这个屏幕给你展示选择一个在它上面捕获数据包的NIC的选项和输入一个用于只捕获一部分入站数据包的过滤器的选项。如果你选择一个NIC然后点击在文件菜单下面的小鱼翅图标，Wireshark将立即开始捕获数据包。</p>

<p>随着数据包被捕获，Wireshark在主界面中实时地显示它们。当你准备停止时，你只需点击在鱼翅图标旁边的小红方块。</p>

<p><img src="/uploads/wireshark-main-interface.png" title="wireshark-main-interface" ></p>

<p>数据包列表部分显示在这个点捕获的每件事物，按它们被捕获的顺序排序（默认）。（你可以通过点击要作为排序依据的标题任意地排序这些数据包。）</p>

<p>数据包细节部分显示Wireshark解码的在数据包中的每个报头。基本上，Wireshark有几乎今天在用的每个协议的解码器，并且为了显示分成字段的数据，解码器工具自动应用到每个数据包。</p>

<p>举例来说，如下，我已经为一个典型的HTTP数据包增加了Ethernet II报头。</p>

<p><img src="/uploads/wireshark-http-header.png" title="wireshark-http-header" ></p>

<p>你可以清楚地看到Wireshark已经析出了Destination和Source的MAC地址，以及Type字段，它是0x0800。Type字段指出下个报头应该是一个IPv4报头，Wireshark很方便告诉你这个。</p>

<p>这个解码特性使你不必自己计算字节和解码它（不过，如果你愿意，你仍然还可以在原始字节部分做）。同样对原始字节部分有兴趣：Wireshark同时为所有数据提供ASCII转换，它有时提供令人惊讶的数据。在下图，你可以在ASCII视图里的这个数据包中清楚地看到HTTP请求发送的细节。</p>

<p><img src="/uploads/wireshark-ascii-view.png" title="wireshark-ascii-view" ></p>

<p>Wireshark同时也提供一些非常实用的分析和统计特性，包括测量响应时间和往返时间的能力。但到目前为止，最有用的特性是过滤功能。</p>

<p>在数据包列表直接的上方是一个文本框，那里你可以输入显示过滤器。默认不使用过滤器，意味着显示被捕获的所有数据包。然而，你经常最后得到信息过载，而过滤掉噪音是数据包分析的一个非常重要的部分。</p>

<p>Wireshark中的过滤器按照一门简单的语言结合协议字段、比较运算符和逻辑运算符以便过滤掉不匹配条件的数据包。例如，过滤器http将只显示HTTP通信量，而过滤器ip.addr == 192.168.1.10将只显示源或目标的IP地址是192.168.1.10的数据包。</p>

<p>当你是第一次开始的时候，过滤可能会有点令人生畏，但通常在Wireshark中学习过滤器的最简单的方法是使用内建的表达式工具。可以通过点击过滤器文本框右边的Expression按钮访问它。</p>

<p>这个工具允许你寻遍Wireshark本身支持的所有协议，挑选你想过滤的字段而不需要知道过滤器动词或语法。只需选择协议，填写呈现的字段，然后过滤器将会为你而建。这里，我使用表达式工具构建一个仅查找Ethernet广播的过滤器。</p>

<p><img src="/uploads/wireshark-filter-expression.png" title="wireshark-filter-expression" ></p>

<p>注意工具如何在底部的绿框中显示最终的过滤器语法。通过注意这个字段，你将最终变得熟悉你的最常用的过滤器。</p>

<p>然而，你不能用表达式工具做的一件事是把过滤器串起来。因为那个原因，你需要学习一些逻辑运算符。Wireshark的基本逻辑运算符是and（&amp;&amp;）、or（||）和not（!）。</p>

<p>and被用于结合过滤器，只有满足所有条件的数据包会被显示。例如，过滤器http &amp;&amp; ip.addr == 192.168.1.10将只显示在第7层报头中的HTTP协议和在IP报头中的IP地址192.168.1.10两者都包括的数据包。</p>

<p>or被用于查找两者中任何一方的过滤器，因此满足你输入的任何条件的数据包会被显示。举例来说，过滤器http || ip.addr == 192.168.1.10将显示在第7层报头中的HTTP协议或在IP报头中的IP地址192.168.1.10的数据包。</p>

<p>not被用于从结果中过滤掉一些东西。例如，过滤器ip.addr == 192.168.1.10 ! http将显示有在IP报头中的IP地址192.168.1.10但没有在第7层报头中的HTTP协议的数据包。</p>

<p>关于基本的Wireshark功能最后要注意的事是，除保存你的原始捕获外，你也有多种多样的选项导出捕获。</p>

<p>首先，你导出当前选择的数据包、所有数据包、你标记的数据包或者一段范围的数据包。在这些选项的每一个中，你可以选择导出所有被捕获的数据包或只是被显示的数据包（考虑当前应用的过滤器）。这些选项让你非常具体地知道你想导出哪些数据包。</p>

<p><img src="/uploads/wireshark-export-packets.png" title="wireshark-export-packets" ></p>

<p>此外，你可以把数据包导出成几乎任何常用的格式。在Wireshark中用于文档和电子邮件转出的最好的特性之一是以纯文本或CSV格式导出解剖数据包（完整的数据包解码）的能力。要做到这个，只需从文件菜单里选择“Export Packet Dissections”。</p>

<h3 id="理解你所看到的">理解你所看到的</h3>

<p>尽管所有这些功能都很好，底线是如果你不明白在每个报头中字段的目的它们都是无用的。幸运的是，除了少量专有协议，你遇到的几乎每个协议的规格说明都是免费在线的。</p>

<p>例如：Ethernet，你可以直接到IEEE下载标准；802.3标准可以在 <a href="http://standards.ieee.org/about/get/802/802.3.html">http://standards.ieee.org/about/get/802/802.3.html</a> 获得。它是免费的直接来自权威人士。如果你在查找802.3 Ethernet帧格式，你将发现真的只有3个感兴趣的字段：目标MAC地址、源MAC地址和类型/长度字段。下图中在Wireshark解剖体左边的是来自IEEE 802.3规则说明Section 1中Part 3.1.1的Figure 3-1：</p>

<p><img src="/uploads/wireshark-packet-format.png" title="wireshark-packet-format" ></p>

<p>If you are wondering what happened to the preamble and the SFD, they are removed before the frame is passed up the stack from the NIC to Wireshark. Similarly, you won’t normally see the FCS at the end, as it is stripped prior to passing the frame up.</p>

<p>Above layer 2, all TPCTCP/IP protocols are governed by the IETF and are defined by RFCs (Requests for Comments). All of these RFCs are instantly and freely available on the site rfc-editor.org. While they can be a little terse (and for that reason sometimes difficult to understand), they are always correct, and clarifications on specific issues are available with a quick Google search.</p>

<p>As an example, one of the things that normally confuses novices is the massive number of TCP resets, or packets that have the RST flag turned on in the TCP header. Looking through RFC 793 (TCP), you would probably get the impression that a RST always signals something bad. Almost all of the 35 or so mentions of RST are in association with an error condition of some sort.</p>

<p>However, a quick Google search using the keywords ‘tcp rst from client’ will get you a lot of good discussions about the phenomenon. Perhaps the best is from the Wireshark forums, where they explain this is usually due to the client application simply being coded to reset the connection rather than gracefully shut it down. In this situation, the server has already sent a FIN. Instead of replying with a FIN/ACK and waiting for the final ACK, the client just optimizes the process by sending a RST and aborting the session. This can clearly be seen in the example below.</p>

<p>In addition to the specs and Google, another good source for learning how protocols typically function is repositories of example traces. These allow you to view fairly typical operations of protocols both common and obscure, as well as some very unusual errors you might not normally run into.</p>

<p>一个不错的开始的地方是Wireshark Wiki上的样板捕获：<a href="https://wiki.wireshark.org/SampleCaptures">https://wiki.wireshark.org/SampleCaptures</a> 。 A large number of very useful captures are here for you to download and experiment with filtering and other Wireshark features, including interesting errors like broadcast storms, viruses, and attack suites. If these are not enough, there are links on this page for several other sources to assist you. But undoubtedly, the fastest way to get good at protocol analysis is to look at lots of captures and attempt to understand the protocols used.</p>

<h3 id="如何得到好的捕获">如何得到好的捕获</h3>

<p>All of the understanding in the world won’t help if you aren’t capturing the right data. At a most basic level, the goal is to only capture packets that relate to the problem you are trying to solve, effectively reducing the ‘noise’ in your trace.</p>

<p>To assist this, you can use a capture filter to exclude all data from the capture except that which matches the filter. This works great if you know exactly what you are looking for, but often this approach will cause you to miss something important. Most of the time you only have a rough idea of what the issue is, or you forget some underlying process that’s critical to finding the error. If this occurs, then you are out of luck using a capture filter, and you can’t go back and ‘unfilter’ the capture without retaking it.</p>

<p>For example, in troubleshooting a performance problem with a website, you may decide to take a capture from the Web server itself with a capture filter set to only capture data going to/from the client system and the SQL server backend. However, the problem might actually be that the authentication server the Web server is using is simply overloaded, and waiting on authentication is actually what is causing the entire performance problem. You would never find this problem with your chosen capture filter.</p>

<p>This is the reason I prefer to capture all data and use display filters to reduce the noise in the trace. This is not to say capture filters are entirely unnecessary. One common use of capture filters is when you have a very busy gigabit or 10gig connection that you are capturing on, and capture filters become useful simply due to the massive volume of data. Still, you always need to keep in mind the limitations of the filter.</p>

<p>The second part of taking a good capture is to correctly identify the system or systems you need to capture from. For instance, in the previous example of the Web server with the performance problem, I would probably initially take a simultaneous capture from both the Web server and the Web client. This is so that you can see any deviation from the normal expected behavior on either side, which helps you isolate the problem to either the server or the client.</p>

<p>Once I determined that the delay was a server-side problem related to authentication, I would then take another trace from both the Web server and the authentication server. This way, I could see if the problem was local to the authentication server or if waiting on another service like DNS or the Global Catalog was actually the culprit.</p>

<p>The third step to taking a good capture is to take a capture during both success and failure conditions. For instance, if you are having an intermittent Web server performance problem, try to take traces both when the site is performing normally and when it is not. This gives you a ‘good’ and ‘bad’ comparison trace that you can use to isolate the problem.</p>

<p>Finally, when dealing with an intermittent problem, you may find that it’s difficult to get a failure capture. In these cases, Wireshark has a special feature called a ring buffer that allows you to capture continuously.</p>

<p>Normally, especially on a busy network, continuous captures would run the risk of filling your disk. But with a ring buffer, Wireshark writes to a file until it reaches a specified size or a certain time has elapsed, then it will switch to a new file. Once the specified number of files has been written to, the program deletes the oldest. For example, take a look at the settings I have defined below:</p>

<p><img src="/uploads/wireshark-capture-interfaces.png" title="wireshark-capture-interfaces" ></p>

<p>This configuration tells Wireshark to create a new file every 10 minutes regardless of file size, and it makes sure the program keeps three total files, deleting the oldest as needed. This ensures that I have 30 minutes from the time of the error to be notified and stop the capture. This is a very useful technique to capture very intermittent problems.</p>

<p>These are all of the basic techniques that you need in order to get started troubleshooting with Wireshark. Using these techniques and resources, you’ll find you can often find, and prove, the causes of network problems in much less time than nearly any other technique. Happy troubleshooting.</p>
]]></content>
  </entry>
  
</feed>
