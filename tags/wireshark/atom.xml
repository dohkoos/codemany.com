<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Wireshark | 乐者为王]]></title>
  <link href="http://codemany.com/tags/wireshark/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-09-21T13:59:39+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[协议分析器的威力]]></title>
    <link href="http://codemany.com/blog/the-power-of-protocol-analyzers/"/>
    <updated>2016-09-20T18:06:40+08:00</updated>
    <id>http://codemany.com/blog/the-power-of-protocol-analyzers</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://arstechnica.com/information-technology/2016/09/the-power-of-protocol-analyzers/">http://arstechnica.com/information-technology/2016/09/the-power-of-protocol-analyzers/</a></p>

<p>问题发生在错综复杂的网络世界里。但要在一时激动之下确定一种新型问题的确切原因变得有些冒险。在这种情况下，当Google-fu耗尽的时候甚至其他能干的工程师也可能会被迫去依赖试错法。</p>

<p>幸运的是，有个秘密武器等待乐意的工程师去部署——协议分析器。该工具允许你明确地确定几乎任何错误的来源，给你提供在底层协议上自我学习的能力。现在唯一的问题是，许多工程师因为（毫无根据的）恐惧而完全回避它。</p>

<h3 id="什么是协议分析器？">什么是协议分析器？</h3>

<p>协议分析器，或者包嗅探器，是一个用于拦截通信量，存储它们，并以一个已解码的、人类可读的状态呈现它们的工具。现代协议分析器比如Wireshark甚至可以靠自己发现基本的问题，然后使用捕获的数据执行统计分析。</p>

<p>Regardless of features, packet sniffers all work the same basic way. They insert themselves into the network stack and copy all traffic out to a buffer or file. Most will also place the network driver into “promiscuous mode,” which basically allows these tools to retrieve all traffic that enters the network stack instead of only gathering traffic destined for the system itself.</p>

<h3 id="how-protocol-analyzers-can-help">How protocol analyzers can help</h3>

<p>In a lot of cases, the hardest part of solving a difficult network problem is finding and understanding the problem’s source. Part of this difficulty stems from the fact that the tools you use for most of your problems are not the correct tools for lower-layer problems.</p>

<p>If you are an administrator, chances are your go-to tools for data gathering are logs of some sort and error messages. Generally, both of these are interpretive tools. These entities attempt to summarize raw data into something that makes sense to non-developers or non-engineers. And since interpretive tools are providing summary data of the problem from the perspective of the Application layer, they often can’t help you with lower-layer problems.</p>

<p>For example, an event log message may tell you that an application failed to connect to the server. It may even tell you that the root cause was a timeout. But this message is very unlikely to tell you that the timeout was caused by a black-hole router discarding a large frame. It can’t, because the event log message service doesn’t know why the error occurred. In order for the tool to know that, it would need to be anticipating (not interpreting) this very problem, sending packets where the MTU is steadily reduced until one gets through. If an event log message service was programmed to do that, you wouldn’t have the problem in the first place.</p>

<p>When using the wrong tools, you may spend somewhere between hours and weeks stumbling around until you luck onto the solution. However, by using a protocol analyzer and the good old ping command, you can very easily diagnose this problem in about five minutes. Like my auto tech instructor told me way back in high school, it’s all about using the right tool for the job.</p>

<p>Beyond identifying the error, protocol analyzers offer one of the few ways to prove the source of a problem. Back in my days at Microsoft, it was very common for tough problems to get shuttled back and forth between teams as each group misinterpreted the data provided by interpretive tools. First the issue might be sent to the Exchange team, then it might be shuttled to Active Directory team, and then finally to the Networking team.</p>

<p>Usually, this was because a problem would legitimately appear to be in another team’s wheelhouse. Often, however, the game of hot-potato stopped with the Networking team. Why? Because the Networking team’s number one tool is the one that proves the source of the problem.</p>

<p>Networking, like all of computing, is completely logical at its core. And once you understand how it works under the hood, you will be capable of identifying problems at the lowest level regardless of how unique an issue is. And as a great side-effect for protocol analysis, you’ll also learn an enormous amount about networking, which is knowledge that will carry through and help you solve all sorts of networking problems (even those that don’t require protocol analysis).</p>

<h3 id="wireshark-basics">Wireshark basics</h3>

<p>These days, there are a variety of protocol analyzers to choose from, from the free and quite functional Microsoft Message Analyzer to the very feature-rich but quite expensive Savvius Omnipeek. I’ve used a number of analyzers over the years, but my favorite protocol analyzer for general troubleshooting is Wireshark. It’s a free, open-source, multi-platform analyzer with a lot of features. A vibrant community stands behind it, and Wireshark is also pretty easy to get used to. This makes it a fine place to start.</p>

<p>You can download Wireshark for your OS from <a href="https://www.wireshark.org/">https://www.wireshark.org/</a>. There’s nothing special about installing it, but if you are installing it for Windows, make sure you also install the bundled WinPCAP driver. This allows Wireshark to actually capture packets (without it, you can only view your archived captures).</p>

<p>Wireshark normally places your NIC in promiscuous mode. Normally, your NIC would only retain frames destined for either your MAC or the Broadcast MAC (FF-FF-FF-FF-FF-FF). With promiscuous mode enabled, however, your NIC retains all frames it hears.</p>

<p>Theoretically, this means that you should receive all packets on your Ethernet segment. Practically, however, almost all Ethernet networks these days are switched networks. If you want all the traffic, a little more work is required.</p>

<p>Once you have Wireshark installed, using it is pretty straightforward. Open it up, and you are presented with the screen shown below.</p>
]]></content>
  </entry>
  
</feed>
