<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SQL | 乐者为王]]></title>
  <link href="http://codemany.com/tags/sql/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-05-24T08:35:33+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何显示Hibernate的SQL参数值-P6Spy]]></title>
    <link href="http://codemany.com/blog/how-to-display-hibernate-sql-parameter-values-p6spy/"/>
    <updated>2012-10-05T11:24:12+08:00</updated>
    <id>http://codemany.com/blog/how-to-display-hibernate-sql-parameter-values-p6spy</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.mkyong.com/hibernate/how-to-display-hibernate-sql-parameter-values-solution/">http://www.mkyong.com/hibernate/how-to-display-hibernate-sql-parameter-values-solution/</a></p>

<h3 id="问题">问题</h3>

<p>有许多开发者问及Hibernate的SQL参数值问题。如何显示Hibernate传递给数据库的SQL参数值？Hibernate只会把所有的参数值显示为问号(?)。使用<a href="http://www.mkyong.com/hibernate/hibernate-display-generated-sql-to-console-show_sql-format_sql-and-use_sql_comments/">show_sql</a>属性，Hibernate会显示所有生成的SQL语句，但不显示SQL参数值。</p>

<p>例如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Hibernate: insert into mkyong.stock_transaction (CHANGE, CLOSE, DATE, OPEN, STOCK_ID, VOLUME)
values (?, ?, ?, ?, ?, ?)
</code></pre></div>
<p>有没有办法记录或显示确切的Hibernate的SQL参数值呢？</p>

<h3 id="解决方案-p6spy">解决方案-P6Spy</h3>

<p>好吧，如果有问题那么肯定就会有答案~</p>

<p>P6Spy是一个可以在SQL语句和参数值被发送到数据库之前把它们都记录下来的实用库。P6Spy是免费的，它拦截并记录所有数据库SQL语句到一个日志文件中，它适用于任何使用JDBC驱动的应用程序。</p>

<h4 id="1-下载p6spy库">1. 下载P6Spy库</h4>

<p>获取p6spy-install.jar，你可以从以下地址下载：</p>

<ol>
<li><a href="http://www.p6spy.com/">P6Spy官方网站</a>。</li>
<li><a href="http://sourceforge.net/projects/p6spy/">P6Spy在Sourceforge.net</a>。</li>
</ol>

<h4 id="2-解压">2. 解压</h4>

<p>解压p6spy-install.jar文件，查找p6spy.jar和spy.properties。</p>

<h4 id="3-添加库依赖">3. 添加库依赖</h4>

<p>把p6spy.jar添加到项目库依赖中。</p>

<h4 id="4-修改p6spy属性文件">4. 修改P6Spy属性文件</h4>

<p>修改数据库配置文件。你需要把现有的JDBC驱动替换为P6Spy的JDBC驱动——com.p6spy.engine.spy.P6SpyDriver。</p>

<p>原来的是MySQL的JDBC驱动——com.mysql.jdbc.Driver：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;session-factory&gt;
    &lt;property name=&quot;hibernate.bytecode.use_reflection_optimizer&quot;&gt;false&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/mkyong&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.password&quot;&gt;password&lt;/property&gt;
    &lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
    &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;
&lt;/session-factory&gt;
</code></pre></div>
<p>把它改成P6Spy的JDBC驱动——com.p6spy.engine.spy.P6SpyDriver：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;session-factory&gt;
    &lt;property name=&quot;hibernate.bytecode.use_reflection_optimizer&quot;&gt;false&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.p6spy.engine.spy.P6SpyDriver&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/mkyong&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;
    &lt;property name=&quot;hibernate.connection.password&quot;&gt;password&lt;/property&gt;
    &lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
    &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;
&lt;/session-factory&gt;
</code></pre></div>
<h4 id="5-修改p6spy属性文件">5. 修改P6Spy属性文件</h4>

<p>修改P6Spy属性文件——spy.properties。</p>

<p>用现有的MySQL的JDBC驱动替换“real driver”：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">realdriver=com.mysql.jdbc.Driver

#specifies another driver to use
realdriver2=
#specifies a third driver to use
realdriver3=
</code></pre></div>
<p>修改logfile属性中的日志文件位置，所有的SQL语句将会被记录到这个文件里。</p>

<p>Windows</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">logfile     = c:/spy.log
</code></pre></div>
<p>*nix</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">logfile     = /srv/log/spy.log
</code></pre></div>
<h4 id="6-把spy-properties复制到项目的classpath">6. 把spy.properties复制到项目的classpath</h4>

<p>把spy.properties复制到项目根目录，确保项目可以定位到spy.properties，否则它会提示spy.properties文件没有找到。</p>

<h4 id="7-完成">7. 完成</h4>

<p>运行应用程序并做一些数据库事务，你会注意到所有从应用程序发送到数据库的SQL语句将被记录到你在spy.properties中指定的一个文件中。</p>

<p>示例日志文件如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">insert into mkyong.stock_transaction (CHANGE, CLOSE, DATE, OPEN, STOCK_ID, VOLUME)
values (?, ?, ?, ?, ?, ?)|
insert into mkyong.stock_transaction (CHANGE, CLOSE, DATE, OPEN, STOCK_ID, VOLUME)
values (10.0, 1.1, &#39;2009-12-30&#39;, 1.2, 11, 1000000)
</code></pre></div>
<h3 id="总结">总结</h3>

<p>坦率地说，P6Spy在减少开发者的调试时间方面非常有用。只要你的项目是使用JDBC驱动来连接，P6Spy就能够为你记录所有的SQL语句和参数值。</p>

<h3 id="对于maven用户">对于Maven用户</h3>

<p>你可以在pom.xml中添加以下内容来下载P6Spy依赖：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;dependency&gt;
    &lt;groupId&gt;p6spy&lt;/groupId&gt;
    &lt;artifactId&gt;p6spy&lt;/artifactId&gt;
    &lt;version&gt;1.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div>
<p>不过下载下来的包中并没有spy.properties文件，你必须自己创建它。或者你可以下载这里的——<a href="http://www.mkyong.com/wp-content/uploads/2008/12/spy.properties.zip">spy.properties</a>模板。</p>

<h3 id="参考资料">参考资料</h3>

<ol>
<li><a href="http://www.p6spy.com/documentation/install.htm">P6Spy configuration</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL连接总结]]></title>
    <link href="http://codemany.com/blog/summary-of-sql-join/"/>
    <updated>2012-07-02T09:44:51+08:00</updated>
    <id>http://codemany.com/blog/summary-of-sql-join</id>
    <content type="html"><![CDATA[<p>连接（join）可以在SELECT语句的FROM子句或WHERE子句中建立，在FROM子句中指出连接时有助于将连接操作与WHERE子句中的搜索条件区分开来。连接可以对同一个表操作，也可以对多个表操作，对同一个表操作的连接称为自连接（self join）。</p>

<p>连接类型（join type）分为三种：内连接、外连接和交叉连接。</p>

<ul>
<li>内连接（inner join）：使用比较运算符进行表间某（些）列数据的比较操作，并列出这些表中与连接条件相匹配的数据行。</li>
<li>外连接（outer join）：与内连接不同的是外连接不只列出与连接条件相匹配的行，而且列出左表（左外连接时）、右表（右外连接时）或两个表（全外连接时）中所有符合条件的数据行。</li>
<li>交叉连接（cross join）：返回连接表中所有数据行的笛卡尔积。</li>
</ul>

<p>内/外链接可以分为等值连接和不等连接：</p>

<ul>
<li>等值连接（equijoin）：在连接条件中使用等于（=）运算符比较被连接列的列值，其查询结果中列出被连接表中的所有列，包括其中的重复列。</li>
<li>不等连接（non-equijoin）：在连接条件使用除等于运算符以外的其它比较运算符比较被连接的列的列值。</li>
</ul>

<p>注意：自然连接（natural join）是一种特殊的等值连接。它使用选择列表指出查询结果中所包括的列，由此删除连接表中的重复列。</p>

<p>books数据表：</p>

<p><img src="/uploads/books-table.png" title="books-table" ></p>

<p>publishers数据表：</p>

<p><img src="/uploads/publishers-table.png" title="publishers-table" ></p>

<p>自连接查询：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT * FROM books b1 [INNER] JOIN books b2 ON b1.price = b2.price
</code></pre></div>
<p><img src="/uploads/self-join.png" title="self-join" ></p>

<p>内连接（简称连接）查询：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT * FROM books b [INNER] JOIN publishers p ON b.publisher_id = p.publisher_id
</code></pre></div>
<p><img src="/uploads/inner-join.png" title="inner-join" ></p>

<p>自然连接查询：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT b.*, p.name FROM books b [INNER] JOIN publishers p ON b.publisher_id = p.publisher_id
</code></pre></div>
<p><img src="/uploads/natural-join.png" title="natural-join" ></p>

<p>左外连接（简称左连接）查询：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT * FROM books b LEFT [OUTER] JOIN publishers p ON b.publisher_id = p.publisher_id
</code></pre></div>
<p><img src="/uploads/left-outer-join.png" title="left-outer-join" ></p>

<p>右外连接（简称右连接）查询：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT * FROM books b RIGHT [OUTER] JOIN publishers p ON b.publisher_id = p.publisher_id
</code></pre></div>
<p><img src="/uploads/right-outer-join.png" title="right-outer-join" ></p>

<p>全外连接（简称全连接）查询：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT * FROM books b FULL [OUTER] JOIN publishers p ON b.publisher_id = p.publisher_id
</code></pre></div>
<p><img src="/uploads/full-outer-join.png" title="full-outer-join" ></p>

<p>交叉连接查询：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SELECT * FROM books CROSS JOIN publishers
</code></pre></div>
<p><img src="/uploads/cross-join.png" title="cross-join" ></p>

<p>下图是由Moffatt在2008年制作的连接集合表示：</p>

<p><img src="/uploads/sql-joins.jpg" title="sql-joins" ></p>
]]></content>
  </entry>
  
</feed>
