<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Paperclip | 乐者为王]]></title>
  <link href="http://codemany.com/tags/paperclip/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-06-05T00:07:12+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用jQuery、Rails 4和Paperclip进行多文件上传]]></title>
    <link href="http://codemany.com/blog/multiple-file-upload-with-jquery-rails-4-and-paperclip/"/>
    <updated>2013-10-27T08:21:48+08:00</updated>
    <id>http://codemany.com/blog/multiple-file-upload-with-jquery-rails-4-and-paperclip</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://5minutenpause.com/blog/2013/09/04/multiple-file-upload-with-jquery-rails-4-and-paperclip/">https://5minutenpause.com/blog/2013/09/04/multiple-file-upload-with-jquery-rails-4-and-paperclip/</a></p>

<p>在最近的项目中，我需要一个方便的文件上传器。我想要多文件上传和进度条。我想要它们都能与<a href="http://getbootstrap.com/">Bootstrap</a>一起工作。<a href="http://blueimp.github.io/jQuery-File-Upload/">jQuery File Upload</a>能够满足这些需求。初看上去它似乎不容易使用，在研究后我发现Ryan Bates做过一个关于<a href="http://railscasts.com/episodes/381-jquery-file-upload">jQuery文件上传</a>的<a href="http://railscasts.com/">railscast</a>。不幸的是，这个railscast使用了Rails 3和旧的jQuery版本。所以我必须调整它。涉及这个主题的其它博文都开始于2012年甚至更早，在这里是新的Rails 4版本。</p>

<p>我们不是生活在真空中，所以会经常性地使用已有的想法（<a href="http://everythingisaremix.info/blog/everything-is-a-remix-the-ted-talk">一切都是混合</a>），因此我没有试图去提出一个完全原创的解决方案，下面我的实现是基于Ryans的工作。</p>

<p><strong>更新：</strong>我为这篇文章创建了一个<a href="https://github.com/5minpause/multiple-file-upload">GitHub仓库</a>。你可以将其用作本文中我使用的所有内容的完整工作副本。我使用这些提交来跟踪博客文章，以便你可以使用它们“重播”我的实现。如果有任何问题，请<a href="https://github.com/5minpause/multiple-file-upload/issues">在GitHub打开一个issue</a>，并在那里询问，或者就在本文后面发布你的评论。谢谢。</p>

<p><strong>更新2：</strong>Paul Walker在评论中指出了如何解决Turbolinks的问题。如果你也有这种情况，请看<a href="http://5minutenpause.com/blog/2013/09/04/multiple-file-upload-with-jquery-rails-4-and-paperclip/#comment-1595778720">他对Turbolinks的评论</a>。</p>

<p><strong>更新3：</strong>如果你想知道如何在后台完成图片处理，请参阅<a href="http://5minutenpause.com/blog/2014/10/24/comprehensive-guide-to-background-processing-of-uploads-with-activejob-and-rails-4-dot-2">我的这个主题的新帖子</a>。我会给你展示如何使用Rails 4.2的Active Job和Delayed Job来实现后台处理。</p>

<h3 id="gem和资源文件">Gem和资源文件</h3>

<p>我们从Gemfile开始，添加<code>jquery-fileupload-rails</code>这个gem。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;jquery-fileupload-rails&#39;
</code></pre></div>
<p>使用<code>bundle install</code>安装所有gem。</p>

<p>安装后，你需要在你的application.js中引入以下这些文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">//= require jquery
//= require jquery_ujs
//= require jquery-fileupload/basic
//= require jquery-fileupload/vendor/tmpl
//= require_tree .
</code></pre></div>
<p>我们在这里使用基本版本，并且包含<code>jquery-fileupload/vendor/tmpl</code>，所以我们可以选择渲染我们自己的模板。</p>

<h3 id="视图">视图</h3>

<p>我们有个表单用于上传文件，并将JavaScript模板包含在文件的底部。有件事要注意：模板脚本必须是没有换行或空格的单行程序。否则jQuery会抱怨：<code>Uncaught Syntax error, unrecognized expression: [object Object]</code>。另一个解决方案是使用<code>$.parseHTML();</code>。接下来我会给你展示如何在uploads.js.coffee中做到这点。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= form_for Upload.new, :url =&gt; uploads_path, html: { multipart: true } do |f| %&gt;
  &lt;%= f.label :uploaded_file, t(&#39;.upload_new_file&#39;) %&gt;
  &lt;%= f.file_field :uploaded_file, multiple: true, name: &#39;upload[uploaded_file]&#39; %&gt;
  &lt;%= f.submit t(:save), class: &#39;btn&#39; %&gt;
&lt;% end %&gt;

&lt;% # jquery upload template # %&gt;
&lt;script id=&quot;template-upload&quot; type=&quot;text/x-tmpl&quot;&gt;
  &lt;div class=&quot;upload&quot;&gt;
    { %=o.name % }&lt;div class=&quot;progress&quot;&gt;&lt;div class=&quot;bar&quot; style=&quot;width: 0%&quot;&gt;&lt;/div&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;
</code></pre></div>
<p>因为要返回JavaScript脚本，所以:create成功后要渲染的文件如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% if @upload.new_record? %&gt;
  alert(&#39;Failed&#39;);
&lt;% else %&gt;
  $(&#39;ul.thumbnails&#39;).append(&quot;&lt;%=j render partial: &#39;photosets/upload&#39;, locals: { upload: @upload } %&gt;&quot;);
&lt;% end %&gt;
</code></pre></div>
<p>当你点击提交以上传你的图片时，实际发生的是你上传的每张图片都有多次提交。现在我们需要处理这些提交。我们在CoffeeScript文件里面做这些：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">jQuery -&gt;
  $(&#39;#upload_uploaded_file&#39;).attr(&#39;name&#39;,&#39;upload[uploaded_file]&#39;)
  $(&#39;#new_upload&#39;).fileupload
    dataType: &#39;script&#39;
    add: (e, data) -&gt;
      types = /(\.|\/)(gif|jpe?g|png|mov|mpeg|mpeg4|avi)$/i
      file = data.files[0]
      if types.test(file.type) || types.test(file.name)
        data.context = $(tmpl(&quot;template-upload&quot;, file))
        $(&#39;#new_upload&#39;).append(data.context)
        data.submit()
      else
        alert(&quot;#{file.name} is not a gif, jpg or png image file&quot;)
    progress: (e, data) -&gt;
      if data.context
        progress = parseInt(data.loaded / data.total * 100, 10)
        data.context.find(&#39;.bar&#39;).css(&#39;width&#39;, progress + &#39;%&#39;)
</code></pre></div>
<p>这里我们检查文件的类型是图片还是电影。否则，我们将向用户显示不允许该文件的警告。如果文件被允许，我们使用文件的数据渲染模板，并将其附加到我们的图片列表中（这里没有显示代码——你可以很容易地弄明白）。然后我们提交文件进行实际上传并保存到数据库。此外，我们显示每个上传文件的进度条。</p>

<p>upload.js.coffee中的第2行用于将upload_file的名称从数组改为单个上传（从<code>upload[uploaded_file][]</code>到<code>upload[uploaded_file]</code>）。否则，上传数组会使Paperclip抛出错误<code>Paperclip::AdapterRegistry::NoHandlerError</code>。你可以使用file_field的name属性设置值，但那对我来说无法可靠地工作。</p>

<p>我在之前说过，你必须避免模板中的换行符。如果你将第9行改为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">data.context = $($.parseHTML($(tmpl(&quot;template-upload&quot;, file)))[1])
</code></pre></div>
<p>应该可以保持你的换行。我在<a href="http://stackoverflow.com/a/15563364/299781">Stack Overflow</a>发现这个，但没有尝试过。但它看起来应该没问题。</p>

<p>控制器动作很简单：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def create
  @upload = Upload.create(upload_params)
end
</code></pre></div>
<p>这是个简单的实现。你可以做的更多。仔细看看<a href="http://blueimp.github.io/jQuery-File-Upload/">jQuery File Upload</a>的文档。如果你有任何问题，可以在twitter或app.net上询问我，我很乐意为你提供帮助。谢谢阅读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 2.3和Paperclip实现多图片上传（改进版）]]></title>
    <link href="http://codemany.com/blog/upload-multiple-images-with-paperclip-rails-23-improved/"/>
    <updated>2011-04-28T06:48:00+08:00</updated>
    <id>http://codemany.com/blog/upload-multiple-images-with-paperclip-rails-23-improved</id>
    <content type="html"><![CDATA[<p>从Rails 2.3开始，有了新的方法来处理多模型表单，这就是accepts_nested_attributes_for，它允许直接赋值到子对象上，对于标准的属性使用相同的哈希格式。</p>

<p>例如，一个parent有多个children，包含所有类的POST数据将会是下面这样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">params =&gt;
  action =&gt; update
  id =&gt; 1
  controller =&gt; parents
  parent =&gt;
    first_name =&gt; John
    last_name =&gt; Doe
    age =&gt; 40
    children_attributes =&gt;
      1 =&gt; { id =&gt; 16, :name =&gt; Jack }
      2 =&gt; { id =&gt; 18, :name =&gt; Mary }
</code></pre></div>
<p>注意，那个children_attributes元素在parent的元素中。fields_for会为这些子元素生成必要的POST数据，这些数据会被转换成方便accepts_nested_attributes_for解释的哈希。children_attributes不是数组而是哈希，它的键是一个简单的索引（不是模型的ID），被用来从一个单一的实体聚合属性。</p>

<p>不用ID的理由是简单的：正在被编辑的模型可能不会被保存，发送到了客户端，这时它的ID为nil。因此为每个被显示的children的id关联一个隐藏字段是个好的实践。</p>

<p>下面我们就用accepts_nested_attributes_for来改写上传多图片的代码。</p>

<p>修改albums_controller.rb中的new方法，删除下面的这句代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">1.upto(3) { @album.photos.build }
</code></pre></div>
<p>将album.rb中的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def photo_attributes=(photo_attributes)
  photo_attributes.each do |attributes|
    photos.build(attributes)
  end
end
</code></pre></div>
<p>代码改成</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">accepts_nested_attributes_for :photos
</code></pre></div>
<p>修改_form.html.erb中的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;photos&quot;&gt;
  &lt;% if @album.new_record? %&gt;
    &lt;%= render :partial =&gt; &#39;photo&#39;, :collection =&gt; @album.photos %&gt;
  &lt;% end %&gt;
&lt;/div&gt;

&lt;%= link_to_function &quot;Add Photo&quot; do |page| page.insert_html :bottom, :photos, :partial =&gt; &#39;photo&#39;, :object =&gt; Photo.new end %&gt;
</code></pre></div>
<p>为下面的代码</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;photos&quot;&gt;
  &lt;% if @album.new_record? %&gt;
    &lt;%= render :partial =&gt; &#39;photo&#39;, :locals =&gt; { :form =&gt; f, :photo =&gt; @album.photos.build } %&gt;
  &lt;% end %&gt;
&lt;/div&gt;

&lt;%= add_object_link(&quot;Add Photo&quot;, f, @album.photos.build, &quot;photo&quot;, &quot;#photos&quot;) %&gt;
</code></pre></div>
<p>再将_photo.html.erb中的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% fields_for &quot;album[photo_attributes][]&quot;, photo do |p| %&gt;
  &lt;%= p.label :photo %&gt;&lt;br /&gt;
  &lt;%= p.file_field :data, :index =&gt; nil %&gt;
  &lt;%= link_to_function &quot;delete&quot;, &quot;remove_field($(this), (&#39;.photo&#39;))&quot; %&gt;
&lt;% end %&gt;
</code></pre></div>
<p>改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% form.fields_for :photos, photo, :child_index =&gt; (photo.new_record? ? &quot;index_to_replace_with_js&quot; : nil) do |p| %&gt;
  &lt;%= p.label :photo %&gt;&lt;br /&gt;
  &lt;%= p.file_field :data %&gt;
  &lt;%= link_to_function &quot;delete&quot;, &quot;remove_field($(this), (&#39;.photo&#39;))&quot; %&gt;
&lt;% end %&gt;
</code></pre></div>
<p>在albums_helper中添加两个方法：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def add_object_link(name, form, object, partial, where)
  html = render(:partial =&gt; partial, :locals =&gt; { :form =&gt; form }, :object =&gt; object)
  link_to_function name, %{
    var new_object_id = new Date().getTime();
    var html = jQuery(#{js html}.replace(/index_to_replace_with_js/g, new_object_id)).hide();
    html.appendTo(jQuery(&quot;#{where}&quot;)).slideDown(&#39;slow&#39;);
  }
end

def js(data)
  if data.respond_to? :to_json
    data.to_json
  else
    data.inspect.to_json
  end
end
</code></pre></div>
<p>到这里就修改完成了。试试看，是不是和原来的效果一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 2.3和Paperclip实现多图片上传]]></title>
    <link href="http://codemany.com/blog/upload-multiple-images-with-paperclip-rails-23/"/>
    <updated>2011-04-24T12:12:29+08:00</updated>
    <id>http://codemany.com/blog/upload-multiple-images-with-paperclip-rails-23</id>
    <content type="html"><![CDATA[<div class="highlight"><pre><code class="language-text" data-lang="text">rails upload
cd upload
script/plugin install git://github.com/thoughtbot/paperclip.git
script/plugin install git://github.com/aaronchi/jrails.git
script/generate scaffold album name:string
script/generate model photo album:references
script/generate paperclip photo data
rake db:migrate
script/server
</code></pre></div>
<p>修改album.rb添加photo_attributes属性：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Album &lt; ActiveRecord::Base
  has_many :photos
  validates_presence_of :name

  def photo_attributes=(photo_attributes)
    photo_attributes.each do |attributes|
      photos.build(attributes)
    end
  end
end
</code></pre></div>
<p>修改photo.rb添加附件相关属性：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Photo &lt; ActiveRecord::Base
  belongs_to :album

  has_attached_file :data,
    :url =&gt; &quot;/uploads/:style_:basename.:extension&quot;,
    :styles =&gt; { :thumb =&gt; &quot;50x50#&quot;, :large =&gt; &quot;640x480#&quot; }
  validates_attachment_presence :data
  validates_attachment_content_type :data,
    :content_type =&gt; [&#39;image/jpeg&#39;, &#39;image/jpg&#39;, &#39;image/png&#39;]
end
</code></pre></div>
<p>修改new.html.erb为以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h1&gt;New album&lt;/h1&gt;

&lt;% form_for @album, :html =&gt; { :multipart =&gt; true } do |f| %&gt;
  &lt;%= render :partial =&gt; &#39;form&#39;, :locals =&gt; { :f =&gt; f } %&gt;
  &lt;p&gt;&lt;%= f.submit &quot;Create&quot; %&gt;&lt;/p&gt;
&lt;% end %&gt;

&lt;%= link_to &#39;Back&#39;, albums_path %&gt;
</code></pre></div>
<p>对edit.html.erb做同样的修改：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h1&gt;Editing album&lt;/h1&gt;

&lt;% form_for @album, :html =&gt; { :multipart =&gt; true } do |f| %&gt;
  &lt;%= render :partial =&gt; &#39;form&#39;, :locals =&gt; { :f =&gt; f } %&gt;
  &lt;p&gt;&lt;%= f.submit &quot;Update&quot; %&gt;&lt;/p&gt;
&lt;% end %&gt;

&lt;%= link_to &#39;Show&#39;, @album %&gt; |
&lt;%= link_to &#39;Back&#39;, albums_path %&gt;
</code></pre></div>
<p>把从new.html.erb和edit.html.erb中抽取出来的代码保存为_form.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= f.error_messages %&gt;

&lt;p&gt;
  &lt;%= f.label :name %&gt;
  &lt;%= f.text_field :name %&gt;
&lt;/p&gt;
</code></pre></div>
<p>然后在后面添加如下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div id=&quot;photos&quot;&gt;
  &lt;% if @album.new_record? %&gt;
    &lt;%= render :partial =&gt; &#39;photo&#39;, :collection =&gt; @album.photos %&gt;
  &lt;% end %&gt;
&lt;/div&gt;

&lt;%= link_to_function &quot;Add Photo&quot; do |page| page.insert_html :bottom, :photos, :partial =&gt; &#39;photo&#39;, :object =&gt; Photo.new end %&gt;
</code></pre></div>
<p>创建_photo.html.erb文件，代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div class=&quot;photo&quot;&gt;
  &lt;p&gt;
  &lt;% fields_for &quot;album[photo_attributes][]&quot;, photo do |p| %&gt;
    &lt;%= p.label :photo %&gt;&lt;br /&gt;
    &lt;%= p.file_field :data, :index =&gt; nil %&gt;
    &lt;%= link_to_function &quot;delete&quot;, &quot;remove_field($(this), (&#39;.photo&#39;))&quot; %&gt;
  &lt;% end %&gt;
  &lt;/p&gt;
&lt;/div&gt;
</code></pre></div>
<p>再在application.js中添加下列代码，这样就可以删除file字段了。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function remove_field(element, item) {
  element.up(item).remove();
}
</code></pre></div>
<p>然后修改albums_controller.rb中的new方法：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def new
  @album = Album.new
  1.upto(3) { @album.photos.build }

  respond_to do |format|
    format.html # new.html.erb
  end
end
</code></pre></div>
<p>这样，上传多文件的功能基本就完成了。下面就来实现显示和修改的功能。</p>

<p>在show.html.erb的末尾添加下列代码，上传成功后用来显示图片：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#loop through the albums photos
&lt;% for photo in @album.photos %&gt;
  &lt;%= image_tag photo.data.url(:thumb) %&gt;
&lt;% end %&gt;
</code></pre></div>
<p>修改albums_controller.rb中的edit和update方法，用来删除图片：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def edit
  @album = Album.find(params[:id])
  if @album.photos.first.nil?
    1.upto(3) { @album.photos.build }
  end
end

def update
  params[:photo_ids] ||= []
  @album = Album.find(params[:id])
  unless params[:photo_ids].empty?
    Photo.destroy_pics(params[:id], params[:photo_ids])
  end

  respond_to do |format|
    if @album.update_attributes(params[:album])
      flash[:notice] = &#39;Album was successfully updated.&#39;
      format.html { redirect_to(@album) }
    else
      format.html { render :action =&gt; &quot;edit&quot; }
    end
  end
en
</code></pre></div>
<p>在photo.rb中加上下面的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def self.destroy_pics(album, photos)
  Photo.find(photos, :conditions =&gt; { :album_id =&gt; album }).each(:destroy)
end
</code></pre></div>
<p>然后新建_album_photo.html.erb，代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% unless album_photo.new_record? %&gt;
  &lt;%= image_tag album_photo.data.url(:thumb) %&gt;
  &lt;%= check_box_tag &quot;photo_ids[]&quot;, album_photo.id %&gt;
&lt;% end rescue nil %&gt;
</code></pre></div>
<p>接着在_form.html.erb中加入下面的代码就可以删除图片了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div class=&quot;album_photos&quot;&gt;
  &lt;%= render :partial =&gt; &#39;album_photo&#39;, :collection =&gt; @album.photos %&gt;
&lt;/div&gt;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随机化Paperclip的上传文件名]]></title>
    <link href="http://codemany.com/blog/randomize-upload-filename-in-paperclip/"/>
    <updated>2011-03-10T09:56:32+08:00</updated>
    <id>http://codemany.com/blog/randomize-upload-filename-in-paperclip</id>
    <content type="html"><![CDATA[<p>有时我们希望可以设定上传文件名的格式。一是可以统一文件名，而不是一些乱七八糟的名字；二是可以让文件名不是那么容易被猜测出来。下面的这段代码就是在网上找到的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Photo &lt; ActiveRecord::Base
  has_attached_file :image, :url =&gt; &quot;/uploads/:basename.:extension&quot;

  before_create :randomize_file_name

  private
  def randomize_file_name
    extension = File.extname(image_file_name).downcase
    self.image.instance_write(:file_name, &quot;#{Time.now.strftime(&quot;%Y%m%d%H%M%S&quot;)}#{rand(1000)}#{extension}&quot;)
  end
end
</code></pre></div>
<p>代码是从 <a href="http://trevorturk.com/2009/03/22/randomize-filename-in-paperclip/">http://trevorturk.com/2009/03/22/randomize-filename-in-paperclip/</a> 找到的，这里我把随机参数给改了，这样文件名的格式就类似20110310095632768这样。还有要注意的就是在:url中必须使用:basename参数，因为修改的:file_name就是它。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 2.3和Paperclip实现无刷新异步上传文件]]></title>
    <link href="http://codemany.com/blog/upload-file-asynchronously-without-refresh-with-paperclip-rails-23/"/>
    <updated>2011-03-08T16:09:31+08:00</updated>
    <id>http://codemany.com/blog/upload-file-asynchronously-without-refresh-with-paperclip-rails-23</id>
    <content type="html"><![CDATA[<div class="highlight"><pre><code class="language-text" data-lang="text">rails upload
cd upload
script/plugin install git://github.com/thoughtbot/paperclip.git
script/plugin install git://github.com/markcatley/responds_to_parent.git
script/generate scaffold user name:string
script/generate paperclip user avatar
rake db:migrate
</code></pre></div>
<p>在user.rb中增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">  has_attached_file :avatar, :url =&gt; &quot;/uploads/:basename.:extension&quot;
  validates_attachment_presence :avatar
  validates_attachment_content_type :avatar,
    :content_type =&gt; [&#39;image/jpeg&#39;, &#39;image/jpg&#39;, &#39;image/png&#39;]
  validates_attachment_size :avatar, :less_than =&gt; 1.megabytes
</code></pre></div>
<p>修改views/users/new.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% form_for(@user, :url =&gt; users_path(:format =&gt; &#39;js&#39;),
      :html =&gt; { :id =&gt; &#39;upload_form&#39;, :multipart =&gt; true, :target =&gt; &#39;uframe&#39; }) do |f| %&gt;
  &lt;%= f.error_messages %&gt;

  &lt;p&gt;
    &lt;%= f.label :name %&gt;&lt;br /&gt;
    &lt;%= f.text_field :name %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :avatar %&gt;&lt;br /&gt;
    &lt;%= f.file_field :avatar %&gt;
    &lt;div id=&quot;avatar&quot;&gt;
    &lt;% if @user.avatar.exists? %&gt;
      &lt;%= image_tag @user.avatar.url(:medium) %&gt;
    &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.submit &#39;Create&#39; %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
&lt;iframe id=&quot;uframe&quot; name=&quot;uframe&quot; style=&quot;display: none;&quot;&gt;&lt;/iframe&gt;
</code></pre></div>
<p>当点击submit按钮后，表单被提交到隐藏的iframe，相应的action被执行，执行结果会被返回给隐藏的iframe，我们需要上传后结果能返回到母窗口，这就是responds_to_parent插件提供的功能。</p>

<p>在views/layouts/user.html.erb中增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= javascript_include_tag :defaults %&gt;
</code></pre></div>
<p>修改users_controller.rb中的create方法，增加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">format.js do
  flash[:notice] = &#39;avatar created&#39;
  responds_to_parent do
    render :update do |page|
      page.replace_html :avatar, image_tag(@user.avatar.url(:medium))
      page[&#39;upload_form&#39;].reset
    end
  end
end
</code></pre></div>]]></content>
  </entry>
  
</feed>
