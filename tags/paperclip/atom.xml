<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Paperclip | 乐者为王]]></title>
  <link href="http://codemany.com/tags/paperclip/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-22T23:28:43+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 2.3和Paperclip实现多图片上传（改进版）]]></title>
    <link href="http://codemany.com/blog/2011/04/28/rails-23-and-paperclip-multi-image-upload-modified-version/"/>
    <updated>2011-04-28T06:48:00+08:00</updated>
    <id>http://codemany.com/blog/2011/04/28/rails-23-and-paperclip-multi-image-upload-modified-version</id>
    <content type="html"><![CDATA[<p>从Rails 2.3开始，有了新的方法来处理多模型表单，这就是accepts_nested_attributes_for。应用于model上的accepts_nested_attributes_for允许直接赋值到子对象上，对于标准的属性使用相同的哈希格式。</p>

<p>例如，有个Parent类它has_many children，一个典型的包含所有类的POST数据将会如下面这样：<br />
```
params =>
  action => update<br />
  id => 1<br />
  controller => parents<br />
  parent =></p>

<pre><code>first_name =&gt; John&lt;br /&gt;
last_name =&gt; Doe&lt;br /&gt;
age =&gt; 40&lt;br /&gt;
children_attributes =&gt;
  1 =&gt; { id =&gt; 16, :name =&gt; Jack }&lt;br /&gt;
  2 =&gt; { id =&gt; 18, :name =&gt; Mary }&lt;br /&gt;
</code></pre>

<p>```</p>

<p>注意，那个children_attributes元素在parent的元素中。fields_for命令会生成必要的语法去生成POST数据，这些数据会被转换成方便accepts_nested_attributes_for解释的哈希。children_attributes不是数组而是哈希，它的键是一个简单的索引（不是model的ID），被用来从一个单一的实体聚合属性。</p>

<p>不用ID的理由是简单的：正在被编辑的模型可能不会被保存，发送到了客户端，这时它的ID为nil。因此为每个被显示的children的id关联一个隐藏字段是个好的实践。</p>

<p>下面我们就用accepts_nested_attributes_for来改写上传多图片的代码。</p>

<p>修改albums_controller.rb中的new方法，删除下面的这句代码：<br />
<code>
1.upto(3) { @album.photos.build }&lt;br /&gt;
</code></p>

<p>将album.rb中的<br />
```
def photo_attributes=(photo_attributes)<br />
  photo_attributes.each do |attributes|<br /></p>

<pre><code>photos.build(attributes)&lt;br /&gt;
</code></pre>

<p>  end<br />
end<br />
```</p>

<p>代码改成<br />
<code>
accepts_nested_attributes_for :photos&lt;br /&gt;
</code></p>

<p>修改_form.html.erb中的<br />
```</p>

<div id="photos">
  <% if @album.new_record? %>
    <%= render :partial => 'photo', :collection => @album.photos %>
  <% end %>
</div>


<p>&lt;%= link_to_function "Add Photo" do |page| page.insert_html :bottom, :photos, :partial => 'photo', : object => Photo.new end %>
```</p>

<p>为下面的代码<br />
```</p>

<div id="photos">
  <% if @album.new_record? %>
    <%= render :partial => 'photo', :locals => { :form => f, :photo => @album.photos.build } %>
  <% end %>
</div>


<p>&lt;%= add_object_link("Add Photo", f, @album.photos.build, "photo", "#photos") %>
```</p>

<p>再将_photo.html.erb中的<br />
<code>
&lt;% fields_for "album[photo_attributes][]", photo do |p| %&gt;
  &lt;%= p.label :photo %&gt;&lt;br /&gt;
  &lt;%= p.file_field :data, :index =&gt; nil %&gt;
  &lt;%= link_to_function "delete", "remove_field($(this), ('.photo'))" %&gt;
&lt;% end %&gt;
</code></p>

<p>改为<br />
<code>
&lt;% form.fields_for :photos, photo, :child_index =&gt; (photo.new_record? ? "index_to_replace_with_js" : nil) do |p| %&gt;
  &lt;%= p.label :photo %&gt;&lt;br /&gt;
  &lt;%= p.file_field :data %&gt;
  &lt;%= link_to_function "delete", "remove_field($(this), ('.photo'))" %&gt;
&lt;% end %&gt;
</code></p>

<p>在albums_helper中添加两个方法：<br />
```
def add_object_link(name, form, object, partial, where)<br />
  html = render(:partial => partial, :locals => { :form => form }, : object => object)<br />
  link_to_function name, %{<br /></p>

<pre><code>var new_object_id = new Date().getTime();&lt;br /&gt;
var html = jQuery(#{js html}.replace(/index_to_replace_with_js/g, new_object_id)).hide();&lt;br /&gt;
html.appendTo(jQuery("#{where}")).slideDown('slow');&lt;br /&gt;
</code></pre>

<p>  }<br />
end<br /></p>

<p>def js(data)<br />
  if data.respond_to? :to_json<br /></p>

<pre><code>data.to_json&lt;br /&gt;
</code></pre>

<p>  else<br /></p>

<pre><code>data.inspect.to_json&lt;br /&gt;
</code></pre>

<p>  end<br />
end<br />
```</p>

<p>到这里就修改完成了。试试看，是不是和原来的效果一样。</p>

<p>参考资料：<a href="http://weblogs.manas.com.ar/spalladino/2010/03/03/handling-children-with-accepts_nested_attributes_for-in-rails/"><a href="http://weblogs.manas.com.ar/spalladino/2010/03/03/handling-children-with-accepts_nested_attributes_for-in-rails/">http://weblogs.manas.com.ar/spalladino/2010/03/03/handling-children-with-accepts_nested_attributes_for-in-rails/</a></a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 2.3和Paperclip实现多图片上传]]></title>
    <link href="http://codemany.com/blog/2011/04/24/rails-23-paperclip-the-multi-image-upload/"/>
    <updated>2011-04-24T12:12:29+08:00</updated>
    <id>http://codemany.com/blog/2011/04/24/rails-23-paperclip-the-multi-image-upload</id>
    <content type="html"><![CDATA[<p><code>
rails demo&lt;br /&gt;
cd demo&lt;br /&gt;
script/plugin install git://github.com/thoughtbot/paperclip.git&lt;br /&gt;
script/plugin install git://github.com/aaronchi/jrails.git&lt;br /&gt;
script/generate scaffold album name:string&lt;br /&gt;
script/generate model photo album:references&lt;br /&gt;
script/generate paperclip photo data&lt;br /&gt;
rake db:migrate&lt;br /&gt;
script/server&lt;br /&gt;
</code></p>

<p>修改album.rb添加photo_attributes属性：<br />
```
class Album &lt; ActiveRecord::Base<br />
  has_many :photos<br />
  validates_presence_of :name</p>

<p>  def photo_attributes=(photo_attributes)<br /></p>

<pre><code>photo_attributes.each do |attributes|&lt;br /&gt;
  photos.build(attributes)&lt;br /&gt;
end&lt;br /&gt;
</code></pre>

<p>  end<br />
end<br />
```</p>

<p>修改photo.rb添加附件相关属性：</p>

<p>```
class Photo &lt; ActiveRecord::Base<br />
  belongs_to :album<br /></p>

<p>  has_attached_file :data,<br /></p>

<pre><code>:url =&gt; "/uploads/:style_:basename.:extension",&lt;br /&gt;
:styles =&gt; {:thumb =&gt; "50x50#", :large =&gt; "640x480#"}&lt;br /&gt;
</code></pre>

<p>  validates_attachment_presence :data<br />
  validates_attachment_content_type :data,<br /></p>

<pre><code>:content_type =&gt; ['image/jpeg', 'image/jpg', 'image/png']&lt;br /&gt;
</code></pre>

<p>end<br />
```</p>

<p>修改new.html.erb为以下代码：<br />
```</p>

<h1>New album</h1>


<p>&lt;% form_for @album, :html => { :multipart => true } do |f| %>
  &lt;%= render :partial => 'form', :locals => { :f => f } %>
  <p>&lt;%= f.submit "Create" %></p>
&lt;% end %></p>

<p>&lt;%= link_to 'Back', albums_path %>
```</p>

<p>对edit.html.erb做同样的修改：</p>

<p>```</p>

<h1>Editing album</h1>


<p>&lt;% form_for @album, :html => { :multipart => true } do |f| %>
  &lt;%= render :partial => 'form', :locals => { :f => f } %>
  <p>&lt;%= f.submit "Update" %></p>
&lt;% end %></p>

<p>&lt;%= link_to 'Show', @album %> |
&lt;%= link_to 'Back', albums_path %>
```</p>

<p>把从new.html.erb和edit.html.erb中抽取出来的代码保存为_form.html.erb文件：<br />
```
&lt;%= f.error_messages %></p>

<p>  &lt;%= f.label :name %><br />
  &lt;%= f.text_field :name %>
</p> <br />
```</p>

<p>然后在后面添加如下代码：<br />
```</p>

<div id="photos">
  <% if @album.new_record? %>
    <%= render :partial => 'photo', :collection => @album.photos %>
  <% end %>
</div>


<p>&lt;%= link_to_function "Add Photo" do |page| page.insert_html :bottom, :photos, :partial => 'photo', : object => Photo.new end %>
```</p>

<p>创建_photo.html.erb文件，代码如下：<br />
```</p>

<div class="photo">
  <p>
  <% fields_for "album[photo_attributes][]", photo do |p| %>
    <%= p.label :photo %><br />
    <%= p.file_field :data, :index => nil %>
    <%= link_to_function "delete", "remove_field($(this), ('.photo'))" %>
  <% end %>
  </p>
</div>


<p>```</p>

<p>再在application.js中添加下列代码，这样就可以删除file字段了。<br />
<code>
function remove_field(element, item) {&lt;br /&gt;
  element.up(item).remove();&lt;br /&gt;
}
</code></p>

<p>然后修改albums_controller.rb中的new方法：<br />
```
def new<br />
  @album = Album.new<br />
  1.upto(3) { @album.photos.build }</p>

<p>  respond_to do |format|<br /></p>

<pre><code>format.html # new.html.erb&lt;br /&gt;
</code></pre>

<p>  end<br />
end<br />
```</p>

<p>这样，上传多文件的功能基本就完成了。下面就来实现显示和修改的功能。</p>

<p>在show.html.erb的末尾添加下列代码，上传成功后用来显示图片：<br />
```</p>

<h1>loop through the albums photos</h1>

<p>&lt;% for photo in @album.photos %>
  &lt;%= image_tag photo.data.url(:thumb) %>
&lt;% end %>
```</p>

<p>修改albums_controller.rb中的edit和update方法，用来删除图片：<br />
```
def edit<br />
  @album = Album.find(params[:id])<br />
  if @album.photos.first.nil?<br /></p>

<pre><code>1.upto(3) { @album.photos.build }&lt;br /&gt;
</code></pre>

<p>  end<br />
end</p>

<p>def update<br />
  params[:photo_ids] ||= []<br />
  @album = Album.find(params[:id])<br />
  unless params[:photo_ids].empty?<br /></p>

<pre><code>Photo.destroy_pics(params[:id], params[:photo_ids])&lt;br /&gt;
</code></pre>

<p>  end</p>

<p>  respond_to do |format|<br /></p>

<pre><code>if @album.update_attributes(params[:album])&lt;br /&gt;
  flash[:notice] = 'Album was successfully updated.'&lt;br /&gt;
  format.html { redirect_to(@album) }&lt;br /&gt;
else&lt;br /&gt;
  format.html { render :action =&gt; "edit" }&lt;br /&gt;
end&lt;br /&gt;
</code></pre>

<p>  end<br />
en<br />
```</p>

<p>在photo.rb中加上下面的代码：<br />
<code>
def self.destroy_pics(album, photos)&lt;br /&gt;
  Photo.find(photos, :conditions =&gt; {:album_id =&gt; album}).each(:destroy)&lt;br /&gt;
end&lt;br /&gt;
</code></p>

<p>然后新建_album_photo.html.erb，代码如下：<br />
<code>
&lt;% unless album_photo.new_record? %&gt;
  &lt;%= image_tag album_photo.data.url(:thumb) %&gt;
  &lt;%= check_box_tag "photo_ids[]", album_photo.id %&gt;
&lt;% end rescue nil %&gt;
</code></p>

<p>接着在_form.html.erb中加入下面的代码就可以删除图片了：</p>

<p>```</p>

<div class="album_photos">
  <%= render :partial => 'album_photo', :collection => @album.photos %>
</div>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随机化Paperclip的上传文件名]]></title>
    <link href="http://codemany.com/blog/2011/03/10/paperclip-randomized-upload-file-name/"/>
    <updated>2011-03-10T02:32:56+08:00</updated>
    <id>http://codemany.com/blog/2011/03/10/paperclip-randomized-upload-file-name</id>
    <content type="html"><![CDATA[<p>有时我们希望可以设定上传文件名的格式。一是可以统一文件名，而不是一些乱七八糟的名字；二是可以让文件名不是那么容易被猜测出来。下面的这段代码就是在网上找到的：</p>

<p>```
class Photo &lt; ActiveRecord::Base
  has_attached_file :image, :url => "/uploads/:basename.:extension"</p>

<p>  before_create :randomize_file_name</p>

<p>  private
  def randomize_file_name</p>

<pre><code>extension = File.extname(image_file_name).downcase
self.image.instance_write(:file_name, "#{Time.now.strftime("%Y%m%d%H%M%S")}#{rand(1000)}#{extension}")
</code></pre>

<p>  end
end
```</p>

<p>原文链接 <a href="http://trevorturk.com/2009/03/22/randomize-filename-in-paperclip/">http://trevorturk.com/2009/03/22/randomize-filename-in-paperclip/</a> ，这里我把随机参数给改了，这样文件名的格式就像20110310095646???。还有一个注意点就是在url中必须使用:basename参数，因为修改的:file_name就是它。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails无刷新异步上传文件]]></title>
    <link href="http://codemany.com/blog/2011/03/08/rails-to-upload-files-asynchronously-without-refreshing/"/>
    <updated>2011-03-08T16:09:31+08:00</updated>
    <id>http://codemany.com/blog/2011/03/08/rails-to-upload-files-asynchronously-without-refreshing</id>
    <content type="html"><![CDATA[<p><code>
rails upload&lt;br /&gt;
cd upload&lt;br /&gt;
script/plugin install git://github.com/thoughtbot/paperclip.git&lt;br /&gt;
script/plugin install git://github.com/markcatley/responds_to_parent.git&lt;br /&gt;
script/generate scaffold user name:string&lt;br /&gt;
script/generate paperclip user avatar&lt;br /&gt;
rake db:migrate&lt;br /&gt;
</code></p>

<p>在user.rb中增加：<br />
```
  has_attached_file :avatar, :url => "/uploads/:basename.:extension"<br />
  validates_attachment_presence :avatar<br />
  validates_attachment_content_type :avatar,<br /></p>

<pre><code>:content_type =&gt; ['image/jpeg', 'image/jpg', 'image/png']&lt;br /&gt;
</code></pre>

<p>  validates_attachment_size :avatar, :less_than => 1.megabytes<br />
```</p>

<p>修改views/users/new.html.erb文件：<br />
```
&lt;% form_for(@user, :url => users_path(:format => 'js'),<br />
  :html => {:id => 'upload_form', :multipart => true, :target => 'upload_frame'}) do |f| %>
  &lt;%= f.error_messages %></p>

<p>  <p></p>

<pre><code>&lt;%= f.label :name %&gt;&lt;br /&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </p>
  <p></p>

<pre><code>&lt;%= f.label :avatar %&gt;&lt;br /&gt;
&lt;%= f.file_field :avatar %&gt;
&lt;div id="avatar"&gt;
&lt;% if @user.avatar.exists? %&gt;
  &lt;%= image_tag @user.avatar.url(:medium) %&gt;
&lt;% end %&gt;
&lt;/div&gt;
</code></pre>

<p>  </p>
  <p></p>

<pre><code>&lt;%= f.submit 'Create' %&gt;
</code></pre>

<p>  </p>
&lt;% end %></p>

<iframe id="upload_frame" name="upload_frame" style="display: none;"></iframe>


<p>```</p>

<p>当点击submit按钮后，表单被提交到隐藏的iframe，相应的action被执行，执行结果会被返回给隐藏的iframe，我们需要上传后结果能返回到母窗口，这就是responds_to_parent插件提供的功能。</p>

<p>在views/layouts/user.html.erb中增加：<br />
<code>
&lt;%= javascript_include_tag :defaults %&gt;
</code></p>

<p>修改users_controller.rb中的create方法，增加：<br />
```
format.js do<br />
  flash[:notice] = 'avatar created'<br />
  responds_to_parent do<br /></p>

<pre><code>render :update do |page|&lt;br /&gt;
  page.replace_html :avatar, image_tag(@user.avatar.url(:medium))&lt;br /&gt;
  page['upload_form'].reset&lt;br /&gt;
end&lt;br /&gt;
</code></pre>

<p>  end<br />
end<br />
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[is not recognized by the 'identify' command]]></title>
    <link href="http://codemany.com/blog/2010/11/15/is-not-recognized-by-the-identify-command/"/>
    <updated>2010-11-15T08:57:32+08:00</updated>
    <id>http://codemany.com/blog/2010/11/15/is-not-recognized-by-the-identify-command</id>
    <content type="html"><![CDATA[<p>使用Paperclip时遇到一个问题，在上传图片是一直显示图片临时文件is not recognized by the 'identify' command，检查发现临时文件没有问题，网上资料说使用Paperclip.options[:command_path]变量可以解决，试过后无效。</p>

<p>查看日志文件看到有如下错误信息：
<code>
An error was received while processing: #&lt;Paperclip::NotIdentifiedByImageMagickError:
</code></p>

<p>根据这条信息找到了解决方法，就是在has_attached_file后将whiny属性设置为false：
<code>
:whiny =&gt; false
</code></p>
]]></content>
  </entry>
  
</feed>
