<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Refactoring | 乐者为王]]></title>
  <link href="http://codemany.com/tags/refactoring/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2018-03-11T19:55:01+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Scrapy爬取小说（5）]]></title>
    <link href="http://codemany.com/blog/crawl-novel-with-scrapy-part5/"/>
    <updated>2017-11-18T21:55:30+08:00</updated>
    <id>http://codemany.com/blog/crawl-novel-with-scrapy-part5</id>
    <content type="html"><![CDATA[<h3 id="重构代码以提升健壮性">重构代码以提升健壮性</h3>

<p>今天的任务是重构TxtPipeline。</p>

<p>先看下TxtPipeline中负责写文件的代码片段：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">f = open(filename, &#39;w&#39;)
f.write(title)
f.write(content)
f.close()
</code></pre></div>
<p>我们经常会看到这样的代码，但它存在严重的问题，你能把它找出来吗？</p>

<p>首先，open函数打开文件，并返回文件句柄，该句柄是由操作系统分配的。接着就是调用write方法写文件。最后是调用close方法关闭文件。文件使用完毕后必须关闭，因为文件句柄会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的。</p>

<p>由于文件读写时都有可能产生IOError，一旦出错，后面的close方法就不会被调用。所以，为确保无论是否出错都能正常地关闭文件和释放文件句柄，我们需要使用如下方法来实现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">try:
  f = open(filename, &#39;w&#39;)
  f.write(title)
  f.write(content)
finally:
  if f:
    f.close()
</code></pre></div>
<p>但每次都这么写实在太繁琐。其实，我们可以使用with语句来帮我们自动管理文件资源：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">with open(filename, &#39;w&#39;) as f:
  f.write(title)
  f.write(content)
</code></pre></div>
<p>这和前面的try-finally是一样的，但是代码更加简洁，而且不必调用close方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构Rails代码]]></title>
    <link href="http://codemany.com/blog/refactoring-rails-code/"/>
    <updated>2014-11-18T19:42:59+08:00</updated>
    <id>http://codemany.com/blog/refactoring-rails-code</id>
    <content type="html"><![CDATA[<p>在以前写的博文<a href="http://codemany.com/blog/problem-when-deploying-application-to-heroku/">部署应用到Heroku时的问题</a>里有这么一段话：</p>

<blockquote>
<p>股票功能需要导入交割单文件，因为导入后的文本文件不再使用，可以把上传路径由public/uploads改为tmp，这样就避免了Heroku不能写文件的问题。</p>
</blockquote>

<p>下面是那时候写的导入代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class StocksController &lt; ApplicationController
  UPLOADS_DIRECTORY = File.join(&quot;#{Rails.root}&quot;, &quot;public/uploads&quot;)

  def import
    filename = upload_file(params[:file])
    lines = File.readlines(&quot;#{UPLOADS_DIRECTORY}/#{filename}&quot;)
    lines.each do |line|
      # do something
    end
    redirect_to stocks_url
  end

  protected
    def upload_file(file)
      if !file.original_filename.empty?
        @filename = get_file_name(file.original_filename)
        Dir.mkdir(&quot;#{UPLOADS_DIRECTORY}&quot;) unless Dir.exist?(&quot;#{UPLOADS_DIRECTORY}&quot;)
        File.open(&quot;#{UPLOADS_DIRECTORY}/#{@filename}&quot;, &quot;wb&quot;) do |f|
          f.write(file.read)
        end
        return @filename
      end
    end

    def get_file_name(filename)
      if !filename.nil?
        # does not support chinese filename?
        Time.now.strftime(&quot;%Y%m%d%H%M%S&quot;) + &#39;.txt&#39;
      end
    end
end
</code></pre></div>
<p>这里的实现方法是先将上传文件保存到服务器上应用的public/uploads目录中，然后再读取和处理。</p>

<p>其实根本不需要写的这么复杂，因为导入的文件被读取一次后就不再使用了。所以在当时写代码的时候一直有这样的想法，如果能直接获得上传文件的数据，那么就不需要再另外去写保存和读取文件的代码了。</p>

<p>事实也是如此。通过表单提交的file字段数据会首先在服务器上形成临时文件，这时其实可以通过临时文件的路径来读取上传文件的数据。</p>

<p>根据该想法重构后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class StocksController &lt; ApplicationController
  def import
    lines = File.readlines(params[:file].tempfile.to_path.to_s)
    lines.each do |line|
      # do something
    end
    redirect_to stocks_url
  end
</code></pre></div>
<p>重构后的代码果然清爽多了，不过还是有改进的空间。</p>

<p>作为控制器，它应该只负责接收请求，并返回响应。而具体的业务逻辑，则应该交由模型去完成。下面是依照该理念再次重构后的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class StocksController &lt; ApplicationController
  def import
    Stock.import(params[:file])
    redirect_to stocks_url
  end
end

class Stock &lt; ActiveRecord::Base
  def self.import(file)
    lines = File.readlines(file.tempfile.to_path.to_s)
    lines.each do |line|
      # do something
    end
  end
end
</code></pre></div>]]></content>
  </entry>
  
</feed>
