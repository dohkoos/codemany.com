<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: i18n | 乐者为王]]></title>
  <link href="http://codemany.com/tags/i18n/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2018-03-15T14:51:24+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用will_paginate插件给Rails应用添加分页功能]]></title>
    <link href="http://codemany.com/blog/add-pagination-for-rails-application-with-will-paginate-plugin/"/>
    <updated>2010-09-09T09:37:26+08:00</updated>
    <id>http://codemany.com/blog/add-pagination-for-rails-application-with-will-paginate-plugin</id>
    <content type="html"><![CDATA[<p>安装<a href="https://github.com/mislav/will_paginate">will_paginate</a>插件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/mislav/will_paginate.git
</code></pre></div>
<p>安裝好插件后，在action中將本來的find方法：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@contacts = Contact.all
</code></pre></div>
<p>改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@contacts = Contact.paginate(:page =&gt; params[:page])
</code></pre></div>
<p>然后在action对应的view最后加入以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= will_paginate @contacts %&gt;
</code></pre></div>
<p>现在便可以使用分页功能了，该语句会产生如下的HTML代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div class=&quot;pagination&quot;&gt;
  &lt;span class=&quot;disabled prev_page&quot;&gt;&amp;laquo; Previous&lt;/span&gt;
  &lt;span class=&quot;current&quot;&gt;1&lt;/span&gt;
  &lt;a href=&quot;http://codemany.com/contacts?page=2&amp;s=&quot; rel=&quot;next&quot;&gt;2&lt;/a&gt;
  &lt;a href=&quot;http://codemany.com/contacts?page=2&amp;s=&quot; class=&quot;next_page&quot; rel=&quot;next&quot;&gt;Next &amp;raquo;&lt;/a&gt;
&lt;/div&gt;
</code></pre></div>
<p>下面加入搜索功能，在view的适当位置加入:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% form_tag contacts_path, :method =&gt; &#39;get&#39; do %&gt;
&lt;p&gt;
  &lt;%= text_field_tag :s, params[:s] %&gt;
  &lt;%= submit_tag &quot;Search&quot;, :name =&gt; nil %&gt;
&lt;/p&gt;
&lt;% end %&gt;
</code></pre></div>
<p>并且将action中的代码修改为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@contacts = Contact.paginate(
  :page =&gt; params[:page],
  :conditions =&gt; [&quot;name like ?&quot;, &quot;%#{params[:s]}%&quot;])
</code></pre></div>
<p>试着进行搜索，可以看到搜索结果也很好的进行了分页。</p>

<p>此外will_paginate还提供一些分页统计信息：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Total entries: &lt;%= @contacts.total_entries %&gt;
Total pages: &lt;%= @contacts.total_pages %&gt;
Current page: &lt;%= @contacts.current_page %&gt;
</code></pre></div>
<p>最后加上will_paginate推荐的CSS代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.pagination {
  padding: 3px;
  margin: 3px;
}

.pagination a {
  padding: 2px 5px 2px 5px;
  margin: 2px;
  border: 1px solid #aaaadd;
  text-decoration: none;
  color: #000099;
}

.pagination a:hover, .pagination a:active {
  border: 1px solid #000099;
  color: #000;
}

.pagination span.current {
  padding: 2px 5px 2px 5px;
  margin: 2px;
  border: 1px solid #000099;
  font-weight: bold;
  background-color: #000099;
  color: #fff;
}

.pagination span.disabled {
  padding: 2px 5px 2px 5px;
  margin: 2px;
  border: 1px solid #eee;
  color: #ddd;
}
</code></pre></div>
<p>在写代码的时候碰到一个问题，网上的文章都使用page_count来表示总的分页数，但我在使用时出现了undefined method &#39;page_count&#39;错误，把page_count换成total_pages后就好了。</p>

<p>2011/1/4更新</p>

<p>这里使用的是2.3.12版本的will_paginate，暂时还不支持i18n，不过可以通过在app/helps/application_helper.rb中添加以下代码来实现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">include WillPaginate::ViewHelpers

def will_paginate_with_i18n(collection, options = {})
  will_paginate_without_i18n(collection, options.merge(
                        :previous_label =&gt; I18n.t(:previous, :default =&gt; &#39;Previous&#39;),
                        :next_label =&gt; I18n.t(:next), :default =&gt; &#39;Next&#39;))
  end

alias_method_chain :will_paginate, :i18n
</code></pre></div>
<p>然后在config/locales/zh.yml中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">previous: &quot;&amp;laquo; 前一页&quot;
next: &quot;后一页 &amp;raquo;&quot;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账应用（10）]]></title>
    <link href="http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part10/"/>
    <updated>2010-01-04T20:34:41+08:00</updated>
    <id>http://codemany.com/blog/using-rails-23-to-create-a-simple-accounting-app-part10</id>
    <content type="html"><![CDATA[<p>从2.2版本起Rails开始内置支持i18n，因此以后实现国际化/本地化就可以不再需要各种各样的插件了。</p>

<p>Rails默认的Locale文件夹是config/locales，假设你要支持中文和英文，那么你需要在这个文件夹下放置zh.yml和en.yml两个文件。</p>

<p>相应的入门教程网上有不少，我也就不多讲了。这里主要说一下如何在记账应用中实现可以让用户指定语言的i18n实现，即当用户选择English，那么界面就切换成英文界面，并且以后打开的页面也是以英文出现，反之亦如此。</p>

<p>首先在header区添加以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= link_to &#39;Chinese&#39;, :locale =&gt; &#39;zh&#39; %&gt;
&lt;%= link_to &#39;English&#39;, :locale =&gt; &#39;en&#39; %&gt;
</code></pre></div>
<p>点击其中某个链接后，浏览器就会传递对应的参数zh或en到后台。</p>

<p>然后在app/controllers/application_controller.rb中添加以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">before_filter :set_locale

protected
  def set_locale
    I18n.locale = params[:locale]
  end
</code></pre></div>
<p>不过这里有个问题就是url中必须得带着参数，不然的话用户的选择就会失效。要想使选择达到持续的效果，可以考虑把这些信息保存在session中，改进后的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def set_locale
  I18n.locale = params[:locale] || session[:locale]
  session[:locale] = I18n.locale
end
</code></pre></div>
<p>现在这样就基本上差不多了。剩下的就是处理第一次访问时的语言，这个可以从request的ACCEPT_LANGUAGE参数中获取。最终实现的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def set_locale
  accept_lang = request.env[&#39;HTTP_ACCEPT_LANGUAGE&#39;].scan(/^[a-z]{2}/).first
  I18n.locale = params[:locale] || session[:locale] || accept_lang || &#39;zh&#39;
  session[:locale] = I18n.locale
end
</code></pre></div>
<p>不过当用户选择中文后，在新建记录时会报以下错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">can&#39;t convert Symbol into String

Extracted source (around line #8):

    6:   &lt;p&gt;
    7:     &lt;%= t(:effective_date) %&gt;&lt;br /&gt;
    8:     &lt;%= f.date_select :effective_date %&gt;
    9:   &lt;/p&gt;
</code></pre></div>
<p>查找资料后发现可以通过在date_select中加入order来解决，不过日期下拉列表中的月份还有问题，出现的是一些随机数，不是正常月份。这个也可以通过添加month_names参数解决。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= t(:effective_date) %&gt;&lt;br /&gt;
&lt;%= f.date_select :effective_date, :order =&gt; [:year, :month, :day] %&gt;
</code></pre></div>
<p>更好的办法是把它们放到对应的Locale文件里：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># en.yml
en:
  date:
    month_names: [~, January, February, ..., November, December]
    order: [:year, :month, :day]
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"># zh.yml
zh:
  date:
    month_names: [~, 一月, 二月, ..., 十一月, 十二月]
    order: [:year, :month, :day]
</code></pre></div>
<p>代码下载：<a href="https://github.com/dohkoos/qianbao">https://github.com/dohkoos/qianbao</a></p>
]]></content>
  </entry>
  
</feed>
