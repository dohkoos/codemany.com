<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: i18n | 乐者为王]]></title>
  <link href="http://codemany.com/tags/i18n/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-09-18T20:29:43+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设置i18n时date_select出现can't convert Symbol into String错误]]></title>
    <link href="http://codemany.com/blog/2012/04/19/date-select-cant-convert-symbol-into-the-string-error-when-setup-i18n/"/>
    <updated>2012-04-19T07:56:49+08:00</updated>
    <id>http://codemany.com/blog/2012/04/19/date-select-cant-convert-symbol-into-the-string-error-when-setup-i18n</id>
    <content type="html"><![CDATA[<p>问题和order参数有关，解决方法有两种：</p>

<ol>
<li>在每次调用date_select时明确指定order参数；</li>
<li>your_lang.yml文件中添加以下内容：</li>
</ol>


<p>```
date:
  order:</p>

<pre><code>- :year
- :month
- :day
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用will_paginate插件给Rails应用添加分页功能]]></title>
    <link href="http://codemany.com/blog/2010/09/09/add-pagination-for-rails-application-with-will-paginate-plugin/"/>
    <updated>2010-09-09T09:37:26+08:00</updated>
    <id>http://codemany.com/blog/2010/09/09/add-pagination-for-rails-application-with-will-paginate-plugin</id>
    <content type="html"><![CDATA[<p>安装<a href="https://github.com/mislav/will_paginate">will_paginate</a>插件：</p>

<p><code>
script/plugin install git://github.com/mislav/will_paginate.git
</code></p>

<p>安裝好插件后，在action中將本來的find方法：</p>

<p><code>
@contacts = Contact.all
</code></p>

<p>改为</p>

<p><code>
@contacts = Contact.paginate(:page =&gt; params[:page])
</code></p>

<p>然后在action对应的view最后加入以下代码：</p>

<p><code>
&lt;%= will_paginate @contacts %&gt;
</code></p>

<p>现在便可以使用分页功能了，该语句会产生如下的HTML代码：</p>

<p>```</p>

<div class="pagination">
  <span class="disabled prev_page">&laquo; Previous</span>
  <span class="current">1</span>
  <a href="http://codemany.com/contacts?page=2&s=" rel="next">2</a>
  <a href="http://codemany.com/contacts?page=2&s=" class="next_page" rel="next">Next &raquo;</a>
</div>


<p>```</p>

<p>下面加入搜索功能，在view的适当位置加入:</p>

<p>```
&lt;% form_tag contacts_path, :method => 'get' do %></p>

<p>  &lt;%= text_field_tag :s, params[:s] %>
  &lt;%= submit_tag "Search", :name => nil %>
</p>
&lt;% end %>
```</p>

<p>并且将action中的代码修改为：</p>

<p><code>
@contacts = Contact.paginate(
  :page =&gt; params[:page],
  :per_page =&gt; 5,
  :conditions =&gt; ["name like ?", "%#{params[:s]}%"])
</code></p>

<p>试着进行搜索，可以看到搜索结果也很好的进行了分页。</p>

<p>此外will_paginate还提供一些分页统计信息：</p>

<p><code>
Total entries: &lt;%= @contacts.total_entries %&gt;
Total pages: &lt;%= @contacts.total_pages %&gt;
Current page: &lt;%= @contacts.current_page %&gt;
</code></p>

<p>最后加上will_paginate推荐的CSS代码：</p>

<p>```
.pagination {
  padding: 3px;
  margin: 3px;
}</p>

<p>.pagination a {
  padding: 2px 5px 2px 5px;
  margin: 2px;
  border: 1px solid #aaaadd;
  text-decoration: none;
  color: #000099;
}</p>

<p>.pagination a:hover, .pagination a:active {
  border: 1px solid #000099;
  color: #000;
}</p>

<p>.pagination span.current {
  padding: 2px 5px 2px 5px;
  margin: 2px;
  border: 1px solid #000099;
  font-weight: bold;
  background-color: #000099;
  color: #fff;
}</p>

<p>.pagination span.disabled {
  padding: 2px 5px 2px 5px;
  margin: 2px;
  border: 1px solid #eee;
  color: #ddd;
}
```</p>

<p>在写代码的时候碰到一个问题，网上的文章都使用page_count来表示总的分页数，但我在使用时出现了undefined method 'page_count'错误，把page_count换成total_pages后就好了。</p>

<p>2011/1/4更新</p>

<p>这里使用的是2.3.15版本的will_paginate，暂时还不支持i18n，不过可以通过在app/helps/application_helper.rb中添加以下代码来实现：</p>

<p>```
include WillPaginate::ViewHelpers</p>

<p>def will_paginate_with_i18n(collection, options = {})
  will_paginate_without_i18n(collection, options.merge(</p>

<pre><code>                    :previous_label =&gt; I18n.t(:previous, :default =&gt; 'Previous'),
                    :next_label =&gt; I18n.t(:next), :default =&gt; 'Next'))
</code></pre>

<p>  end</p>

<p>alias_method_chain :will_paginate, :i18n
```</p>

<p>然后在config/locales/zh.yml中添加：</p>

<p><code>
next: "后一页"
previous: "前一页"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Rails 2.3打造简单记账软件（10）]]></title>
    <link href="http://codemany.com/blog/2010/01/04/using-rails-23-to-create-a-simple-accounting-app-part10/"/>
    <updated>2010-01-04T20:34:41+08:00</updated>
    <id>http://codemany.com/blog/2010/01/04/using-rails-23-to-create-a-simple-accounting-app-part10</id>
    <content type="html"><![CDATA[<p>从2.2版本起Rails开始内置支持i18n，因此以后实现国际化/本地化就可以不再需要各种各样的插件了。</p>

<p>Rails默认的Locale文件夹是config/locales，假设你要支持中文和英文，那么你需要在这个文件夹下放置zh.yml和en.yml两个文件。</p>

<p>相应的入门教程网上有不少，我也就不多讲了。这里主要说一下如何在记账应用中实现可以让用户指定语言的i18n实现，即当用户选择English，那么界面就切换成英文界面，并且以后打开的页面也是以英文出现，反之亦如此。</p>

<p>首先在header区添加以下代码：</p>

<p><code>
&lt; %= link_to 'Chinese', :locale =&gt; 'zh' %&gt;
&lt; %= link_to 'English', :locale =&gt; 'en' %&gt;
</code></p>

<p>点击其中某个链接后，浏览器就会传递对应的参数zh或en到后台。</p>

<p>然后在app/controllers/application_controller.rb中添加以下代码：</p>

<p>```
before_filter :set_locale</p>

<p>def set_locale
  I18n.locale = params[:locale]
end
```</p>

<p>不过这里有个问题就是url中必须得带着参数，不然的话用户的选择就会失效。要想使选择达到持续的效果，可以考虑把这些信息保存在session中，改进后的代码如下：</p>

<p><code>
def set_locale
  I18n.locale = params[:locale] || session[:locale]
  session[:locale] = I18n.locale
end
</code></p>

<p>现在这样就基本上差不多了。剩下的就是处理第一次访问时的语言，这个可以从http头中的ACCEPT_LANGUAGE参数获取。最终实现的代码：</p>

<p><code>
def set_locale
  accept_lang = request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first
  I18n.locale = params[:locale] || session[:locale] || accept_lang || 'zh'
  session[:locale] = I18n.locale
end
</code></p>

<p>不过当用户设置Locale后，在添加Entry时会报以下错误：</p>

<p>```
can't convert Symbol into String</p>

<p>Extracted source (around line #8):</p>

<pre><code>6:   &lt;p&gt;
7:     &lt; %= t(:effective_date) %&gt;&lt;br /&gt;
8:     &lt; %= f.date_select :effective_date %&gt;
</code></pre>

<p>```</p>

<p>查找资料后发现可以通过在date_select中加入order来解决。但日期下拉列表中的月份还有问题，出现的不是正常月份，而是一些随机数。这个可以通过添加month_names解决。</p>

<p>```</p>

<h1>new.html.erb</h1>

<p><p>
  &lt; %= t(:effective_date) %><br />
  &lt; %= f.date_select :effective_date %>
</p>
```</p>

<p>```</p>

<h1>en.yml</h1>

<p>en:
  date:</p>

<pre><code>month_names: [~, January, February, ..., November, December]
order: [ :year, :month, :day ]
</code></pre>

<p>```</p>

<p>```</p>

<h1>zh.yml</h1>

<p>zh:
  date:</p>

<pre><code>month_names: [~, 一月, 二月, ..., 十一月, 十二月]
order: [ :year, :month, :day ]
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebWork中如何实现i18n]]></title>
    <link href="http://codemany.com/blog/2005/11/17/how-to-implement-i18n-in-webwork/"/>
    <updated>2005-11-17T13:57:14+08:00</updated>
    <id>http://codemany.com/blog/2005/11/17/how-to-implement-i18n-in-webwork</id>
    <content type="html"><![CDATA[<p>ognl-2.6.5.jar + oscore-2.2.4.jar + webwork-2.1.7.jar + xwork-1.0.5.jar</p>

<p>web.xml配置文件的内容：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE web-app PUBLIC</p>

<pre><code>"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
"http://java.sun.com/dtd/web-app_2_3.dtd"&gt;
</code></pre>

<p>&lt;web-app></p>

<pre><code>&lt;display-name&gt;i18n&lt;/display-name&gt;

&lt;servlet&gt;
    &lt;servlet-name&gt;action&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.opensymphony.webwork.dispatcher.ServletDispatcher&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;action&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;taglib&gt;
    &lt;taglib-uri&gt;webwork&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/webwork.tld&lt;/taglib-location&gt;
&lt;/taglib&gt;
</code></pre>

<p>&lt;/web-app>
```</p>

<p>webwork.properties配置文件：</p>

<p>```</p>

<h3>This can be used to set your locale and encoding scheme</h3>

<h1>webwork.locale=en_US    &lt;- 这行一定要注释掉，因为WebWork首先判断webwork.locale有没有被设置，</h1>

<pre><code>                        如有则始终以该locale为准，忽略浏览器的locale
</code></pre>

<p>webwork.i18n.encoding=utf-8</p>

<h3>Load custom default resource bundles</h3>

<p>webwork.custom.i18n.resources=ApplicationResources
```</p>

<p>xwork.xml配置文件的内容：</p>

<p>```
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;!DOCTYPE xwork PUBLIC</p>

<pre><code>"-//OpenSymphony Group//XWork 1.0//EN"
"http://www.opensymphony.com/xwork/xwork-1.0.dtd"&gt;
</code></pre>

<p><xwork></p>

<pre><code>&lt;include file="webwork-default.xml" /&gt;

&lt;package name="default" extends="webwork-default"&gt;
    &lt;action name="hello" class="com.example.i18n.action.HelloAction"&gt;
        &lt;result name="success" type="dispatcher"&gt;/i18n.jsp&lt;/result&gt;
    &lt;/action&gt;
&lt;/package&gt;
</code></pre>

<p></xwork>
```</p>

<p>I18NAction.java实现代码：</p>

<p>```
package com.example.i18n;</p>

<p>import com.opensymphony.xwork.ActionSupport;</p>

<p>public class I18NAction extends ActionSupport {</p>

<pre><code>public String execute() throws Exception {
    return SUCCESS;
}
</code></pre>

<p>}
```</p>

<p>i18n.jsp的代码：</p>

<p>```
&lt;%@ page pageEncoding="utf-8" contentType="text/html; charset=utf-8" %></p>

<p>&lt;%@ taglib uri="webwork" prefix="ww" %></p>

<p><html>
<head></p>

<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</code></pre>

<p></head></p>

<p><body></p>

<pre><code>&lt;ww:property value="getText('i18n.value')" /&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>ApplicationResources_zh_CN.properties的内容：</p>

<p><code>
i18n.value=国际化
</code></p>

<p>ApplicationResources_en_US.properties的内容：</p>

<p><code>
i18n.value=internationalization
</code></p>
]]></content>
  </entry>
  
</feed>
