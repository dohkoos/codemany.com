<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Annotation | 乐者为王]]></title>
  <link href="http://codemany.com/tags/annotation/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-08-04T00:34:54+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现自己的Java Annotation]]></title>
    <link href="http://codemany.com/blog/2008/02/29/realize-their-own-java-annotation/"/>
    <updated>2008-02-29T16:44:34+08:00</updated>
    <id>http://codemany.com/blog/2008/02/29/realize-their-own-java-annotation</id>
    <content type="html"><![CDATA[<p>实现一个自己的annotation非常简单。Annotation类型的声明与一般的接口声明极其相似，区别只在于它在interface关键字前面使用"@&ldquo;符号。下面就是一个简单的例子：</p><p>package com.codemany.annotation;</p><p>import java.lang.annotation.Documented;<br />import java.lang.annotation.ElementType;<br />import java.lang.annotation.Retention;<br />import java.lang.annotation.RetentionPolicy;<br />import java.lang.annotation.Target;</p><p>@Target(ElementType.METHOD)<br />@Retention(RetentionPolicy.SOURCE)<br />@Documented<br />public @interface Event {<br />}</p><p>public class EventAnonationTest {<br />    @Event<br />    public void clicked() {<br />    }<br />}</p><p>@Target指定可以应用Annotation类型的程序元素，以防止在其它程序元素中误用Annotation类型：<br />public enum java.lang.annotation.ElementType {<br />    TYPE,               // Class, interface, or enum (but not annotation)<br />    FIELD,              // Field (including enumerated values)<br />    METHOD,             // Method (does not include constructors)<br />    PARAMETER,          // Method parameter<br />    CONSTRUCTOR,        // Constructor<br />    LOCAL_VARIABLE,     // Local variable or catch clause<br />    ANNOTATION_TYPE,    // Annotation Types (meta-annotations)<br />    PACKAGE             // Java package<br />}</p><p>@Retention设置Java编译器处理Annotation类型的方式：<br />public enum java.lang.annotation.RetentionPolicy {<br />    SOURCE,     // Annotation is discarded by the compiler<br />    CLASS,      // Annotation is stored in the class file, but ignored by the VM<br />    RUNTIME     // Annotation is stored in the class file and read by the VM<br />}</p><p>@Documented指明需要在Javadoc中包含Annotation (缺省是不包含的)。使用@Documented的一个技巧就是指定Retention为RetentionPolicy.RUNTIME。这样，Annotation就会保留在编译后的类文件中并且由虚拟机加载，然后Javadoc就可以抽取出Annotation并添加到类的HTML文档中。</p><p>@Inherited定义了Annotation类型的修饰是否可以由被修饰类的派生类继承。</p></p></p>
]]></content>
  </entry>
  
</feed>
