<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Annotation | 乐者为王]]></title>
  <link href="http://codemany.com/tags/annotation/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-10-17T17:12:53+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现自己的Java Annotation]]></title>
    <link href="http://codemany.com/blog/implement-your-own-annotation-in-java/"/>
    <updated>2008-02-29T16:44:34+08:00</updated>
    <id>http://codemany.com/blog/implement-your-own-annotation-in-java</id>
    <content type="html"><![CDATA[<p>Annotation类型的声明与一般的接口声明极其相似，区别只在于它在interface关键字前面使用“@”符号。下面就是一个简单的例子：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
@Documented
public @interface Event {
}

public class EventAnonationTest {
    @Event
    public void clicked() {
    }
}
</code></pre></div>
<p>@Target指定可以应用Annotation类型的程序元素，以防止在其它程序元素中误用Annotation类型：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public enum java.lang.annotation.ElementType {
    TYPE,               // Class, interface, or enum (but not annotation)
    FIELD,              // Field (including enumerated values)
    METHOD,             // Method (does not include constructors)
    PARAMETER,          // Method parameter
    CONSTRUCTOR,        // Constructor
    LOCAL_VARIABLE,     // Local variable or catch clause
    ANNOTATION_TYPE,    // Annotation Types (meta-annotations)
    PACKAGE             // Java package
}
</code></pre></div>
<p>@Retention设置Java编译器处理Annotation类型的方式：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public enum java.lang.annotation.RetentionPolicy {
    SOURCE,     // Annotation is discarded by the compiler
    CLASS,      // Annotation is stored in the class file, but ignored by the VM
    RUNTIME     // Annotation is stored in the class file and read by the VM
}
</code></pre></div>
<p>@Documented指明需要在Javadoc中包含Annotation（缺省是不包含的）。使用@Documented的一个技巧就是指定Retention为RetentionPolicy.RUNTIME。这样，Annotation就会保留在编译后的类文件中并且由虚拟机加载，然后Javadoc就可以抽取出Annotation并添加到类的HTML文档中。</p>

<p>@Inherited定义了Annotation类型的修饰是否可以由被修饰类的子类继承。</p>
]]></content>
  </entry>
  
</feed>
