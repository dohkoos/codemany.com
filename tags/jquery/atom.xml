<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: jQuery | 乐者为王]]></title>
  <link href="http://codemany.com/tags/jquery/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-11-04T15:32:33+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用jQuery、Rails 4和Paperclip进行多文件上传]]></title>
    <link href="http://codemany.com/blog/multiple-file-upload-with-jquery-rails-4-and-paperclip/"/>
    <updated>2013-10-27T08:21:48+08:00</updated>
    <id>http://codemany.com/blog/multiple-file-upload-with-jquery-rails-4-and-paperclip</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://5minutenpause.com/blog/2013/09/04/multiple-file-upload-with-jquery-rails-4-and-paperclip/">https://5minutenpause.com/blog/2013/09/04/multiple-file-upload-with-jquery-rails-4-and-paperclip/</a></p>

<p>在最近的项目中，我需要一个方便的文件上传器。我想要多文件上传和进度条。我想要它们都能与<a href="http://getbootstrap.com/">Bootstrap</a>一起工作。<a href="http://blueimp.github.io/jQuery-File-Upload/">jQuery File Upload</a>能够满足这些需求。初看上去它似乎不容易使用，在研究后我发现Ryan Bates做过一个关于<a href="http://railscasts.com/episodes/381-jquery-file-upload">jQuery文件上传</a>的<a href="http://railscasts.com/">railscast</a>。不幸的是，这个railscast使用了Rails 3和旧的jQuery版本。所以我必须调整它。涉及这个主题的其它博文都开始于2012年甚至更早，在这里是新的Rails 4版本。</p>

<p>我们不是生活在真空中，所以会经常性地使用已有的想法（<a href="http://everythingisaremix.info/blog/everything-is-a-remix-the-ted-talk">一切都是混合</a>），因此我没有试图去提出一个完全原创的解决方案，下面我的实现是基于Ryans的工作。</p>

<p><strong>更新：</strong>我为这篇文章创建了一个<a href="https://github.com/5minpause/multiple-file-upload">GitHub仓库</a>。你可以将其用作本文中我使用的所有内容的完整工作副本。我使用这些提交来跟踪博客文章，以便你可以使用它们“重播”我的实现。如果有任何问题，请<a href="https://github.com/5minpause/multiple-file-upload/issues">在GitHub打开一个issue</a>，并在那里询问，或者就在本文后面发布你的评论。谢谢。</p>

<p><strong>更新2：</strong>Paul Walker在评论中指出了如何解决Turbolinks的问题。如果你也有这种情况，请看<a href="http://5minutenpause.com/blog/2013/09/04/multiple-file-upload-with-jquery-rails-4-and-paperclip/#comment-1595778720">他对Turbolinks的评论</a>。</p>

<p><strong>更新3：</strong>如果你想知道如何在后台完成图片处理，请参阅<a href="http://5minutenpause.com/blog/2014/10/24/comprehensive-guide-to-background-processing-of-uploads-with-activejob-and-rails-4-dot-2">我的这个主题的新帖子</a>。我会给你展示如何使用Rails 4.2的Active Job和Delayed Job来实现后台处理。</p>

<h3 id="gem和资源文件">Gem和资源文件</h3>

<p>我们从Gemfile开始，添加<code>jquery-fileupload-rails</code>这个gem。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;jquery-fileupload-rails&#39;
</code></pre></div>
<p>使用<code>bundle install</code>安装所有gem。</p>

<p>安装后，你需要在你的application.js中引入以下这些文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">//= require jquery
//= require jquery_ujs
//= require jquery-fileupload/basic
//= require jquery-fileupload/vendor/tmpl
//= require_tree .
</code></pre></div>
<p>我们在这里使用基本版本，并且包含<code>jquery-fileupload/vendor/tmpl</code>，所以我们可以选择渲染我们自己的模板。</p>

<h3 id="视图">视图</h3>

<p>我们有个表单用于上传文件，并将JavaScript模板包含在文件的底部。有件事要注意：模板脚本必须是没有换行或空格的单行程序。否则jQuery会抱怨：<code>Uncaught Syntax error, unrecognized expression: [object Object]</code>。另一个解决方案是使用<code>$.parseHTML();</code>。接下来我会给你展示如何在uploads.js.coffee中做到这点。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= form_for Upload.new, :url =&gt; uploads_path, html: { multipart: true } do |f| %&gt;
  &lt;%= f.label :uploaded_file, t(&#39;.upload_new_file&#39;) %&gt;
  &lt;%= f.file_field :uploaded_file, multiple: true, name: &#39;upload[uploaded_file]&#39; %&gt;
  &lt;%= f.submit t(:save), class: &#39;btn&#39; %&gt;
&lt;% end %&gt;

&lt;% # jquery upload template # %&gt;
&lt;script id=&quot;template-upload&quot; type=&quot;text/x-tmpl&quot;&gt;
  &lt;div class=&quot;upload&quot;&gt;
    { %=o.name % }&lt;div class=&quot;progress&quot;&gt;&lt;div class=&quot;bar&quot; style=&quot;width: 0%&quot;&gt;&lt;/div&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;
</code></pre></div>
<p>因为要返回JavaScript脚本，所以:create成功后要渲染的文件如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;% if @upload.new_record? %&gt;
  alert(&#39;Failed&#39;);
&lt;% else %&gt;
  $(&#39;ul.thumbnails&#39;).append(&quot;&lt;%=j render partial: &#39;photosets/upload&#39;, locals: { upload: @upload } %&gt;&quot;);
&lt;% end %&gt;
</code></pre></div>
<p>当你点击提交以上传你的图片时，实际发生的是你上传的每张图片都有多次提交。现在我们需要处理这些提交。我们在CoffeeScript文件里面做这些：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">jQuery -&gt;
  $(&#39;#upload_uploaded_file&#39;).attr(&#39;name&#39;,&#39;upload[uploaded_file]&#39;)
  $(&#39;#new_upload&#39;).fileupload
    dataType: &#39;script&#39;
    add: (e, data) -&gt;
      types = /(\.|\/)(gif|jpe?g|png|mov|mpeg|mpeg4|avi)$/i
      file = data.files[0]
      if types.test(file.type) || types.test(file.name)
        data.context = $(tmpl(&quot;template-upload&quot;, file))
        $(&#39;#new_upload&#39;).append(data.context)
        data.submit()
      else
        alert(&quot;#{file.name} is not a gif, jpg or png image file&quot;)
    progress: (e, data) -&gt;
      if data.context
        progress = parseInt(data.loaded / data.total * 100, 10)
        data.context.find(&#39;.bar&#39;).css(&#39;width&#39;, progress + &#39;%&#39;)
</code></pre></div>
<p>这里我们检查文件的类型是图片还是电影。否则，我们将向用户显示不允许该文件的警告。如果文件被允许，我们使用文件的数据渲染模板，并将其附加到我们的图片列表中（这里没有显示代码——你可以很容易地弄明白）。然后我们提交文件进行实际上传并保存到数据库。此外，我们显示每个上传文件的进度条。</p>

<p>upload.js.coffee中的第2行用于将upload_file的名称从数组改为单个上传（从<code>upload[uploaded_file][]</code>到<code>upload[uploaded_file]</code>）。否则，上传数组会使Paperclip抛出错误<code>Paperclip::AdapterRegistry::NoHandlerError</code>。你可以使用file_field的name属性设置值，但那对我来说无法可靠地工作。</p>

<p>我在之前说过，你必须避免模板中的换行符。如果你将第9行改为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">data.context = $($.parseHTML($(tmpl(&quot;template-upload&quot;, file)))[1])
</code></pre></div>
<p>应该可以保持你的换行。我在<a href="http://stackoverflow.com/a/15563364/299781">Stack Overflow</a>发现这个，但没有尝试过。但它看起来应该没问题。</p>

<p>控制器动作很简单：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def create
  @upload = Upload.create(upload_params)
end
</code></pre></div>
<p>这是个简单的实现。你可以做的更多。仔细看看<a href="http://blueimp.github.io/jQuery-File-Upload/">jQuery File Upload</a>的文档。如果你有任何问题，可以在twitter或app.net上询问我，我很乐意为你提供帮助。谢谢阅读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jQuery显示隐藏侧边栏]]></title>
    <link href="http://codemany.com/blog/show-hide-sidebar-with-jquery/"/>
    <updated>2012-10-26T08:13:14+08:00</updated>
    <id>http://codemany.com/blog/show-hide-sidebar-with-jquery</id>
    <content type="html"><![CDATA[<p>需要在记账应用使用侧边栏开关功能，在网上找了段代码修改修改，可惜没有找到漂亮的小图标，只好使用&gt;&gt;和&lt;&lt;符号来表示，太丑陋了！</p>

<p>把jquery.toggle.sidebar.js的代码贴上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">jQuery(function() {
  var sidebar = $.cookie(&quot;sidebar&quot;);
  if (sidebar == &quot;hide&quot;) {
    $(&#39;#sidebar&#39;).hide();
    $(&quot;.toggle&quot;).text(&quot;&gt;&gt;&quot;);
  }

  $(&quot;.toggle&quot;).click(function() {
    if ($(&#39;#sidebar&#39;).is(&#39;:visible&#39;)) {
      $(this).text(&quot;&gt;&gt;&quot;);
      $(&#39;#sidebar&#39;).hide();
      $.cookie(&quot;sidebar&quot;, &quot;hide&quot;, { expires: 7 });  // expires in 7 days
    } else {
      $(this).text(&quot;&lt;&lt;&quot;);
      $(&#39;#sidebar&#39;).show();
      $.removeCookie(&quot;sidebar&quot;);
    };
    return false;
  });
});
</code></pre></div>
<p>因为jQuery本身不支持Cookie操作，需要使用官方的插件，可以在 <a href="http://plugins.jquery.com/project/Cookie">http://plugins.jquery.com/project/Cookie</a> 或 <a href="https://github.com/carhartl/jquery-cookie">https://github.com/carhartl/jquery-cookie</a> 下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Rails应用添加feedback功能]]></title>
    <link href="http://codemany.com/blog/add-feedback-for-rails-application/"/>
    <updated>2011-01-05T21:44:39+08:00</updated>
    <id>http://codemany.com/blog/add-feedback-for-rails-application</id>
    <content type="html"><![CDATA[<p>首先，将Rails中的Prototype替换为jQuery。接着安装<a href="https://github.com/jsboulanger/feedback">feedback</a>插件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/plugin install git://github.com/jsboulanger/feedback.git
</code></pre></div>
<p>生成代码，由于我们用jQuery替换了Prototype，所以要在后面加上--jquery选项：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">script/generate feedback_form --jquery
</code></pre></div>
<p>在app/views/layouts/application.html.erb中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= javascript_include_tag :defaults %&gt;
</code></pre></div>
<p>在要添加feedback的页面中加上以下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= feedback_tab(:position =&gt; &#39;top&#39;) %&gt;
</code></pre></div>
<p>然后修改app/models/feedback_mailer.rb中的设置：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">def feedback(feedback)
  @recipients = &#39;webmaster@example.com&#39;
  @from = &#39;noreply@example.com&#39;
  @subject = &quot;[Feedback for example.com] #{feedback.subject}&quot;
</code></pre></div>
<p>这样feedback功能就加上了。</p>
]]></content>
  </entry>
  
</feed>
