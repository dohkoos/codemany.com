<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: iBatis | 乐者为王]]></title>
  <link href="http://codemany.com/tags/ibatis/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-10-05T00:20:52+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在iBatis中如何将JavaBean的boolean值映射成数据库的CHAR（Y或N）值]]></title>
    <link href="http://codemany.com/blog/how-to-map-javabean-boolean-value-into-database-char-value-in-ibatis/"/>
    <updated>2006-05-29T12:15:40+08:00</updated>
    <id>http://codemany.com/blog/how-to-map-javabean-boolean-value-into-database-char-value-in-ibatis</id>
    <content type="html"><![CDATA[<p>Spring 1.2.8 + iBatis 2.1.5</p>

<p>JavaBean的boolean值映射到数据库的默认值是0和1，不是非常直观，现在希望能将boolean值映射成为Y和N。iBatis 2.0.5以后的版本提供了TypeHandlerCallback，可以用来解决这个问题。</p>

<p>首先定义数据表：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">CREATE TABLE users (
    username varchar(40),
    password varchar(255),
    enabled char(1),
    PRIMARY KEY (username)
) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
</code></pre></div>
<p>YesNoTypeHandlerCallback实现代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class YesNoTypeHandlerCallback implements TypeHandlerCallback {

    public void setParameter(ParameterSetter setter, Object parameter) throws SQLException {
        if (parameter == null) {
            setter.setString(&quot;&quot;);
        } else {
            Boolean b = (Boolean)parameter;
            if (b.booleanValue()) {
                setter.setString(&quot;Y&quot;);
            } else {
                setter.setString(&quot;N&quot;);
            }
        }
    }

    public Object getResult(ResultGetter getter) throws SQLException {
        String string = getter.getString();
        if (string == null) {
            return null;
        } else if (&quot;Y&quot;.equalsIgnoreCase(string)) {
            return new Boolean(true);
        } else {
            return new Boolean(false);
        }
    }

    public Object valueOf(String s) {
        return s;
    }
}
</code></pre></div>
<p>配置文件sql-map-config.xml中的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;sqlMapConfig&gt;
    &lt;typeHandler jdbcType=&quot;CHAR&quot; javaType=&quot;boolean&quot;
                 callback=&quot;com.codemany.netlink.dao.support.YesNoTypeHandlerCallback&quot; /&gt;

    &lt;sqlMap resource=&quot;com/codemany/netlink/dao/impl/User.xml&quot; /&gt;
&lt;/sqlMapConfig&gt;
</code></pre></div>
<p>jdbcType=&quot;CHAR&quot; javaType=&quot;boolean&quot;必须有，否则YesNoTypeHandlerCallback.setParameter()不会被调用。</p>

<p>SqlMap映射文件User.xml部分代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;typeAlias alias=&quot;user&quot; type=&quot;com.codemany.netlink.model.User&quot; /&gt;

&lt;resultMap id=&quot;userResult&quot; class=&quot;user&quot;&gt;
    &lt;result property=&quot;username&quot; column=&quot;username&quot; /&gt;
    &lt;result property=&quot;password&quot; column=&quot;password&quot; /&gt;
    &lt;result property=&quot;enabled&quot; column=&quot;enabled&quot; jdbcType=&quot;CHAR&quot; javaType=&quot;boolean&quot; /&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;getUser&quot; parameterClass=&quot;string&quot; resultMap=&quot;userResult&quot;&gt;
&lt;![CDATA[
    SELECT username, password, enabled
    FROM user WHERE username = #username#
]]&gt;
&lt;/select&gt;

&lt;insert id=&quot;addUser&quot; parameterClass=&quot;user&quot;&gt;
&lt;![CDATA[
    INSERT INTO user (username, password, enabled)
    VALUES (#username#, #password#, #enabled,jdbcType=CHAR,javaType=boolean#)
]]&gt;
&lt;/insert&gt;
</code></pre></div>
<p>jdbcType=&quot;CHAR&quot; javaType=&quot;boolean&quot;必须有，否则YesNoTypeHandlerCallback.getResult()不会被调用；#enabled,jdbcType=CHAR,javaType=boolean#也必须这样写，否则YesNoTypeHandlerCallback.setParameter()也不会被调用，写成#enabled:CHAR#或#enabled#都不起作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DbUnit结合Spring进行SqlMap的单元测试]]></title>
    <link href="http://codemany.com/blog/sqlmap-unit-testing-with-spring-and-dbunit/"/>
    <updated>2006-04-11T20:39:04+08:00</updated>
    <id>http://codemany.com/blog/sqlmap-unit-testing-with-spring-and-dbunit</id>
    <content type="html"><![CDATA[<p>使用DbUnit，开发人员可以控制测试数据库的状态。进行一个DAO单元测试之前，DbUnit为数据库准备好初始化数据；而在测试结束时，DbUnit会把数据库状态恢复到测试前的状态。下面的例子使用DbUnit为SqlMap编写单元测试。</p>

<p>SqlMap映射文件User.xml的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;select id=&quot;getUser&quot; parameterClass=&quot;String&quot; resultClass=&quot;User&quot;&gt;
    SELECT username, password, first_name, last_name
    FROM user WHERE username = #username#
&lt;/select&gt;

&lt;delete id=&quot;removeUser&quot; parameterClass=&quot;String&quot;&gt;
    DELETE FROM user WHERE username = #username#
&lt;/delete&gt;

&lt;update id=&quot;updateUser&quot; parameterClass=&quot;User&quot;&gt;
    UPDATE user SET
        password = #password#,
        first_name = #firstName#,
        last_name = #lastName#
    WHERE username =#username#
&lt;/update&gt;

&lt;insert id=&quot;insertUser&quot; parameterClass=&quot;User&quot;&gt;
    INSERT INTO user (username, password, first_name, last_name)
    VALUES (#username#, #password#, #firstName#, #lastName#)
&lt;/insert&gt;
</code></pre></div>
<p>配置文件sql-map-config.xml中的内容如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;sqlMapConfig&gt;
    &lt;settings lazyLoadingEnabled=&quot;true&quot;
              cacheModelsEnabled=&quot;true&quot;
              enhancementEnabled=&quot;true&quot;
              maxSessions=&quot;64&quot;
              maxTransactions=&quot;8&quot;
              maxRequests=&quot;128&quot; /&gt;

    &lt;sqlMap resource=&quot;com/codemany/netlink/dao/impl/User.xml&quot; /&gt;
&lt;/sqlMapConfig&gt;
</code></pre></div>
<p>首先，要为单元测试准备测试数据。我们可以用DbUnit的Flat XML格式来准备测试数据集。下面的XML文件称为目标数据库的Seed File，它为测试准备了两条数据。其中元素名user对应数据库的表名，属性username，password，first_name和last_name是表user的列名，属性值就是记录值。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;dataset&gt;
    &lt;user username=&quot;ford&quot;
        password=&quot;ford&quot;
        first_name=&quot;Henry&quot;
        last_name=&quot;Ford&quot; /&gt;

    &lt;user username=&quot;twain&quot;
        password=&quot;twain&quot;
        first_name=&quot;Mark&quot;
        last_name=&quot;twain&quot; /&gt;
&lt;/dataset&gt;
</code></pre></div>
<p>缺省情况下，DbUnit在单元测试开始之前执行CLEAN_INSERT操作，删除Seed File中所有表的数据，并导入Seed File的测试数据。我们可以通过覆盖getSetUpOperation()和getTearDownOperation()方法来控制单元测试前和测试后的数据库状态。一种高效的实施方案就是让getSetUpOperation()方法执行REFRESH操作，通过执行这个操作，我们可以用Seed File中的数据去更新目标数据库里的数据。接下来，就是getTearDownOperation()，让他执行一个NONE操作，也就是什么也不执行。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">protected DatabaseOperation getSetUpOperation() throws Exception {
    return DatabaseOperation.REFRESH;
}

protected DatabaseOperation getTearDownOperation() throws Exception {
    return DatabaseOperation.NONE;
}
</code></pre></div>
<p>为了方便测试，我们为SqlMap的单元测试编写一个抽象的测试基类，代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public abstract class SqlMapTestCase extends DatabaseTestCase {
    protected SqlMapClient sqlMapClient = null;
    protected Properties props = new Properties();

    protected IDatabaseConnection getConnection() throws Exception {
        props.load(Resources.getResourceAsStream(&quot;properties/database.properties&quot;));

        Class.forName(props.getProperty(&quot;driver&quot;));
        Connection conn = DriverManager.getConnection(props.getProperty(&quot;url&quot;),
                props.getProperty(&quot;username&quot;), props.getProperty(&quot;password&quot;));
        return new DatabaseConnection(conn);
    }

    protected IDataSet getDataSet() throws Exception {
        String resource = &quot;com/codemany/netlink/dao/impl/dataset.xml&quot;;
        return new FlatXmlDataSet(Resources.getResourceAsStream(resource));
    }

    protected void setUp() throws Exception {
        super.setUp();

        // Build the SqlMapClient
        Reader reader = Resources.getResourceAsReader(&quot;sql-map-config.xml&quot;);
        sqlMapClient = SqlMapClientBuilder.buildSqlMapClient(reader);

        // Tell the SqlMapClient to use the given DataSource
        DataSource dataSource = getDataSource();
        TransactionConfig transactionConfig = getTransactionConfig(dataSource);
        // Apply the given TransactionConfig to the SqlMapClient
        applyTransactionConfig(sqlMapClient, transactionConfig);
    }

    protected void tearDown() throws Exception {
        super.tearDown();

        if (sqlMapClient != null) {
            DataSource ds = sqlMapClient.getDataSource();
            Connection conn = ds.getConnection();
            conn.close();
        }
    }

    private DataSource getDataSource() throws Exception {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(props.getProperty(&quot;driver&quot;));
        dataSource.setUrl(props.getProperty(&quot;url&quot;));
        dataSource.setUsername(props.getProperty(&quot;username&quot;));
        dataSource.setPassword(props.getProperty(&quot;password&quot;));
        return dataSource;
    }

    private TransactionConfig getTransactionConfig(DataSource dataSource) throws Exception {
        Properties transactionConfigProperties = new Properties();
        transactionConfigProperties.setProperty(&quot;SetAutoCommitAllowed&quot;, &quot;false&quot;);

        TransactionConfig transactionConfig = (TransactionConfig)ExternalTransactionConfig.class.newInstance();
        transactionConfig.setDataSource(dataSource);
        transactionConfig.initialize(transactionConfigProperties);
        return transactionConfig;
    }

    private void applyTransactionConfig(SqlMapClient sqlMapClient, TransactionConfig transactionConfig) {
        if (!(sqlMapClient instanceof ExtendedSqlMapClient)) {
            throw new IllegalArgumentException(&quot;Cannot set TransactionConfig with DataSource&quot;
                    + &quot;for SqlMapClient if not of type ExtendedSqlMapClient: &quot; + sqlMapClient);
        }
        ExtendedSqlMapClient extendedClient = (ExtendedSqlMapClient)sqlMapClient;
        transactionConfig.setMaximumConcurrentTransactions(extendedClient.getDelegate().getMaxTransactions());
        extendedClient.getDelegate().setTxManager(new TransactionManager(transactionConfig));
    }
}
</code></pre></div>
<p>然后为每个SqlMap映射文件编写一个测试类，继承上面的抽象类：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class UserSqlMapTest extends SqlMapTestCase {

    public void testGetUser() throws Exception {
        User user = (User)sqlMapClient.queryForObject(&quot;getUser&quot;, &quot;ford&quot;);
        assertNotNull(user);
        assertEquals(&quot;ford&quot;, user.getName());
    }
}
</code></pre></div>
<p>如此就可以进行单元测试了。</p>
]]></content>
  </entry>
  
</feed>
