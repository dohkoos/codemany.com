<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: iBatis | 乐者为王]]></title>
  <link href="http://codemany.com/tags/ibatis/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-10-11T00:42:55+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在iBatis中如何将JavaBean的boolean值映射成数据库的CHAR（Y或N）值]]></title>
    <link href="http://codemany.com/blog/2006/05/29/how-to-map-javabean-boolean-value-into-database-char-value-in-ibatis/"/>
    <updated>2006-05-29T12:15:40+08:00</updated>
    <id>http://codemany.com/blog/2006/05/29/how-to-map-javabean-boolean-value-into-database-char-value-in-ibatis</id>
    <content type="html"><![CDATA[<p>Spring 1.2.8 + iBatis 2.1.5</p>

<p>JavaBean的boolean值映射到数据库的默认值是0和1，不是非常直观，现在希望能将boolean值映射成为Y和N。iBatis 2.0.5以后的版本提供了TypeHandlerCallback，可以用来解决这个问题。</p>

<p>首先定义数据表：</p>

<p>```
CREATE TABLE users (</p>

<pre><code>username varchar(40),
password varchar(255),
enabled char(1),
PRIMARY KEY (username)
</code></pre>

<p>) ENGINE=InnoDB DEFAULT CHARSET=utf-8;
```</p>

<p>YesNoTypeHandlerCallback实现代码：</p>

<p>```
public class YesNoTypeHandlerCallback implements TypeHandlerCallback {</p>

<pre><code>public void setParameter(ParameterSetter setter, Object parameter) throws SQLException {
    if (parameter == null) {
        setter.setString("");
    } else {
        Boolean b = (Boolean)parameter;
        if (b.booleanValue()) {
            setter.setString("Y");
        } else {
            setter.setString("N");
        }
    }
}

public Object getResult(ResultGetter getter) throws SQLException {
    String string = getter.getString();
    if (string == null) {
        return null;
    } else if ("Y".equalsIgnoreCase(string)) {
        return new Boolean(true);
    } else {
        return new Boolean(false);
    }
}

public Object valueOf(String s) {
    return s;
}
</code></pre>

<p>}
```</p>

<p>SQL Map Config配置代码：</p>

<p>```
<sqlMapConfig></p>

<pre><code>&lt;typeHandler jdbcType="CHAR" javaType="boolean"
             callback="com.example.netlink.dao.support.YesNoTypeHandlerCallback" /&gt;

&lt;sqlMap resource="com/example/netlink/dao/impl/sql/UserSQL.xml" /&gt;
</code></pre>

<p></sqlMapConfig>
```</p>

<p>jdbcType="CHAR" javaType="boolean"必须有，否则YesNoTypeHandlerCallback.setParameter()不会被调用。</p>

<p>UserSQL.xml部分代码：</p>

<p>```
<typeAlias alias="user" type="com.example.netlink.model.User" /></p>

<p><resultMap id="userResult" class="user"></p>

<pre><code>&lt;result property="username" column="username" /&gt;
&lt;result property="password" column="password" /&gt;
&lt;result property="enabled" column="enabled" jdbcType="CHAR" javaType="boolean" /&gt;
</code></pre>

<p></resultMap></p>

<p><select id="getUser" parameterClass="string" resultMap="userResult">
&lt;![CDATA[</p>

<pre><code>SELECT username, password, enabled
FROM user WHERE username = #username#
</code></pre>

<p>]]&gt;
</select></p>

<p><insert id="addUser" parameterClass="user">
&lt;![CDATA[</p>

<pre><code>INSERT INTO user (username, password, enabled)
VALUES (#username#, #password#, #enabled,jdbcType=CHAR,javaType=boolean#)
</code></pre>

<p>]]&gt;
</insert>
```</p>

<p>jdbcType="CHAR" javaType="boolean"必须有，否则YesNoTypeHandlerCallback.getResult()不会被调用；#enabled,jdbcType=CHAR,javaType=boolean#也必须这样写，否则YesNoTypeHandlerCallback.setParameter()也不会被调用，写成#enabled:CHAR#或#enabled#都不起作用。</p>
]]></content>
  </entry>
  
</feed>
