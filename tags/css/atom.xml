<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: CSS | 乐者为王]]></title>
  <link href="http://codemany.com/tags/css/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-06-14T10:52:17+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用Flexbox构建新闻站点布局]]></title>
    <link href="http://codemany.com/blog/how-to-build-a-news-website-layout-with-flexbox/"/>
    <updated>2016-06-11T23:31:14+08:00</updated>
    <id>http://codemany.com/blog/how-to-build-a-news-website-layout-with-flexbox</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://webdesign.tutsplus.com/tutorials/how-to-build-a-news-website-layout-with-flexbox--cms-26611">http://webdesign.tutsplus.com/tutorials/how-to-build-a-news-website-layout-with-flexbox--cms-26611</a></p>

<p><img src="/uploads/flexbox-preview.png" title="flexbox-preview" ></p>

<p>在投入并开始之前你没有必要理解Flexbox的每个方面。在这篇教程中，我们将介绍一些Flexbox的特性，同时设计一个类似<a href="http://www.theguardian.com/">The Guardian</a>的“新闻布局”。</p>

<p>我们正在使用Flexbox的原因是它提供了非常强大的特性：</p>

<ul>
<li>我们可以很容易制作响应式列</li>
<li>我们可以使列等高</li>
<li>我们可以把内容推到容器的底部</li>
</ul>

<p>那么让我们开始吧！</p>

<h3 id="1-从两个列开始">1. 从两个列开始</h3>

<p>Creating columns in CSS has always been a challenge. For a long time, the only options were to use floats or tables, but they both had their own issues.</p>

<p>Flexbox makes the process easier, giving us:</p>

<ul>
<li><strong>cleaner code</strong>: we only need a container with display: flex</li>
<li>no need to <strong>clear</strong> floats, preventing unexpected layout behavior</li>
<li><strong>semantic markup</strong></li>
<li><strong>flexibility</strong>: we can resize, stretch, align the columns in a few lines of CSS</li>
</ul>

<p>Let’s start by making two columns; one that’s 2/3 of the width of our container, and one that’s 1/3.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div class=&quot;columns&quot;&gt;
  &lt;div class=&quot;column main-column&quot;&gt;
    2/3 column
  &lt;/div&gt;
  &lt;div class=&quot;column&quot;&gt;
    1/3 column
  &lt;/div&gt;
&lt;/div&gt;
</code></pre></div>
<p>There are two elements here:</p>

<ul>
<li>the columns container</li>
<li>two column children, one with an additional class of main-column which we’ll use to make it wider</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">.columns {
  display: flex;
}

.column {
  flex: 1;
}

.main-column {
  flex: 2;
}
</code></pre></div>
<p>As the main column has a flex value of 2, it will take up twice as much space as the other column.</p>

<p>By adding some additional visual styles, here’s what we get:</p>

<h3 id="2-让每一列都成为flexbox容器">2. 让每一列都成为Flexbox容器</h3>

<p>Each of these two columns will contain several articles stacked vertically, so we’re going to turn the column elements into Flexbox containers too. We want:</p>

<ul>
<li>the articles to be stacked vertically</li>
<li>the articles to stretch and fill the available space</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">.column {
  display: flex;
  flex-direction: column; /* Makes the articles stacked vertically */
}

.article {
  flex: 1; /* Stretches the articles to fill up the remaining space */
}
</code></pre></div>
<p>The flex-direction: column rule on the container, combined with the flex: 1 rule on the children ensures that the articles will fill up the whole vertical space, keeping our first two columns the same height.</p>

<h3 id="3-让每篇文章都成为flexbox容器">3. 让每篇文章都成为Flexbox容器</h3>

<p>Now, to give us extra control, let’s turn each article into a Flexbox container too. Each of them will contain:</p>

<ul>
<li>a title</li>
<li>a paragraph</li>
<li>an information bar with the author and the number of comments</li>
<li>an optional responsive image</li>
</ul>

<p>We’re using Flexbox here in order to “push” the information bar to the bottom. As a reminder, this is the article layout we’re aiming for:</p>

<p><img src="/uploads/flexbox-card.png" title="flexbox-card" ></p>

<p>Here’s the code:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;a class=&quot;article first-article&quot;&gt;
  &lt;figure class=&quot;article-image&quot;&gt;
    &lt;img src=&quot;&quot;&gt;
  &lt;/figure&gt;
  &lt;div class=&quot;article-body&quot;&gt;
    &lt;h2 class=&quot;article-title&quot;&gt;
      &lt;!-- title --&gt;
    &lt;/h2&gt;
    &lt;p class=&quot;article-content&quot;&gt;
      &lt;!-- content --&gt;
    &lt;/p&gt;
    &lt;footer class=&quot;article-info&quot;&gt;
      &lt;!-- information --&gt;
    &lt;/footer&gt;
  &lt;/div&gt;
&lt;/a&gt;
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">.article {
  display: flex;
  flex-direction: column;
  flex-basis: auto; /* sets initial element size based on its contents  */
}

.article-body {
  display: flex;
  flex: 1;
  flex-direction: column;
}

.article-content {
  flex: 1; /* This will make the content fill up the remaining space, and thus push the information bar at the bottom */
}
</code></pre></div>
<p>The article’s elements are laid out vertically thanks to the flex-direction: column; rule.</p>

<p>We apply flex: 1 to the article-content element so that it fills up the empty space, and “pushes” the article-info to the bottom, no matter the height of the columns.</p>

<h3 id="4-添加一些嵌套列">4. 添加一些嵌套列</h3>

<p>In the left column, what we actually want is another set of columns. So we’re going to replace the second article with the same columns container we’ve already used.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;div class=&quot;columns&quot;&gt;
  &lt;div class=&quot;column nested-column&quot;&gt;
    &lt;a class=&quot;article&quot;&gt;
      &lt;!-- Article content --&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&quot;column&quot;&gt;
    &lt;a class=&quot;article&quot;&gt;
      &lt;!-- Article content --&gt;
    &lt;/a&gt;
    &lt;a class=&quot;article&quot;&gt;
      &lt;!-- Article content --&gt;
    &lt;/a&gt;
    &lt;a class=&quot;article&quot;&gt;
      &lt;!-- Article content --&gt;
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre></div>
<p>As we want the first nested column to be wider, we’re adding a nested-column class with the additional style:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.nested-column {
  flex: 2;
}
</code></pre></div>
<p>This will make our new column twice as wide as the other.</p>

<h3 id="5-给第一篇文章一个水平布局">5. 给第一篇文章一个水平布局</h3>

<p>The first article is really big. To optimize the use of space, let’s switch its layout to be horizontal.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.first-article {
  flex-direction: row;
}

.first-article .article-body {
  flex: 1;
}

.first-article .article-image {
  height: 300px;
  order: 2;
  padding-top: 0;
  width: 400px;
}
</code></pre></div>
<p>The order property is very useful here, as it allows us to alter the order of HTML elements without affecting the HTML markup. The article-image actually comes before the article-body in the markup, but it will behave as if it comes after.</p>

<h3 id="6-使布局可响应">6. 使布局可响应</h3>

<p>This is all looking just as we want, though it’s a bit squished. Let’s fix that by going responsive.</p>

<p>One great feature of Flexbox is that you need only remove the display: flex rule on the container to disable Flexbox completely, while keeping all the other Flexbox properties (such as align-items or flex) valid.</p>

<p>As a result, you can trigger a “responsive” layout by enabling Flexbox only above a certain breakpoint.</p>

<p>We’re going to remove display: flex from both the .columns and .column selectors, instead wrapping them in a media query:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@media screen and (min-width: 800px) {
  .columns,
  .column {
    display: flex;
  }
}
</code></pre></div>
<p>That’s it! On smaller screens, all the articles will be on top of each other. Above 800px, they will be laid out in two columns.</p>

<h3 id="7-添加最后的润色">7. 添加最后的润色</h3>

<p>To make the layout more appealing on larger screens, let’s add some CSS tweaks:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@media screen and (min-width: 1000px) {
  .first-article {
    flex-direction: row;
  }

  .first-article .article-body {
    flex: 1;
  }

  .first-article .article-image {
    height: 300px;
    order: 2;
    padding-top: 0;
    width: 400px;
  }

  .main-column {
    flex: 3;
  }

  .nested-column {
    flex: 2;
  }
}
</code></pre></div>
<p>The first article has its content laid out horizontally, with the text on the left and the image on the right. Also, the main column is now wider (75%) and the nested column too (66%). Here’s the final result!</p>

<h3 id="总结">总结</h3>

<p>I hope I’ve shown you that you needn’t understand every aspect of Flexbox to jump in and start using it! This responsive news layout is a really useful pattern; pull it apart, play with it, let us know how you get on!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用响应式设计改造电子书网站]]></title>
    <link href="http://codemany.com/blog/rebuild-ebook-website-with-responsive-design/"/>
    <updated>2014-06-19T11:55:16+08:00</updated>
    <id>http://codemany.com/blog/rebuild-ebook-website-with-responsive-design</id>
    <content type="html"><![CDATA[<p>因为要在其它设备上测试响应式设计的效果，需要先对开发环境做些简单的配置。</p>

<p>启动服务器时需加上本机的IP地址和访问端口（通常是80）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails s -b 192.168.0.100 -p 80
</code></pre></div>
<p>配置Windows系统的内置防火墙，开启80端口以供其它设备访问：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">netsh advfirewall firewall add rule name=&quot;Open Port 80&quot; dir=in action=allow protocol=TCP localport=80
</code></pre></div>
<p>查看和删除防火墙规则的命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">netsh advfirewall firewall delete rule name=&quot;Open Port 80&quot; protocol=TCP localport=80
netsh advfirewall firewall show rule name=&quot;Open Port 80&quot;
</code></pre></div>
<p>响应式设计的优缺点就不多说了，已经有太多的文章讲过这些。这里主要讲如何使用响应式设计改造现有的电子书网站。</p>

<p>首先，需要使用viewport标签设置屏幕宽度为设备宽度，使网站内容可以适应响应式变化。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
</code></pre></div>
<p>因为这是一个非常简陋，并且以内容为主的网站。在上述设置后几乎不用再修改就能适应不同屏幕分辨率下的信息呈现，除了导航栏因为导航选项较多，在手机等设备上打开会出现后面部分选项被挤下去。抽屉样式的导航是解决这个问题的好方法。在网上找到一个横向导航栏切换成抽屉式导航栏的库<a href="http://srobbin.github.io/jquery-pageslide/">jQuery PageSlide</a>，它使用图片实现三明治图标，所以对它做了些修改，用标签来实现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;ul class=&quot;burger&quot;&gt;
  &lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div>
<p>对应的CSS代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.burger {
  li {
    height: 4px;
    width: 30px;
    background: #000;
    border-radius: 3px;
    margin: 5px 0;
  }
}
</code></pre></div>
<p>要实现响应式的话，只要让它在正常情况下隐藏，屏幕变小时显现即可：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.burger {
  display: none;
}

@media screen and (max-width: 480px) {
  .burger {
    display: block;
  }
}
</code></pre></div>
<p>还需要在application.html.erb的底部开启点击三明治图标时的响应事件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= javascript_include_tag &quot;jquery.pageslide&quot;, &quot;data-turbolinks-track&quot; =&gt; true %&gt;
&lt;script&gt;
  $(&quot;.burger&quot;).pageslide();
&lt;/script&gt;
</code></pre></div>
<p>导航条的CSS也需要做些修改，使之能在屏幕变小时转换成抽屉式导航条：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@media screen and (max-width: 480px) {
  nav ul {
    display: none;
  }
}
</code></pre></div>
<p>至此，网站的响应式改造就基本完成了。如果你觉得对你有所帮助，请将此文发送给你的朋友，如果你还有更好的建议也可以在下面的评论中分享你的经验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用HTML5创建电子书网站]]></title>
    <link href="http://codemany.com/blog/create-ebook-website-with-html5/"/>
    <updated>2013-05-24T15:04:32+08:00</updated>
    <id>http://codemany.com/blog/create-ebook-website-with-html5</id>
    <content type="html"><![CDATA[<p>在项目开始前，先要了解下HTML5规范包含的一些有用的新的语义标签，用于提供HTML页面的各个区域或部分的意义，例如页眉、页脚、导航栏、边栏等等。在以前的HTML版本中，这些部分通常使用<code>&lt;div&gt;</code>标签来创建，通过id或class属性来区分。</p>

<p>HTML5引入的主要标签包括：</p>

<table><thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>header</td>
<td>此标签用于定义页面某些部分的页眉，可以是整个页面、article标签或section标签</td>
</tr>
<tr>
<td>nav</td>
<td>这是页面上主要导航链接的容器。此标签不应用于所有链接组，而是应仅用于主要导航块。如果你有一个footer标签包含导航链接，不需要将这些链接封装在nav标签中，因为footer标签将可以独自包括这些链接</td>
</tr>
<tr>
<td>footer</td>
<td>此标签定义页面的某些部分的页脚。页脚不一定是在页面、文章或区域的结尾，但是它通常是在那个位置</td>
</tr>
<tr>
<td>article</td>
<td>定义文档或页面上的独立区块，例如新闻、杂志、博文或评论</td>
</tr>
<tr>
<td>section</td>
<td>此标签表示文档的一部分，例如，文章或教程的一章或一节。该标签通常具有一个页眉，虽然严格来说是不需要的</td>
</tr>
<tr>
<td>aside</td>
<td>用于标记边栏或一些将认为与其周围内容有点无关的内容。此项的一个例子就是广告块</td>
</tr>
<tr>
<td>hgroup</td>
<td>在某些情况下，页面、文章或区域可能需要多个标题，例如，你有一个标题和一个副标题。你可以在hgroup标签中封装这些标题，使用h1标签表示主标题，h2标签表示副标题</td>
</tr>
</tbody></table>

<p>这些标签的基础结构遵循以下大纲：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">header
  hgroup
nav
article
  header
  section
    header
footer
</code></pre></div>
<p><img src="/uploads/html5-ebook-layout.png" title="html5-ebook-layout" ></p>

<p>上面是网站的布局设计，主要有header、navigation、footer和main四个区块，实现代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- HTML5的DOCTYPE声明模式，它可以向后兼容，
     再也不用记忆XHTML中复杂的DOCTYPE了！--&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;!-- 指定文档字符编码的写法，该写法在所有浏览器上都有效。--&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;title&gt;HTML5 Demo&lt;/title&gt;
  &lt;!-- link和script标签也无需提供type属性（No More Types for Scripts and Links），
       因为CSS和JavaScript是目前惟一受支持的样式表和脚本类型 --&gt;
  &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;
  &lt;!-- 因为IE浏览器（甚至版本8）不支持新的HTML5标签，处理此问题的一个已知方法是使用
       JavaScript函数document.createElement()为每个标记创建虚拟标签。html5.js文件将
       为每个新的HTML标签进行此操作 --&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;header&gt;
    &lt;hgroup&gt;
      &lt;h1&gt;Logo&lt;/h1&gt;
      &lt;h2&gt;Here is the slogan&lt;/h2&gt;
    &lt;/hgroup&gt;
  &lt;/header&gt;

  &lt;nav&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Business&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;History&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Religion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Health&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Science&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;

  &lt;!-- main block begin --&gt;
  &lt;!-- main block end --&gt;

  &lt;footer&gt;&amp;copy; 2013&lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div>
<p>对应的CSS文件内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">* {
  font-family: Lucida Sans, Arial, Helvetica, sans-serif;
}

body {
  width: 768px;
  margin: 0px auto;
}

header h1 {
  font-size: 36px;
  margin: 0px;
}

header h2 {
  font-size: 18px;
  margin: 0px;
  color: #888;
  font-style: italic;
}

nav ul {
  list-style: none;
  margin: 0;
  padding: 0;
  width: 100%;
}

nav ul:after {
  content: &quot;\0020&quot;;
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}

nav ul  li {
  float: left;
  width: 16.66%;
  text-align: center;
}

nav ul li a {
  display: block;
  background: #000;
  color: #fff;
  font-weight: bold;
  padding: 10px;
  border-right: 1px solid #fff;
  text-decoration: none;
}

nav ul li a:hover {
  background: #333;
}

footer {
  border-top: 1px solid #ccc;
  text-align: center;
  font-size: 12px;
  color: #888;
  margin-top: 24px;
}
</code></pre></div>
<p>整个网站主要有这么几个页面：首页、分类页、书目页、内容页，这些页面共用一个布局，主要区别在于main区块的不同。首页、分类页和书目页相似，都是由列表组成。</p>

<p>首页中有多个无序列表，列出网站中最新、最多被访问、最多被分享等的图书：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h3&gt;Latest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Most Viewed&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Most Shared&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div>
<p>分类页是单个无序列表，列出当前被访问分类下所有的图书：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h3&gt;Business&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div>
<p>书目页是单个有序列表，列出某本书所有的章节：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h3&gt;Book&#39;s title&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Chapter 1&lt;/li&gt;
  &lt;li&gt;Chapter 2&lt;/li&gt;
  &lt;li&gt;Chapter 3&lt;/li&gt;
&lt;/ol&gt;
</code></pre></div>
<p>内容页，顾名思义就是显示具体内容的页面。文章内容用<code>&lt;article&gt;</code>标签表示，其中的标题、作者、发表时间等信息被包含在<code>&lt;header&gt;</code>标签中。主要代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;article&gt;
  &lt;header&gt;
    &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Chapter 1&lt;/a&gt;&lt;/h1&gt;
    &lt;p&gt;By &lt;a href=&quot;#&quot;&gt;author&lt;/a&gt; on &lt;time&gt;2013-05-24 14:54&lt;/time&gt;&lt;/p&gt;
  &lt;/header&gt;
  &lt;p&gt;
  Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed
  diam nonummy nibh euismod tincidunt ut laoreet dolore magna
  aliquam erat volutpat. Ut wisi enim ad minim veniam, quis
  nostrud exerci tation ullamcorper suscipit lobortis nisl ut
  aliquip ex ea commodo consequat.
  &lt;/p&gt;
  &lt;section&gt;
    &lt;header&gt;
      &lt;h1&gt;Section heading&lt;/h1&gt;
    &lt;/header&gt;
    &lt;p&gt;
    Duis autem vel eum iriure dolor in hendrerit in vulputate velit
    esse molestie consequat, vel illum dolore eu feugiat nulla
    facilisis at vero eros et accumsan et iusto odio dignissim qui
    blandit praesent luptatum zzril delenit augue duis dolore te
    feugait nulla facilisi.
    &lt;/p&gt;
  &lt;/section&gt;
  &lt;footer&gt;
    &lt;a href=&quot;#&quot;&gt;Back&lt;/a&gt;
    &lt;a href=&quot;#&quot;&gt;TOC&lt;/a&gt;
    &lt;a href=&quot;#&quot;&gt;Forward&lt;/a&gt;
  &lt;/footer&gt;
&lt;/article&gt;
</code></pre></div>
<p>在上面的代码里，<code>&lt;header&gt;</code>标签中我们仅使用了<code>&lt;h1&gt;</code>标签，这是因为HTML5会根据上下文计算出heading元素的层级，因此会有：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;&lt;h1&gt;  &lt;!-- 相当于heading 1 --&gt;
&lt;body&gt;&lt;section&gt;&lt;h1&gt;  &lt;!-- 相当于heading 2 --&gt;
&lt;body&gt;&lt;section&gt;&lt;section&gt;&lt;h1&gt;  &lt;!-- 相当于heading 3 --&gt;
</code></pre></div>
<p>最后顺便说一句，HTML5支持已存在的各种写法：xhtml1.0、xhtml1.1和html4.0，但建议使用xhtml1.1规范，即：</p>

<ol>
<li>所有标签/属性都使用小写字母;</li>
<li>所有属性值都必须加引号;</li>
<li>使用闭合标签。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS命名规范]]></title>
    <link href="http://codemany.com/blog/css-naming-conventions/"/>
    <updated>2012-07-28T18:27:06+08:00</updated>
    <id>http://codemany.com/blog/css-naming-conventions</id>
    <content type="html"><![CDATA[<p>收集了网上的一些CSS命名规范，根据自己的理解和需求整理了一遍。</p>

<h3 id="布局（layout）">布局（layout）</h3>

<ul>
<li>container 就是将页面中的所有元素包在一起的部分</li>
<li>header 页面的头部区域，包含站点的logo和一些其他元素</li>
<li>navbar 横向导航栏，最典型的网页元素</li>
<li>breadcrumbs 即页面所处位置的导航提示</li>
<li>content 是站点的主要区域</li>
<li>sidebar</li>
<li>footer</li>
</ul>

<h3 id="头部（header）">头部（header）</h3>

<ul>
<li>logo</li>
<li>slogan</li>
</ul>

<h3 id="导航栏（navbar）">导航栏（navbar）</h3>

<ul>
<li>mainnav</li>
<li>subnav</li>
<li>topnav</li>
</ul>

<h3 id="侧边栏（sidebar）">侧边栏（sidebar）</h3>

<ul>
<li>menu 包含一般的链接。sidebar中可以包含多个menu</li>
</ul>

<h3 id="常用">常用</h3>

<ul>
<li>userbar 登录注册条</li>
<li>copyright</li>
<li>banner</li>
<li>feature</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使文字与图标垂直居中对齐]]></title>
    <link href="http://codemany.com/blog/how-to-vertical-center-align-text-with-icon/"/>
    <updated>2008-03-15T20:33:09+08:00</updated>
    <id>http://codemany.com/blog/how-to-vertical-center-align-text-with-icon</id>
    <content type="html"><![CDATA[<p>在做网页的时候，经常会需要在某段文字前加上一个图标。然后就会发现增加的图标和文字的位置不齐，文字总是比图标低点。</p>

<p><img src="/uploads/smiley-smile.gif" title="smiley-smile" >微笑</p>

<p>解决的方法有两个：一个是设置图标的vertical-align为top；还有就是将margin-bottom设为-3px。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;img style=&quot;vertical-align: top&quot; src=&quot;http://codemany.com/uploads/smiley-smile.gif&quot; border=&quot;0&quot; /&gt;微笑
&lt;img style=&quot;margin-bottom: -3px&quot; src=&quot;http://codemany.com/uploads/smiley-smile.gif&quot; border=&quot;0&quot; /&gt;微笑
</code></pre></div>]]></content>
  </entry>
  
</feed>
