<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: HTML | 乐者为王]]></title>
  <link href="http://codemany.com/tags/html/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-12-02T15:20:21+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[打错multipart引发的血案]]></title>
    <link href="http://codemany.com/blog/multipart-misspelling-cause-bug/"/>
    <updated>2014-11-13T09:27:17+08:00</updated>
    <id>http://codemany.com/blog/multipart-misspelling-cause-bug</id>
    <content type="html"><![CDATA[<p>浪费几个小时，杀死无数脑细胞，最终发现是单词打错了。不过错有错招，这个问题也让我重新温习了一遍关于form数据编码的知识。</p>

<p>在做上传表单时，一直报告如下错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">undefined method &#39;original_filename&#39; for &quot;example.csv&quot;:String
</code></pre></div>
<p>在 <a href="http://guides.rubyonrails.org/form_helpers.html#what-gets-uploaded">http://guides.rubyonrails.org/form_helpers.html#what-gets-uploaded</a> 有这样一段文字：</p>

<blockquote>
<p>The object in the params hash is an instance of a subclass of IO. Depending on the size of the uploaded file it may in fact be a StringIO or an instance of File backed by a temporary file. In both cases the object will have an original_filename attribute containing the name the file had on the user&#39;s computer and a content_type attribute containing the MIME type of the uploaded file.</p>
</blockquote>

<p>说明example.csv应该是IO类型的，这里怎么显示是String呢？</p>

<p>表单代码为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= form_tag import_stocks_path, mutlipart: true do %&gt;
</code></pre></div>
<p>或</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= form_tag import_stocks_path, method: :post, mutlipart: true do %&gt;
</code></pre></div>
<p>生成后的HTML代码都是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;form action=&quot;/stocks/import&quot; method=&quot;post&quot; mutlipart=&quot;true&quot;&gt;
</code></pre></div>
<p>正确的HTML代码应该是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;form action=&quot;/stocks/import&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
</code></pre></div>
<p>使用HttpFox工具抓取表单提交信息如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">POST /stocks/import HTTP/1.1
Host localhost:3000
Referer http://localhost:3000/stocks/import
Connection keep-alive
Content-Type application/x-www-form-urlencoded
Content-Length 112
</code></pre></div>
<p>什么是application/x-www-form-urlencoded？含有file类型字段的表单编码不应该是multipart/form-data吗。</p>

<p>form的enctype属性通常有两种：application/x-www-form-urlencoded和multipart/form-data，默认为前者。当method=get时，浏览器用application/x-www-form-urlencoded编码方式把form数据转换成一个字串（name1=value1&amp;name2=value2...），然后把这个字串附加到url后面，用?分割。当method=post的时候，浏览器把form数据封装到post-body中。如果没有type=file的控件，就用默认的application/x-www-form-urlencoded编码。但是如果有type=file的话，就要用到multipart/form-data了。浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition（form-data或者file），Content-Type（默认为text/plain），name等信息，并加上分割边界（boundary）。</p>

<p>这时才发现原来是把multipart打错成mutlipart了，真是惨痛的教训啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用响应式设计改造电子书网站]]></title>
    <link href="http://codemany.com/blog/rebuild-ebook-website-with-responsive-design/"/>
    <updated>2014-06-19T11:55:16+08:00</updated>
    <id>http://codemany.com/blog/rebuild-ebook-website-with-responsive-design</id>
    <content type="html"><![CDATA[<p>因为要在其它设备上测试响应式设计的效果，需要先对开发环境做些简单的配置。</p>

<p>启动服务器时需加上本机的IP地址和访问端口（通常是80）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails s -b 192.168.0.100 -p 80
</code></pre></div>
<p>配置Windows系统的内置防火墙，开启80端口以供其它设备访问：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">netsh advfirewall firewall add rule name=&quot;Open Port 80&quot; dir=in action=allow protocol=TCP localport=80
</code></pre></div>
<p>查看和删除防火墙规则的命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">netsh advfirewall firewall delete rule name=&quot;Open Port 80&quot; protocol=TCP localport=80
netsh advfirewall firewall show rule name=&quot;Open Port 80&quot;
</code></pre></div>
<p>响应式设计的优缺点就不多说了，已经有太多的文章讲过这些。这里主要讲如何使用响应式设计改造现有的电子书网站。</p>

<p>首先，需要使用viewport标签设置屏幕宽度为设备宽度，使网站内容可以适应响应式变化。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
</code></pre></div>
<p>因为这是一个非常简陋，并且以内容为主的网站。在上述设置后几乎不用再修改就能适应不同屏幕分辨率下的信息呈现，除了导航栏因为导航选项较多，在手机等设备上打开会出现后面部分选项被挤下去。抽屉样式的导航是解决这个问题的好方法。在网上找到一个横向导航栏切换成抽屉式导航栏的库<a href="http://srobbin.github.io/jquery-pageslide/">jQuery PageSlide</a>，它使用图片实现三明治图标，所以对它做了些修改，用标签来实现：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;ul class=&quot;burger&quot;&gt;
  &lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div>
<p>对应的CSS代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.burger {
  li {
    height: 4px;
    width: 30px;
    background: #000;
    border-radius: 3px;
    margin: 5px 0;
  }
}
</code></pre></div>
<p>要实现响应式的话，只要让它在正常情况下隐藏，屏幕变小时显现即可：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.burger {
  display: none;
}

@media screen and (max-width: 480px) {
  .burger {
    display: block;
  }
}
</code></pre></div>
<p>还需要在application.html.erb的底部开启点击三明治图标时的响应事件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;%= javascript_include_tag &quot;jquery.pageslide&quot;, &quot;data-turbolinks-track&quot; =&gt; true %&gt;
&lt;script&gt;
  $(&quot;.burger&quot;).pageslide();
&lt;/script&gt;
</code></pre></div>
<p>导航条的CSS也需要做些修改，使之能在屏幕变小时转换成抽屉式导航条：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">@media screen and (max-width: 480px) {
  nav ul {
    display: none;
  }
}
</code></pre></div>
<p>至此，网站的响应式改造就基本完成了。如果你觉得对你有所帮助，请将此文发送给你的朋友，如果你还有更好的建议也可以在下面的评论中分享你的经验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用HTML5创建电子书网站]]></title>
    <link href="http://codemany.com/blog/create-ebook-website-with-html5/"/>
    <updated>2013-05-24T15:04:32+08:00</updated>
    <id>http://codemany.com/blog/create-ebook-website-with-html5</id>
    <content type="html"><![CDATA[<p>在项目开始前，先要了解下HTML5规范包含的一些有用的新的语义标签，用于提供HTML页面的各个区域或部分的意义，例如页眉、页脚、导航栏、边栏等等。在以前的HTML版本中，这些部分通常使用<code>&lt;div&gt;</code>标签来创建，通过id或class属性来区分。</p>

<p>HTML5引入的主要标签包括：</p>

<table><thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>header</td>
<td>此标签用于定义页面某些部分的页眉，可以是整个页面、article标签或section标签</td>
</tr>
<tr>
<td>nav</td>
<td>这是页面上主要导航链接的容器。此标签不应用于所有链接组，而是应仅用于主要导航块。如果你有一个footer标签包含导航链接，不需要将这些链接封装在nav标签中，因为footer标签将可以独自包括这些链接</td>
</tr>
<tr>
<td>footer</td>
<td>此标签定义页面的某些部分的页脚。页脚不一定是在页面、文章或区域的结尾，但是它通常是在那个位置</td>
</tr>
<tr>
<td>article</td>
<td>定义文档或页面上的独立区块，例如新闻、杂志、博文或评论</td>
</tr>
<tr>
<td>section</td>
<td>此标签表示文档的一部分，例如，文章或教程的一章或一节。该标签通常具有一个页眉，虽然严格来说是不需要的</td>
</tr>
<tr>
<td>aside</td>
<td>用于标记边栏或一些将认为与其周围内容有点无关的内容。此项的一个例子就是广告块</td>
</tr>
<tr>
<td>hgroup</td>
<td>在某些情况下，页面、文章或区域可能需要多个标题，例如，你有一个标题和一个副标题。你可以在hgroup标签中封装这些标题，使用h1标签表示主标题，h2标签表示副标题</td>
</tr>
</tbody></table>

<p>这些标签的基础结构遵循以下大纲：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">header
  hgroup
nav
article
  header
  section
    header
footer
</code></pre></div>
<p><img src="/uploads/html5-ebook-layout.png" alt="html5-ebook-layout"></p>

<p>上面是网站的布局设计，主要有header、navigation、footer和main四个区块，实现代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- HTML5的DOCTYPE声明模式，它可以向后兼容，
     再也不用记忆XHTML中复杂的DOCTYPE了！--&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;!-- 指定文档字符编码的写法，该写法在所有浏览器上都有效。--&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;title&gt;HTML5 Demo&lt;/title&gt;
  &lt;!-- link和script标签也无需提供type属性（No More Types for Scripts and Links），
       因为CSS和JavaScript是目前惟一受支持的样式表和脚本类型 --&gt;
  &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;
  &lt;!-- 因为IE浏览器（甚至版本8）不支持新的HTML5标签，处理此问题的一个已知方法是使用
       JavaScript函数document.createElement()为每个标记创建虚拟标签。html5.js文件将
       为每个新的HTML标签进行此操作 --&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;header&gt;
    &lt;hgroup&gt;
      &lt;h1&gt;Logo&lt;/h1&gt;
      &lt;h2&gt;Here is the slogan&lt;/h2&gt;
    &lt;/hgroup&gt;
  &lt;/header&gt;

  &lt;nav&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Business&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;History&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Religion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Health&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Science&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;

  &lt;!-- main block begin --&gt;
  &lt;!-- main block end --&gt;

  &lt;footer&gt;&amp;copy; 2013&lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div>
<p>对应的CSS文件内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">* {
  font-family: Lucida Sans, Arial, Helvetica, sans-serif;
}

body {
  width: 768px;
  margin: 0px auto;
}

header h1 {
  font-size: 36px;
  margin: 0px;
}

header h2 {
  font-size: 18px;
  margin: 0px;
  color: #888;
  font-style: italic;
}

nav ul {
  list-style: none;
  margin: 0;
  padding: 0;
  width: 100%;
}

nav ul:after {
  content: &quot;\0020&quot;;
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}

nav ul  li {
  float: left;
  width: 16.66%;
  text-align: center;
}

nav ul li a {
  display: block;
  background: #000;
  color: #fff;
  font-weight: bold;
  padding: 10px;
  border-right: 1px solid #fff;
  text-decoration: none;
}

nav ul li a:hover {
  background: #333;
}

footer {
  border-top: 1px solid #ccc;
  text-align: center;
  font-size: 12px;
  color: #888;
  margin-top: 24px;
}
</code></pre></div>
<p>整个网站主要有这么几个页面：首页、分类页、书目页、内容页，这些页面共用一个布局，主要区别在于main区块的不同。首页、分类页和书目页相似，都是由列表组成。</p>

<p>首页中有多个无序列表，列出网站中最新、最多被访问、最多被分享等的图书：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h3&gt;Latest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Most Viewed&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Most Shared&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div>
<p>分类页是单个无序列表，列出当前被访问分类下所有的图书：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h3&gt;Business&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
  &lt;li&gt;Book&#39;s title&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div>
<p>书目页是单个有序列表，列出某本书所有的章节：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;h3&gt;Book&#39;s title&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Chapter 1&lt;/li&gt;
  &lt;li&gt;Chapter 2&lt;/li&gt;
  &lt;li&gt;Chapter 3&lt;/li&gt;
&lt;/ol&gt;
</code></pre></div>
<p>内容页，顾名思义就是显示具体内容的页面。文章内容用<code>&lt;article&gt;</code>标签表示，其中的标题、作者、发表时间等信息被包含在<code>&lt;header&gt;</code>标签中。主要代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;article&gt;
  &lt;header&gt;
    &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Chapter 1&lt;/a&gt;&lt;/h1&gt;
    &lt;p&gt;By &lt;a href=&quot;#&quot;&gt;author&lt;/a&gt; on &lt;time&gt;2013-05-24 14:54&lt;/time&gt;&lt;/p&gt;
  &lt;/header&gt;
  &lt;p&gt;
  Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed
  diam nonummy nibh euismod tincidunt ut laoreet dolore magna
  aliquam erat volutpat. Ut wisi enim ad minim veniam, quis
  nostrud exerci tation ullamcorper suscipit lobortis nisl ut
  aliquip ex ea commodo consequat.
  &lt;/p&gt;
  &lt;section&gt;
    &lt;header&gt;
      &lt;h1&gt;Section heading&lt;/h1&gt;
    &lt;/header&gt;
    &lt;p&gt;
    Duis autem vel eum iriure dolor in hendrerit in vulputate velit
    esse molestie consequat, vel illum dolore eu feugiat nulla
    facilisis at vero eros et accumsan et iusto odio dignissim qui
    blandit praesent luptatum zzril delenit augue duis dolore te
    feugait nulla facilisi.
    &lt;/p&gt;
  &lt;/section&gt;
  &lt;footer&gt;
    &lt;a href=&quot;#&quot;&gt;Back&lt;/a&gt;
    &lt;a href=&quot;#&quot;&gt;TOC&lt;/a&gt;
    &lt;a href=&quot;#&quot;&gt;Forward&lt;/a&gt;
  &lt;/footer&gt;
&lt;/article&gt;
</code></pre></div>
<p>在上面的代码里，<code>&lt;header&gt;</code>标签中我们仅使用了<code>&lt;h1&gt;</code>标签，这是因为HTML5会根据上下文计算出heading元素的层级，因此会有：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;&lt;h1&gt;  &lt;!-- 相当于heading 1 --&gt;
&lt;body&gt;&lt;section&gt;&lt;h1&gt;  &lt;!-- 相当于heading 2 --&gt;
&lt;body&gt;&lt;section&gt;&lt;section&gt;&lt;h1&gt;  &lt;!-- 相当于heading 3 --&gt;
</code></pre></div>
<p>最后顺便说一句，HTML5支持已存在的各种写法：xhtml1.0、xhtml1.1和html4.0，但建议使用xhtml1.1规范，即：</p>

<ol>
<li>所有标签/属性都使用小写字母;</li>
<li>所有属性值都必须加引号;</li>
<li>使用闭合标签。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ichartjs画2D条形图]]></title>
    <link href="http://codemany.com/blog/draw-2d-bar-graph-using-ichartjs/"/>
    <updated>2013-03-27T06:45:37+08:00</updated>
    <id>http://codemany.com/blog/draw-2d-bar-graph-using-ichartjs</id>
    <content type="html"><![CDATA[<p><a href="http://codemany.com/blog/using-open-flash-chart-ii-in-rails/">在Rails中使用Open Flash Chart II</a>中使用了OFC2来画2D条形图。现在Flash快要不行了，因为有了更好的HTML5。好的程序猿也要紧随潮流，使用新的技术来改进和增强他们的代码。这次就尝试使用HTML5图形库来替换OFC2。比较已有的一些图形库，最后选定国产的<a href="http://www.ichartjs.com/">ichartjs</a>。</p>

<p>实现2D条形图真的很简单：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;script type=&quot;text/javascript&quot; src=&quot;ichart.1.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
$(function() {
  var data = [
    {name: &#39;IE&#39;, value: 35.75, color: &#39;#a5c2d5&#39;},
    {name: &#39;Chrome&#39;, value: 29.84, color: &#39;#cbab4f&#39;},
    {name: &#39;Firefox&#39;, value: 24.88, color: &#39;#76a871&#39;},
    {name: &#39;Safari&#39;,value: 6.77, color: &#39;#9f7961&#39;},
    {name: &#39;Opera&#39;,value：2.02, color: &#39;#a56f8f&#39;},
    {name: &#39;Other&#39;,value: 0.73, color: &#39;#6f83a5&#39;}
  ];

  new iChart.Bar2D({
    render: &#39;canvasDiv&#39;,
    data: data,
    title: &#39;Top 5 Browsers from 1 to 29 Feb 2012&#39;,
    showpercent: true,
    decimalsnum: 2,
    width: 800,
    height: 400,
    coordinate: {
      scale: [{
        position: &#39;bottom&#39;,
        start_scale: 0,
        end_scale: 40,
        scale_space: 8,
        listeners: {
          parseText: function(t, x, y) {
            return {text: t + &quot;%&quot;}
          }
        }
      }]
    }
  }).draw();
});
&lt;/script&gt;

&lt;div id=&quot;canvasDiv&quot;&gt;&lt;/div&gt;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[表格内容对齐规则（left、right、center）]]></title>
    <link href="http://codemany.com/blog/table-text-alignment-rules/"/>
    <updated>2012-11-22T08:28:27+08:00</updated>
    <id>http://codemany.com/blog/table-text-alignment-rules</id>
    <content type="html"><![CDATA[<ol>
<li>通常情况下内容是左对齐；</li>
<li>列中的所有数字是整数并且指的是相同事物，或者使用同一个常见单位（公斤，厘米，人数，等等）时，右对齐是一个正确的对齐方式（Table 1）；</li>
<li>如果数字使用相同单位，但混合了整数和小数，通过小数点对齐它们；</li>
<li>如果数字没有使用同一个常见单位（例如：一个国家的比较中，每个国家都有一个单独的列，每一行包含一个不同的参数——面积，人口，人均收入和预期寿命），左对齐是正确的选择（Table 2）；</li>
<li>居中数字永远都是错的；</li>
<li>常常会出现列中的一些单元格是空的：例如信息无效或不适用。不管你如何去表示，用dash，n.a.，[?]，或其它，也不要让单元格空着，在列中设置符号居中来强调这一事实（Table 2的最后单元格）。</li>
</ol>

<p><img src="/uploads/table-sample.png" alt="table-sample"></p>
]]></content>
  </entry>
  
</feed>
