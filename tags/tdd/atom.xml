<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: TDD | 乐者为王]]></title>
  <link href="http://codemany.com/tags/tdd/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-06-13T00:37:09+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[100%代码覆盖率的悲剧]]></title>
    <link href="http://codemany.com/blog/code-coverage-100-percent-tragedy/"/>
    <updated>2017-05-13T19:00:41+08:00</updated>
    <id>http://codemany.com/blog/code-coverage-100-percent-tragedy</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://labs.ig.com/code-coverage-100-percent-tragedy">http://labs.ig.com/code-coverage-100-percent-tragedy</a></p>

<p>有趣的是，我对测试的观点正在发生变化。十五年来，我一直在宣扬TDD（测试驱动开发，或者被称为测试先行方法），或至少让开发者写些单元测试。不过，最近我发现自己更经常地说，“你为什么要写测试？”而不是“你应该写测试”。</p>

<h3 id="怎么回事？">怎么回事？</h3>

<p>在办公室四处走走时，开发者要求我帮助他进行单元测试。看来他在使用Mockito测试以下代码时遇到了麻烦：</p>

<p><img src="/uploads/initialise-method.png" title="initialise-method" ></p>

<p>我想他是非常惊讶于我的回应：“你不需要测试。”</p>

<p>“但我不得不测啊！”他说。“否则如何知道这段代码是正常的？”</p>

<p>“这段代码很明显。没有条件，没有循环，没有转换，没有任何东西。它们只是一些普通的旧式胶水代码。”</p>

<p>“但没有测试，任何人都可以来修改和破坏这段代码呀！”</p>

<p>“看，如果那个虚构的邪恶/无知的开发者来了，破坏了这些简单的代码，如果相关的单元测试中断，你认为他会做什么？他只会删除它。”</p>

<p>“但是如果非要写测试怎么办？”</p>

<p>“在这种情况下，我将这样写测试：”</p>

<p><img src="/uploads/initialise-test.png" title="initialise-test" ></p>

<p>“但是你没有使用Mockito啊！”</p>

<p>“那又怎么样呢？Mockito没有帮助你。恰恰相反：它会妨碍你，并且它也不会使测试变得更易读或更简单。”</p>

<p>“但是我们决定使用Mockito进行所有测试！”</p>

<p>我：“……”</p>

<p>后来我碰到他，他自豪地说，他已经设法用Mockito写了测试。我明白让测试代码正常运行的心理满足感，但尽管如此，这种解决方案让我难过。</p>

<h3 id="另一个例子">另一个例子</h3>

<p>我遇到个开发者，他们对新应用程序的高代码覆盖率以及对BDD（行为驱动设计）的新发现感到兴奋。查看代码，我们发现以下的Cucumber测试：</p>

<p><img src="/uploads/cucumber-test.png" title="cucumber-test.png" ></p>

<p>如果你以前使用过Cucumber，你就不会震惊于它所需的支持代码的数量：</p>

<p><img src="/uploads/cucumber-support.png" title="cucumber-support.png" ></p>

<p><img src="/uploads/cucumber-support2.png" title="cucumber-support2.png" ></p>

<p>和所有要测试的代码：</p>

<p><img src="/uploads/cucumber-code.png" title="cucumber-code.png" ></p>

<p>是的，一个简单的地图查找。我和这个开发者有足够的信任去直言不讳地说，“这是在浪费时间。”</p>

<p>“但我的老板希望我能为所有的类写测试，”他回答。</p>

<p>“代价是什么？”</p>

<p>“费用？”</p>

<p>“无论如何，这些测试与BDD无关。”</p>

<p>“我知道，但是我们决定使用Cucumber进行所有测试”</p>

<p>我：“……”</p>

<p>我明白按照自己意愿改造工具的心理满足感，但尽管如此，这种解决方案让我难过。</p>

<h3 id="悲剧在哪里？">悲剧在哪里？</h3>

<p>悲剧是两位聪明的开发者（我需要带他们去团队面试）浪费时间写那种测试，测试是毫无意义的，但需要后来的IG开发者维护。</p>

<p>悲剧是不使用正确的工具，因为没有特别好的理由，我们决定坚持不懈地使用错误的工具。</p>

<p>悲剧是一旦某个“良好实践”成为主流，我们似乎就忘记它是怎么来的，它的好处是什么，最主要的是，使用它的代价是什么。</p>

<p>如果我们只是机械地应用它而没有太多的思考，这通常意味着我们最终得到最平庸的结果，失去大部分的好处，但支付所有（甚至更多）的成本。根据我的经验，编写好的单元测试并非易事。</p>

<h3 id="那么100-的代码覆盖率值得追求吗？">那么100%的代码覆盖率值得追求吗？</h3>

<p>是的，每个人都应该实现它……在一个项目中。我认为你必须用极端的手段去了解限制是什么。</p>

<p>我们已经有了一个极端的大量经验：0个单元测试的项目，所以我们知道在这上面工作的痛苦。我们通常缺乏的是在另一个极端的经验：强制100%代码覆盖率和一切都是TDD的项目。单元测试（尤其是测试先行方法）是一个非常好的实践，但我们应该学习哪些测试是有用的，哪些是适得其反的。</p>

<p>要记住没有什么是免费的，没有什么是银弹。使用工具前请停下来想一想。</p>

<h4 id="关于作者：">关于作者：</h4>

<p>Daniel Lebrero在IG的大数据团队担任技术架构师。拥有超过15年的Java经验和4年的Clojure经验，他现在是函数式编程的大力倡导者。可以在<a href="https://twitter.com/DanLebrero">Twitter</a>，<a href="https://www.linkedin.com/in/daniel-lebrero-4729906">LinkedIn</a>或者他的个人<a href="http://danlebrero.com/">博客</a>找到他。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一开始就编写优质的OO代码]]></title>
    <link href="http://codemany.com/blog/writing-great-oo-code-day-one/"/>
    <updated>2015-10-23T13:50:44+08:00</updated>
    <id>http://codemany.com/blog/writing-great-oo-code-day-one</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://weblogs.java.net/blog/2008/10/03/writing-great-oo-code-day-one">https://weblogs.java.net/blog/2008/10/03/writing-great-oo-code-day-one</a></p>

<p>没有获取经验的捷径。编写良好的面向对象代码需要经验。尽管如此，这里有三个实践可以帮助你一开始就有个良好的开端：</p>

<ol>
<li>使用测试驱动开发（TDD）编写你所有的代码</li>
<li>遵循<a href="http://xp.c2.com/XpSimplicityRules.html">简单的规则</a></li>
<li>命令代替询问（Tell Don&#39;t Ask）</li>
</ol>

<h3 id="使用tdd编写你所有的代码">使用TDD编写你所有的代码</h3>

<p><a href="http://ponderingobjectorienteddesign.blogspot.com/2008/09/tdd-is-design-activity.html">测试先行</a>编写的代码和测试后行编写的代码是非常非常不同的代码。测试先行编写的代码是松耦合和高内聚的。测试后行编写的代码往往会破坏封装，当一些属性或私有方法需要被暴露给测试的时候，因为这些类没有被设计成要被测试的。如果你编写的代码测试先行，代码的依赖性会更好，你的代码将是松耦合和高内聚的。稍后详细讨论测试如何帮助你设计更好的代码。</p>

<h3 id="遵循简单的规则">遵循简单的规则</h3>

<p>代码是简洁的，当它：</p>

<ol>
<li>通过所有的测试</li>
<li>不包含重复代码</li>
<li>表达了所有的意图</li>
<li>使用了最少的类和方法</li>
</ol>

<p>重要的是注意到我使用了一个有序列表。顺序很重要。带有单一main()方法的单一GodClass并不简单。它可以通过所有的测试，但在比“Hello, world!”更复杂的任何程序里它一定会包含重复代码和没有表达所有的意图。</p>

<p>我与简单的规则的斗争重点围绕在<a href="http://ponderingobjectorienteddesign.blogspot.com/2008/09/if-bugs.html">If Bug</a> 。我不明白遵循简单的规则如何阻止某人编写大量的if代码。有人会说，我试过了，大量的if代码不会表达意图。但是，当你读到这样的代码</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.STANDARD) {
    alert();
}
</code></pre></div>
<p>它实在是太容易看出意图了。无论该代码是在哪个方法的上下文中，如果mobile是STANDARD类型，那么警报。你还需要多少意图？</p>

<p>然后我灵光小闪。如果有那样的代码，那么在代码的其它地方肯定还有更多。可能是这样的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.GAS) {
    registerGasReading();
}
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.TEXT) {
    sendTextMessage();
}
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (mobile.getType() == MobileTypes.LOCATION) {
    notifyLocation();
}
</code></pre></div>
<p>你看见了吗？我当然知道。违反规则2。许多许多违反规则2。并且是违反规则2的最糟糕的那种。重复代码在许多不同的代码片段中。重复代码将非常非常难被找到。所以为了帮助防止这个，我列出来了。</p>

<h3 id="命令代替询问">命令代替询问</h3>

<p>命令代替询问意味着不要询问一个对象的状态然后做些什么。应该命令那个对象去做些什么。这意味着所有这些if例子变成了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.alert();
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.registerGasReading();
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.sendTextMessage();
</code></pre></div>
<p>和</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mobile.notifyLocation();
</code></pre></div>
<p>现在假设有一些if子句散落在有重复实现的整个代码中。在那个大量if代码的版本中，它们将非常难被找到，但在命令代替询问版本中，所有的实现都在Mobile类中。所有的都在一个地方寻找和消除。</p>

<p>聆听你的测试也将帮助你保持代码简单。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public interface Alarm {
    void alert(Mobile mobile);
}

public class Siren implements Alarm {
    public void alert(Mobile mobile) {
    if (mobile.getType == MobileTypes.STANDARD) {
        soundSiren();
    }
  }
}

public class SirenTest extends TestCase {
    public void testAlert() {
        LocationMobile mobile = new LocationMobile();
        Siren siren = new Siren();
        siren.alert(mobile);
        assert(sirenSounded());
    }
}
</code></pre></div>
<p>如果你仔细聆听你的测试，它会问你，“你为什么需要LocationMobile去测试Siren？”是呀，为什么呢？似乎Siren甚至不应该知道LocationMobile。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class LocationMobile {
    private Alarm alarm;
    public LocationMobile(Alarm alarm) {
        this.alarm = alarm;
    }
    public void alert() {
        alarm.alert();    // alert on Alarm no longer needs a mobile
    }
}

public class LocationMobileTest extends TestCase {
    public void testAlert() {
        Alarm alarm = EasyMock.createMock(Alarm.class);
        alarm.alert();
        EasyMock.replay(alarm);
        Mobile mobile = new LocationMobile(alarm);
        mobile.alert();
        EasyMock.verify(alarm);
    }
}
</code></pre></div>
<p>看上去我仅仅互换了依赖。作为Alarm依赖Mobile的替换，现在有了Mobile依赖Alarm。如果你仔细看第一个测试，真正的依赖是Siren知道LocationMobile。一个具体类依赖于另一个具体类。这违反了<a href="http://c2.com/cgi/wiki?DependencyInversionPrinciple">依赖倒置原则 （DIP）</a>。第二个例子是LocationMobile依赖接口Alarm。一个具体类依赖一个抽象。这满足了DIP。</p>

<p>如果你使用TDD编写你所有的代码，遵循简单的规则，以及命令代替询问，那么你会在那条成为一个更好的OO程序员的路上。良好的OO代码容易阅读和维护，但是可能难于编写。至少开始是这样。你写得越多，你将会变得更好，你将得到的经验也越多。与此同时，这些实践会让你在你的路上走得更好。</p>
]]></content>
  </entry>
  
</feed>
