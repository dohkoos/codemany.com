<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JavaScript | 乐者为王]]></title>
  <link href="http://codemany.com/tags/javascript/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2017-11-19T12:59:20+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用jQuery显示隐藏侧边栏]]></title>
    <link href="http://codemany.com/blog/show-hide-sidebar-with-jquery/"/>
    <updated>2012-10-26T08:13:14+08:00</updated>
    <id>http://codemany.com/blog/show-hide-sidebar-with-jquery</id>
    <content type="html"><![CDATA[<p>需要在记账应用使用侧边栏开关功能，在网上找了段代码修改修改，可惜没有找到漂亮的小图标，只好使用&gt;&gt;和&lt;&lt;符号来表示，太丑陋了！</p>

<p>把jquery.toggle.sidebar.js的代码贴上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">jQuery(function() {
  var sidebar = $.cookie(&quot;sidebar&quot;);
  if (sidebar == &quot;hide&quot;) {
    $(&#39;#sidebar&#39;).hide();
    $(&quot;.toggle&quot;).text(&quot;&gt;&gt;&quot;);
  }

  $(&quot;.toggle&quot;).click(function() {
    if ($(&#39;#sidebar&#39;).is(&#39;:visible&#39;)) {
      $(this).text(&quot;&gt;&gt;&quot;);
      $(&#39;#sidebar&#39;).hide();
      $.cookie(&quot;sidebar&quot;, &quot;hide&quot;, { expires: 7 });  // expires in 7 days
    } else {
      $(this).text(&quot;&lt;&lt;&quot;);
      $(&#39;#sidebar&#39;).show();
      $.removeCookie(&quot;sidebar&quot;);
    };
    return false;
  });
});
</code></pre></div>
<p>因为jQuery本身不支持Cookie操作，需要使用官方的插件，可以在 <a href="http://plugins.jquery.com/project/Cookie">http://plugins.jquery.com/project/Cookie</a> 或 <a href="https://github.com/carhartl/jquery-cookie">https://github.com/carhartl/jquery-cookie</a> 下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于input[text]里的光标定位]]></title>
    <link href="http://codemany.com/blog/cursor-positioning-about-input-text/"/>
    <updated>2008-11-30T18:09:25+08:00</updated>
    <id>http://codemany.com/blog/cursor-positioning-about-input-text</id>
    <content type="html"><![CDATA[<p>当使用Tab键切换时，想把光标定位在input[text]的首部。在网上找了一些光标定位的资料发现大多数都是用createTextRange来实现的，而且都出自一个实例。可惜的是在Firefox下createTextRange无效。</p>

<p>后来在Firefox的开发者站点上发现有个setSelectionRange方法可以实现这样的功能。使用格式：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">o.setSelectionRange(start, end);

o：为文本输入框对象
start：为字符串的起始位置
end：为字符串的末位置
</code></pre></div>
<p>尝试后发现并不能定位到文本首位，总是全选所有的文本内容，在后面加上获的焦点的命令也不管用。最后还是在国外的一个站点上找到了解决的办法。</p>

<p>下面的代码在Firefox下不能定位到首位，只能选中全部：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function setCaretPosition(aCtrl, aPos) {
    if (aCtrl.setSelectionRange) {
        aCtrl.setSelectionRange(aPos, aPos);
        aCtrl.focus();
    } else if (aCtrl.createTextRange) {
        var rng = aCtrl.createTextRange();
        rng.collapse(true);
        rng.moveStart(&#39;character&#39;, aPos);
        rng.moveEnd(&#39;character&#39;, aPos);
        rng.select();
    }
}
</code></pre></div>
<p>经过修改后的代码就可以适用于Firefox，IE，Opera的光标定位了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function setCaretPosition(aCtrl, aPos) {
    if (aCtrl.setSelectionRange) {
        setTimeout(function() {
            aCtrl.setSelectionRange(aPos, aPos);
            aCtrl.focus();
        }, 0);
    } else if (aCtrl.createTextRange) {
        var rng = aCtrl.createTextRange();
        rng.collapse(true);
        rng.moveStart(&#39;character&#39;, aPos);
        rng.moveEnd(&#39;character&#39;, aPos);
        rng.select();
    }
}
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Java和JavaScript关于日期计算上的差异》阅读笔记]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-difference-of-date-calculation-between-java-and-javascript/"/>
    <updated>2008-05-23T13:30:00+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-difference-of-date-calculation-between-java-and-javascript</id>
    <content type="html"><![CDATA[<p>下面是<a href="http://wangchangjun.javaeye.com/blog/170049">《Java和JavaScript关于日期计算上的差异》</a>作者给出的结论：</p>

<blockquote>
<p>当进行日期计算的时候，当前日期的月份必须是大月，并且是在这个月的最后一天也就是31号，比如2008-3-31号，当给这个日期加上一个月，得到的日期是个小月就会出现这样的情况。比如在2008-3-31这天加上一月，那因该是4月份，4月就是小月，那Java就是4月30号，JavaScript 就是5月1号，相差一天。当加上2月后，就是5月，5月是大月，那么计算的结果都是5月31号。</p>
</blockquote>

<p>不过这样的结论还是不能让人明白Java和JavaScript计算日期时相差的一天是怎么来的。</p>

<p>以下是我对Java和JavaScript日期计算差异的一些理解：</p>

<p>2008-2-29加上12个月，那么就是2009-2-29，但2009年是非闰年，它的2月份只有28天，这样就多出来的一天。如何处理这多出来的一天呢？Java和JavaScript做出了不同的理解。Java认为，既然2009年的2月只有28天，那么那多出来的一天就是多余的，应该丢弃，所以Java的计算结果是2009-2-28；而JavaScript则认为这多出来的一天不能丢弃，应该也加上去。那么2009-2-28号加上一天就是2009-3-31号。</p>

<p>同样的，2008-3-31加上一个月在Java中的结果是2008-4-30号，而在JavaScript中则是2008-5-1号。那如果加上的是两个月呢？2008-3-31加上两个月是2008-5-31号，是有效的日期，所以Java和JavaScript的计算结果都是2008-5-31号。</p>

<p>结论是，当进行日期计算时，如果结果日期的date值超出了该月的最大天数值，那么在Java中就会将该date值设为该月的最大天数值；而JavaScript则不但会将该date值设为该月的最大天数值，还会再加上超出的天数值。例如：2009-1-31号加上一个月，Java的结果就是2009-2-28号，JavaScript的结果则是2009-3-3号，2009-2-28加多出来的3 = 31 - 28天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的undefined]]></title>
    <link href="http://codemany.com/blog/javascript-undefined/"/>
    <updated>2007-04-20T16:03:06+08:00</updated>
    <id>http://codemany.com/blog/javascript-undefined</id>
    <content type="html"><![CDATA[<p>JavaScript有6种类型，undefined、null、boolean、number、string和object。其中，null类型只有一个值null。undefined类型也只有一个值，即undefined，当声明的变量没有被赋值的时候，该变量的默认值就是undefined。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
</code></pre></div>
<p>上面这行代码声明了变量foo，没有赋值。脚本引擎在处理代码的时候会给该变量赋予值undefined。实际上，该行代码等价于</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo = undefined;
</code></pre></div>
<p>可以用下面的代码测试：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
alert(foo == undefined);    // true
alert(foo === undefined);    // true
alert(typeof(foo));    // undefined
</code></pre></div>
<p>JavaScript另一个有趣的方面是在使用变量之前不必声明。例如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo = &quot;Hello &quot;;
bar = foo + &quot;world!&quot;;
alert(bar);    // Hello world!
</code></pre></div>
<p>变量bar并没有用var运算符定义，这里只是使用了它，就像已经声明过它一样。脚本引擎遇到未声明过的标识符时，用该变量名创建一个全局变量，并将其初始化为指定的值（这里是foo + &quot;world&quot;）。这是该语言的便利之处，不过如果不能紧密跟踪变量，这样做也很危险。考虑下面的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
// Make sure this variable isn&#39;t defined
//var bar;
alert(foo);
alert(bar);
</code></pre></div>
<p>执行的结果是：</p>

<p><img src="/uploads/undefined.png" alt="undefined"></p>

<p><img src="/uploads/undefined-error.png" alt="undefined-error"></p>

<p>alert(bar)出现错误是因为bar被创建成全局变量后没有被初始化，还处在未初始化（uninitialized）状态。但是，typeof运算符并不真正区分这两种值。考虑下面的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
// Make sure this variable isn&#39;t defined
//var bar;
alert(typeof(foo));    // undefined
alert(typeof(bar));    // undefined
</code></pre></div>
<p>前面的代码对两个变量的输出都是“undefined”，即使变量bar在使用前没有被声明。</p>

<p>当函数无明确返回值时，返回的也是值undefined，如下所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function foobar() { }
alert(foobar() == undefined);    // true
alert(foobar() === undefined);    // true
</code></pre></div>
<p>ECMAScript认为undefined是从null派生出来的，所以把它们定义为相等的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">alert(null == undefined);    // true
</code></pre></div>
<p>尽管这两个值相等，但它们的含义不同。undefined是声明了变量但未赋值时赋予该变量的值，null则用于表示尚未存在的对象（但从技术上来说，null仍然是原始值）。如果要区分两者，要使用===或typeof运算符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[W3C DOM - {setAttribute()}]]></title>
    <link href="http://codemany.com/blog/w3c-dom-setattribute/"/>
    <updated>2007-02-26T17:43:36+08:00</updated>
    <id>http://codemany.com/blog/w3c-dom-setattribute</id>
    <content type="html"><![CDATA[<p>setAttribute(string name, string value)：增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。</p>

<h3 id="setattribute-的差异">setAttribute()的差异</h3>

<p>我们经常需要在JavaScript中给Element动态添加各种属性，这可以通过使用setAttribute()来实现，这就涉及到了浏览器的兼容性问题。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var obj = document.getElementById(&quot;obj&quot;);
obj.setAttribute(&quot;onclick&quot;, &quot;javascript:alert(&#39;This is a test!&#39;);&quot;);
</code></pre></div>
<p>这里利用setAttribute指定Element的onclick属性，简单，很好理解。但是IE不支持，IE并不是不支持setAttribute这个函数，而是不支持用setAttribute设置某些属性，例如对象属性、集合属性、事件属性，也就是说用setAttribute设置style和onclick 这些属性在IE中是行不通的。为达到兼容各种浏览器的效果，可以用点符号法来设置Element的对象属性、集合属性和事件属性。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">document.getElementById(&quot;obj&quot;).className = &quot;fruit&quot;;
document.getElementById(&quot;obj&quot;).style.cssText = &quot;color: #00f;&quot;;
document.getElementById(&quot;obj&quot;).style.color = &quot;#00f&quot;;
document.getElementById(&quot;obj&quot;).onclick = function () { alert(&quot;This is a test!&quot;); }
</code></pre></div>
<h3 id="关于class和classname">关于class和className</h3>

<p>class属性在W3C DOM中扮演着很重要的角色，但由于浏览器差异性仍然存在。使用setAttribute(&quot;class&quot;, vName)语句动态设置element的class属性在Firefox中是行的通的，在IE中却不行。因为使用IE内核的浏览器不认识“class”，要改用“className”；同样，Firefox也不认识“className”。所以常用的方法是二者兼备：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">element.setAttribute(&quot;class&quot;, vName);
element.setAttribute(&quot;className&quot;, vName);    // for IE
</code></pre></div>
<h3 id="cellspacing和cellpadding">cellspacing和cellpadding</h3>

<p>虽然在CSS中存在与cellpadding和cellspacing这两个属性等价的样式属性padding和border-spacing。然而，浏览器对这些样式属性支持的不一致，有时仍会使用cellpadding和cellspacing来调整表格的间距。不过，在Firefox中有效的setAttribute(&quot;cellpadding&quot;, value)到了IE下就不行了，必须改成cellPadding才可以（注意：p要大写）。幸好Firefox也支持setAttribute(&quot;cellPadding&quot;, value)。所以二者兼容的代码是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">element.setAttribute(&quot;cellSpacing&quot;, value);
element.setAttribute(&quot;cellPadding&quot;, value);
</code></pre></div>]]></content>
  </entry>
  
</feed>
