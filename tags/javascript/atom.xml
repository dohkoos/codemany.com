<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JavaScript | 乐者为王]]></title>
  <link href="http://codemany.com/tags/javascript/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-04-26T13:07:47+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用jQuery显示隐藏侧边栏]]></title>
    <link href="http://codemany.com/blog/show-hide-sidebar-with-jquery/"/>
    <updated>2012-10-26T08:13:14+08:00</updated>
    <id>http://codemany.com/blog/show-hide-sidebar-with-jquery</id>
    <content type="html"><![CDATA[<p>需要在记账应用使用侧边栏开关功能，在网上找了段代码修改修改，可惜没有找到漂亮的小图标，只好使用&gt;&gt;和&lt;&lt;符号来表示，太丑陋了！</p>

<p>把jquery.toggle.sidebar.js的代码贴上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">jQuery(function() {
  var sidebar = $.cookie(&quot;sidebar&quot;);
  if (sidebar == &quot;hide&quot;) {
    $(&#39;#sidebar&#39;).hide();
    $(&quot;.toggle&quot;).text(&quot;&gt;&gt;&quot;);
  }

  $(&quot;.toggle&quot;).click(function() {
    if ($(&#39;#sidebar&#39;).is(&#39;:visible&#39;)) {
      $(this).text(&quot;&gt;&gt;&quot;);
      $(&#39;#sidebar&#39;).hide();
      $.cookie(&quot;sidebar&quot;, &quot;hide&quot;, { expires: 7 });  // expires in 7 days
    } else {
      $(this).text(&quot;&lt;&lt;&quot;);
      $(&#39;#sidebar&#39;).show();
      $.removeCookie(&quot;sidebar&quot;);
    };
    return false;
  });
});
</code></pre></div>
<p>因为jQuery本身不支持Cookie操作，需要使用官方的插件，可以在 <a href="http://plugins.jquery.com/project/Cookie">http://plugins.jquery.com/project/Cookie</a> 或 <a href="https://github.com/carhartl/jquery-cookie">https://github.com/carhartl/jquery-cookie</a> 下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于input[text]里的光标定位]]></title>
    <link href="http://codemany.com/blog/cursor-positioning-about-input-text/"/>
    <updated>2008-11-30T18:09:25+08:00</updated>
    <id>http://codemany.com/blog/cursor-positioning-about-input-text</id>
    <content type="html"><![CDATA[<p>当使用Tab键切换时，想把光标定位在input[text]的首部。在网上找了一些光标定位的资料发现大多数都是用createTextRange来实现的，而且都出自一个实例。可惜的是在Firefox下createTextRange无效。</p>

<p>后来在Firefox的开发者站点上发现有个setSelectionRange方法可以实现这样的功能。使用格式：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">o.setSelectionRange(start, end);

o：为文本输入框对象
start：为字符串的起始位置
end：为字符串的末位置
</code></pre></div>
<p>尝试后发现并不能定位到文本首位，总是全选所有的文本内容，在后面加上获的焦点的命令也不管用。最后还是在国外的一个站点上找到了解决的办法。</p>

<p>下面的代码在Firefox下不能定位到首位，只能选中全部：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function setCaretPosition(aCtrl, aPos) {
    if (aCtrl.setSelectionRange) {
        aCtrl.setSelectionRange(aPos, aPos);
        aCtrl.focus();
    } else if (aCtrl.createTextRange) {
        var rng = aCtrl.createTextRange();
        rng.collapse(true);
        rng.moveStart(&#39;character&#39;, aPos);
        rng.moveEnd(&#39;character&#39;, aPos);
        rng.select();
    }
}
</code></pre></div>
<p>经过修改后的代码就可以适用于Firefox，IE，Opera的光标定位了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function setCaretPosition(aCtrl, aPos) {
    if (aCtrl.setSelectionRange) {
        setTimeout(function() {
            aCtrl.setSelectionRange(aPos, aPos);
            aCtrl.focus();
        }, 0);
    } else if (aCtrl.createTextRange) {
        var rng = aCtrl.createTextRange();
        rng.collapse(true);
        rng.moveStart(&#39;character&#39;, aPos);
        rng.moveEnd(&#39;character&#39;, aPos);
        rng.select();
    }
}
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Java和JavaScript关于日期计算上的差异》阅读笔记]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-difference-of-date-calculation-between-java-and-javascript/"/>
    <updated>2008-05-23T13:30:00+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-difference-of-date-calculation-between-java-and-javascript</id>
    <content type="html"><![CDATA[<p>下面是<a href="http://wangchangjun.javaeye.com/blog/170049">Java和JavaScript关于日期计算上的差异</a>作者给出的结论：</p>

<blockquote>
<p>当进行日期计算的时候，当前日期的月份必须是大月，并且是在这个月的最后一天也就是31号，比如2008-3-31号，当给这个日期加上一个月，得到的日期是个小月就会出现这样的情况。比如在2008-3-31这天加上一月，那因该是4月份，4月就是小月，那Java就是4月30号，JavaScript 就是5月1号，相差一天。当加上2月后，就是5月，5月是大月，那么计算的结果都是5月31号。</p>
</blockquote>

<p>不过这样的结论还是不能让人明白Java和JavaScript计算日期时相差的一天是怎么来的。</p>

<p>下面是我对Java和JavaScript日期计算差异的一些理解：</p>

<p>2008-2-29加上12个月，那么就是2009-2-29，但2009年是非闰年，它的2月份只有28天，这样就多出来的一天。如何处理这多出来的一天呢？Java和JavaScript做出了不同的理解。Java认为，既然2009年的2月只有28天，那么那多出来的一天就是多余的，应该丢弃，所以Java的计算结果是2009-2-28；而JavaScript则认为这多出来的一天不能丢弃，应该也加上去。那么2009-2-28号加上一天就是2009-3-31号。</p>

<p>同样的，2008-3-31加上一个月在Java中的结果是2008-4-30号，而在JavaScript中则是2008-5-1号。那如果加上的是两个月呢？2008-3-31加上两个月是2008-5-31号，是有效的日期，所以Java和JavaScript的计算结果都是2008-5-31号。</p>

<p>结论是，当进行日期计算时，如果结果日期的date值超出了该月的最大天数值，那么在Java中就会将该date值设为该月的最大天数值；而JavaScript则不但会将该date值设为该月的最大天数值，还会再加上超出的天数值。例如：2009-1-31号加上一个月，Java的结果就是2009-2-28号，JavaScript的结果则是2009-3-3号，2009-2-28加多出来的3 = 31 - 28天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的undefined]]></title>
    <link href="http://codemany.com/blog/javascript-undefined/"/>
    <updated>2007-04-20T16:03:06+08:00</updated>
    <id>http://codemany.com/blog/javascript-undefined</id>
    <content type="html"><![CDATA[<p>JavaScript有6种类型，undefined、null、boolean、number、string和object。其中，null类型只有一个值null。undefined类型也只有一个值，即undefined，当声明的变量没有被赋值的时候，该变量的默认值就是undefined。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
</code></pre></div>
<p>上面这行代码声明了变量foo，没有赋值。脚本引擎在处理代码的时候会给该变量赋予值undefined。实际上，该行代码等价于</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo = undefined;
</code></pre></div>
<p>可以用下面的代码测试：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
alert(foo == undefined);    // true
alert(foo === undefined);    // true
alert(typeof(foo));    // undefined
</code></pre></div>
<p>JavaScript另一个有趣的方面是在使用变量之前不必声明。例如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo = &quot;Hello &quot;;
bar = foo + &quot;world!&quot;;
alert(bar);    // Hello world!
</code></pre></div>
<p>变量bar并没有用var运算符定义，这里只是使用了它，就像已经声明过它一样。脚本引擎遇到未声明过的标识符时，用该变量名创建一个全局变量，并将其初始化为指定的值（这里是foo + &quot;world&quot;）。这是该语言的便利之处，不过如果不能紧密跟踪变量，这样做也很危险。考虑下面的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
// Make sure this variable isn&#39;t defined
//var bar;
alert(foo);
alert(bar);
</code></pre></div>
<p>执行的结果是：</p>

<p><img src="/uploads/undefined.png" title="undefined" ></p>

<p><img src="/uploads/undefined-error.png" title="undefined-error" ></p>

<p>alert(bar)出现错误是因为bar被创建成全局变量后没有被初始化，还处在未初始化（uninitialized）状态。但是，typeof运算符并不真正区分这两种值。考虑下面的代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var foo;
// Make sure this variable isn&#39;t defined
//var bar;
alert(typeof(foo));    // undefined
alert(typeof(bar));    // undefined
</code></pre></div>
<p>前面的代码对两个变量的输出都是“undefined”，即使变量bar在使用前没有被声明。</p>

<p>当函数无明确返回值时，返回的也是值undefined，如下所示：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function foobar() { }
alert(foobar() == undefined);    // true
alert(foobar() === undefined);    // true
</code></pre></div>
<p>ECMAScript认为undefined是从null派生出来的，所以把它们定义为相等的：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">alert(null == undefined);    // true
</code></pre></div>
<p>尽管这两个值相等，但它们的含义不同。undefined是声明了变量但未赋值时赋予该变量的值，null则用于表示尚未存在的对象（但从技术上来说，null仍然是原始值）。如果要区分两者，要使用===或typeof运算符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON in JavaScript]]></title>
    <link href="http://codemany.com/blog/json-in-javascript/"/>
    <updated>2007-02-09T23:29:14+08:00</updated>
    <id>http://codemany.com/blog/json-in-javascript</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.json.org/js.html">http://www.json.org/js.html</a></p>

<p><a href="http://www.crockford.com/javascript">JavaScript</a>是一门通用编程语言，被作为页面脚本语言引入Netscape Navigator。<a href="http://www.crockford.com/javascript/javascript.html">它仍被广泛地认为是Java的一个子集，但它不是。</a>它是一门有着<a href="http://www.crockford.com/javascript/survey.html">类C语法</a>和<a href="http://www.crockford.com/javascript/inheritance.html">soft objects</a>的类<a href="http://www.crockford.com/javascript/little.html">Scheme</a>语言，JavaScript在<a href="http://www.ecma-international.org/publications/files/ecma-st/ECMA-262.pdf">ECMAScript Language Specification, Third Edition</a>中被标准化。</p>

<p><a href="http://www.json.org/">JSON</a>是JavaScript对象字面量表示法（object literal notation）的一个子集。因为JSON是JavaScript的一个子集，所以它可以毫不费力地被用在这门语言中。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var myJSONObject = {&quot;bindings&quot;: [
        {&quot;ircEvent&quot;: &quot;PRIVMSG&quot;, &quot;method&quot;: &quot;newURI&quot;, &quot;regex&quot;: &quot;^http://.*&quot;},
        {&quot;ircEvent&quot;: &quot;PRIVMSG&quot;, &quot;method&quot;: &quot;deleteURI&quot;, &quot;regex&quot;: &quot;^delete.*&quot;},
        {&quot;ircEvent&quot;: &quot;PRIVMSG&quot;, &quot;method&quot;: &quot;randomURI&quot;, &quot;regex&quot;: &quot;^random.*&quot;}
    ]
};
</code></pre></div>
<p>在这个例子中，一个含有单个成员“bindings”的对象被创建，该成员包含一个含有三个对象的数组，每个对象含有“ircEvent”，“method”和“regex”三个成员。</p>

<p>成员可以通过点或下标运算符检索。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">myJSONObject.bindings[0].method    // &quot;newURI&quot;
</code></pre></div>
<p>你可以使用eval函数将一段JSON文本转换成一个对象，eval函数会调用JavaScript编译器。因为JSON是JavaScript的一个真子集（a proper subset），编译器将正确地对文本作语法分析并产生一个对象结构。文本必须被包裹在括号内，以免在JavaScript的语法中的歧义上犯错误。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var myObject = eval(&#39;(&#39; + myJSONtext + &#39;)&#39;);
</code></pre></div>
<p>eval函数是非常快的。然而，它可以编译和执行任何JavaScript程序，所以可能会有安全问题。当源代码是可信的与合格的的时候才可以使用eval函数。使用JSON语法分析器则安全的多。在基于XMLHttpRequest的Web应用中，通讯只被允许朝着提供该页面的同源的方向，所以它是可信的。但它可能不是合格的。如果服务器在它的JSON编码里不是严格的，或者它没有严谨地验证所有的输入，然后它可能交付无效的JSON文本，它们可能携带危险的脚本。eval函数将会执行这些脚本，释放恶意。</p>

<p>为抵御这些，应该使用JSON语法分析器。JSON语法分析器将只识别JSON文本，拒绝所有的脚本。在提供本地JSON支持的浏览器里，JSON语法分析器也比eval快的多。预计本地JSON支持将会被包含在下一个ECMAScript标准中。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var myObject = JSON.parse(myJSONtext, reviver);
</code></pre></div>
<p>可选的reviver参数是一个函数，它会被最终结果的各个层面上的每个键和值调用。每个值会被reviver函数的返回结果替换。这可以被用来将通用对象改编成为伪类实例，或者被用来将date字符串转化成Date对象。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">myData = JSON.parse(text, function (key, value) {
    var type;
    if (value &amp;&amp; typeof value === &#39;object&#39;) {
        type = value.type;
        if (typeof type === &#39;string&#39; &amp;&amp; typeof window[type] === &#39;function&#39;) {
            return new (window[type])(value);
        }
    }
    return value;
});
</code></pre></div>
<p>JSON stringifier则作相反的工作，它将JavaScript数据结构转换为JSON文本。JSON不支持循环的数据结构，所以注意不要把循环的结构交给JSON stringifier。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var myJSONText = JSON.stringify(myObject, replacer);
</code></pre></div>
<p>如果stringify方法看到一个对象包含toJSON方法，它会调用该方法，并字符串化返回的值。这允许一个对象去确定其自己的JSON表示。</p>

<p>stringify~~原文是stringifier，疑似拼错~~方法可以接受一个可选的字符串数组。这些字符串被用于选取那些将会被包含在JSON文本中的属性。</p>

<p>stringify~~原文是stringifier，疑似拼错~~方法可以接受一个可选的replacer函数。该函数会在结构中每个值的toJSON方法（如果有）之后被调用。它将每个键和值作为参数传递，并且this将会被绑定到持有键的对象上。返回的值会被字符串化。</p>

<p>没有在JSON中表示的值（例如函数和undefined）被排除在外。</p>

<p>非有限的数字被替换为null。要替换成其它的值，你可以使用像这样的replacer函数：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function replacer(key, value) {
    if (typeof value === &#39;number&#39; &amp;&amp; !isFinite(value)) {
        return String(value);
    }
    return value;
}
</code></pre></div>
<p>给JSON.parse一个相应的reviver可以还原这些。</p>

<p><a href="https://github.com/douglascrockford/JSON-js">The open source code of a JSON parser and JSON stringifier is available.</a> When <a href="http://www.crockford.com/javascript/jsmin.html">minified</a> it is less than 2.5K.</p>
]]></content>
  </entry>
  
</feed>
