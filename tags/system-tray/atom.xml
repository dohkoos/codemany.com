<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: System Tray | 乐者为王]]></title>
  <link href="http://codemany.com/tags/system-tray/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2014-12-08T23:31:46+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Win32实现系统托盘程序]]></title>
    <link href="http://codemany.com/blog/create-system-tray-program-with-win32/"/>
    <updated>2005-03-30T12:36:00+08:00</updated>
    <id>http://codemany.com/blog/create-system-tray-program-with-win32</id>
    <content type="html"><![CDATA[<p>废话不多说，直接上代码：</p>

<pre><code>#include &lt;windows.h&gt;
#include "resource.h"

LPCTSTR szAppName = TEXT("TrayHelper");
LPCTSTR szCaption = TEXT("TrayIcon");

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HMENU hMenu;
    static UINT WM_TASKBARCREATED;

    POINT point;
    HINSTANCE hInstance;
    NOTIFYICONDATA nid;

    switch (message)
    {
    case WM_CREATE:
        // 不要修改TaskbarCreated字符串，这是系统任务栏自定义的消息
        WM_TASKBARCREATED = RegisterWindowMessage(TEXT("TaskbarCreated"));

        hInstance = ((LPCREATESTRUCT)lParam)-&gt;hInstance;

        hMenu = LoadMenu(hInstance, MAKEINTRESOURCE(IDR_TRAYMENU));
        hMenu = GetSubMenu(hMenu, 0);

        nid.cbSize = sizeof(nid);
        nid.hWnd = hWnd;
        nid.uID = IDI_PIRAMIDE;
        nid.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;
        nid.uCallbackMessage = WM_USER;
        nid.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_PIRAMIDE));
        strcpy(nid.szTip, szAppName);
        Shell_NotifyIcon(NIM_ADD, &amp;nid);
        break;

    case WM_USER:
        if (lParam == WM_RBUTTONDOWN)
        {
            GetCursorPos(&amp;point);
            // 处理当用户按下ESCAPE键或者在菜单之外单击鼠标时菜单不会消失的情况
            SetForegroundWindow(hWnd);
            TrackPopupMenu(hMenu, TPM_RIGHTBUTTON, point.x, point.y, 0, hWnd, NULL);
        }
        break;

    case WM_COMMAND:
        switch (LOWORD(wParam)) {
        case IDM_TRAYSETTINGS:
            MessageBox(hWnd, TEXT("not implemented!"),
                             szAppName, MB_ICONEXCLAMATION | MB_OK);
            return 0;

        case IDM_TRAYHELP:
            MessageBox(hWnd, TEXT("not implemented!"),
                             szAppName, MB_ICONEXCLAMATION | MB_OK);
            return 0;

        case IDM_TRAYABOUT:
            MessageBox(hWnd, TEXT("not implemented!"),
                             szAppName, MB_ICONEXCLAMATION | MB_OK);
            return 0;

        case IDM_TRAYEXIT:
            SendMessage(hWnd, WM_CLOSE, 0, 0);
            return 0;
        }
        break;

    case WM_DESTROY:
        // 处理点击Exit菜单退出后图标仍在托盘区显示，要把鼠标在图标上面过一下才会消失的情况
        nid.uID = IDI_PIRAMIDE;
        nid.hWnd = hWnd;
        Shell_NotifyIcon(NIM_DELETE, &amp;nid);
        PostQuitMessage(0);
        break;

    default:
        /*
         * 防止当Explorer.exe崩溃以后，程序在系统托盘中的图标就消失了。
         *
         * 原理：Explorer.exe重新载入后会重建系统任务栏。当系统任务栏建立的时候会向系统内所有
         * 注册接收TaskbarCreated消息的顶级窗口发送一条消息，我们只需要捕捉这个消息，并重建系
         * 统托盘的图标即可。
         */
        if (message == WM_TASKBARCREATED)
            SendMessage(hWnd, WM_CREATE, wParam, lParam);
        break;
    }
    return DefWindowProc(hWnd, message, wParam, lParam);
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
                                        LPSTR szCmdLine, int iCmdShow)
{
    HWND hWnd;
    MSG msg;
    WNDCLASS wc;

    HWND handle = FindWindow(NULL, szCaption);
    if (handle != NULL)
    {
        MessageBox(NULL, TEXT("Application is already running"),
                         szAppName, MB_ICONERROR);
        return 0;
    }

    wc.style = CS_HREDRAW | CS_VREDRAW;
    wc.lpfnWndProc = WndProc;
    wc.cbClsExtra = 0;
    wc.cbWndExtra = 0;
    wc.hInstance = hInstance;
    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
    wc.lpszMenuName = NULL;
    wc.lpszClassName = szAppName;

    if (!RegisterClass(&amp;wc))
    {
        MessageBox(NULL, TEXT("This program requires Windows NT!"),
                         szAppName, MB_ICONERROR);
        return 0;
    }

    // 此处使用WS_EX_TOOLWINDOW属性来隐藏显示在任务栏上的窗口程序按钮
    hWnd = CreateWindowEx(WS_EX_TOOLWINDOW,
                        szAppName, szCaption,
                        WS_POPUP,
                        CW_USEDEFAULT,
                        CW_USEDEFAULT,
                        CW_USEDEFAULT,
                        CW_USEDEFAULT,
                        NULL, NULL, hInstance, NULL);

    ShowWindow(hWnd, iCmdShow);
    UpdateWindow(hWnd);

    while (GetMessage(&amp;msg, NULL, 0, 0))
    {
        TranslateMessage(&amp;msg);
        DispatchMessage(&amp;msg);
    }

    return msg.wParam;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
