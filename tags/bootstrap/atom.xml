<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Bootstrap | 乐者为王]]></title>
  <link href="http://codemany.com/tags/bootstrap/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-09-05T22:59:27+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Rails 3.2打造简单记账应用]]></title>
    <link href="http://codemany.com/blog/using-rails-32-to-create-a-simple-accounting-application/"/>
    <updated>2012-04-18T07:49:27+08:00</updated>
    <id>http://codemany.com/blog/using-rails-32-to-create-a-simple-accounting-application</id>
    <content type="html"><![CDATA[<p>Rails已经到3.2版本了，和以前的2.3版本有了很大的不同，决定把原来老版本的记账应用重新写一遍，更新部分插件。</p>

<p>首先是创建项目：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rails new qianbao
cd qianbao
rails g scaffold entry amount:decimal tags:string comment:text effective_date:date
rails g controller home index
</code></pre></div>
<p>删除public/index.html，在config/routes.rb中添加根路由：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">root :to =&gt; &#39;home#index&#39;
</code></pre></div>
<p>现在要给应用加上一个认证系统（注册、激活、登录、登出），这次使用<a href="https://github.com/plataformatec/devise">devise</a>插件实现。</p>

<p>在Gemfile中添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;devise&#39;
</code></pre></div>
<p>然后执行下列命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">bundle install
rails g devise:install
rails g devise user
rails g devise:views
</code></pre></div>
<p>创建一个迁移任务，把User和Entry模型关联起来：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class AddUserIdToEntries &lt; ActiveRecord::Migration
  def change
    add_column :entries, :user_id, :integer

    add_index :entries, :user_id
  end
end
</code></pre></div>
<p>修改Entry和User模型：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Entry &lt; ActiveRecord::Base
  validates :effective_date, :presence =&gt; true
  validates :amount,         :presence =&gt; true,
                             :numericality =&gt; { :greater_than =&gt; 0.0 },
                             :format =&gt; { :with =&gt; /^\d+??(?:\.\d{0,2})?$/ }
  validates :tags,           :presence =&gt; true,
                             :length =&gt; { :within =&gt; 1..255 }

  belongs_to :user
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">class User &lt; ActiveRecord::Base
  has_many :entries
</code></pre></div>
<p>修改app/views/layouts/application.html.erb文件：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body&gt;
  &lt;% if user_signed_in? %&gt;
    &lt;p&gt;
      &lt;strong&gt;&lt;%= link_to current_user.email, edit_user_registration_path %&gt;&lt;/strong&gt;
      &lt;%= link_to &#39;Logout&#39;, destroy_user_session_path, :method =&gt; :delete %&gt;
    &lt;/p&gt;
    &lt;%= link_to &quot;All Entries&quot;, entries_path %&gt;
  &lt;% else %&gt;
    &lt;p&gt;
      &lt;strong&gt;You are currently not logged in.&lt;/strong&gt;
      &lt;%= link_to &#39;Sign in&#39;, new_user_session_path %&gt; or
      &lt;%= link_to &#39;Sign up&#39;, new_user_registration_path %&gt;
    &lt;/p&gt;
  &lt;% end %&gt;

  &lt;%= yield %&gt;
&lt;/body&gt;
</code></pre></div>
<p>修改app/controller/entries_controller.rb：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class EntriesController &lt; ApplicationController
  before_filter :authenticate_user!

  # GET /entries
  # GET /entries.json
  def index
    @entries = current_user.entries

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @entries }
    end
  end

  # GET /entries/1
  # GET /entries/1.json
  def show
    @entry = current_user.entries.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @entry }
    end
  end

  # GET /entries/new
  # GET /entries/new.json
  def new
    @entry = Entry.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @entry }
    end
  end

  # GET /entries/1/edit
  def edit
    @entry = current_user.entries.find(params[:id])
  end

  # POST /entries
  # POST /entries.json
  def create
    @entry = Entry.new(params[:entry])
    @entry.user = current_user

    respond_to do |format|
      if @entry.save
        format.html { redirect_to @entry, notice: &#39;Entry was successfully created.&#39; }
        format.json { render json: @entry, status: :created, location: @entry }
      else
        format.html { render action: &quot;new&quot; }
        format.json { render json: @entry.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /entries/1
  # PUT /entries/1.json
  def update
    @entry = current_user.entries.find(params[:id])

    respond_to do |format|
      if @entry.update_attributes(params[:entry])
        format.html { redirect_to @entry, notice: &#39;Entry was successfully updated.&#39; }
        format.json { head :no_content }
      else
        format.html { render action: &quot;edit&quot; }
        format.json { render json: @entry.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /entries/1
  # DELETE /entries/1.json
  def destroy
    @entry = current_user.entries.find(params[:id])
    @entry.destroy

    respond_to do |format|
      format.html { redirect_to entries_url }
      format.json { head :no_content }
    end
  end
end
</code></pre></div>
<p>执行以下命令启动应用：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rake db:migrate
rails s
</code></pre></div>
<p>以前的版本用的CSS框架是<a href="http://blueprintcss.org/">Blueprint</a>，这次使用比它更方便快捷的<a href="https://github.com/twitter/bootstrap">Bootstrap</a>。Bootstrap建立在Less上，有个<a href="https://github.com/metaskills/less-rails-bootstrap">less-rails-bootstrap</a>，不过在安装libv8时竟然要提示缺少Python，拜托！我用的是Ruby，要我装Python，啥意思啊！还是找个Sass版的Bootstrap吧。</p>

<p>下载<a href="https://github.com/jlong/sass-twitter-bootstrap">sass-twitter-bootstrap</a>：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/jlong/sass-twitter-bootstrap.git
</code></pre></div>
<p>将sass-twitter-bootstrap/lib中的文件拷贝到app/assets/stylesheets/twitter目录下。然后将app/assets/stylesheets/application.css中的</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">*= require_tree .
</code></pre></div>
<p>修改为</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">*= require twitter/bootstrap
</code></pre></div>
<p>再在文件末尾添加：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">body { padding-top: 60px; }
</code></pre></div>
<p>现在就可以使用Bootstrap来布局美化应用了。</p>

<p>代码下载：<a href="https://github.com/dohkoos/qianbao32">https://github.com/dohkoos/qianbao32</a></p>
]]></content>
  </entry>
  
</feed>
