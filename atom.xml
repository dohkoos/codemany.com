<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[乐者为王]]></title>
  <link href="http://codemany.com/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-08-12T17:51:17+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用Flexbox构建新闻站点布局]]></title>
    <link href="http://codemany.com/blog/how-to-build-a-news-website-layout-with-flexbox/"/>
    <updated>2016-06-11T23:31:14+08:00</updated>
    <id>http://codemany.com/blog/how-to-build-a-news-website-layout-with-flexbox</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://webdesign.tutsplus.com/tutorials/how-to-build-a-news-website-layout-with-flexbox--cms-26611">http://webdesign.tutsplus.com/tutorials/how-to-build-a-news-website-layout-with-flexbox--cms-26611</a></p>

<p><img src="http://codemany.com/uploads/flexbox-preview.png" title="flexbox-preview" ></p>

<p>在投入并开始之前你没有必要理解Flexbox的<em>每个</em>方面。在这篇教程中，我们将介绍一些Flexbox的特性，同时设计一个类似<a href="http://www.theguardian.com/">The Guardian</a>的“新闻布局”。</p>

<p>我们正在使用Flexbox的原因是它提供了非常强大的特性：</p>

<ul>
<li>我们可以很容易制作响应式列</li>
<li>我们可以使列等高</li>
<li>我们可以把内容推到容器的<em>底部</em></li>
</ul>

<p>那么让我们开始吧！</p>

<h3 id="1-从两个列开始">1. 从两个列开始</h3>

<p>在CSS中创建列一直是个挑战。长期以来，唯一的选项是使用float或者table，但它们都有它们自己的问题。</p>

<p>Flexbox使这个过程更简单，给予我们：</p>

<ul>
<li><strong>更简洁的代码</strong>：我们只需要一个带有display: flex的容器</li>
<li>不需要<strong>清除</strong>float，以防止意外的布局行为</li>
<li><strong>语义化的标记</strong></li>
<li><strong>灵活性</strong>：我们可以用几行CSS代码来调整列的大小、拉伸或者对齐列</li>
</ul>

<p>让我们从创建两个列开始：一个是容器宽度的2/3，一个是1/3。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="columns"&gt;
</span><span class='line'>  &lt;div class="column main-column"&gt;
</span><span class='line'>    2/3 column
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>  &lt;div class="column"&gt;
</span><span class='line'>    1/3 column
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>

<p>这里有两个元素：</p>

<ul>
<li>columns容器</li>
<li>两个column子容器，其中一个带有附加的名为main-column的class，我们将用它来让该子容器更宽</li>
</ul>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.columns {
</span><span class='line'>  display: flex;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.column {
</span><span class='line'>  flex: 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main-column {
</span><span class='line'>  flex: 2;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>作为有一个flex值为2的主列，它将占用其它列的两倍空间。</p>

<p>通过添加一些附加的视觉样式，这里是我们得到的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html {
</span><span class='line'>  font-family: sans-serif;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.columns {
</span><span class='line'>  display: flex;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.column {
</span><span class='line'>  background: #eee;
</span><span class='line'>  border: 5px solid #ccc;
</span><span class='line'>  flex: 1;
</span><span class='line'>  padding: 20px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main-column {
</span><span class='line'>  flex: 2;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<h3 id="2-让每一列都成为flexbox容器">2. 让每一列都成为Flexbox容器</h3>

<p>这两列中的每一个都将包含若干垂直堆叠的文章，因此我们打算把column元素也转变成Flexbox容器。我们想要：</p>

<ul>
<li>文章被垂直堆叠</li>
<li>文章<em>拉伸</em>并填充可用空间</li>
</ul>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.column {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex-direction: column;  /* 使文章垂直堆叠 */
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article {
</span><span class='line'>  flex: 1;  /* 拉伸文章以填补剩余的空间 */
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>在<em>容器</em>上的flex-direction: column规则结合在<em>子容器</em>上的flex: 1规则确保文章将填补整个垂直空间，保持最初两列具有相同的高度。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="columns"&gt;
</span><span class='line'>  &lt;div class="column main-column"&gt;
</span><span class='line'>    &lt;article class="article"&gt;
</span><span class='line'>      Hello World
</span><span class='line'>    &lt;/article&gt;
</span><span class='line'>    &lt;article class="article"&gt;
</span><span class='line'>      Hello World
</span><span class='line'>    &lt;/article&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>  &lt;div class="column"&gt;
</span><span class='line'>    &lt;article class="article"&gt;
</span><span class='line'>      Hello World
</span><span class='line'>    &lt;/article&gt;
</span><span class='line'>    &lt;article class="article"&gt;
</span><span class='line'>      Hello World&lt;br&gt;
</span><span class='line'>      Foo Bar
</span><span class='line'>    &lt;/article&gt;
</span><span class='line'>    &lt;article class="article"&gt;
</span><span class='line'>      Hello World
</span><span class='line'>    &lt;/article&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html {
</span><span class='line'>  font-family: sans-serif;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.columns {
</span><span class='line'>  display: flex;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.column {
</span><span class='line'>  background: #eee;
</span><span class='line'>  border: 5px solid #ccc;
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  padding: 10px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main-column {
</span><span class='line'>  flex: 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article {
</span><span class='line'>  background: mediumseagreen;
</span><span class='line'>  border: 5px solid seagreen;
</span><span class='line'>  color: white;
</span><span class='line'>  flex: 1;
</span><span class='line'>  margin: 10px;
</span><span class='line'>  padding: 20px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<h3 id="3-让每篇文章都成为flexbox容器">3. 让每篇文章都成为Flexbox容器</h3>

<p>现在，为了给我们额外的控制，让我们把每篇文章也转变成一个Flexbox容器。每篇文章将包含：</p>

<ul>
<li>一个标题</li>
<li>一个段落</li>
<li>一个带有作者和评论数量的信息栏</li>
<li>一张可选的响应式图片</li>
</ul>

<p>我们在这里使用Flexbox是为了把信息栏推到底部。我们的目标文章布局如下图所示：</p>

<p><img src="http://codemany.com/uploads/flexbox-card.png" title="flexbox-card" ></p>

<p>这里是代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a class="article first-article"&gt;
</span><span class='line'>  &lt;figure class="article-image"&gt;
</span><span class='line'>    &lt;img src=""&gt;
</span><span class='line'>  &lt;/figure&gt;
</span><span class='line'>  &lt;div class="article-body"&gt;
</span><span class='line'>    &lt;h2 class="article-title"&gt;
</span><span class='line'>      &lt;!-- 标题 --&gt;
</span><span class='line'>    &lt;/h2&gt;
</span><span class='line'>    &lt;p class="article-content"&gt;
</span><span class='line'>      &lt;!-- 内容 --&gt;
</span><span class='line'>    &lt;/p&gt;
</span><span class='line'>    &lt;footer class="article-info"&gt;
</span><span class='line'>      &lt;!-- 信息 --&gt;
</span><span class='line'>    &lt;/footer&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/a&gt;</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.article {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  flex-basis: auto;  /* 基于其内容设置初始元素大小 */
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-body {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-content {
</span><span class='line'>  flex: 1;  /* 这将使内容填补剩余的空间，并因此在底部压入信息栏 */
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>文章元素被垂直放置归功于flex-direction: column规则。</p>

<p>我们把flex: 1应用到article-content元素以便它填补空白空间，并且把article-info推到底部，无论列的高度如何。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;main class="main columns"&gt;
</span><span class='line'>  &lt;section class="column main-column"&gt;
</span><span class='line'>    &lt;a class="article first-article" href="#"&gt;
</span><span class='line'>      &lt;figure class="article-image is-4by3"&gt;
</span><span class='line'>        &lt;img src="https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/1366/posts/26611/attachment/image-01.png" alt=""&gt;
</span><span class='line'>      &lt;/figure&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>          Maecenas non massa sem.
</span><span class='line'>          Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;figure class="article-image is-16by9"&gt;
</span><span class='line'>        &lt;img src="https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/1366/posts/26611/attachment/image-02.png" alt=""&gt;
</span><span class='line'>      &lt;/figure&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>          Maecenas non massa sem.
</span><span class='line'>          Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>          Maecenas non massa sem.
</span><span class='line'>          Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>
</span><span class='line'>  &lt;section class="column"&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;figure class="article-image is-3by2"&gt;
</span><span class='line'>        &lt;img src="https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/1366/posts/26611/attachment/image-03.png" alt=""&gt;
</span><span class='line'>      &lt;/figure&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>&lt;/main&gt;</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html {
</span><span class='line'>  background: mediumseagreen;
</span><span class='line'>  font-family: sans-serif;
</span><span class='line'>  font-size: 14px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>a {
</span><span class='line'>  text-decoration: none;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>div, h2, p, figure {
</span><span class='line'>  margin: 0;
</span><span class='line'>  padding: 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main {
</span><span class='line'>  margin: 0 auto;
</span><span class='line'>  max-width: 1040px;
</span><span class='line'>  padding: 20px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.columns {
</span><span class='line'>  display: flex;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.column {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main-column {
</span><span class='line'>  flex: 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article {
</span><span class='line'>  background: white;
</span><span class='line'>  color: #666;
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  flex-basis: auto;
</span><span class='line'>  margin: 10px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image {
</span><span class='line'>  background: #eee;
</span><span class='line'>  display: block;
</span><span class='line'>  padding-top: 75%;
</span><span class='line'>  position: relative;
</span><span class='line'>  width: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image img {
</span><span class='line'>  display: block;
</span><span class='line'>  height: 100%;
</span><span class='line'>  left: 0;
</span><span class='line'>  position: absolute;
</span><span class='line'>  top: 0;
</span><span class='line'>  width: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image.is-3by2 {
</span><span class='line'>  padding-top: 66.6666%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image.is-16by9 {
</span><span class='line'>  padding-top: 56.25%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-body {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  padding: 20px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-title {
</span><span class='line'>  color: #333;
</span><span class='line'>  flex-shrink: 0;
</span><span class='line'>  font-size: 1.4em;
</span><span class='line'>  font-weight: bold;
</span><span class='line'>  font-weight: 700;
</span><span class='line'>  line-height: 1.2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-content {
</span><span class='line'>  flex: 1;
</span><span class='line'>  margin-top: 5px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-info {
</span><span class='line'>  display: flex;
</span><span class='line'>  font-size: 0.85em;
</span><span class='line'>  justify-content: space-between;
</span><span class='line'>  margin-top: 10px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<h3 id="4-添加一些嵌套列">4. 添加一些嵌套列</h3>

<p>在左边的列中，我们真正想要的是<em>另一组</em>列。因此我们将以我们已经用过的同样的columns容器代替第二篇文章。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="columns"&gt;
</span><span class='line'>  &lt;div class="column nested-column"&gt;
</span><span class='line'>    &lt;a class="article"&gt;
</span><span class='line'>      &lt;!-- 文章内容 --&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>  &lt;div class="column"&gt;
</span><span class='line'>    &lt;a class="article"&gt;
</span><span class='line'>      &lt;!-- 文章内容 --&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article"&gt;
</span><span class='line'>      &lt;!-- 文章内容 --&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article"&gt;
</span><span class='line'>      &lt;!-- 文章内容 --&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>

<p>因为我们想要第一个嵌套列更宽，我们添加一个带有附加样式的名为nested-column的class：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.nested-column {
</span><span class='line'>  flex: 2;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>这将使新列的宽度是其它列的两倍。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;main class="main columns"&gt;
</span><span class='line'>  &lt;section class="column main-column"&gt;
</span><span class='line'>    &lt;a class="article first-article" href="#"&gt;
</span><span class='line'>      &lt;figure class="article-image is-4by3"&gt;
</span><span class='line'>        &lt;img src="https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/1366/posts/26611/attachment/image-01.png" alt=""&gt;
</span><span class='line'>      &lt;/figure&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>          Maecenas non massa sem.
</span><span class='line'>          Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>
</span><span class='line'>    &lt;div class="columns"&gt;
</span><span class='line'>      &lt;div class="column nested-column"&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;figure class="article-image is-16by9"&gt;
</span><span class='line'>            &lt;img src="https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/1366/posts/26611/attachment/image-02.png" alt=""&gt;
</span><span class='line'>          &lt;/figure&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>              Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>              Maecenas non massa sem.
</span><span class='line'>              Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>              Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>              Maecenas non massa sem.
</span><span class='line'>              Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>      &lt;div class="column"&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;figure class="article-image is-16by9"&gt;
</span><span class='line'>            &lt;img src="https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/1366/posts/26611/attachment/image-03.png" alt=""&gt;
</span><span class='line'>          &lt;/figure&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet feugiat facilisis.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>
</span><span class='line'>  &lt;section class="column"&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;figure class="article-image is-3by2"&gt;
</span><span class='line'>        &lt;img src="https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/1366/posts/26611/attachment/image-04.png" alt=""&gt;
</span><span class='line'>      &lt;/figure&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>&lt;/main&gt;</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html {
</span><span class='line'>  background: mediumseagreen;
</span><span class='line'>  font-family: sans-serif;
</span><span class='line'>  font-size: 14px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>a {
</span><span class='line'>  text-decoration: none;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>div, h2, p, figure {
</span><span class='line'>  margin: 0;
</span><span class='line'>  padding: 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main {
</span><span class='line'>  margin: 0 auto;
</span><span class='line'>  max-width: 1040px;
</span><span class='line'>  padding: 20px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.columns {
</span><span class='line'>  display: flex;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.column {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main-column {
</span><span class='line'>  flex: 3;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.nested-column {
</span><span class='line'>  flex: 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article {
</span><span class='line'>  background: white;
</span><span class='line'>  color: #666;
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  flex-basis: auto;
</span><span class='line'>  margin: 10px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image {
</span><span class='line'>  background: #eee;
</span><span class='line'>  display: block;
</span><span class='line'>  padding-top: 75%;
</span><span class='line'>  position: relative;
</span><span class='line'>  width: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image img {
</span><span class='line'>  display: block;
</span><span class='line'>  height: 100%;
</span><span class='line'>  left: 0;
</span><span class='line'>  position: absolute;
</span><span class='line'>  top: 0;
</span><span class='line'>  width: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image.is-3by2 {
</span><span class='line'>  padding-top: 66.6666%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image.is-16by9 {
</span><span class='line'>  padding-top: 56.25%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-body {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  padding: 20px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-title {
</span><span class='line'>  color: #333;
</span><span class='line'>  flex-shrink: 0;
</span><span class='line'>  font-size: 1.4em;
</span><span class='line'>  font-weight: bold;
</span><span class='line'>  font-weight: 700;
</span><span class='line'>  line-height: 1.2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-content {
</span><span class='line'>  flex: 1;
</span><span class='line'>  margin-top: 5px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-info {
</span><span class='line'>  display: flex;
</span><span class='line'>  font-size: 0.85em;
</span><span class='line'>  justify-content: space-between;
</span><span class='line'>  margin-top: 10px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<h3 id="5-给第一篇文章一个水平布局">5. 给第一篇文章一个水平布局</h3>

<p>第一篇文章真的很大。为了优化空间的使用，让我们把它的布局切换成水平的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.first-article {
</span><span class='line'>  flex-direction: row;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.first-article .article-body {
</span><span class='line'>  flex: 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.first-article .article-image {
</span><span class='line'>  height: 300px;
</span><span class='line'>  order: 2;
</span><span class='line'>  padding-top: 0;
</span><span class='line'>  width: 400px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>这里的order属性是非常有用的，因为它允许我们改变HTML元素的顺序而不影响HTML标记。在标记中article-image实际上出现在article-body的<em>前面</em>，但它表现的好像出现在<em>后面</em>。</p>

<h3 id="6-使布局可响应">6. 使布局可响应</h3>

<p>这些就是我们想看到的，虽然它有点儿扁平。让我们通过响应式来修复它。</p>

<p>Flexbox一个极好的特性是你只需要移除容器上的display: flex规则就可以完全禁用Flexbox，同时保持所有其它的Flexbox属性（例如align-items或者flex）有效。</p>

<p>结果是，你可以通过仅在某个断点上启用Flexbox来触发一个响应式布局。</p>

<p>我们将从.columns和.column选择器中移除display: flex，而不是用一个Media Query包装它们：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@media screen and (min-width: 800px) {
</span><span class='line'>  .columns,
</span><span class='line'>  .column {
</span><span class='line'>    display: flex;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>就是这样！在更小的屏幕上，所有的文章都在彼此的上面。超过800px时，它们将会被放置在两列中。</p>

<h3 id="7-添加最后的润色">7. 添加最后的润色</h3>

<p>为使布局在大屏幕上更具吸引力，让我们添加一些CSS微调：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@media screen and (min-width: 1000px) {
</span><span class='line'>  .first-article {
</span><span class='line'>    flex-direction: row;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .first-article .article-body {
</span><span class='line'>    flex: 1;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .first-article .article-image {
</span><span class='line'>    height: 300px;
</span><span class='line'>    order: 2;
</span><span class='line'>    padding-top: 0;
</span><span class='line'>    width: 400px;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .main-column {
</span><span class='line'>    flex: 3;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .nested-column {
</span><span class='line'>    flex: 2;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>第一篇文章的内容是水平放置的，文本在左边，图片在右边。而且，主列现在更宽（75%），嵌套列也是（66%）。这里是最终结果！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;header class="header"&gt;
</span><span class='line'>  &lt;h1&gt;The Envato Tuts+ Report&lt;/h1&gt;
</span><span class='line'>  &lt;h2&gt;&lt;a href="http://webdesign.tutsplus.com/tutorials/how-to-build-a-news-website-layout-with-flexbox--cms-26611"&gt;Read tutorial&lt;/a&gt;&lt;/h2&gt;
</span><span class='line'>&lt;/header&gt;
</span><span class='line'>
</span><span class='line'>&lt;main class="main columns"&gt;
</span><span class='line'>  &lt;section class="column main-column"&gt;
</span><span class='line'>    &lt;a class="article first-article" href="#"&gt;
</span><span class='line'>      &lt;figure class="article-image is-4by3"&gt;
</span><span class='line'>        &lt;img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/210284/image-01-lo.jpg" alt=""&gt;
</span><span class='line'>      &lt;/figure&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>          Maecenas non massa sem.
</span><span class='line'>          Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Proin ornare magna eros.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>
</span><span class='line'>    &lt;div class="columns"&gt;
</span><span class='line'>      &lt;div class="column nested-column"&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;figure class="article-image is-16by9"&gt;
</span><span class='line'>            &lt;img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/210284/image-02-lo.jpg" alt=""&gt;
</span><span class='line'>          &lt;/figure&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>              Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>              Maecenas non massa sem.
</span><span class='line'>              Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>              Proin ornare magna eros, eu pellentesque tortor vestibulum ut.
</span><span class='line'>              Maecenas non massa sem.
</span><span class='line'>              Etiam finibus odio quis feugiat facilisis.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>      &lt;div class="column"&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;figure class="article-image is-16by9"&gt;
</span><span class='line'>            &lt;img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/210284/image-03-lo.jpg" alt=""&gt;
</span><span class='line'>          &lt;/figure&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>        &lt;a class="article" href="#"&gt;
</span><span class='line'>          &lt;div class="article-body"&gt;
</span><span class='line'>            &lt;h2 class="article-title"&gt;
</span><span class='line'>              Hello World
</span><span class='line'>            &lt;/h2&gt;
</span><span class='line'>            &lt;p class="article-content"&gt;
</span><span class='line'>              Lorem ipsum dolor sit amet feugiat facilisis.
</span><span class='line'>            &lt;/p&gt;
</span><span class='line'>            &lt;footer class="article-info"&gt;
</span><span class='line'>              &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>              &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>            &lt;/footer&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/a&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>
</span><span class='line'>  &lt;section class="column"&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;figure class="article-image is-3by2"&gt;
</span><span class='line'>        &lt;img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/210284/image-04-lo.jpg" alt=""&gt;
</span><span class='line'>      &lt;/figure&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>    &lt;a class="article" href="#"&gt;
</span><span class='line'>      &lt;div class="article-body"&gt;
</span><span class='line'>        &lt;h2 class="article-title"&gt;
</span><span class='line'>          Hello World
</span><span class='line'>        &lt;/h2&gt;
</span><span class='line'>        &lt;p class="article-content"&gt;
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</span><span class='line'>        &lt;/p&gt;
</span><span class='line'>        &lt;footer class="article-info"&gt;
</span><span class='line'>          &lt;span&gt;By Joe Smith&lt;/span&gt;
</span><span class='line'>          &lt;span&gt;42 comments&lt;/span&gt;
</span><span class='line'>        &lt;/footer&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>&lt;/main&gt;</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@import url(https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700);
</span><span class='line'>@import url(https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css);
</span><span class='line'>
</span><span class='line'>html {
</span><span class='line'>  background: mediumseagreen;
</span><span class='line'>  font-size: 14px;
</span><span class='line'>  -moz-osx-font-smoothing: grayscale;
</span><span class='line'>  -webkit-font-smoothing: antialiased;
</span><span class='line'>  min-width: 300px;
</span><span class='line'>  overflow-x: hidden;
</span><span class='line'>  overflow-y: scroll;
</span><span class='line'>  text-rendering: optimizeLegibility;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>body {
</span><span class='line'>  color: #666;
</span><span class='line'>  font-family: "Source Sans Pro", "Helvetica", "Arial", sans-serif;
</span><span class='line'>  font-size: 1rem;
</span><span class='line'>  font-weight: 400;
</span><span class='line'>  line-height: 1.4;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>a {
</span><span class='line'>  text-decoration: none;
</span><span class='line'>  transition: all 0.3s cubic-bezier(.25, .8, .25, 1);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>div, h2, p, figure {
</span><span class='line'>  margin: 0;
</span><span class='line'>  padding: 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.header {
</span><span class='line'>  color: white;
</span><span class='line'>  padding: 40px 0 20px;
</span><span class='line'>  text-align: center;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.header h1 {
</span><span class='line'>  font-size: 40px;
</span><span class='line'>  font-weight: bold;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.header h2 a {
</span><span class='line'>  border-bottom: 1px solid rgba(255, 255, 255, 0.5);
</span><span class='line'>  color: white;
</span><span class='line'>  font-size: 20px;
</span><span class='line'>  opacity: 0.5;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.header h2 a:hover {
</span><span class='line'>  border-bottom-color: white;
</span><span class='line'>  opacity: 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.main {
</span><span class='line'>  margin: 0 auto;
</span><span class='line'>  max-width: 1040px;
</span><span class='line'>  padding: 10px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.column {
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article {
</span><span class='line'>  background: white;
</span><span class='line'>  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
</span><span class='line'>  color: #666;
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  flex-basis: auto;
</span><span class='line'>  margin: 10px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article:hover,
</span><span class='line'>.article:focus {
</span><span class='line'>  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
</span><span class='line'>  color: #444;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image {
</span><span class='line'>  background: #eee;
</span><span class='line'>  display: block;
</span><span class='line'>  padding-top: 75%;
</span><span class='line'>  position: relative;
</span><span class='line'>  width: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image img {
</span><span class='line'>  display: block;
</span><span class='line'>  height: 100%;
</span><span class='line'>  left: 0;
</span><span class='line'>  position: absolute;
</span><span class='line'>  top: 0;
</span><span class='line'>  width: 100%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image.is-3by2 {
</span><span class='line'>  padding-top: 66.6666%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-image.is-16by9 {
</span><span class='line'>  padding-top: 56.25%;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-body {
</span><span class='line'>  display: flex;
</span><span class='line'>  flex: 1;
</span><span class='line'>  flex-direction: column;
</span><span class='line'>  padding: 20px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-title {
</span><span class='line'>  color: #333;
</span><span class='line'>  flex-shrink: 0;
</span><span class='line'>  font-size: 1.4em;
</span><span class='line'>  font-weight: 700;
</span><span class='line'>  line-height: 1.2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-content {
</span><span class='line'>  flex: 1;
</span><span class='line'>  margin-top: 5px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.article-info {
</span><span class='line'>  display: flex;
</span><span class='line'>  font-size: 0.85em;
</span><span class='line'>  justify-content: space-between;
</span><span class='line'>  margin-top: 10px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@media screen and (min-width: 800px) {
</span><span class='line'>  .columns,
</span><span class='line'>  .column {
</span><span class='line'>    display: flex;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@media screen and (min-width: 1000px) {
</span><span class='line'>  .first-article {
</span><span class='line'>    flex-direction: row;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .first-article .article-body {
</span><span class='line'>    flex: 1;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .first-article .article-image {
</span><span class='line'>    height: 300px;
</span><span class='line'>    order: 2;
</span><span class='line'>    padding-top: 0;
</span><span class='line'>    width: 400px;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .main-column {
</span><span class='line'>    flex: 3;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  .nested-column {
</span><span class='line'>    flex: 2;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<h3 id="总结">总结</h3>

<p>我希望我已经向你展示在投入和开始使用Flexbox前你不需要理解它的每个方面！响应式新闻布局是一个真正有用的模式。拆解它，把玩它，让我们知道你是如何进展的！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（14）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part14/"/>
    <updated>2016-05-16T20:26:22+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part14</id>
    <content type="html"><![CDATA[<p>对于大多数语法，注释和空格都是语法分析器可以忽略的东西。如果我们不想让注释和空格在语法中到处都是，那么就需要让词法分析器把它们扔掉。不幸的是，这意味着任何后续处理步骤都不能再访问注释和空格。安全地忽略掉注释和空格的方法是把这些发送给语法分析器的记号放到一个“隐藏通道”中，语法分析器仅需要调协到单个通道即可。我们可以把任何我们想要的东西传递到其它通道中。这里是如何实现的语法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>COMMENT
</span><span class='line'>    : '/*' .*? '*/' -&gt; channel(HIDDEN)    // match anything between /* and */
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>WS  : [ \r\t\n]+    -&gt; channel(HIDDEN)
</span><span class='line'>    ;</span></code></pre></td></tr></table></div></figure>

<p>就像我们前面讨论过的<code>-&gt; skip</code>那样，<code>-&gt; channel(HIDDEN)</code>也是一个的词法分析器指令。在这里，它设置那些记号的通道号码以便这些记号可以被语法分析器忽略。记号流仍然维护着原始的记号序列，但在喂食给语法分析器时则略过离线通道中的记号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逻辑题-谁养鱼]]></title>
    <link href="http://codemany.com/blog/logic-problems-who-owns-the-fish/"/>
    <updated>2016-05-12T18:06:58+08:00</updated>
    <id>http://codemany.com/blog/logic-problems-who-owns-the-fish</id>
    <content type="html"><![CDATA[<ol>
<li>在一条街上，有5座房子，喷了5种颜色。</li>
<li>每座房子里住着不同国籍的人。</li>
<li>每个人喝不同的饮料，抽不同品牌的香烟，养不同的宠物。</li>
</ol>

<p>问题是：谁养鱼？</p>

<p>提示：</p>

<ol>
<li>英国人住红色房子。</li>
<li>瑞典人养狗。</li>
<li>丹麦人喝茶。</li>
<li>绿色房子在白色房子左面。</li>
<li>绿色房子主人喝咖啡。</li>
<li>抽Pall Mall香烟的人养鸟。</li>
<li>黄色房子主人抽Dunhill香烟。</li>
<li>住在中间房子的人喝牛奶。</li>
<li>挪威人住第一间房子。</li>
<li>抽Blends香烟的人住在养猫的人隔壁。</li>
<li>养马的人住抽Dunhill香烟的人隔壁。</li>
<li>抽Blue Master的人喝啤酒。</li>
<li>德国人抽Prince香烟。</li>
<li>挪威人住蓝色房子隔壁。</li>
<li>抽Blends香烟的人有一个喝水的邻居。</li>
</ol>

<p>在回答上述问题前先画一个6行5列的表格，从上到下的每一行分别代表房子的顺序（A表示左边第一间房子）、哪国人、房子颜色、饮料、香烟、宠物。下表是问题的初始状态：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>根据提示8、9和14可以得到：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>由提示4和5可以判定房子D的颜色是绿色，房子主人喝咖啡，房子E的颜色是白色。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">?</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>结合提示1、7和11可以知道房子C是红色的，住的是英国人，房子A是黄色的。挪威人抽Dunhill香烟。住房子B的人养马。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">英国人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">黄色</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">红色</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">Dunhill</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">马</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>依据上表可知，挪威人喝的饮料是水、茶或者啤酒。结合提示3和12可以断定挪威人喝的是水。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">英国人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">黄色</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">红色</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">水</td>
<td style="text-align: center">?</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">Dunhill</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">马</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>通过提示15可以得出住房子B的人抽Blends香烟。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">英国人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">黄色</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">红色</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">水</td>
<td style="text-align: center">?</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">Dunhill</td>
<td style="text-align: center">Blends</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">马</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>结合提示12可以推断住房子E的人抽Blue Master香烟、喝啤酒。住房子B的人喝茶。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">英国人</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">黄色</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">红色</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">水</td>
<td style="text-align: center">茶</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">啤酒</td>
</tr>
<tr>
<td style="text-align: center">Dunhill</td>
<td style="text-align: center">Blends</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">Blue Master</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">马</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>由提示3、13得到房子B住的是丹麦人。房子D住的是德国人，抽Prince香烟。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">丹麦人</td>
<td style="text-align: center">英国人</td>
<td style="text-align: center">德国人</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">黄色</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">红色</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">水</td>
<td style="text-align: center">茶</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">啤酒</td>
</tr>
<tr>
<td style="text-align: center">Dunhill</td>
<td style="text-align: center">Blends</td>
<td style="text-align: center">?</td>
<td style="text-align: center">Prince</td>
<td style="text-align: center">Blue Master</td>
</tr>
<tr>
<td style="text-align: center">?</td>
<td style="text-align: center">马</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>再由提示6和10确定住房子C的人抽Pall Mall香烟、养鸟。挪威人养猫。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">丹麦人</td>
<td style="text-align: center">英国人</td>
<td style="text-align: center">德国人</td>
<td style="text-align: center">?</td>
</tr>
<tr>
<td style="text-align: center">黄色</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">红色</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">水</td>
<td style="text-align: center">茶</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">啤酒</td>
</tr>
<tr>
<td style="text-align: center">Dunhill</td>
<td style="text-align: center">Blends</td>
<td style="text-align: center">Pall Mall</td>
<td style="text-align: center">Prince</td>
<td style="text-align: center">Blue Master</td>
</tr>
<tr>
<td style="text-align: center">猫</td>
<td style="text-align: center">马</td>
<td style="text-align: center">鸟</td>
<td style="text-align: center">?</td>
<td style="text-align: center">?</td>
</tr>
</tbody></table>

<p>最后结合提示2推断得到房子E住的是瑞典人，养狗。如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: center">A</th>
<th style="text-align: center">B</th>
<th style="text-align: center">C</th>
<th style="text-align: center">D</th>
<th style="text-align: center">E</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">挪威人</td>
<td style="text-align: center">丹麦人</td>
<td style="text-align: center">英国人</td>
<td style="text-align: center">德国人</td>
<td style="text-align: center">瑞典人</td>
</tr>
<tr>
<td style="text-align: center">黄色</td>
<td style="text-align: center">蓝色</td>
<td style="text-align: center">红色</td>
<td style="text-align: center">绿色</td>
<td style="text-align: center">白色</td>
</tr>
<tr>
<td style="text-align: center">水</td>
<td style="text-align: center">茶</td>
<td style="text-align: center">牛奶</td>
<td style="text-align: center">咖啡</td>
<td style="text-align: center">啤酒</td>
</tr>
<tr>
<td style="text-align: center">Dunhill</td>
<td style="text-align: center">Blends</td>
<td style="text-align: center">Pall Mall</td>
<td style="text-align: center">Prince</td>
<td style="text-align: center">Blue Master</td>
</tr>
<tr>
<td style="text-align: center">猫</td>
<td style="text-align: center">马</td>
<td style="text-align: center">鸟</td>
<td style="text-align: center">?</td>
<td style="text-align: center">狗</td>
</tr>
</tbody></table>

<p>现在，结果已经出来了：德国人养鱼。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发者被灯光蒙蔽了双眼]]></title>
    <link href="http://codemany.com/blog/developers-are-blinded-by-the-light/"/>
    <updated>2016-04-30T23:08:43+08:00</updated>
    <id>http://codemany.com/blog/developers-are-blinded-by-the-light</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://programmingzen.com/2008/12/30/developers-are-blinded-by-the-light/">http://programmingzen.com/2008/12/30/developers-are-blinded-by-the-light/</a></p>

<blockquote>
<p>Blinded by the light,<br>
revved up like a deuce,<br>
another runner in the night<br>
— Bruce Springsteen</p>
</blockquote>

<p>人类在计算几率方面是异常地差。我们有限的经验强烈地影响着我们对事件的可能性的认知。例如，我们往往极大地高估由恐怖袭击、意外枪支走火或者飓风引起死亡的几率，并且极大地低估像坠落、溺水或者流感死亡的原因。其原因是媒体经常提醒我们恐怖主义、飓风的危险或者关于孩子们被意外射杀的瞬间故事。你很少发现关于一个人溺水、坠落或者由于流感死亡的故事在国家新闻频道上被报道。新闻报道有一种倾向是耸人听闻，为的是引起人们的注意和钩住大量的观众，因此当谈到估计什么可能/不可能发生时它们促成人们的偏见。</p>

<p>同样的，在电视和报纸上过度曝光心花怒放的彩票中奖者举起他们超大的支票往往歪曲人们对通过购买一注彩票胜利的可能性的认知。对这个问题持一个严谨和客观的态度将会很快揭露中奖的几率比它们表面上看起来的要差得多。[1]</p>

<p>我注意到这种情况也正在开发/创业的世界里发生。这是一波新的淘金热。太多的开发者正在试图建立下一个大的社交网络，成为下一个Facebook（或YouTube），聚集数以百万计的人群，希望被大公司以一笔数量荒谬的钱收购。媒体喜欢这类故事。</p>

<p>因此，正在试图构建下一个Facebook的开发者类似于彩票买家。他们中的一些人会成功和获胜，但大部分人会惨遭失败。我们真正需要多少社交网络？广告支撑的模式适合某些设法吸引庞大的人群同时保持其费用最低（例如PlentyOfFish）或者被收购（例如YouTube，它也在花Google的钱）的幸运的公司。在这个过程中其他人都是在烧钱以及浪费VC的钱和诚意。</p>

<p>我担心很多开发者被灯光蒙蔽了双眼。他们对获得成功的真实几率的认知受到了媒体连续报道的百万——如果不是10亿——美元收购和成功故事的扭曲。而且有些VC鼓励这种行为，希望能在他们的投资上看到高回报。毕竟这些都是非常富有的人，他们对小规模的成功不感兴趣。</p>

<p>除了明显的浪费时间和资源之外，我认为许多开发者为了追求极不可能的结果放弃了极好的机会。用一个传统商业计划挣1,000万的可能性和按YouTube的方式挣10亿的可能性的比例，与这些金额能负担得起你的不同生活质量不成正比。如果你破产了，有3万美元的信用卡债务，或者你是中产阶级，你会发现1,000万美元可以提高的生活质量总是远远超过从1,000万到10亿能提高的。而且重要的是，我们要认识到瞄准尽管更小，但更有可能的结果不会以任何方式阻止你以后的“伟大梦想”，一旦你的第一次（或者第一次成功的）创业已经取得了成功。</p>

<p>你愿意参加20次有1次胜利机会的100万美元抽奖，还是50,000,000次有1次机会的5亿美元抽奖？理性的人会选择第1个，然而在今天，大部分创业公司都倾向于选择第2个。他们这么做是因为他们极大地高估了他们以第2个抽奖成功的几率。</p>

<p>创建一个产品并让人们为它付费。不要拿VC的钱，除非你真的不考虑依靠自己的力量启动你的公司。软件世界的主要优点之一是在开始的时候极少量的资本需要。如果你想做Web应用，可以使用软件即服务（SaaS）模型，让你的用户为你提供的软件和服务付费。你将会有更加少的受众，更少的可伸缩性问题和费用，以及有更多的收入和更大的盈利机会。Joel Spolsky（和<a href="http://www.joelonsoftware.com/items/2008/12/29.html">他那华丽的办公空间</a>）挣得数百万收入是因为他的公司在出售一套Web版的bug追踪器。你知道有多少免费的bug追踪器？在这个市场上存在多少竞争对手？我确信有许多。然而，虽然Joel的人气毫无疑问地帮助到了他的公司，但此案例仍然展示了一个企业如何通过构建一个更好的产品而成功。</p>

<p>就像David Heinemeier Hansson提及的，有无数不受关注的公司在像那样挣钱。[2]如果你把视线从聚光灯上移开，你将看到许多公司在它们所做的事情上面非常成功，尽管它们不出名或者没有制造新闻头条。它们中的有些公司实际上努力不去吸引太多的关注到它们的成功上（经常用数百万美元来衡量），以便防止竞争对手的涌现。</p>

<p>不管你的名字是不是家喻户晓，你甚至不必创建Web应用才能非常成功。你可能会想到为智能手机包括iPhone开发移动应用。但是良好的老式桌面应用让各种各样的软件公司继续发展。这就是为什么“你不能再用商业桌面软件挣钱，或者桌面应用都死了”的扭曲的认知太荒谬的原因。作为开发者/微型ISV/创业公司，你用良好设计的桌面软件挣钱的机会远远高于构建任何一款YouTube、Flickr或者Facebook复制品的机会。</p>

<p>要了解我们的认知是怎么被扭曲的，你只需要和那些公开分享它们软件销售统计的公司交谈。你将会被用相对普通的软件挣到钱的数额震惊。Balsamiq制作了一款UI草图应用卖79美元。作者成功挣到了<a href="http://www.balsamiq.com/blog/?p=424">10万美元收入在前5个月</a>，大部分是通过销售应用的桌面版本。在这个产业里他当然远非最大的赢家之一。我提到这个不过是因为它表明那是一个非常不错的想法，很好执行，当你让你的用户付费时能很快带来收入。如果你认为在5个月里10万美元很少，那我来问你有多少免费网站达成一个类似的每月收入净额。如果你正在寻找更大的收入，了解下Omni Graffle，它给<a href="http://www.omnigroup.com/applications/OmniGraffle/">Omni Group</a>赚取了数百万美元，或者把你的目光放到B2B应用上（在那个市场里某些应用卖上千美元一份）。</p>

<p>当许多开发者被灯光蒙蔽了双眼的时候，有创业想法的智者正在建立真正的软件业务。我请你走出来做同样的事情。</p>

<p>脚注</p>

<p>[1] 我在这里总结的概念被Dan Gilbert在<a href="http://www.ted.com/index.php/talks/dan_gilbert_researches_happiness.html">这个TED演讲</a>里更详细地说明了。</p>

<p>[2] David Heinemeier Hansson在<a href="http://www.37signals.com/svn/posts/1495-the-untold-millions">他的一篇帖子</a>中持类似的观点，该帖给了本文以灵感。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（12）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part12/"/>
    <updated>2016-04-26T10:20:44+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part12</id>
    <content type="html"><![CDATA[<ul>
<li>sentinel 哨兵</li>
<li>tag 标签</li>
</ul>

<p>目前我们看到的输入文件都只包含一种语言，但在实际应用中我们会遇到有些包含多种语言的常用文件格式。例如，Java的文档注释，XML文件等。这些环绕着模板表达式的文本需要不同的处理方式，它们被称为孤岛语言。</p>

<p>ANTLR有提供一个称之为“词法模型”的词法分析器特性，它让我们可以很容易地处理包含混合格式的文件。基本思路是：当词法分析器看到特殊的哨兵字符序列时，让它在模式之间来回切换。</p>

<p>XML是一个很好例子，它通常会在同一个文件中包含不同的词法结构。一个XML语法分析器会把除标签和实体引用（例如&hearts;）之外的任何东西当作文本块。当词法分析器看到<code>&lt;</code>时，它切换到“inside”模式；当它看到<code>&gt;</code>或<code>/&gt;</code>时，就切换回默认模式。以下语法展示了该特性是如何工作的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lexer grammar XMLLexer;
</span><span class='line'>
</span><span class='line'>// Default "mode": Everything OUTSIDE of a tag
</span><span class='line'>OPEN        :   '&lt;'                 -&gt; pushMode(INSIDE) ;
</span><span class='line'>COMMENT     :   '&lt;!--' .*? '--&gt;'    -&gt; skip ;
</span><span class='line'>EntityRef   :   '&' [a-z]+ ';' ;
</span><span class='line'>TEXT        :   ~('&lt;'|'&')+ ;    // match any 16 bit char minus &lt; and &
</span><span class='line'>
</span><span class='line'>// ----------------- Everything INSIDE of a tag ---------------------
</span><span class='line'>mode INSIDE;
</span><span class='line'>
</span><span class='line'>CLOSE       :   '&gt;'                 -&gt; popMode ;    // back to default mode
</span><span class='line'>SLASH_CLOSE :   '/&gt;'                -&gt; popMode ;
</span><span class='line'>EQUALS      :   '=' ;
</span><span class='line'>STRING      :   '"' .*? '"' ;
</span><span class='line'>SlashName   :   '/' Name ;
</span><span class='line'>Name        :   ALPHA (ALPHA|DIGIT)* ;
</span><span class='line'>S           :   [ \t\r\n]           -&gt; skip ;
</span><span class='line'>
</span><span class='line'>fragment
</span><span class='line'>ALPHA       :   [a-zA-Z] ;
</span><span class='line'>
</span><span class='line'>fragment
</span><span class='line'>DIGIT       :   [0-9] ;</span></code></pre></td></tr></table></div></figure>

<p>把上述语法保存为XMLLexer.g文件，然后使用包含以下内容的t.xml文件作为输入来测试它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;tools&gt;
</span><span class='line'>  &lt;tool name="ANTLR"&gt;A parser generator&lt;/tool&gt;
</span><span class='line'>&lt;/tools&gt;</span></code></pre></td></tr></table></div></figure>

<p>以下是构建和运行测试的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr XMLLexer.g
</span><span class='line'>compile *.java
</span><span class='line'>grun XML tokens -tokens t.xml</span></code></pre></td></tr></table></div></figure>

<p>这里是输出的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[@0,0:0='&lt;',&lt;1&gt;,1:0]
</span><span class='line'>[@1,1:5='tools',&lt;10&gt;,1:1]
</span><span class='line'>[@2,6:6='&gt;',&lt;5&gt;,1:6]
</span><span class='line'>[@3,7:10='\r\n  ',&lt;4&gt;,1:7]
</span><span class='line'>[@4,11:11='&lt;',&lt;1&gt;,2:2]
</span><span class='line'>[@5,12:15='tool',&lt;10&gt;,2:3]
</span><span class='line'>[@6,17:20='name',&lt;10&gt;,2:8]
</span><span class='line'>[@7,21:21='=',&lt;7&gt;,2:12]
</span><span class='line'>[@8,22:28='"ANTLR"',&lt;8&gt;,2:13]
</span><span class='line'>[@9,29:29='&gt;',&lt;5&gt;,2:20]
</span><span class='line'>[@10,30:47='A parser generator',&lt;4&gt;,2:21]
</span><span class='line'>[@11,48:48='&lt;',&lt;1&gt;,2:39]
</span><span class='line'>[@12,49:53='/tool',&lt;9&gt;,2:40]
</span><span class='line'>[@13,54:54='&gt;',&lt;5&gt;,2:45]
</span><span class='line'>[@14,55:56='\r\n',&lt;4&gt;,2:46]
</span><span class='line'>[@15,57:57='&lt;',&lt;1&gt;,3:0]
</span><span class='line'>[@16,58:63='/tools',&lt;9&gt;,3:1]
</span><span class='line'>[@17,64:64='&gt;',&lt;5&gt;,3:7]
</span><span class='line'>[@18,65:66='\r\n',&lt;4&gt;,3:8]
</span><span class='line'>[@19,67:66='&lt;EOF&gt;',&lt;-1&gt;,4:0]</span></code></pre></td></tr></table></div></figure>

<p>上面输出的每一行代表一个记号，包含记号索引、开始和结束字符、记号文本、记号类型，最后的行和字符位置则告诉我们词法分析器如何标记化输入。</p>

<p>在命令行中，XML tokens序列处通常是一个语法名字后面跟着开始规则，但在这里，我们使用语法名字后面跟着特殊的规则名字tokens来告诉TestRig应该运行词法分析器而不是语法分析器。接着使用选项-tokens打印出匹配的记号列表。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（11）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part11/"/>
    <updated>2016-04-18T18:13:27+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part11</id>
    <content type="html"><![CDATA[<p>为制作语言应用，我们必须为每个输入短语或子短语执行一些适当的代码，那样做最简单的方法是操作由语法分析器自动创建的语法分析树。</p>

<p>早些时候我们已经学习了词法分析器处理字符和把记号传递给语法分析器，然后语法分析器分析语法和创建语法分析树的相关知识。对应的ANTLR类分别是CharStream、Lexer、Token、Parser和ParseTree。连接词法分析器和语法分析器的管道被称为TokenStream。下图说明了这些类型的对象如何连接到内存中其它的对象。</p>

<p><img src="http://codemany.com/uploads/basic-data-structure.png" title="basic-data-structure" ></p>

<p>这些ANTLR数据结构分享尽可能多的数据以便节省内存的需要。上图显示在语法分析树中的叶子（记号）节点含有在记号流中记号的点。记号记录开始和结束字符在CharStream中的索引，而不是复制子串。这里没有与空格字符有关的记号，因为我们假设我们的词法分析器扔掉了空格。</p>

<p>下图显示的是ParseTree的子类RuleNode和TerminalNode以及它们所对应的子树根节点和叶子节点。RuleNode包含有方法如getChild()和getParent()等，但RuleNode并不专属于特定语法所有。为支持更好地访问在特定节点中的元素，ANTLR为每个规则生成一个RuleNode子类。下图为我们显示了赋值语句例子的子树根节点的特定类，它们是StatContext、AssignContext和ExprContext：</p>

<p><img src="http://codemany.com/uploads/parse-tree-node.png" title="parse-tree-node" ></p>

<p>因为它们记录了我们知道的通过规则对短语识别的每件事，所以这些被称为上下文对象。每个上下文对象知道被识别短语的开始和结束记号以及提供对所有短语的元素的访问。例如，AssignContext提供方法ID()和expr()去访问标志符节点和表达式子树。</p>

<p>给出了具体类型的描述，我们可以手工写代码去执行树的深度优先遍历。当我们发现和完成节点时我们可以执行任何我们想要的动作。典型的操作是诸如计算结果，更新数据结构，或者生成输出。相比每次为每个应用写同样的树遍历样板代码，我们可以使用ANTLR自动生成的树遍历机制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（10）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part10/"/>
    <updated>2016-04-08T22:11:39+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part10</id>
    <content type="html"><![CDATA[<p>一个模棱两可的短语或句子通常是指它有不止一种解释。换句话说，短语或句子能适配不止一种语法结构。要解释或转换一个短语，程序必须要能唯一地确认它的含义，这意味着我们必须提供无歧义的语法，以便生成的语法分析器能用明确的一个方法匹配每个输入短语。</p>

<p>在这里，让我们展示一些有歧义的语法以便让二义性的概念更具体。如果你以后在构建语法时陷入二义性，你可以参考本节的内容。</p>

<p>一些明显有歧义的语法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>assign
</span><span class='line'>    : ID '=' expr    // 匹配一个赋值语句，例如f()
</span><span class='line'>    | ID '=' expr    // 前面选项的精确复制
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : INT ;</span></code></pre></td></tr></table></div></figure>

<p>大多数时候二义性是不明显的，如同以下的语法，它能通过规则stat的两个选项匹配函数调用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stat
</span><span class='line'>    : expr          // 表达式语句
</span><span class='line'>    | ID '(' ')'    // 函数调用语句
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : ID '(' ')'
</span><span class='line'>    | INT
</span><span class='line'>    ;</span></code></pre></td></tr></table></div></figure>

<p>这里是两个输入f()的解释，从规则stat开始：</p>

<p><img src="http://codemany.com/uploads/fn-parse-tree.png" title="fn-parse-tree" ></p>

<p>左边的语法分析树显示f()匹配规则expr。右边的语法分析树显示f()匹配规则stat的第二个选项。</p>

<p>因为大部分语言它们的语法都被设计成无歧义的，有歧义的语法类似于编程缺陷。我们需要识别语法以便为每个输入短语提交单一选择给语法分析器。如果语法分析器发现一个有歧义的短语，它必须选一个可行的选项。ANTLR通过选择涉及决定的第一个选项解决二义性。在本例中，语法分析器将选择与左边的语法分析树有关的f()的解释。</p>

<p>二义性可以发生在词法分析器中也能发生在语法分析器中，但ANTLR可以自动地解决它们。ANTLR通过使输入字符串和语法中第一个指定的规则匹配来解决词法二义性。为了明白这是如何工作的，让我们看看对大部分编程语言都很普遍的二义性：在关键字和标志符规则中的二义性。关键字begin（后面有个非字母）也是标志符，至少词法上，因此词法分析器可以匹配b-e-g-i-n到两者中的任何一个规则。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BEGIN : 'begin' ;    // 匹配b-e-g-i-n序列，即把二义性解析为BEGIN
</span><span class='line'>ID    : [a-z]+ ;     // 匹配一个或多个任意小写字母</span></code></pre></td></tr></table></div></figure>

<p>注意，词法分析器会试着为每个记号尽可能匹配最长的字符串，这意味着输入beginner将仅匹配规则ID。词法分析器不会把beginner匹配成BEGIN随后ID匹配输入ner。</p>

<p>有时候语言的语法就明显有歧义，没有任何的语法重组能改变这个事实。例如，算术表达式的自然语法可以用两种方式解释输入像1+2*3这样，要么执行运算符从左到右，要么像大部分语言那样按优先级顺序。</p>

<p>C语言展示了另一种二义性，但我们可以使用上下文信息比如标志符如何被定义来解决它。考虑代码片段i*j;。在语法上，它看起来像是一个表达式，但它的含义或者语义依赖i是类型名还是变量。如果i是类型名，那么这个片段不是表达式，而是一个声明为指向类型i的指针变量j。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（9）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part9/"/>
    <updated>2016-03-27T07:10:05+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part9</id>
    <content type="html"><![CDATA[<ul>
<li>predication 预测</li>
<li>predict 预判</li>
<li>lookahead 预读</li>
</ul>

<p>ANTLR工具根据语法规则，例如我们刚才看到的assign，生成递归下降语法分析器。递归下降语法分析器只是递归方法的一个集合，每个规则一个方法。下降这个术语指的是分析从语法分析树的根开始向着叶子进行（记号）。我们首先调用的规则，即stat符号，成为语法分析树的根。那也就意味着对<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part8/">ANTLR 4权威参考读书笔记（8）</a>中的语法分析树来说需要调用方法stat()。这类分析更通用的术语是自顶向下分析：递归下降语法分析器仅仅是自顶向下语法分析器实现的一种。</p>

<p>要了解递归下降语法分析器是什么样子，这里是ANTLR为规则assign生成的方法（稍微整理）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// assign : ID '=' expr ;
</span><span class='line'>void assign() {    // 根据规则assign生成的方法
</span><span class='line'>    match(ID);     // 比较ID和当前输入符号然后消费
</span><span class='line'>    match('=');
</span><span class='line'>    expr();        // 通过调用expr()匹配表达式
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>递归下降语法分析器最酷的部分是通过调用方法stat()、assign()和expr()跟踪出的调用关系图反映了内部的语法分析树节点。match()的调用对应语法分析树叶子。为了在一个手工构建的语法分析器中手动构建一颗语法分析树，我们需要在每个规则方法的开始处插入“添加新子树根”操作，以及给match()一个“添加新叶子节点”操作。</p>

<p>方法assign()只是检查确保所有必要的记号存在且以正确的顺序。当语法分析器进入assign()时，它不必在多个选项之间进行选择。选项是规则定义右边的选择之一。例如，调用assign的stat规则可能有其它类型的语句。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/** 匹配起始于当前输入位置的任何语句 */
</span><span class='line'>stat
</span><span class='line'>    : assign    // 第一个选项（'|'是选项分隔符）
</span><span class='line'>    | ifstat    // 第二个选项
</span><span class='line'>    | whilestat
</span><span class='line'>    ...
</span><span class='line'>    ;</span></code></pre></td></tr></table></div></figure>

<p>stat的分析规则看起来像一条switch语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void stat() {
</span><span class='line'>    switch ( «current input token» ) {
</span><span class='line'>        CASE ID : assign(); break;
</span><span class='line'>        CASE IF : ifstat(); break;    // IF是关键字'if'的记号类型
</span><span class='line'>        CASE WHILE : whilestat(); break;
</span><span class='line'>        ...
</span><span class='line'>        default : «raise no viable alternative exception»
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>方法stat()必须通过检查下一个输入记号作出分析决定或预测。分析决定预判哪一个选项将会成功。在本例中，当看到WHILE关键字时会预判是规则stat的第三个选项。规则方法stat()然后就会调用whilestat()。你以前可能听说过术语预读记号，那只是下一个输入记号。预读记号可以是语法分析器在匹配和消费它之前嗅探的任何记号。</p>

<p>有时候，语法分析器需要一些预读记号去预判哪个选项会成功。它甚至必须考虑从当前位置直到文件结尾的所有的记号。ANTLR默默地为你处理所有的这些事情，但是对决策过程有个基本的了解是有帮助的，可以让调试生成的语法分析器更容易。</p>

<p>为更好地理解分析决定，想象有个单一入口和单一出口的迷宫，有单词写在地板上。每个沿着从入口到出口路径的单词序列表示一个句子。迷宫的结构与定义一门语言的语法规则类似。为测试一个句子在一门语言中的成员身份，我们在穿越迷宫时把句子的单词和沿着地板的单词作比较。如果通过句子的单词我们能到达出口，那么句子是有效的。</p>

<p>为了通过迷宫，我们必须在每个岔口选择一条有效路径，正如我们必须在语法分析器中选择选项。我们必须决定该走哪条路，通过把我们句子中下一个单词（们）和沿着来自每个岔口的每条路径上可见的单词比较。我们能从岔口看到的单词与预读记号类似。当每条路径以唯一的单词开始时决定是相当容易的。在规则stat中，每个选项从唯一的记号开始，因此stat()可以通过查看第一个预读记号识别选项。</p>

<p>当单词从一个岔口重叠部分开始每条路径时，语法分析器需要继续往前看，扫描可以识别选项的单词。ANTLR根据需要为每个决定自动上下调节预读数量。如果预读的结果是多条同样的到出口的路径，即当前的输入短语有多种解释。解决这样的二义性将是我们的下一个主题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[哪些书不要读]]></title>
    <link href="http://codemany.com/blog/books-not-recommended/"/>
    <updated>2016-03-25T19:48:57+08:00</updated>
    <id>http://codemany.com/blog/books-not-recommended</id>
    <content type="html"><![CDATA[<p>为什么要列这个资源？因为某些书读完之后往往会有浪费时间的感觉。为了帮助各位读者节省时间，我决定在我看过的书中选出一份合适的书单，并给出我的观点，方便读者在购书和选书时作出取舍。本清单离详尽还很远（会不断更新的），而且难免带有本人的主观偏见，所以各位如果觉得有什么错漏的话，可以在评论区给我留言。</p>

<h3 id="计算机">计算机</h3>

<h4 id="《像程序员一样思考》"><a href="https://book.douban.com/subject/24733747/">《像程序员一样思考》</a></h4>

<p>点评：这是一本教你学会如何解决编程问题的书。但实际上只有第1、第7和第8章值得一读。</p>

<h3 id="经济学">经济学</h3>

<h4 id="《郎咸平说：我们的日子为什么这么难》"><a href="https://book.douban.com/subject/5283699/">《郎咸平说：我们的日子为什么这么难》</a></h4>

<p>点评：提出的观点都是当前大家关心的问题，可惜他只是财务和公司治理专家，不是经济学专家，所提的解决方案或说的话也只是让大家心中的郁闷可以有机会发泄下，所以郎咸平的其它关于经济学的书籍你就可以不要看了。如果你想学公司财务方面的东西，那么他的论文（注意不是书，是发表过的学术论文）是一定要读的。延伸阅读是东方出版社搞的，而非郎咸平，推荐的也都是该出版社的书。</p>

<h4 id="《货币战争》"><a href="https://book.douban.com/subject/2081876/">《货币战争》</a></h4>

<p>点评：又是一本博大众眼球的书。可是一个连美联储是私有的都要当作秘密大声来讲的作者你就知道他是什么水平了，这些可是人家美联储官方网站上都黑纸白纸写出来的。其它什么断章取义、胡乱拼凑的就不要讲了，我读了一部分就看不下去，把它扔角落里去了。以前还写过一篇<a href="http://codemany.com/blog/how-currency-wars-confuse-reader-opnion">博文</a>来讲这本书是如何混淆读者视听的，只是可惜没有完成。</p>

<h4 id="《魔鬼经济学》"><a href="https://book.douban.com/subject/1473250/">《魔鬼经济学》</a></h4>

<p>点评：引用郭凯的话“虽然书里的每个故事都是基于作者的实证研究，可是他的那些实证研究没有一个不存在致命缺陷，他所有的结论事后都被更仔细的研究推翻了。”</p>

<h4 id="《13个严重的经济学谬误》"><a href="https://book.douban.com/subject/4884855/">《13个严重的经济学谬误》</a></h4>

<p>点评：这本书有点专业，且翻译的极为糟糕，好些语句和段落不甚通顺，所以部分内容读起来有种似是而非的感觉。翻译后的书名加上“经济学的真相”，完全是想用耸人听闻的标题吸引读者的注意。该书最值得看的是《前言》和《一份经济学研究方法的备忘录》，尤其是后者，可以让你了解一些经济学观点是怎么得出的。谬误1整篇文章几乎看不出是在证明命题的错误；谬误3中的印度可以用中国替代。作者的观点看似有理其实偏颇，看过郭凯的《王二的经济学故事》中关于汇率的文章就可以知道，印度出口商品换成美元结余，只劳动不消费，相当于给美国白打工；印度坚持高估美元，虽然可以保持它在与美国贸易中的顺差地位，但这种强制性的高估实际上是在用贸易补贴美国。谬误5虽然讲的有道理，但实在想不明白作者是如何得到租金限制法令的几个特征的！谬误7中房屋的建筑成本是不包含土地价格的，这种违背常识的假设会增加理解的困难。而且，设定房屋价格后再去谈论削减建筑成本不会影响房价，怎么看怎么觉得奇怪，虽然我同意他关于削减建筑成本不会降低房价的观点。谬误9的第4段翻译的极其马虎，明显有两个人翻译的痕迹，错字漏字导致边际成本傻傻的说不清。</p>

<h4 id="《一切皆有价》"><a href="https://book.douban.com/subject/6519849/">《一切皆有价》</a></h4>

<p>点评：书名标题很诱人，容易引起读者进一步阅读的欲望，可惜内容只是大量数据和案例的罗列，毫无作者自己的观点。</p>

<h3 id="书法">书法</h3>

<h4 id="《书法有法》"><a href="https://book.douban.com/subject/5247986/">《书法有法》</a></h4>

<p>点评：全书可用“转笔”二字一言蔽之。但疑惑的是，既然她这么推崇转笔，并且通过私相授受的方式从长辈手中得以传承这个笼罩着神秘、高深莫测、技巧高难、妙不可言的笔法的不传之秘，为什么她在书写时却几乎不用呢？而且文中对古人论述书法的言论的解释多有牵强附会之处。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贫富差距精简版]]></title>
    <link href="http://codemany.com/blog/economic-inequality-the-short-version/"/>
    <updated>2016-03-21T20:40:27+08:00</updated>
    <id>http://codemany.com/blog/economic-inequality-the-short-version</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://paulgraham.com/sim.html">http://paulgraham.com/sim.html</a></p>

<p>2016年1月</p>

<p><em>正如经常发生的那样——当说一些有争议的话题时，已经有我刚写的一篇贫富差距的文章的一些非常新奇的解释。我想这可能有助于澄清问题，如果我试着写一个简简单单、没有误解的版本。</em></p>

<p>很多人谈论贫富差距。几乎所有人都说贫富差距增大是坏的，贫富差距缩小是好的。</p>

<p>但是贫富差距本身并非坏事。它有多方面的原因。很多是坏的，但有些是好的。</p>

<p>例如，高入狱率和税收漏洞是增大贫富差距的不良因素。</p>

<p>但是创业同样地增大贫富差距。创业成功的创始人最终会得到值很多钱的股票。</p>

<p>而且不像高入狱率和税收漏洞，创业整体上是好的。</p>

<p>既然贫富差距本身并非坏事，我们就不应该攻击它。相反，我们应该攻击那些造成贫富差距的不良因素。</p>

<p>例如，我们应该攻击贫穷，而不是攻击贫富差距。</p>

<p>攻击贫富差距是双重错误。它会损害好的和坏的原因。但更糟的是，这是一个攻击坏的原因的无效方式。</p>

<p>除非我们直接攻击坏的贫富差距原因，否则我们不能做好解决它们的工作。</p>

<p>但是，如果我们解决了所有坏的贫富差距原因，我们依然将增加贫富差距的水平，因为正在增长的技术力量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（8）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part8/"/>
    <updated>2016-03-20T09:57:45+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part8</id>
    <content type="html"><![CDATA[<ul>
<li>syntax analyzer 语法分析器</li>
<li>syntax tree 语法树</li>
</ul>

<p>一门语言由有效的句子组成，一个句子由短语组成，一个短语由子短语和词汇符号组成。要实现一门语言，我们必须构建一个能读取句子以及对发现的短语和输入符号作出适当反应的应用。</p>

<p>这样的应用必须能识别特定语言的所有有效的句子、短语和子短语。识别一个短语意味着我们能确定短语的各种组件并能指出它与其它短语的区别。例如，我们把输入sp = 100识别为赋值语句，这就意味着我们知道sp是赋值目标以及100是要存储的值。识别赋值语句sp = 100也意味着应用认为它是明显不同于，比如说，a+b语句的。在识别后，应用将执行适当的操作，例如performAssignment(&quot;sp&quot;, 100)或者translateAssignment(&quot;sp&quot;, 100)。</p>

<p>识别语言的程序被称为语法分析器。语法指代控制语言成员的规则，每条规则都表示一个短语的结构。为了更容易地实现识别语言的程序，通常我们会把识别语言的语法分析拆解成两个相似但不同的任务或阶段。</p>

<p>把字符组成单词或符号（记号）的过程被称为词法分析或简单标记化。我们把标记输入的程序称为词法分析器。词法分析器能把相关的记号组成记号类型，例如INT（整数）、ID（标志符）、FLOAT（浮点数）等。当语法分析器只关心类型的时候，词法分析器会把词汇符号组成类型，而不是单独的符号。记号至少包含两块信息：记号类型（确定词法结构）和匹配记号的文本。</p>

<p>第二阶段是真正的语法分析器，它使用这些记号去识别句子结构，在本例中是赋值语句。默认情况下，ANTLR生成的语法分析器会构建一个称为语法分析树或语法树的数据结构，它记录语法分析器如何识别输入句子的结构和它的组件短语。下图阐明了语言识别器的基本数据流：</p>

<p><img src="http://codemany.com/uploads/basic-data-flow.png" title="basic-data-flow" ></p>

<p>语法分析树的内部节点是分组和确认它们子节点的短语名字。根节点是最抽象的短语名字，在本例中是stat（“statement”的缩写）。语法分析树的叶子节点永远是输入记号。</p>

<p>通过生成语法分析树，语法分析器给应用的其余部分提供了方便的数据结构，它们含有关于语法分析器如何把符号组成短语的完整信息。树是非常容易处理的，并且也能被程序员很好的理解。更好的是，语法分析器能自动地生成语法分析树。</p>

<p>通过操作语法分析树，需要识别相同语言的多个应用能重用同一个语法分析器。当然，你也可以选择直接在语法中嵌入特定应用的代码片段，这是语法分析器生成器传统的做法。ANTLR v4仍然允许这样做，但是语法分析树有助于更简洁更解耦的设计。</p>

<p>语法分析树对于需要多次树遍历的转换也是非常有用的，因为在计算依赖关系的阶段通常会需要前一个阶段的信息。相比于在每个阶段都要准备输入字符，我们只需要遍历语法分析树多次，更具有效率。</p>

<p>因为我们用一套规则指定短语，语法分析树子树根节点对应于语法规则名。这里的语法规则对应于上图中assign子树的第一层：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>assign : ID '=' expr ;    // 匹配赋值语句像"sp = 100"</span></code></pre></td></tr></table></div></figure>

<p>明白ANTLR如何把这些规则转换为人类可读的语法分析代码是使用和调试语法的基础，因此让我们深入地挖掘语法分析是如何工作的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（7）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part7/"/>
    <updated>2016-03-11T16:42:08+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part7</id>
    <content type="html"><![CDATA[<ul>
<li>sequence 序列</li>
</ul>

<p>在<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part6/">ANTLR 4权威参考读书笔记（6）</a>中的这些操作仅仅是提取和打印被语法分析器匹配的值，它们并没有改变语法分析器本身。</p>

<p>实际上，操作还可以影响语法分析器如何识别输入短语。这类特殊的操作被称为语义谓词。下面我们会用一个简单的例子来展示语义谓词的强大能力：动态地打开和关闭语法的某个部分。</p>

<h3 id="使用语义谓词改变语法分析">使用语义谓词改变语法分析</h3>

<p>有一个读入整数序列的语法，它的玄机是由输入的部分指定有多少个整数组合在一起，所以我们必须等到运行时才能知道有多少整数被匹配。这里是示例输入文件idata.txt的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2 9 10 3 1 2 3</span></code></pre></td></tr></table></div></figure>

<p>第1个数字表示匹配后续两个数字9和10；紧跟10的数字3表示匹配接下来的三个数字。我们的目的是设计一个语法IData.g，把9和10组合在一起，把1、2和3组合在一起。在语法上执行以下命令后显示的语法分析树能够清楚地标识出整数的分组，就像下图显示的那样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr -no-listener IData.g
</span><span class='line'>compile *.java
</span><span class='line'>grun IData file -gui idata.txt</span></code></pre></td></tr></table></div></figure>

<p><img src="http://codemany.com/uploads/idata-parse-tree.png" title="idata-parse-tree" ></p>

<p>要达成这个目标，以下语法中的关键是一个被称为语义谓词的布尔值操作：{$i &lt; $n}?。当谓词计算结果为true时，语法分析器匹配整数直到超过序列规则参数n要求的数量；当计算结果为false时，谓词让相关的选项从生成的语法分析器中“消失”。
在这个案例中，值为false的谓词让(...)*循环从规则序列里终止并返回。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar IData;
</span><span class='line'>
</span><span class='line'>file : group+ ;
</span><span class='line'>
</span><span class='line'>group: INT sequence[$INT.int] ;
</span><span class='line'>
</span><span class='line'>sequence[int n]
</span><span class='line'>locals [int i = 1;]
</span><span class='line'>     : ( {$i&lt;=$n}? INT {$i++;} )*  // match n integers
</span><span class='line'>     ;
</span><span class='line'>
</span><span class='line'>INT  : [0-9]+ ;  // match integers
</span><span class='line'>WS   : [ \t\n\r]+ -&gt; skip ;  // toss out all whitespace</span></code></pre></td></tr></table></div></figure>

<p>被语法分析器使用的规则序列的内部语法表示看起来就像下图这样：</p>

<p><img src="http://codemany.com/uploads/idata-rule-sequence.png" title="idata-rule-sequence" ></p>

<p>虚线表明谓词可以剪断那条路径，只给语法分析器留下一个选择：退出的路径。</p>

<p>虽然大部分时间我们不需要这样的微管理，但它至少让我们知道我们有这样的武器可以处理病理分析问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics中如何检测并防止垃圾流量]]></title>
    <link href="http://codemany.com/blog/how-to-detect-and-prevent-spam-traffic-in-ga/"/>
    <updated>2016-02-27T18:38:18+08:00</updated>
    <id>http://codemany.com/blog/how-to-detect-and-prevent-spam-traffic-in-ga</id>
    <content type="html"><![CDATA[<p>使用Google Analytics网站分析工具对博客进行数据统计。在经过一段时间的数据收集后，发现总是会有大量的垃圾流量存在。这里的垃圾流量，指的是对网站毫无作用且会影响网站数据报表质量的流量。通常Google Analytics中的垃圾流量可以分为以下两大类：</p>

<ul>
<li>一类被称为ghost referral，这些流量事实上从来没有来过你的网站，也不会出现在你网站服务器的日志中，但你可以在数据报表中发现它们，它们影响了Google Analytics中的数据；</li>
<li>另一类是爬虫流量，包括搜索引擎爬虫流量和非搜索引擎爬虫流量，这些流量会影响Google Analytics中各渠道流量占比及会话次数、跳出率、停留时间等关键指标。</li>
</ul>

<h3 id="垃圾流量检测方法">垃圾流量检测方法</h3>

<p>打开报告 -&gt; 受众群体 -&gt; 技术 -&gt; 广告网络 -&gt; 主机名，统计报表如下图所示：</p>

<p><img src="http://codemany.com/uploads/report-with-spam.png" title="report-with-spam" ></p>

<p>可以看到，只有181个会话的主机名是我的博客域名，即真实来到我博客的流量，也就是说有超过一半的流量属于垃圾流量。并且这些垃圾流量基本都出现了不同程度的数据异常，如新会话百分比为0%、新用户为0、跳出率为100%、平均会话时长为00:00:00。这些垃圾流量的主机名与博客域名无关，说明是第一类垃圾流量。出现这类数据的原因可能是：</p>

<ul>
<li>别的网站使用了和你网站相同的媒体资源ID，这种情况一般来说不可能，除非恶意为之；</li>
<li>有人使用Google Analytics中的Measurement Protocol做机器生成的访问流量，而你的媒体资源ID不幸躺枪。</li>
</ul>

<h3 id="使用过滤器屏蔽垃圾流量">使用过滤器屏蔽垃圾流量</h3>

<p>打开“管理”页面，在博客帐号的“所有过滤器”下添加新的过滤条件，使用预定义或自定义均可，基本配置如下所示：</p>

<p><img src="http://codemany.com/uploads/exclude-spam-filter.png" title="exclude-spam-filter" ></p>

<p>然后把“可选择的数据视图”中的选项添加到“选定的数据视图”中，保存即可。</p>

<p>过段时间后再回来查看报表，就会发现垃圾流量消失的干干净净了：</p>

<p><img src="http://codemany.com/uploads/report-without-spam.png" title="report-without-spam" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（6）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part6/"/>
    <updated>2016-02-14T16:16:37+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part6</id>
    <content type="html"><![CDATA[<ul>
<li>action 操作</li>
<li>clause 子句</li>
</ul>

<p>Listener和Visitor机制是极好的。大多数时候，我们可以用Listener或Visitor构建语言应用，它们让特定应用的代码置身于语法之外，使语法容易被阅读。</p>

<p>但有时候我们需要额外的控制权和灵活性。为了达到这个目的，我们可以直接在语法中嵌入代码片段（这些嵌入的代码片段被称为操作）。这些操作会被注入到由ANTLR工具生成的分析器代码中。这些被注入的代码在分析期间执行，并且能像其它任意代码片段一样收集信息或生成输出。结合语义谓词，我们甚至可以在运行时让我们语法的某部分消失！例如，我们可能想打开或关闭Java语法中的enum关键词，分析语言的不同版本。没有语义谓词，我们就需要两个不同版本的语法。</p>

<p>下面我们将实现一个简单的程序，读入数据行，然后打印出在特定列中找到的值。</p>

<h3 id="在语法中嵌入任意的操作">在语法中嵌入任意的操作</h3>

<p>如果我们不想付出构建语法分析树的开销，或者想要在分析期间动态地计算值或把东西打印出来，那么可以通过在语法中嵌入任意代码实现。它的比较困难的，因为我们必须明白在语法分析器上的操作的影响，以及在哪里放置这些操作。</p>

<p>为了解释嵌入在语法中的操作，让我们先来看下文件rows.txt中的数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>parrt   Terence Parr    101
</span><span class='line'>tombu   Tom Burns       020
</span><span class='line'>bke     Kevin Edgar     008</span></code></pre></td></tr></table></div></figure>

<p>这些列是由TAB分隔的，每一行用一个换行结束。匹配这种类型的输入在语法上还是相当简单的。下面是此语法文件Rows.g的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file : (row NL)+ ;  // NL is newline token: '\r'? '\n'
</span><span class='line'>row  : STUFF+ ;</span></code></pre></td></tr></table></div></figure>

<p>我们需要创建一个构造器以便我们能传递我们想要的列号（从1开始计数），所以我们需要在规则中添加一些操作来做这些事情：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar Rows;
</span><span class='line'>
</span><span class='line'>@parser::members {  // add members to generated RowsParser
</span><span class='line'>    int col;
</span><span class='line'>    public RowsParser(TokenStream input, int col) { // custom constructor
</span><span class='line'>        this(input);
</span><span class='line'>        this.col = col;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>file: (row NL)+ ;
</span><span class='line'>
</span><span class='line'>row
</span><span class='line'>locals [int i=0]
</span><span class='line'>    : ( STUFF
</span><span class='line'>        {
</span><span class='line'>        $i++;
</span><span class='line'>        if ( $i == col ) System.out.println($STUFF.text);
</span><span class='line'>        }
</span><span class='line'>      )+
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>TAB  :  '\t' -&gt; skip ;  // match but don't pass to the parser
</span><span class='line'>NL   :  '\r'? '\n' ;    // match and pass to the parser
</span><span class='line'>STUFF:  ~[\t\r\n]+ ;    // match any chars except tab, newline</span></code></pre></td></tr></table></div></figure>

<p>在上述语法中，操作是被花括号括起来的代码片段；members操作的代码将会被注入到生成的语法分析器类中的成员区；在规则row中的操作访问的$i是由locals子句定义的局部变量，该操作也用$STUFF.text获取最近匹配的STUFF记号的文本内容。STUFF词法规则匹配任何非TAB或换行的字符，这意味着在列中可以有空格字符。</p>

<p>现在，是时候去思考如何使用定制的构造器传递一个列号给语法分析器，并且告诉语法分析器不要构建语法分析树了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Rows {
</span><span class='line'>
</span><span class='line'>    public static void main(String[] args) throws Exception {
</span><span class='line'>        ANTLRInputStream input = new ANTLRInputStream(System.in);
</span><span class='line'>        RowsLexer lexer = new RowsLexer(input);
</span><span class='line'>        CommonTokenStream tokens = new CommonTokenStream(lexer);
</span><span class='line'>        int col = Integer.valueOf(args[0]);
</span><span class='line'>        RowsParser parser = new RowsParser(tokens, col);    // pass column number!
</span><span class='line'>        parser.setBuildParseTree(false);    // don't waste time bulding a tree
</span><span class='line'>        parser.file();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>现在，让我们核实下我们的语法分析器能否正确匹配一些示例输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr -no-listener Rows.g  # don't need the listener
</span><span class='line'>compile *.java
</span><span class='line'>run Rows 1 &lt; rows.txt</span></code></pre></td></tr></table></div></figure>

<p>这时你会看到rows.txt文件的第1列内容被输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>parrt
</span><span class='line'>tombu
</span><span class='line'>bke</span></code></pre></td></tr></table></div></figure>

<p>如果将上面命令中的1换成2，你会看到rows.txt文件的第2列内容被输出；如果换成3，那么rows.txt文件的第3列内容将会被输出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一夜成名：这需要好几年时间]]></title>
    <link href="http://codemany.com/blog/overnight-success-it-takes-years/"/>
    <updated>2016-01-23T09:36:05+08:00</updated>
    <id>http://codemany.com/blog/overnight-success-it-takes-years</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://blog.codinghorror.com/overnight-success-it-takes-years/">http://blog.codinghorror.com/overnight-success-it-takes-years/</a></p>

<p>Gmail的原首席开发者Paul Buchheit说过<a href="http://paulbuchheit.blogspot.com/2009/01/overnight-success-takes-long-time.html">Gmail的成功花了很长时间</a>：</p>

<blockquote>
<p>我们在2001年8月开始开发Gmail。很长一段时间里，几乎每个人都不喜欢它。有些人使用它因为搜索，但他们有着无尽地抱怨。很多人认为我们应该杀死这个项目，又或者重启它作为一个有本地客户端软件的企业产品，而不是这个疯狂的JavaScript东西。甚至在2004年4月1日当我们到达发布它的那个点时——在开始开发它两年半之后——Google内部的很多人都在预测它的死亡。他们觉得这个产品太怪异了，并且没有人想去更换电子邮件服务。我被告知我们永远不会得到100万用户。</p>

<p>但在我们发布后，除了因为各种原因讨厌它的人，反响出人意外地好。尽管如此，它还是经常被描述为“小众产品（niche）”和“不会被硅谷之外的人使用”。</p>

<p>现在，在我们开始开发Gmail差不多七年半后，我看到一篇<a href="http://www.ft.com/cms/s/0/18cdabec-d8fb-11dd-ab5f-000077b07658.html">文章</a>叙述Gmail如何在去年增长40%，相比Yahoo的2%和Hotmail的-7%。</p>
</blockquote>

<p>Paul已经离开Google，现在在从事他自己的创业公司FriendFeed（译者注：FriendFeed已于2015年4月9日关闭）。许多业内人士对待FriendFeed不太友善。Stowe Boyd甚至竟然称FriendFeed就是个失败（译者注：Stowe Boyd评论FriendFeed的文章已经被删除了）。Paul从容应对批评：</p>

<blockquote>
<p>创建一个重要的新产品通常需要时间。FriendFeed需要继续追求创新，就像Gmail六年以前做的那样。FriendFeed显示了很好的前景，但它仍然是一个“在制品”。</p>

<p>我的预期是很大的成功需要好几年时间，没有许多反例（除了YouTube，但现在它其实还没有到达挣成堆钱的那个点）。Facebook成长非常快，但它此时已经五岁了。Larry和Sergey 开始开发Google在1996年——当我开始在那里是1999年，几乎没人听说过它。</p>

<p>一夜成名的观念非常具有误导性，而且相当有害。如果你开始新的东西，那会是一次长途旅行。没有借口去行动缓慢。相反，你必须行动的非常快，否则你将不会到达，因为它是一次长途旅行！这也是为什么节俭是重要的——你不想<a href="http://paulbuchheit.blogspot.com/2008/03/ideas-vs-judgment-and-execution_9197.html">饿死在半山腰上</a>。</p>
</blockquote>

<p>Stowe Boyd用一张Twitter和FriendFeed的流量对比图说明他关于FriendFeed的观点。这里请允许我把我自己的数据也加到Boyd先生的图上：</p>

<p><img src="http://codemany.com/uploads/three-traffic-comparison.png" title="three-traffic-comparison" ></p>

<p>我觉得Paul的态度令人耳目一新，因为对于我们的创业公司<a href="http://stackoverflow.com/">Stack Overflow</a>我也采用同样的态度。我没有期望或甚至渴望一夜成名。我计划的是花上几年的时间去打磨，持续地、稳步地提升。</p>

<p>这项商业计划和我的职业生涯发展计划没有太多区别：成功需要好几年时间。当我说年的时候，我是认真的！不是在说像“更聪明地工作，而不是更努力地工作”那样的陈词滥调。我是在说真正的日历年。你知道的，12个月的，365天的那种。你必须花上你生命的多年时间孜孜不倦地钻研这些东西，每天醒来后一遍又一遍地做它。每天练习和收集反馈去不断变得更好。有时它可能是不愉快的，甚至偶尔是很无趣的，但它是必需的。</p>

<p>这几乎不是唯一的或有趣的建议。Peter Norvig的经典<a href="http://www.norvig.com/21-days.html">用十年自学编程</a>也谈到过这个话题，而且讲得比我更好。</p>

<blockquote>
<p>研究人员发现在任何领域都需要大约10年时间才能培养出专业技能，包括国际象棋、音乐作曲、电报操作、绘画、钢琴演奏、游泳、网球、以及神经心理学和拓扑学的研究。关键是刻意（deliberative）练习：不仅仅是一次又一次地做它，而是用略微超出你当前能力的任务来挑战自己，尝试它，在做时和做后分析你的表现，并且纠正所有错误。然后重复。再重复。</p>

<p>似乎没有真正的捷径：即使是莫扎特，4岁的音乐天才，在他开始创作世界级音乐前也花了超过13年。甲壳虫乐队似乎横空出世以一连串的冠军歌曲（a string of #1 hits），并且在1964年出现在《埃德·沙利文秀》。但其实自1957年以来他们就已经在利物浦和汉堡的小俱乐部里演出了，虽然他们在早期有广泛的吸引力，但他们最最成功的《Sgt. Pepper&#39;s Lonely Hearts Club Band》发布在1967年。</p>
</blockquote>

<p>老实说，我期待着有一天醒来，从现在起的2年或3年之后，做着和今天我在做的完全相同的事：为Stack Overflow编写代码，增加另一个微小的改进或有用的功能。很明显我们想要成功。但在某种程度上，成功是无关紧要的，因为这个过程本身是令人满意的。每天醒来做你喜欢的事情——甚至更好的是，周围社区的人也喜欢它——这本身就是一种奖赏。尽管有着成吨的工作要做。</p>

<p>博客也不例外。我经常给有抱负的博客作者<a href="http://blog.codinghorror.com/how-to-achieve-ultimate-blog-success-in-one-easy-step/">这个很重要的建议</a>：如果你开始你的博客，在六个月内别指望有人来读它。如果你这样做，我可以保证你将会非常失望。 可是，如果你能坚持发布计划并且每周写1篇或2篇高质量的博文一整年……然后，也只有到那个时候，你才可以看到稀稀落落的读者。我开始这个博客于2004年，花了整整3年的时间，每周写3到5篇博文，才使得它在软件开发社区内流行开来。</p>

<p>我非常期望在这个博客上一直写，以一种形式或另一种，用我的余生。它是我是谁的一部分。至于那种戏剧性的成名方式，我不抱有任何幻想：归根结底，<a href="http://www.gocomics.com/pearlsbeforeswine/2008/11/16">我只是在网上写博客的那个人</a>。</p>

<p><img src="http://codemany.com/uploads/pearls-before-swine.png" title="pearls-before-swine" ></p>

<p>那样挺好的对我来说。我从来没有说过我是聪明的。</p>

<p>不管你最终获得多少读者，或页面浏览量，或任何我们这周正在度量的<a href="http://blog.codinghorror.com/the-high-score-table/">高分排行榜</a> ，请记住，你正在做的事情是值得去做的，因为——嗯——你正在做的事情是值得去做的。</p>

<p>如果你一直这样坚持下去，谁知道会发生什么？很有可能某一天你醒来，发现自己一夜成名了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（5）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part5/"/>
    <updated>2016-01-22T21:18:51+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part5</id>
    <content type="html"><![CDATA[<p>在<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3/">ANTLR 4权威参考读书笔记（3）</a>以及<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part4/">ANTLR 4权威参考读书笔记（4）</a>中我们分别用Visitor和Listener机制实现了计算器的解释执行和编译执行。但并没有给出这两种机制的太多细节，这次就来详细地讲讲。</p>

<p>ANTLR在它的运行库中为两种树遍历机制提供支持。默认情况下，ANTLR生成一个语法分析树Listener接口，在其中定义了回调方法，用于响应被内建的树遍历器触发的事件。</p>

<p>在Listener和Visitor机制之间最大的不同是：Listener方法被ANTLR提供的遍历器对象调用；而Visitor方法必须显式的调用visit方法遍历它们的子节点，在一个节点的子节点上如果忘记调用visit方法就意味着那些子树没有得到访问。</p>

<p>让我们首先从Listener开始。在我们了解Listener之后，我们也将看到ANTLR如何生成遵循Visitor设计模式的树遍历器。</p>

<h3 id="语法分析树listener">语法分析树Listener</h3>

<p>在Calc.java中有这样两行代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ParseTreeWalker walker = new ParseTreeWalker();
</span><span class='line'>walker.walk(new DirectiveListener(), tree);</span></code></pre></td></tr></table></div></figure>

<p>类ParseTreeWalker是ANTLR运行时提供的用于遍历语法分析树和触发Listener中回调方法的树遍历器。ANTLR工具根据Calc.g中的语法自动生成ParseTreeListener接口的子接口CalcListener和默认实现CalcBaseListener，其中含有针对语法中每个规则的enter和exit方法。DirectiveListener是我们编写的继承自CalcBaseListener的包含特定应用代码的实现，把它传递给树遍历器后，树遍历器在遍历语法分析树时就会触发DirectiveListener中的回调方法。</p>

<p><img src="http://codemany.com/uploads/calc-listener-hierachy.png" title="calc-listener-hierachy" ></p>

<p>下图左边的语法分析树显示ParseTreeWalker执行了一次深度优先遍历，由粗虚线表示，箭头方向代表遍历方向。右边显示的是语法分析树的完整调用序列，它们由ParseTreeWalker触发调用。当树遍历器遇到规则assign的节点时，它触发enterAssign()并且给它传递AssignContext语法分析树节点。在树遍历器访问完assign节点的所有子节点后，它触发exitAssign()。</p>

<p><img src="http://codemany.com/uploads/listener-call-sequence.png" title="listener-call-sequence" ></p>

<p>Listener机制的强大之处在于所有都是自动的。我们不必要写语法分析树遍历器，而且我们的Listener方法也不必要显式地访问它们的子节点。</p>

<h3 id="语法分析树visitor">语法分析树Visitor</h3>

<p>有些情况下，我们实际想要控制的是遍历本身，在那里我们可以显式地调用visit方法去访问子树节点。选项-visitor告诉ANTLR工具从相应语法生成Visitor接口和默认实现，其中含有针对语法中每个规则的visit方法。</p>

<p>下图是我们熟悉的Visitor模式操作在语法分析树上。左边部分的粗虚线表示语法分析树的深度优先遍历，箭头方向代表遍历方向。右边部分指明Visitor中的方法调用序列。</p>

<p><img src="http://codemany.com/uploads/visitor-call-sequence.png" title="visitor-call-sequence" ></p>

<p>下面是Calc.java中的两行代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EvalVisitor eval = new EvalVisitor();
</span><span class='line'>// To start walking the parse tree
</span><span class='line'>eval.visit(tree);</span></code></pre></td></tr></table></div></figure>

<p>我们首先初始化自制的树遍历器EvalVisitor，然后调用visit()去访问整棵语法分析树。ANTLR运行时提供的Visitor支持代码会在看到根节点时调用visitProg()。在那里，visitProg()会把子树作为参数调用visit方法继续遍历，如此等等。</p>

<p><img src="http://codemany.com/uploads/calc-visitor-hierachy.png" title="calc-visitor-hierachy" ></p>

<p>ANTLR自动生成的Visitor接口和默认实现可以让我们为Visitor方法编写自己的实现，让我们避免必须覆写接口中的每个方法，让我们仅仅聚焦在我们感兴趣的方法上。这种方法减少了我们学习ANTLR必须要花费的时间，让我们回到我们所熟悉的编程语言领域。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（4）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part4/"/>
    <updated>2016-01-18T15:06:54+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part4</id>
    <content type="html"><![CDATA[<p>在<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3/">ANTLR 4权威参考读书笔记（3）</a>中的计算器是以解释的方式执行的，现在我们想要把它转换成以编译的方式执行。编译执行和解释执行相比，需要依赖于特定的目标机器。在这里我们假设有一台这样的机器，它用堆栈进行运算，支持如下表所示的几种指令：</p>

<table><thead>
<tr>
<th>指令</th>
<th>说明</th>
<th>操作数个数</th>
<th>用途</th>
</tr>
</thead><tbody>
<tr>
<td>LDV</td>
<td>Load Variable</td>
<td>1</td>
<td>变量入栈</td>
</tr>
<tr>
<td>LDC</td>
<td>Load Constant</td>
<td>1</td>
<td>常量入栈</td>
</tr>
<tr>
<td>STR</td>
<td>Store Value</td>
<td>1</td>
<td>栈顶一个元素存入指定变量</td>
</tr>
<tr>
<td>ADD</td>
<td>Add</td>
<td>0</td>
<td>栈顶两个元素出栈，求和后入栈</td>
</tr>
<tr>
<td>SUB</td>
<td>Subtract</td>
<td>0</td>
<td>栈顶两个元素出栈，求差后入栈</td>
</tr>
<tr>
<td>MUL</td>
<td>Multiply</td>
<td>0</td>
<td>栈顶两个元素出栈，求积后入栈</td>
</tr>
<tr>
<td>DIV</td>
<td>Divide</td>
<td>0</td>
<td>栈顶两个元素出栈，求商后入栈</td>
</tr>
<tr>
<td>RET</td>
<td>Return</td>
<td>0</td>
<td>栈顶一个元素出栈，计算结束</td>
</tr>
</tbody></table>

<p>做这个最简单的方法是使用ANTLR的语法分析树Listener机制实现DirectiveListener类，然后它通过监听来自树遍历器触发的事件，输出对应的机器指令。</p>

<p>Listener机制的优势是我们不必要自己去做任何树遍历，甚至我们不必要知道遍历语法分析树的运行时如何调用我们的方法，我们只要知道我们的DirectiveListener类得到通知，在与语法规则匹配的短语开始和结束时。这种方法减少了我们学习ANTLR必须要花费的时间，让我们回到我们所熟悉的编程语言领域。</p>

<p>这里不需要创建新的语法规则，还是继续沿用前文Calc.g所包含的语法，标签也要保留：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar Calc;
</span><span class='line'>
</span><span class='line'>prog
</span><span class='line'>    : stat+
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>stat
</span><span class='line'>    : expr                   # printExpr
</span><span class='line'>    | ID '=' expr            # assign
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : expr op=(MUL|DIV) expr # MulDiv
</span><span class='line'>    | expr op=(ADD|SUB) expr # AddSub
</span><span class='line'>    | INT                    # int
</span><span class='line'>    | ID                     # id
</span><span class='line'>    | '(' expr ')'           # parens
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>MUL : '*' ;
</span><span class='line'>
</span><span class='line'>DIV : '/' ;
</span><span class='line'>
</span><span class='line'>ADD : '+' ;
</span><span class='line'>
</span><span class='line'>SUB : '-' ;
</span><span class='line'>
</span><span class='line'>ID  : [a-zA-Z]+ ;
</span><span class='line'>
</span><span class='line'>INT : [0-9]+ ;
</span><span class='line'>
</span><span class='line'>WS  : [ \t\r\n]+ -&gt; skip ;    // toss out whitespace</span></code></pre></td></tr></table></div></figure>

<p>然后，我们可以运行ANTLR工具：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr Calc.g</span></code></pre></td></tr></table></div></figure>

<p>它会生成后缀名为tokens和java的六个文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Calc.tokens         CaclLexer.java          CalcParser.java
</span><span class='line'>CalcLexer.tokens    CalcBaseListener.java   CalcListener.java</span></code></pre></td></tr></table></div></figure>

<p>正如这里我们看到的，ANTLR会为我们自动生成Listener基础设施。其中CalcListener是语法和Listener对象之间的关键接口，描述我们可以实现的回调方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface CalcListener extends ParseTreeListener {
</span><span class='line'>  void enterProg(CalcParser.ProgContext ctx);
</span><span class='line'>  void exitProg(CalcParser.ProgContext ctx);
</span><span class='line'>  void enterPrintExpr(CalcParser.PrintExprContext ctx);
</span><span class='line'>    ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>CalcBaseListener则是ANTLR生成的一组空的默认实现。ANTLR内建的树遍历器会去触发在Listener中像enterProg()和exitProg()这样的一串回调方法，如同它对语法分析树执行了一次深度优先遍历。为响应树遍历器触发的事件，我们的DirectiveListener需要继承CalcBaseListener并实现一些方法。我们不需要实现全部的接口方法，我们也不需要去覆写每个enter和exit方法，我们只需要去覆写那些我们感兴趣的回调方法。</p>

<p>在本例中，我们需要通过覆写6个方法对6个事件——当树遍历器exit那些有标签的选项时触发——作出响应。我们的基本策略是当这些事件发生时打印出已转换的指令。以下是完整的实现代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class DirectiveListener extends CalcBaseListener {
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitPrintExpr(CalcParser.PrintExprContext ctx) {
</span><span class='line'>        System.out.println("RET\n");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitAssign(CalcParser.AssignContext ctx) {
</span><span class='line'>        String id = ctx.ID().getText();
</span><span class='line'>        System.out.println("STR " + id);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitMulDiv(CalcParser.MulDivContext ctx) {
</span><span class='line'>        if (ctx.op.getType() == CalcParser.MUL) {
</span><span class='line'>            System.out.println("MUL");
</span><span class='line'>        } else {
</span><span class='line'>            System.out.println("DIV");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitAddSub(CalcParser.AddSubContext ctx) {
</span><span class='line'>        if (ctx.op.getType() == CalcParser.ADD) {
</span><span class='line'>            System.out.println("ADD");
</span><span class='line'>        } else {
</span><span class='line'>            System.out.println("SUB");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitId(CalcParser.IdContext ctx) {
</span><span class='line'>        System.out.println("LDV " + ctx.ID().getText());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitInt(CalcParser.IntContext ctx) {
</span><span class='line'>        System.out.println("LDC " + ctx.INT().getText());
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>为了让它运行起来，余下我们唯一需要做的事是创建一个主程序去调用它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Calc {
</span><span class='line'>
</span><span class='line'>    public static void main(String[] args) throws Exception {
</span><span class='line'>        InputStream is = args.length &gt; 0 ? new FileInputStream(args[0]) : System.in;
</span><span class='line'>
</span><span class='line'>        ANTLRInputStream input = new ANTLRInputStream(is);
</span><span class='line'>        CalcLexer lexer = new CalcLexer(input);
</span><span class='line'>        CommonTokenStream tokens = new CommonTokenStream(lexer);
</span><span class='line'>        CalcParser parser = new CalcParser(tokens);
</span><span class='line'>        ParseTree tree = parser.prog();
</span><span class='line'>
</span><span class='line'>        ParseTreeWalker walker = new ParseTreeWalker();
</span><span class='line'>        walker.walk(new DirectiveListener(), tree);
</span><span class='line'>
</span><span class='line'>        // print LISP-style tree
</span><span class='line'>        System.out.println(tree.toStringTree(parser));
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>这个程序和前文Calc.java中的代码极度相似，区别只在12-13行。这两行代码负责创建树遍历器，然后让树遍历器去遍历那颗从语法分析器返回的语法分析树，当树遍历器遍历时，它就会触发调用到我们的DirectiveListener中实现的方法。此外，通过传入一个不同的Listener实现我们能简单地生成完全不同的输出。Listener机制有效地隔离了语法和语言应用，使语法可以被其它应用再次使用。</p>

<p>现在一切完备，让我们尝试着去编译和运行它吧！下面是完整的命令序列：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile *.java
</span><span class='line'>run Calc calc.txt</span></code></pre></td></tr></table></div></figure>

<p>编译的输出结果如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LDC 19
</span><span class='line'>RET
</span><span class='line'>
</span><span class='line'>LDC 5
</span><span class='line'>STR a
</span><span class='line'>LDC 6
</span><span class='line'>STR b
</span><span class='line'>LDV a
</span><span class='line'>LDV b
</span><span class='line'>LDC 2
</span><span class='line'>MUL
</span><span class='line'>ADD
</span><span class='line'>RET
</span><span class='line'>
</span><span class='line'>LDC 1
</span><span class='line'>LDC 2
</span><span class='line'>ADD
</span><span class='line'>LDC 3
</span><span class='line'>MUL
</span><span class='line'>RET</span></code></pre></td></tr></table></div></figure>

<p>代码下载：<a href="https://github.com/dohkoos/antlr4-calculator">https://github.com/dohkoos/antlr4-calculator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（3）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3/"/>
    <updated>2016-01-05T16:48:16+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3</id>
    <content type="html"><![CDATA[<ul>
<li>lexical 词法的</li>
<li>alternative 选项</li>
<li>notation 表示法</li>
<li>directive 指令</li>
<li>label 标签</li>
</ul>

<p>了解ANTLR最好的方法就是实例。构建一个简单的计算器是个不错的主意。为了使它容易理解且保持简单，我们将只允许基本的算术运算符（加、减、乘、除）、括号表达式、整数和变量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar Calc;
</span><span class='line'>
</span><span class='line'>prog
</span><span class='line'>    : stat+
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>stat
</span><span class='line'>    : expr
</span><span class='line'>    | ID '=' expr
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : expr ('*'|'/') expr
</span><span class='line'>    | expr ('+'|'-') expr
</span><span class='line'>    | INT
</span><span class='line'>    | ID
</span><span class='line'>    | '(' expr ')'
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>ID  : [a-zA-Z]+ ;
</span><span class='line'>
</span><span class='line'>INT : [0-9]+ ;
</span><span class='line'>
</span><span class='line'>WS  : [ \t\r\n]+ -&gt; skip ;    // toss out whitespace</span></code></pre></td></tr></table></div></figure>

<p>在上述的语法中，程序是由空格（换行符也被当作空格）终止的语句序列，语句可以是表达式或者赋值。那些以小写字母开头的像stat和expr是语法规则；由大写字母开头的诸如ID和INT为词法规则，用于识别标志符和整数这样的记号。我们用“|”分隔规则的选项，我们也可以用“()”把符号分组成子规则。例如，子规则<code>(&#39;*&#39;|&#39;/&#39;)</code>匹配乘法符号或者除法符号。</p>

<p>ANTLR v4最重要的新特性是它有能力处理（大多数类型的）左递归规则。例如，规则expr前两个选项就在左边缘递归地调用了expr自身。这种指定算术表达式表示法的方法比那些典型的自顶向下语法分析器策略更容易。当然，在这种策略下，我们需要定义多个规则，每个运算符优先级一个规则。</p>

<p>记号定义的表示法对那些有正则表达式经验的应该很熟悉。唯一不寻常的是在WS规则上的<code>-&gt; skip</code>指令，它告诉词法分析器去匹配但丢弃空格，不要把它们放到记号流中，这样在语法分析树上空格就不会有对应的记号。（每个可能的输入字符都必须被至少一个词法规则匹配。）我们通过使用形式化的ANTLR表示法避免捆绑语法到某个特定的目标语言，而不是在语法中插入任意代码片段来告诉词法分析器去忽略。</p>

<p>这里是一些用来评估所有语法特性的测试序列：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>193
</span><span class='line'>a=5
</span><span class='line'>b=6
</span><span class='line'>a+b*2
</span><span class='line'>(1+2)*3</span></code></pre></td></tr></table></div></figure>

<p>把它们放入文件calc.txt中，然后执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr Calc.g
</span><span class='line'>compile *.java
</span><span class='line'>grun Calc prog -gui calc.txt</span></code></pre></td></tr></table></div></figure>

<p>TestRig会弹出一个显示语法分析树的窗口：</p>

<p><img src="http://codemany.com/uploads/calc-parse-tree.png" title="calc-parse-tree" ></p>

<h3 id="使用visitor模式计算结果">使用Visitor模式计算结果</h3>

<p>为了给前面的算术表达式语法分析器计算出结果，我们还需要做些其它的事情。</p>

<p>ANTLR v4鼓励我们保持语法的整洁，使用语法分析树Visitor和其它遍历器来实现语言应用。不过在接触这些之前，我们需要对语法做些修改。</p>

<p>首先，我们需要用标签标明规则的选项，标签可以是和规则名没有冲突的任意标志符。如果选项上没有标签，ANTLR只会为每个规则生成一个visit方法。</p>

<p>在本例中，我们希望为每个选项生成一个不同的visit方法，以便每种输入短语都能得到不同的事件。在新的语法中，标签出现在选项的右边缘，且以“#”符号开头：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stat
</span><span class='line'>    : expr                   # printExpr
</span><span class='line'>    | ID '=' expr            # assign
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : expr op=(MUL|DIV) expr # MulDiv
</span><span class='line'>    | expr op=(ADD|SUB) expr # AddSub
</span><span class='line'>    | INT                    # int
</span><span class='line'>    | ID                     # id
</span><span class='line'>    | '(' expr ')'           # parens
</span><span class='line'>    ;</span></code></pre></td></tr></table></div></figure>

<p>接下来，让我们为运算符字面量定义一些记号名字，以便以后可以在visit方法中引用作为Java常量的它们：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MUL : '*' ;
</span><span class='line'>
</span><span class='line'>DIV : '/' ;
</span><span class='line'>
</span><span class='line'>ADD : '+' ;
</span><span class='line'>
</span><span class='line'>SUB : '-' ;</span></code></pre></td></tr></table></div></figure>

<p>现在，我们有了一个增强型的语法。接下来要做的事情是实现一个EvalVisitor类，它通过遍历表达式语法分析树计算和返回值。</p>

<p>执行下面的命令，让ANTLR生成Visitor接口和它的默认实现，其中-no-listener参数是告诉ANTLR不再生成Listener相关的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr -no-listener -visitor Calc.g</span></code></pre></td></tr></table></div></figure>

<p>所有被标签标明的选项在生成的Visitor接口中都定义了一个visit方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface CalcVisitor&lt;T&gt; extends ParseTreeVisitor&lt;T&gt; {
</span><span class='line'>    T visitProg(CalcParser.ProgContext ctx);
</span><span class='line'>    T visitPrintExpr(CalcParser.PrintExprContext ctx);
</span><span class='line'>    T visitAssign(CalcParser.AssignContext ctx);
</span><span class='line'>    ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>接口定义使用的是Java泛型，visit方法的返回值为参数化类型，这允许我们根据表达式计算返回值的类型去设定实现的泛型参数。因为表达式的计算结果是整型，所以我们的EvalVisitor应该继承<code>CalcBaseVisitor&lt;Integer&gt;</code>类。为计算语法分析树的每个节点，我们需要覆写与语句和表达式选项相关的方法。这里是全部的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class EvalVisitor extends CalcBaseVisitor&lt;Integer&gt; {
</span><span class='line'>    /** "memory" for our calculator; variable/value pairs go here */
</span><span class='line'>    Map&lt;String, Integer&gt; memory = new HashMap&lt;String, Integer&gt;();
</span><span class='line'>
</span><span class='line'>    /** ID '=' expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitAssign(CalcParser.AssignContext ctx) {
</span><span class='line'>        String id = ctx.ID().getText();  // id is left-hand side of '='
</span><span class='line'>        int value = visit(ctx.expr());   // compute value of expression on right
</span><span class='line'>        memory.put(id, value);           // store it in our memory
</span><span class='line'>        return value;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitPrintExpr(CalcParser.PrintExprContext ctx) {
</span><span class='line'>        Integer value = visit(ctx.expr()); // evaluate the expr child
</span><span class='line'>        System.out.println(value);         // print the result
</span><span class='line'>        return 0;                          // return dummy value
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** INT */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitInt(CalcParser.IntContext ctx) {
</span><span class='line'>        return Integer.valueOf(ctx.INT().getText());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** ID */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitId(CalcParser.IdContext ctx) {
</span><span class='line'>        String id = ctx.ID().getText();
</span><span class='line'>        if ( memory.containsKey(id) ) return memory.get(id);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** expr op=('*'|'/') expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitMulDiv(CalcParser.MulDivContext ctx) {
</span><span class='line'>        int left = visit(ctx.expr(0));  // get value of left subexpression
</span><span class='line'>        int right = visit(ctx.expr(1)); // get value of right subexpression
</span><span class='line'>        if ( ctx.op.getType() == CalcParser.MUL ) return left * right;
</span><span class='line'>        return left / right; // must be DIV
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** expr op=('+'|'-') expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitAddSub(CalcParser.AddSubContext ctx) {
</span><span class='line'>        int left = visit(ctx.expr(0));  // get value of left subexpression
</span><span class='line'>        int right = visit(ctx.expr(1)); // get value of right subexpression
</span><span class='line'>        if ( ctx.op.getType() == CalcParser.ADD ) return left + right;
</span><span class='line'>        return left - right; // must be SUB
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** '(' expr ')' */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitParens(CalcParser.ParensContext ctx) {
</span><span class='line'>        return visit(ctx.expr()); // return child expr's value
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>以前开发和测试语法都是使用的TestRig，这次我们试着编写计算器的主程序来启动代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Calc {
</span><span class='line'>
</span><span class='line'>    public static void main(String[] args) throws Exception {
</span><span class='line'>        InputStream is = args.length &gt; 0 ? new FileInputStream(args[0]) : System.in;
</span><span class='line'>
</span><span class='line'>        ANTLRInputStream input = new ANTLRInputStream(is);
</span><span class='line'>        CalcLexer lexer = new CalcLexer(input);
</span><span class='line'>        CommonTokenStream tokens = new CommonTokenStream(lexer);
</span><span class='line'>        CalcParser parser = new CalcParser(tokens);
</span><span class='line'>        ParseTree tree = parser.prog();
</span><span class='line'>
</span><span class='line'>        EvalVisitor eval = new EvalVisitor();
</span><span class='line'>        // 开始遍历语法分析树
</span><span class='line'>        eval.visit(tree);
</span><span class='line'>
</span><span class='line'>        System.out.println(tree.toStringTree(parser));
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>创建一个运行主程序的脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>java -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH $*</span></code></pre></td></tr></table></div></figure>

<p>把它保存为run.sh后，执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile *.java
</span><span class='line'>run Calc calc.txt</span></code></pre></td></tr></table></div></figure>

<p>然后你就会看到文本形式的语法分析树以及计算结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>193
</span><span class='line'>17
</span><span class='line'>9
</span><span class='line'>(prog (stat (expr 193)) (stat a = (expr 5)) (stat b = (expr 6))
</span><span class='line'> (stat (expr (expr a) + (expr (expr b) * (expr 2)))) (stat (expr
</span><span class='line'> (expr ( (expr (expr 1) + (expr 2)) )) * (expr 3))))</span></code></pre></td></tr></table></div></figure>

<p>代码下载：<a href="https://github.com/dohkoos/antlr4-calculator">https://github.com/dohkoos/antlr4-calculator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（2）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part2/"/>
    <updated>2016-01-01T16:35:41+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part2</id>
    <content type="html"><![CDATA[<ul>
<li>token 记号</li>
<li>ambiguity 二义性</li>
</ul>

<h3 id="安装antlr">安装ANTLR</h3>

<p>ANTLR是由Java写成的，所以在安装ANTLR前必须保证已经安装有Java 1.6或以上版本。你可以到 <a href="http://www.antlr.org/download.html">http://www.antlr.org/download.html</a> 下载ANTLR的最新版本，或者也可使用命令行工具。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -O http://www.antlr.org/download/antlr-4.5.1-complete.jar</span></code></pre></td></tr></table></div></figure>

<p>antlr-4.5.1-complete.jar包含运行ANTLR工具的所有必要依赖，以及编译和执行由ANTLR生成的识别器所需的运行库。ANTLR工具将由语法文件描述的语法转换成识别程序，识别程序利用ANTLR运行库中的某些支持类识别输入的语句。该jar包还包含两个支持库：<a href="https://github.com/abego/treelayout">TreeLayout（一个复杂的树布局库）</a>和<a href="http://www.stringtemplate.org/">StringTemplate（一个用于生成代码和其它结构化文本的模板引擎）</a>。</p>

<p>现在来测试下ANTLR工具是否工作正常：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar antlr-4.5.1-complete.jar  # 启动org.antlr.v4.Tool</span></code></pre></td></tr></table></div></figure>

<p>如果正常会看到以下帮助信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ANTLR Parser Generator  Version 4.5.1
</span><span class='line'> -o ___              specify output directory where all output is generated
</span><span class='line'> -lib ___            specify location of grammars, tokens files
</span><span class='line'> ...</span></code></pre></td></tr></table></div></figure>

<p>每次运行ANTLR工具都要输入这么长的命令是否有些痛苦？写个脚本来解放我们的手指吧！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>java -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH org.antlr.v4.Tool $*</span></code></pre></td></tr></table></div></figure>

<p>把它保存为antlr.sh，以后就可以使用下列命令来运行ANTLR工具了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr</span></code></pre></td></tr></table></div></figure>

<h3 id="执行antlr和测试识别器">执行ANTLR和测试识别器</h3>

<p>先看下面这段用于识别像hello world那样短语的简单语法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar Hello;               // 定义文法的名字
</span><span class='line'>
</span><span class='line'>s  : 'hello' ID ;            // 匹配关键字hello，后面跟着一个标志符
</span><span class='line'>ID : [a-z]+ ;                // 匹配小写字母标志符
</span><span class='line'>WS : [ \t\r\n]+ -&gt; skip ;    // 跳过空格、制表符、回车符和换行符</span></code></pre></td></tr></table></div></figure>

<p>把以上语法保存为Hello.g，然后执行以下命令来生成识别器：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr Hello.g</span></code></pre></td></tr></table></div></figure>

<p>该命令会在相同目录下生成后缀名为tokens和java的六个文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello.tokens        HelloLexer.java         HelloParser.java
</span><span class='line'>HelloLexer.tokens   HelloBaseListener.java  HelloListener.java</span></code></pre></td></tr></table></div></figure>

<p>现在开始准备编译由ANTLR生成的Java代码。先写个脚本把编译命令包装起来：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>javac -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH $*</span></code></pre></td></tr></table></div></figure>

<p>把它保存为compile.sh文件，然后你就可以用以下命令编译代码了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile *.java</span></code></pre></td></tr></table></div></figure>

<p>到此，我们已经有了一个可以被HelloParser和HelloLexer利用的可执行的识别器，只缺一个主程序去触发语言识别了。</p>

<p>ANTLR运行库有提供称之为TestRig的测试工具，可以让你不创建主程序就能测试语法。TestRig使用Java反射调用编译后的识别器，它能显示关于识别器如何匹配输入的大量信息。</p>

<p>同样地，创建一个脚本grun.sh来简化以后的打字数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>java -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH org.antlr.v4.gui.TestRig $*</span></code></pre></td></tr></table></div></figure>

<p>现在，让我们来打印出识别期间创建的那些记号（记号是指像关键字hello和标识符world那样的词汇符号）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grun Hello s -tokens</span></code></pre></td></tr></table></div></figure>

<p>敲入上述命令并按回车，接着输入以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello world  # 输入并按回车
</span><span class='line'>EOF          # Unix系统输入Ctrl+D或Windows系统输入Ctrl+Z并按回车</span></code></pre></td></tr></table></div></figure>

<p>TestRig会打印出记号列表，每一行输出表示一个记号以及它的有关信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[@0,0:4='hello',&lt;1&gt;,1:0]
</span><span class='line'>[@1,6:10='world',&lt;2&gt;,1:6]
</span><span class='line'>[@2,13:12='&lt;EOF&gt;',&lt;-1&gt;,2:0]</span></code></pre></td></tr></table></div></figure>

<p>这里详细讲解下[@1,6:10=&#39;world&#39;,<2>,1:6]的意义。@1表示记号索引（从0开始）；6:10表示记号开始与结束的位置（从0开始）；<2>表示记号类型，具体数值和类型存储在后缀名为tokens的文件中；最后的1:6表示记号在第一行（从1开始），从第6个字符开始（从0开始，制表符作为单个字符计算）。</p>

<p>除此之外，还可以以LISP风格的文本形式查看记号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grun Hello s -tree</span></code></pre></td></tr></table></div></figure>

<p>它会输出如下形式的记号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(s hello world)  # (root children)</span></code></pre></td></tr></table></div></figure>

<p>你也可以以可视化的方式查看语法分析树：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grun Hello s -gui</span></code></pre></td></tr></table></div></figure>

<p><img src="http://codemany.com/uploads/hello-parse-tree.png" title="hello-parse-tree" ></p>

<p>以下是TestRig可用的所有参数：</p>

<ul>
<li>-tokens 打印出记号流。</li>
<li>-tree 以LISP风格的文本形式打印出语法分析树。</li>
<li>-gui 在对话框中可视化地显示语法分析树。</li>
<li>-ps file.ps 在PostScript中生成一个可视化的语法分析树表示，并把它存储在file.ps文件中。</li>
<li>-encoding encodingname 指定输入文件的编码。</li>
<li>-trace 在进入/退出规则前打印规则名字和当前的记号。</li>
<li>-diagnostics 分析时打开诊断消息。此生成消息仅用于异常情况，如二义性输入短语。</li>
<li>-SLL 使用更快但稍弱的分析策略。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（1）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part1/"/>
    <updated>2015-12-30T18:53:45+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part1</id>
    <content type="html"><![CDATA[<ul>
<li>grammar 文法，一种形式化（formal）的语言描述。</li>
<li>syntax 语法</li>
<li>phrase 短语</li>
<li>lexer 词法分析器</li>
<li>parser 语法分析器</li>
<li>parse tree 语法分析树，表示语法如何匹配输入的数据结构。</li>
<li>tree walker 树遍历器</li>
<li>top-down 自顶向下</li>
<li>backtracking 回溯</li>
<li>semantic predicates 语义谓词</li>
</ul>

<p>ANTLR v4是一款强大的语法分析器生成器，可以用来读取，处理，执行和转换结构化文本或二进制文件。通过文法文件，ANTLR可以自动生成词法分析器、语法分析树和树遍历器。</p>

<p>ANTLR语法分析器使用一种新的分析技术称之为<code>Adaptive LL(*)</code>或<code>ALL(*)</code>，<code>ALL(*)</code>是v3版本<code>LL(*)</code>的扩展，它可以在生成的语法分析器执行前在运行时动态地执行语法分析而不是静态地。</p>

<p>ANTLR v4极大地简化了用来匹配像算术表达式语法结构的文法规则。对于传统的自顶向下的语法分析器生成器像ANTLR v3，识别表达式的最自然的语法是无效的，v4则不然。ANTLR v4会自动地重写左递归规则为非左递归等价物，唯一的约束是左递归必须是直接的——规则立刻引用它自身。</p>

<p>此前，ANTLR v3用户必须用树构造操作增强语法。现在，ANTLR v4会自动构建语法分析树，也会以Listener和Visitor模式实现的形式自动生成树遍历器。所以，你不再需要构建树语法，可以用Visitor模式代替。降低在语法中嵌入动作的重要性使得甚至可以在不重新编译生成的语法分析器的情况下在不同的应用中重用相同的语法。</p>

<p>ANTLR v3的<code>LL(*)</code>分析策略弱于v4的<code>ALL(*)</code>，因此v3有时候需要依赖回溯去正确地分析输入的短语。回溯使得很难去通过生成的语法分析器步进调试语法，因为语法分析器可能会分析相同的输入多次（递归地）；回溯也让语法分析器在无效的输入之上给出一个好的错误消息更难。</p>

<h3 id="这本书里有什么？">这本书里有什么？</h3>

<p>免费在线文档提供足够的资料学习基本的语法和语义，但没有详细地解释ANTLR的概念。只有这本书解释了如何识别语言的语法模式，以及如何用ANTLR语法表示它们。这本书也将帮助你充分的了解ANTLR，是成为高级用户的必读物。</p>

<p>这本书被组织成四个部分。</p>

<ul>
<li>第一部分介绍ANTLR，提供一些语言的背景知识，带你开始一场ANTLR功能之旅，让你尝下语法的滋味和能用它做什么。</li>
<li>第二部分是关于使用ANTLR语法结合树遍历器设计语法和构建语言应用。</li>
<li>第三部分首先展示了如何定制ANTLR生成的语法分析器的错误处理。接下来，你将学习如何在语法中嵌入动作，因为有时候这样做比构建语法分析树然后遍历它更简单有效。关于动作，你还将学习使用语义谓词更改语法分析器的行为去处理一些具有挑战性的识别问题。最后一章解决一些具有挑战性的语言识别问题，例如识别XML和Python中上下文相关的换行。</li>
<li>第四部分是参考章节，列出了所有关于使用ANTLR文法元语言和它的运行库的规则。</li>
</ul>
]]></content>
  </entry>
  
</feed>
