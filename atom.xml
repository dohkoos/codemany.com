<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[乐者为王]]></title>
  <link href="http://codemany.com/atom.xml" rel="self"/>
  <link href="http://codemany.com/"/>
  <updated>2016-01-29T19:46:51+08:00</updated>
  <id>http://codemany.com/</id>
  <author>
    <name><![CDATA[dohkoos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一夜成名：这需要好几年时间]]></title>
    <link href="http://codemany.com/blog/overnight-success-it-takes-years/"/>
    <updated>2016-01-23T09:36:05+08:00</updated>
    <id>http://codemany.com/blog/overnight-success-it-takes-years</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://blog.codinghorror.com/overnight-success-it-takes-years/">http://blog.codinghorror.com/overnight-success-it-takes-years/</a></p>

<p>Gmail的原首席开发者Paul Buchheit说过<a href="http://paulbuchheit.blogspot.com/2009/01/overnight-success-takes-long-time.html">Gmail的成功花了很长时间</a>：</p>

<blockquote>
<p>我们在2001年8月开始开发Gmail。很长一段时间里，几乎每个人都不喜欢它。有些人使用它因为搜索，但他们有着无尽地抱怨。很多人认为我们应该杀死这个项目，又或者重启它作为一个有本地客户端软件的企业产品，而不是这个疯狂的JavaScript东西。甚至在2004年4月1日当我们到达发布它的那个点时——在开始开发它两年半之后——Google内部的很多人都在预测它的死亡。他们觉得这个产品太怪异了，并且没有人想去更换电子邮件服务。我被告知我们永远不会得到100万用户。</p>

<p>但在我们发布后，除了因为各种原因讨厌它的人，反响出人意外地好。尽管如此，它还是经常被描述为“小众产品（niche）”和“不会被硅谷之外的人使用”。</p>

<p>现在，在我们开始开发Gmail差不多七年半后，我看到一篇<a href="http://www.ft.com/cms/s/0/18cdabec-d8fb-11dd-ab5f-000077b07658.html">文章</a>叙述Gmail如何在去年增长40%，相比Yahoo的2%和Hotmail的-7%。</p>
</blockquote>

<p>Paul已经离开Google，现在在从事他自己的创业公司FriendFeed（译者注：FriendFeed已于2015年4月9日关闭）。许多业内人士对待FriendFeed不太友善。Stowe Boyd甚至竟然称FriendFeed就是个失败（译者注：Stowe Boyd评论FriendFeed的文章已经被删除了）。Paul从容应对批评：</p>

<blockquote>
<p>创建一个重要的新产品通常需要时间。FriendFeed需要继续追求创新，就像Gmail六年以前做的那样。FriendFeed显示了很好的前景，但它仍然是一个“在制品”。</p>

<p>我的预期是很大的成功需要好几年时间，没有许多反例（除了YouTube，但现在它其实还没有到达挣成堆钱的那个点）。Facebook成长非常快，但它此时已经五岁了。Larry和Sergey 开始开发Google在1996年——当我开始在那里是1999年，几乎没人听说过它。</p>

<p>一夜成名的观念非常具有误导性，而且相当有害。如果你开始新的东西，那会是一次长途旅行。没有借口去行动缓慢。相反，你必须行动的非常快，否则你将不会到达，因为它是一次长途旅行！这也是为什么节俭是重要的——你不想<a href="http://paulbuchheit.blogspot.com/2008/03/ideas-vs-judgment-and-execution_9197.html">饿死在半山腰上</a>。</p>
</blockquote>

<p>Stowe Boyd用一张Twitter和FriendFeed的流量对比图说明他关于FriendFeed的观点。这里请允许我把我自己的数据也加到Boyd先生的图上：</p>

<p><img src="http://codemany.com/uploads/three-traffic-comparison.png" title="three-traffic-comparison" ></p>

<p>我觉得Paul的态度令人耳目一新，因为对于我们的创业公司<a href="http://stackoverflow.com/">Stack Overflow</a>我也采用同样的态度。我没有期望或甚至渴望一夜成名。我计划的是花上几年的时间去打磨，持续地、稳步地提升。</p>

<p>这项商业计划和我的职业生涯发展计划没有太多区别：成功需要好几年时间。当我说年的时候，我是认真的！不是在说像“更聪明地工作，而不是更努力地工作”那样的陈词滥调。我是在说真正的日历年。你知道的，12个月的，365天的那种。你必须花上你生命的多年时间孜孜不倦地钻研这些东西，每天醒来后一遍又一遍地做它。每天练习和收集反馈去不断变得更好。有时它可能是不愉快的，甚至偶尔是很无趣的，但它是必需的。</p>

<p>这几乎不是唯一的或有趣的建议。Peter Norvig的经典<a href="http://www.norvig.com/21-days.html">花10年时间自学编程</a>也谈到过这个话题，而且讲得比我更好。</p>

<blockquote>
<p>研究人员发现在任何领域都需要大约10年时间才能培养出专业技能，包括国际象棋、音乐作曲、电报操作、绘画、钢琴演奏、游泳、网球、以及神经心理学和拓扑学的研究。关键是刻意（deliberative）练习：不仅仅是一次又一次地做它，而是用略微超出你当前能力的任务来挑战自己，尝试它，在做时和做后分析你的表现，并且纠正所有错误。然后重复。再重复。</p>

<p>似乎没有真正的捷径：即使是莫扎特，4岁的音乐天才，在他开始创作世界级音乐前也花了超过13年。甲壳虫乐队似乎横空出世以一连串的冠军歌曲（a string of #1 hits），并且在1964年出现在《埃德·沙利文秀》。但其实自1957年以来他们就已经在利物浦和汉堡的小俱乐部里演出了，虽然他们在早期有广泛的吸引力，但他们最最成功的《Sgt. Pepper&#39;s Lonely Hearts Club Band》发布在1967年。</p>
</blockquote>

<p>老实说，我期待着有一天醒来，从现在起的2年或3年之后，做着和今天我在做的完全相同的事：为Stack Overflow编写代码，增加另一个微小的改进或有用的功能。很明显我们想要成功。但在某种程度上，成功是无关紧要的，因为这个过程本身是令人满意的。每天醒来做你喜欢的事情——甚至更好的是，周围社区的人也喜欢它——这本身就是一种奖赏。尽管有着成吨的工作要做。</p>

<p>博客也不例外。我经常给有抱负的博客作者<a href="http://blog.codinghorror.com/how-to-achieve-ultimate-blog-success-in-one-easy-step/">这个很重要的建议</a>：如果你开始你的博客，在六个月内别指望有人来读它。如果你这样做，我可以保证你将会非常失望。 可是，如果你能坚持发布计划并且每周写1篇或2篇高质量的博文一整年……然后，也只有到那个时候，你才可以看到稀稀落落的读者。我开始这个博客于2004年，花了整整3年的时间，每周写3到5篇博文，才使得它在软件开发社区内流行开来。</p>

<p>我非常期望在这个博客上一直写，以一种形式或另一种，用我的余生。它是我是谁的一部分。至于那种戏剧性的成名方式，我不抱有任何幻想：归根结底，<a href="http://www.gocomics.com/pearlsbeforeswine/2008/11/16">我只是在网上写博客的那个人</a>。</p>

<p><img src="http://codemany.com/uploads/pearls-before-swine.png" title="pearls-before-swine" ></p>

<p>那样挺好的对我来说。我从来没有说过我是聪明的。</p>

<p>不管你最终获得多少读者，或页面浏览量，或任何我们这周正在度量的<a href="http://blog.codinghorror.com/the-high-score-table/">高分排行榜</a> ，请记住，你正在做的事情是值得去做的，因为——嗯——你正在做的事情是值得去做的。</p>

<p>如果你一直这样坚持下去，谁知道会发生什么？很有可能某一天你醒来，发现自己一夜成名了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（5）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part5/"/>
    <updated>2016-01-22T21:18:51+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part5</id>
    <content type="html"><![CDATA[<p>在<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3/">ANTLR 4权威参考读书笔记（3）</a>以及<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part4/">ANTLR 4权威参考读书笔记（4）</a>中我们分别用Visitor和Listener机制实现了计算器的解释执行和编译执行。但并没有给出这两种机制的太多细节，这次就来详细地讲讲。</p>

<p>ANTLR在它的运行库中为两种树遍历机制提供支持。默认情况下，ANTLR生成一个语法分析树Listener接口，在其中定义了回调方法，用于响应被内建的树遍历器触发的事件。</p>

<p>在Listener和Visitor机制之间最大的不同是：Listener方法被ANTLR提供的遍历器对象调用；而Visitor方法必须显式的调用visit方法遍历它们的子节点，在一个节点的子节点上如果忘记调用visit方法就意味着那些子树没有得到访问。</p>

<p>让我们首先从Listener开始。在我们了解Listener之后，我们也将看到ANTLR如何生成遵循Visitor设计模式的树遍历器。</p>

<h3 id="语法分析树listener">语法分析树Listener</h3>

<p>在Calc.java中有这样两行代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ParseTreeWalker walker = new ParseTreeWalker();
</span><span class='line'>walker.walk(new DirectiveListener(), tree);</span></code></pre></td></tr></table></div></figure>

<p>类ParseTreeWalker是ANTLR运行时提供的用于遍历语法分析树和触发Listener中回调方法的树遍历器。ANTLR工具根据Calc.g中的语法自动生成ParseTreeListener接口的子接口CalcListener和默认实现CalcBaseListener，其中含有针对语法中每个规则的enter和exit方法。DirectiveListener是我们编写的继承自CalcBaseListener的包含特定应用代码的实现，把它传递给树遍历器后，树遍历器在遍历语法分析树时就会触发DirectiveListener中的回调方法。</p>

<p><img src="http://codemany.com/uploads/calc-listener-hierachy.png" title="calc-listener-hierachy" ></p>

<p>下图左边的语法分析树显示ParseTreeWalker执行了一次深度优先遍历，由粗虚线表示，箭头方向代表遍历方向。右边显示的是语法分析树的完整调用序列，它们由ParseTreeWalker触发调用。当树遍历器遇到规则assign的节点时，它触发enterAssign()并且给它传递AssignContext语法分析树节点。在树遍历器访问完assign节点的所有子节点后，它触发exitAssign()。</p>

<p><img src="http://codemany.com/uploads/listener-call-sequence.png" title="listener-call-sequence" ></p>

<p>Listener机制的强大之处在于所有都是自动的。我们不必要写语法分析树遍历器，而且我们的Listener方法也不必要显式地访问它们的子节点。</p>

<h3 id="语法分析树visitor">语法分析树Visitor</h3>

<p>有些情况下，我们实际想要控制的是遍历本身，在那里我们可以显式地调用visit方法去访问子树节点。选项-visitor告诉ANTLR工具从相应语法生成Visitor接口和默认实现，其中含有针对语法中每个规则的visit方法。</p>

<p>下图是我们熟悉的Visitor模式操作在语法分析树上。左边部分的粗虚线表示语法分析树的深度优先遍历，箭头方向代表遍历方向。右边部分指明Visitor中的方法调用序列。</p>

<p><img src="http://codemany.com/uploads/visitor-call-sequence.png" title="visitor-call-sequence" ></p>

<p>下面是Calc.java中的两行代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EvalVisitor eval = new EvalVisitor();
</span><span class='line'>// To start walking the parse tree
</span><span class='line'>eval.visit(tree);</span></code></pre></td></tr></table></div></figure>

<p>我们首先初始化自制的树遍历器EvalVisitor，然后调用visit()去访问整棵语法分析树。ANTLR运行时提供的Visitor支持代码会在看到根节点时调用visitProg()。在那里，visitProg()会把子树作为参数调用visit方法继续遍历，如此等等。</p>

<p><img src="http://codemany.com/uploads/calc-visitor-hierachy.png" title="calc-visitor-hierachy" ></p>

<p>ANTLR自动生成的Visitor接口和默认实现可以让我们为Visitor方法编写自己的实现，让我们避免必须覆写接口中的每个方法，让我们仅仅聚焦在我们感兴趣的方法上。这种方法减少了我们学习ANTLR必须要花费的时间，让我们回到我们所熟悉的编程语言领域。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（4）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part4/"/>
    <updated>2016-01-18T15:06:54+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part4</id>
    <content type="html"><![CDATA[<p>在<a href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3/">ANTLR 4权威参考读书笔记（3）</a>中的计算器是以解释的方式执行的，现在我们想要把它转换成以编译的方式执行。编译执行和解释执行相比，需要依赖于特定的目标机器。在这里我们假设有一台这样的机器，它用堆栈进行运算，支持如下表所示的几种指令：</p>

<table><thead>
<tr>
<th>指令</th>
<th>说明</th>
<th>操作数个数</th>
<th>用途</th>
</tr>
</thead><tbody>
<tr>
<td>LDV</td>
<td>Load Variable</td>
<td>1</td>
<td>变量入栈</td>
</tr>
<tr>
<td>LDC</td>
<td>Load Constant</td>
<td>1</td>
<td>常量入栈</td>
</tr>
<tr>
<td>STR</td>
<td>Store Value</td>
<td>1</td>
<td>栈顶一个元素存入指定变量</td>
</tr>
<tr>
<td>ADD</td>
<td>Add</td>
<td>0</td>
<td>栈顶两个元素出栈，求和后入栈</td>
</tr>
<tr>
<td>SUB</td>
<td>Subtract</td>
<td>0</td>
<td>栈顶两个元素出栈，求差后入栈</td>
</tr>
<tr>
<td>MUL</td>
<td>Multiply</td>
<td>0</td>
<td>栈顶两个元素出栈，求积后入栈</td>
</tr>
<tr>
<td>DIV</td>
<td>Divide</td>
<td>0</td>
<td>栈顶两个元素出栈，求商后入栈</td>
</tr>
<tr>
<td>RET</td>
<td>Return</td>
<td>0</td>
<td>栈顶一个元素出栈，计算结束</td>
</tr>
</tbody></table>

<p>做这个最简单的方法是使用ANTLR的语法分析树Listener机制实现DirectiveListener类，然后它通过监听来自树遍历器触发的事件，输出对应的机器指令。</p>

<p>Listener机制的优势是我们不必要自己去做任何树遍历，甚至我们不必要知道遍历语法分析树的运行时如何调用我们的方法，我们只要知道我们的DirectiveListener类得到通知，在与语法规则匹配的短语开始和结束时。这种方法减少了我们学习ANTLR必须要花费的时间，让我们回到我们所熟悉的编程语言领域。</p>

<p>这里不需要创建新的语法规则，还是继续沿用前文Calc.g所包含的语法，标签也要保留：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar Calc;
</span><span class='line'>
</span><span class='line'>prog
</span><span class='line'>    : stat+
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>stat
</span><span class='line'>    : expr                   # printExpr
</span><span class='line'>    | ID '=' expr            # assign
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : expr op=(MUL|DIV) expr # MulDiv
</span><span class='line'>    | expr op=(ADD|SUB) expr # AddSub
</span><span class='line'>    | INT                    # int
</span><span class='line'>    | ID                     # id
</span><span class='line'>    | '(' expr ')'           # parens
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>MUL : '*' ;
</span><span class='line'>
</span><span class='line'>DIV : '/' ;
</span><span class='line'>
</span><span class='line'>ADD : '+' ;
</span><span class='line'>
</span><span class='line'>SUB : '-' ;
</span><span class='line'>
</span><span class='line'>ID  : [a-zA-Z]+ ;
</span><span class='line'>
</span><span class='line'>INT : [0-9]+ ;
</span><span class='line'>
</span><span class='line'>WS  : [ \t\r\n]+ -&gt; skip ;    // toss out whitespace</span></code></pre></td></tr></table></div></figure>

<p>然后，我们可以运行ANTLR工具：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr Calc.g</span></code></pre></td></tr></table></div></figure>

<p>它会生成后缀名为tokens和java的六个文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Calc.tokens         CaclLexer.java          CalcParser.java
</span><span class='line'>CalcLexer.tokens    CalcBaseListener.java   CalcListener.java</span></code></pre></td></tr></table></div></figure>

<p>正如这里我们看到的，ANTLR会为我们自动生成Listener基础设施。其中CalcListener是语法和Listener对象之间的关键接口，描述我们可以实现的回调方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface CalcListener extends ParseTreeListener {
</span><span class='line'>  void enterProg(CalcParser.ProgContext ctx);
</span><span class='line'>  void exitProg(CalcParser.ProgContext ctx);
</span><span class='line'>  void enterPrintExpr(CalcParser.PrintExprContext ctx);
</span><span class='line'>    ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>CalcBaseListener则是ANTLR生成的一组空的默认实现。ANTLR内建的树遍历器会去触发在Listener中像enterProg()和exitProg()这样的一串回调方法，如同它对语法分析树执行了一次深度优先遍历。为响应树遍历器触发的事件，我们的DirectiveListener需要继承CalcBaseListener并实现一些方法。我们不需要实现全部的接口方法，我们也不需要去覆写每个enter和exit方法，我们只需要去覆写那些我们感兴趣的回调方法。</p>

<p>在本例中，我们需要通过覆写六个方法对六个事件作出响应：当树遍历器exit那些有标签的选项时。我们的基本策略是当树遍历器exit那些有标签的选项时打印出已转换的指令。以下是完整的实现代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class DirectiveListener extends CalcBaseListener {
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitPrintExpr(CalcParser.PrintExprContext ctx) {
</span><span class='line'>        System.out.println("RET\n");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitAssign(CalcParser.AssignContext ctx) {
</span><span class='line'>        String id = ctx.ID().getText();
</span><span class='line'>        System.out.println("STR " + id);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitMulDiv(CalcParser.MulDivContext ctx) {
</span><span class='line'>        if (ctx.op.getType() == CalcParser.MUL) {
</span><span class='line'>            System.out.println("MUL");
</span><span class='line'>        } else {
</span><span class='line'>            System.out.println("DIV");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitAddSub(CalcParser.AddSubContext ctx) {
</span><span class='line'>        if (ctx.op.getType() == CalcParser.ADD) {
</span><span class='line'>            System.out.println("ADD");
</span><span class='line'>        } else {
</span><span class='line'>            System.out.println("SUB");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitId(CalcParser.IdContext ctx) {
</span><span class='line'>        System.out.println("LDV " + ctx.ID().getText());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void exitInt(CalcParser.IntContext ctx) {
</span><span class='line'>        System.out.println("LDC " + ctx.INT().getText());
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>为了让它运行起来，余下我们唯一需要做的事是创建一个主程序去调用它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Calc {
</span><span class='line'>
</span><span class='line'>    public static void main(String[] args) throws Exception {
</span><span class='line'>        InputStream is = args.length &gt; 0 ? new FileInputStream(args[0]) : System.in;
</span><span class='line'>
</span><span class='line'>        ANTLRInputStream input = new ANTLRInputStream(is);
</span><span class='line'>        CalcLexer lexer = new CalcLexer(input);
</span><span class='line'>        CommonTokenStream tokens = new CommonTokenStream(lexer);
</span><span class='line'>        CalcParser parser = new CalcParser(tokens);
</span><span class='line'>        ParseTree tree = parser.prog();
</span><span class='line'>
</span><span class='line'>        ParseTreeWalker walker = new ParseTreeWalker();
</span><span class='line'>        walker.walk(new DirectiveListener(), tree);
</span><span class='line'>
</span><span class='line'>        // print LISP-style tree
</span><span class='line'>        System.out.println(tree.toStringTree(parser));
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>这个程序和前文Calc.java中的代码极度相似，区别只在12-13行。这两行代码负责创建树遍历器，然后让树遍历器去遍历那颗从语法分析器返回的语法分析树，当树遍历器遍历时，它就会触发调用到我们的DirectiveListener中实现的方法。此外，通过传入一个不同的Listener实现我们能简单地生成完全不同的输出。Listener机制有效地隔离了语法和语言应用，使语法可以被其它应用再次使用。</p>

<p>现在一切完备，让我们尝试着去编译和运行它吧！下面是完整的命令序列：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile *.java
</span><span class='line'>run Calc calc.txt</span></code></pre></td></tr></table></div></figure>

<p>编译的输出结果如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LDC 19
</span><span class='line'>RET
</span><span class='line'>
</span><span class='line'>LDC 5
</span><span class='line'>STR a
</span><span class='line'>LDC 6
</span><span class='line'>STR b
</span><span class='line'>LDV a
</span><span class='line'>LDV b
</span><span class='line'>LDC 2
</span><span class='line'>MUL
</span><span class='line'>ADD
</span><span class='line'>RET
</span><span class='line'>
</span><span class='line'>LDC 1
</span><span class='line'>LDC 2
</span><span class='line'>ADD
</span><span class='line'>LDC 3
</span><span class='line'>MUL
</span><span class='line'>RET</span></code></pre></td></tr></table></div></figure>

<p>代码下载：<a href="https://github.com/dohkoos/antlr4-calculator">https://github.com/dohkoos/antlr4-calculator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（3）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3/"/>
    <updated>2016-01-05T16:48:16+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part3</id>
    <content type="html"><![CDATA[<ul>
<li>lexical 词法的</li>
<li>alternative 选项</li>
<li>notation 表示法</li>
<li>directive 指令</li>
<li>label 标签</li>
</ul>

<p>了解ANTLR最好的方法就是实例。构建一个简单的计算器是个不错的主意。为了使它容易理解且保持简单，我们将只允许基本的算术运算符（加、减、乘、除）、括号表达式、整数和变量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar Calc;
</span><span class='line'>
</span><span class='line'>prog
</span><span class='line'>    : stat+
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>stat
</span><span class='line'>    : expr
</span><span class='line'>    | ID '=' expr
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : expr ('*'|'/') expr
</span><span class='line'>    | expr ('+'|'-') expr
</span><span class='line'>    | INT
</span><span class='line'>    | ID
</span><span class='line'>    | '(' expr ')'
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>ID  : [a-zA-Z]+ ;
</span><span class='line'>
</span><span class='line'>INT : [0-9]+ ;
</span><span class='line'>
</span><span class='line'>WS  : [ \t\r\n]+ -&gt; skip ;    // toss out whitespace</span></code></pre></td></tr></table></div></figure>

<p>在上述的语法中，程序是由空格（换行符也被当作空格）终止的语句序列，语句可以是表达式或者赋值。那些以小写字母开头的像stat和expr是语法规则；由大写字母开头的诸如ID和INT为词法规则，用于识别标志符和整数这样的记号。我们用“|”分隔规则的选项，我们也可以用“()”把符号分组成子规则。例如，子规则<code>(&#39;*&#39;|&#39;/&#39;)</code>匹配乘法符号或者除法符号。</p>

<p>ANTLR v4最重要的新特性是它有能力处理（大多数类型的）左递归规则。例如，规则expr前两个选项就在左边缘递归地调用了expr自身。这种指定算术表达式表示法的方法比那些典型的自顶向下语法分析器策略更容易。当然，在这种策略下，我们需要定义多个规则，每个运算符优先级一个规则。</p>

<p>记号定义的表示法对那些有正则表达式经验的应该很熟悉。唯一不寻常的是在WS规则上的<code>-&gt; skip</code>指令，它告诉词法分析器去匹配但丢弃空格，不要把它们放到记号流中，这样在语法分析树上空格就不会有对应的记号。（每个可能的输入字符都必须被至少一个词法规则匹配。）我们通过使用形式化的ANTLR表示法避免捆绑语法到某个特定的目标语言，而不是在语法中插入任意代码片段来告诉词法分析器去忽略。</p>

<p>这里是一些用来评估所有语法特性的测试序列：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>193
</span><span class='line'>a = 5
</span><span class='line'>b = 6
</span><span class='line'>a+b*2
</span><span class='line'>(1+2)*3</span></code></pre></td></tr></table></div></figure>

<p>把它们放入文件calc.txt中，然后执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr Calc.g
</span><span class='line'>compile *.java
</span><span class='line'>grun Calc prog -gui calc.txt</span></code></pre></td></tr></table></div></figure>

<p>TestRig会弹出一个显示语法分析树的窗口：</p>

<p><img src="http://codemany.com/uploads/calc-parse-tree.png" title="calc-parse-tree" ></p>

<h3 id="使用visitor模式计算结果">使用Visitor模式计算结果</h3>

<p>为了给前面的算术表达式语法分析器计算出结果，我们还需要做些其它的事情。</p>

<p>ANTLR v4鼓励我们保持语法的整洁，使用语法分析树Visitor和其它遍历器来实现语言应用。不过在接触这些之前，我们需要对语法做些修改。</p>

<p>首先，我们需要用标签标明规则的选项，标签可以是和规则名没有冲突的任意标志符。如果选项上没有标签，ANTLR只会为每个规则生成一个visit方法。</p>

<p>在本例中，我们希望为每个选项生成一个不同的visit方法，以便每种输入短语都能得到不同的事件。在新的语法中，标签出现在选项的右边缘，且以“#”符号开头：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stat
</span><span class='line'>    : expr                   # printExpr
</span><span class='line'>    | ID '=' expr            # assign
</span><span class='line'>    ;
</span><span class='line'>
</span><span class='line'>expr
</span><span class='line'>    : expr op=(MUL|DIV) expr # MulDiv
</span><span class='line'>    | expr op=(ADD|SUB) expr # AddSub
</span><span class='line'>    | INT                    # int
</span><span class='line'>    | ID                     # id
</span><span class='line'>    | '(' expr ')'           # parens
</span><span class='line'>    ;</span></code></pre></td></tr></table></div></figure>

<p>接下来，让我们为运算符字面量定义一些记号名字，以便以后可以在visit方法中引用作为Java常量的它们：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MUL : '*' ;
</span><span class='line'>
</span><span class='line'>DIV : '/' ;
</span><span class='line'>
</span><span class='line'>ADD : '+' ;
</span><span class='line'>
</span><span class='line'>SUB : '-' ;</span></code></pre></td></tr></table></div></figure>

<p>现在，我们有了一个增强型的语法。接下来要做的事情是实现一个EvalVisitor类，它通过遍历表达式语法分析树计算和返回值。</p>

<p>执行下面的命令，让ANTLR生成Visitor接口和它的默认实现，其中-no-listener参数是告诉ANTLR不再生成Listener相关的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr -no-listener -visitor Calc.g</span></code></pre></td></tr></table></div></figure>

<p>所有被标签标明的选项在生成的Visitor接口中都定义了一个visit方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface CalcVisitor&lt;T&gt; extends ParseTreeVisitor&lt;T&gt; {
</span><span class='line'>    T visitProg(CalcParser.ProgContext ctx);
</span><span class='line'>    T visitPrintExpr(CalcParser.PrintExprContext ctx);
</span><span class='line'>    T visitAssign(CalcParser.AssignContext ctx);
</span><span class='line'>    ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>接口定义使用的是Java泛型，visit方法的返回值为参数化类型，这允许我们根据表达式计算返回值的类型去设定实现的泛型参数。因为表达式的计算结果是整型，所以我们的EvalVisitor应该继承<code>CalcBaseVisitor&lt;Integer&gt;</code>类。为计算语法分析树的每个节点，我们需要覆写与语句和表达式选项相关的方法。这里是全部的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class EvalVisitor extends CalcBaseVisitor&lt;Integer&gt; {
</span><span class='line'>    /** "memory" for our calculator; variable/value pairs go here */
</span><span class='line'>    Map&lt;String, Integer&gt; memory = new HashMap&lt;String, Integer&gt;();
</span><span class='line'>
</span><span class='line'>    /** ID '=' expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitAssign(CalcParser.AssignContext ctx) {
</span><span class='line'>        String id = ctx.ID().getText();  // id is left-hand side of '='
</span><span class='line'>        int value = visit(ctx.expr());   // compute value of expression on right
</span><span class='line'>        memory.put(id, value);           // store it in our memory
</span><span class='line'>        return value;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitPrintExpr(CalcParser.PrintExprContext ctx) {
</span><span class='line'>        Integer value = visit(ctx.expr()); // evaluate the expr child
</span><span class='line'>        System.out.println(value);         // print the result
</span><span class='line'>        return 0;                          // return dummy value
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** INT */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitInt(CalcParser.IntContext ctx) {
</span><span class='line'>        return Integer.valueOf(ctx.INT().getText());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** ID */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitId(CalcParser.IdContext ctx) {
</span><span class='line'>        String id = ctx.ID().getText();
</span><span class='line'>        if ( memory.containsKey(id) ) return memory.get(id);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** expr op=('*'|'/') expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitMulDiv(CalcParser.MulDivContext ctx) {
</span><span class='line'>        int left = visit(ctx.expr(0));  // get value of left subexpression
</span><span class='line'>        int right = visit(ctx.expr(1)); // get value of right subexpression
</span><span class='line'>        if ( ctx.op.getType() == CalcParser.MUL ) return left * right;
</span><span class='line'>        return left / right; // must be DIV
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** expr op=('+'|'-') expr */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitAddSub(CalcParser.AddSubContext ctx) {
</span><span class='line'>        int left = visit(ctx.expr(0));  // get value of left subexpression
</span><span class='line'>        int right = visit(ctx.expr(1)); // get value of right subexpression
</span><span class='line'>        if ( ctx.op.getType() == CalcParser.ADD ) return left + right;
</span><span class='line'>        return left - right; // must be SUB
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** '(' expr ')' */
</span><span class='line'>    @Override
</span><span class='line'>    public Integer visitParens(CalcParser.ParensContext ctx) {
</span><span class='line'>        return visit(ctx.expr()); // return child expr's value
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>以前开发和测试语法都是使用的TestRig，这次我们试着编写计算器的主程序来启动代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Calc {
</span><span class='line'>
</span><span class='line'>    public static void main(String[] args) throws Exception {
</span><span class='line'>        InputStream is = args.length &gt; 0 ? new FileInputStream(args[0]) : System.in;
</span><span class='line'>
</span><span class='line'>        ANTLRInputStream input = new ANTLRInputStream(is);
</span><span class='line'>        CalcLexer lexer = new CalcLexer(input);
</span><span class='line'>        CommonTokenStream tokens = new CommonTokenStream(lexer);
</span><span class='line'>        CalcParser parser = new CalcParser(tokens);
</span><span class='line'>        ParseTree tree = parser.prog();
</span><span class='line'>
</span><span class='line'>        EvalVisitor eval = new EvalVisitor();
</span><span class='line'>        // 开始遍历语法分析树
</span><span class='line'>        eval.visit(tree);
</span><span class='line'>
</span><span class='line'>        System.out.println(tree.toStringTree(parser));
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>创建一个运行主程序的脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>java -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH $*</span></code></pre></td></tr></table></div></figure>

<p>把它保存为run.sh后，执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile *.java
</span><span class='line'>run Calc calc.txt</span></code></pre></td></tr></table></div></figure>

<p>然后你就会看到文本形式的语法分析树以及计算结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>193
</span><span class='line'>17
</span><span class='line'>9
</span><span class='line'>(prog (stat (expr 193)) (stat a = (expr 5)) (stat b = (expr 6))
</span><span class='line'> (stat (expr (expr a) + (expr (expr b) * (expr 2)))) (stat (expr
</span><span class='line'> (expr ( (expr (expr 1) + (expr 2)) )) * (expr 3))))</span></code></pre></td></tr></table></div></figure>

<p>代码下载：<a href="https://github.com/dohkoos/antlr4-calculator">https://github.com/dohkoos/antlr4-calculator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（2）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part2/"/>
    <updated>2016-01-01T16:35:41+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part2</id>
    <content type="html"><![CDATA[<ul>
<li>token 记号</li>
<li>ambiguity 二义性</li>
</ul>

<h3 id="安装antlr">安装ANTLR</h3>

<p>ANTLR是由Java写成的，所以在安装ANTLR前必须保证已经安装有Java 1.6或以上版本。你可以到 <a href="http://www.antlr.org/download.html">http://www.antlr.org/download.html</a> 下载ANTLR的最新版本，或者也可使用命令行工具。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -O http://www.antlr.org/download/antlr-4.5.1-complete.jar</span></code></pre></td></tr></table></div></figure>

<p>antlr-4.5.1-complete.jar包含运行ANTLR工具的所有必要依赖，以及编译和执行由ANTLR生成的识别器所需的运行库。ANTLR工具将由语法文件描述的语法转换成识别程序，识别程序利用ANTLR运行库中的某些支持类识别输入的语句。该jar包还包含两个支持库：<a href="https://github.com/abego/treelayout">TreeLayout（一个复杂的树布局库）</a>和<a href="http://www.stringtemplate.org/">StringTemplate（一个用于生成代码和其它结构化文本的模板引擎）</a>。</p>

<p>现在来测试下ANTLR工具是否工作正常：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar antlr-4.5.1-complete.jar  # 启动org.antlr.v4.Tool</span></code></pre></td></tr></table></div></figure>

<p>如果正常会看到以下帮助信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ANTLR Parser Generator  Version 4.5.1
</span><span class='line'> -o ___              specify output directory where all output is generated
</span><span class='line'> -lib ___            specify location of grammars, tokens files
</span><span class='line'> ...</span></code></pre></td></tr></table></div></figure>

<p>每次运行ANTLR工具都要输入这么长的命令是否有些痛苦？写个脚本来解放我们的手指吧！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>java -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH org.antlr.v4.Tool $*</span></code></pre></td></tr></table></div></figure>

<p>把它保存为antlr.sh，以后就可以使用下列命令来运行ANTLR工具了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr</span></code></pre></td></tr></table></div></figure>

<h3 id="执行antlr和测试识别器">执行ANTLR和测试识别器</h3>

<p>先看下面这段用于识别像hello world那样短语的简单语法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grammar Hello;               // 定义语法的名字
</span><span class='line'>
</span><span class='line'>s  : 'hello' ID ;            // 匹配关键字hello，后面跟着一个标志符
</span><span class='line'>ID : [a-z]+ ;                // 匹配小写字母标志符
</span><span class='line'>WS : [ \t\r\n]+ -&gt; skip ;    // 跳过空格、制表符、回车符和换行符</span></code></pre></td></tr></table></div></figure>

<p>把以上语法保存为Hello.g，然后执行以下命令来生成识别器：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>antlr Hello.g</span></code></pre></td></tr></table></div></figure>

<p>该命令会在相同目录下生成后缀名为tokens和java的六个文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello.tokens        HelloLexer.java         HelloParser.java
</span><span class='line'>HelloLexer.tokens   HelloBaseListener.java  HelloListener.java</span></code></pre></td></tr></table></div></figure>

<p>现在开始准备编译由ANTLR生成的Java代码。先写个脚本把编译命令包装起来：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>javac -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH $*</span></code></pre></td></tr></table></div></figure>

<p>把它保存为compile.sh文件，然后你就可以用以下命令编译代码了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile *.java</span></code></pre></td></tr></table></div></figure>

<p>到此，我们已经有了一个可以被HelloParser和HelloLexer利用的可执行的识别器，只缺一个主程序去触发语言识别了。</p>

<p>ANTLR运行库有提供称之为TestRig的测试工具，可以让你不创建主程序就能测试语法。TestRig使用Java反射调用编译后的识别器，它能显示关于识别器如何匹配输入的大量信息。</p>

<p>同样地，创建一个脚本grun.sh来简化以后的打字数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>java -cp .:./antlr-4.5.1-complete.jar:$CLASSPATH org.antlr.v4.gui.TestRig $*</span></code></pre></td></tr></table></div></figure>

<p>现在，让我们来打印出识别期间创建的那些记号（记号是指像关键字hello和标识符world那样的词汇符号）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grun Hello s -tokens</span></code></pre></td></tr></table></div></figure>

<p>敲入上述命令并按回车，接着输入以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello world  # 输入并按回车
</span><span class='line'>EOF          # Unix系统输入Ctrl+D或Windows系统输入Ctrl+Z并按回车</span></code></pre></td></tr></table></div></figure>

<p>TestRig会打印出记号列表，每一行输出表示一个记号以及它的有关信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[@0,0:4='hello',&lt;1&gt;,1:0]
</span><span class='line'>[@1,6:10='world',&lt;2&gt;,1:6]
</span><span class='line'>[@2,13:12='&lt;EOF&gt;',&lt;-1&gt;,2:0]</span></code></pre></td></tr></table></div></figure>

<p>这里详细讲解下<code>[@1,6:10=&#39;world&#39;,&lt;2&gt;,1:6]</code>的意义。@1表示记号索引（从0开始）；6:10表示记号开始与结束的位置（从0开始）；<2>表示记号类型，具体数值和类型存储在后缀名为tokens的文件中；最后的1:6表示记号在第一行（从1开始），从第6个字符开始（从0开始，制表符作为单个字符计算）。</p>

<p>除此之外，还可以以LISP风格的文本形式查看记号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grun Hello s -tree</span></code></pre></td></tr></table></div></figure>

<p>它会输出如下形式的记号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(s hello world)  # (root children)</span></code></pre></td></tr></table></div></figure>

<p>你也可以以可视化的方式查看语法分析树：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grun Hello s -gui</span></code></pre></td></tr></table></div></figure>

<p><img src="http://codemany.com/uploads/hello-parse-tree.png" title="hello-parse-tree" ></p>

<p>以下是TestRig可用的所有参数：</p>

<ul>
<li>-tokens 打印出记号流。</li>
<li>-tree 以LISP风格的文本形式打印出语法分析树。</li>
<li>-gui 在对话框中可视化地显示语法分析树。</li>
<li>-ps file.ps 在PostScript中生成一个可视化的语法分析树表示，并把它存储在file.ps文件中。</li>
<li>-encoding encodingname 指定输入文件的编码。</li>
<li>-trace 在进入/退出规则前打印规则名字和当前的记号。</li>
<li>-diagnostics 分析时打开诊断消息。此生成消息仅用于异常情况，如二义性输入短语。</li>
<li>-SLL 使用更快但稍弱的分析策略。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANTLR 4权威参考读书笔记（1）]]></title>
    <link href="http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part1/"/>
    <updated>2015-12-30T18:53:45+08:00</updated>
    <id>http://codemany.com/blog/reading-notes-the-definitive-antlr4-reference-part1</id>
    <content type="html"><![CDATA[<ul>
<li>grammar 语法，一种形式化（formal）的语言描述。</li>
<li>syntax 句法</li>
<li>phrase 短语</li>
<li>lexer 词法分析器</li>
<li>parser 语法分析器</li>
<li>parse tree 语法分析树，表示语法如何匹配输入的数据结构。</li>
<li>tree walker 树遍历器</li>
<li>top-down 自顶向下</li>
<li>backtracking 回溯</li>
<li>semantic predicates 语义谓词</li>
</ul>

<p>ANTLR v4是一款强大的语法分析器生成器，可以用来读取，处理，执行和转换结构化文本或二进制文件。通过语法文件，ANTLR可以自动生成词法分析器、语法分析树和树遍历器。</p>

<p>ANTLR语法分析器使用一种新的分析技术称之为<code>Adaptive LL(*)</code>或<code>ALL(*)</code>，<code>ALL(*)</code>是v3版本<code>LL(*)</code>的扩展，它可以在生成的语法分析器执行前在运行时动态地执行语法分析而不是静态地。</p>

<p>ANTLR v4极大地简化了用来匹配像算术表达式句法结构的语法规则。对于传统的自顶向下的语法分析器生成器像ANTLR v3，识别表达式的最自然的语法是无效的，v4则不然。ANTLR v4会自动地重写左递归规则为非左递归等价物，唯一的约束是左递归必须是直接的——规则立刻引用它自身。</p>

<p>此前，ANTLR v3用户必须用树构造操作增强语法。现在，ANTLR v4会自动构建语法分析树，也会以Listener和Visitor模式实现的形式自动生成树遍历器。所以，你不再需要构建树语法，可以用Visitor模式代替。降低在语法中嵌入动作的重要性使得甚至可以在不重新编译生成的语法分析器的情况下在不同的应用中重用相同的语法。</p>

<p>ANTLR v3的<code>LL(*)</code>分析策略弱于v4的<code>ALL(*)</code>，因此v3有时候需要依赖回溯去正确地分析输入的短语。回溯使得很难去通过生成的语法分析器步进调试语法，因为语法分析器可能会分析相同的输入多次（递归地）；回溯也让语法分析器在无效的输入之上给出一个好的错误消息更难。</p>

<h3 id="这本书里有什么？">这本书里有什么？</h3>

<p>免费在线文档提供足够的资料学习基本的语法、句法和语义，但没有详细地解释ANTLR的概念。只有这本书解释了如何识别语言的语法模式，和如何用ANTLR语法表示它们。这本书帮助你充分了解ANTLR，是成为高级用户的必读物。</p>

<p>这本书被组织成四个部分。</p>

<ul>
<li>第一部分介绍ANTLR，提供一些语言的背景知识，带你开始一场ANTLR功能之旅，让你尝下句法的滋味和能用它做什么。</li>
<li>第二部分是关于使用ANTLR语法结合树遍历器设计语法和构建语言应用。</li>
<li>第三部分首先展示了如何定制ANTLR生成的语法分析器的错误处理。接下来，你将学习如何在语法中嵌入动作，因为有时候这样做比构建语法分析树然后遍历它更简单有效。关于动作，你还将学习使用语义谓词更改语法分析器的行为去处理一些具有挑战性的识别问题。最后一章解决一些具有挑战性的语言识别问题，例如识别XML和Python中上下文相关的换行。</li>
<li>第四部分是参考章节，列出了所有关于使用ANTLR语法元语言和它的运行库的规则。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PBL文件格式解析]]></title>
    <link href="http://codemany.com/blog/pbl-file-format-analysis/"/>
    <updated>2015-12-13T17:33:08+08:00</updated>
    <id>http://codemany.com/blog/pbl-file-format-analysis</id>
    <content type="html"><![CDATA[<p>PBL文件是PowerBuilder库文件，在其中存储了应用程序所使用到的所有系统对象和用户自定义对象的集合，同时PBL文件中还存储了源代码控制信息（Source Code Control，简称SCC）。对其文件格式的研究，可以准确地了解程序结构并能对PBL文件中的对象进行修改，同时也有利于库文件的修复，程序动态执行等方面的工作。</p>

<h3 id="pbl文件的存储结构">PBL文件的存储结构</h3>

<p>PBL文件存储信息时是以块（Block）为单位为对象分配存储空间的，每个块的大小固定为512字节，块号从0开始计算，块号与块首字节的偏移地址有如下关系：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>块号 = 块首字节的偏移地址 / 512</span></code></pre></td></tr></table></div></figure>

<p>整个PBL文件由Header块、Bitmap块、Node块、Data块组成。其中除Header块外，其它块均以链表结构组织，其中Data块是Node块中Entry表项的具体内容，是从属于Node块的。下图说明了这些块的关系。</p>

<p><img src="http://codemany.com/uploads/pbl-datastruct.png" title="pbl-datastruct" ></p>

<p>图中Header块、首个Bitmap块及首个Node块在存储空间上是相邻的，其中Node块比较特别，占6个块共3072字节，其余块只占512字节，其空间大小及起始地址如下表所示：</p>

<table><thead>
<tr>
<th style="text-align: right">块号</th>
<th>地址范围</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: right">0</td>
<td>0000-01FF</td>
<td>Header块</td>
</tr>
<tr>
<td style="text-align: right">1</td>
<td>0200-03FF</td>
<td>首个Bitmap块</td>
</tr>
<tr>
<td style="text-align: right">2-7</td>
<td>0400-0FFF</td>
<td>首个Node块</td>
</tr>
</tbody></table>

<h3 id="header块解析">Header块解析</h3>

<p>Header块是整个PBL的描述信息，它包含了PBL的版本标志，库注释，首个SCC数据块的偏移地址等信息。具体内容如下表所示：</p>

<table><thead>
<tr>
<th>块内地址范围</th>
<th>所占字节</th>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>0000-0003</td>
<td>4</td>
<td>char</td>
<td>&#39;HDR*&#39;</td>
</tr>
<tr>
<td>0004-0011</td>
<td>14</td>
<td>char</td>
<td>&#39;PowerBuilder&#39; + 0x00 + 0x00</td>
</tr>
<tr>
<td>0012-0015</td>
<td>4</td>
<td>char</td>
<td>PBL格式版本（如0900表示9.0版本）</td>
</tr>
<tr>
<td>0016-0019</td>
<td>4</td>
<td>long</td>
<td>创建/修改日期时间</td>
</tr>
<tr>
<td>001A-001B</td>
<td>2</td>
<td>byte</td>
<td>保留</td>
</tr>
<tr>
<td>001C-011B</td>
<td>256</td>
<td>char</td>
<td>库注释</td>
</tr>
<tr>
<td>011C-011F</td>
<td>4</td>
<td>long</td>
<td>首个SCC数据块的偏移地址</td>
</tr>
<tr>
<td>0120-0123</td>
<td>4</td>
<td>long</td>
<td>SCC数据块实际大小</td>
</tr>
<tr>
<td>0124-01FF</td>
<td>220</td>
<td>byte</td>
<td>保留</td>
</tr>
</tbody></table>

<h3 id="bitmap块解析">Bitmap块解析</h3>

<p>Bitmap块中存放的是表示PBL文件存储空间的使用情况。该块数据结构如下表所示：</p>

<table><thead>
<tr>
<th>块内地址范围</th>
<th>所占字节</th>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>0000-0003</td>
<td>4</td>
<td>char</td>
<td>&#39;FRE*&#39;</td>
</tr>
<tr>
<td>0004-0007</td>
<td>4</td>
<td>long</td>
<td>下一个Bitmap块的偏移地址或0</td>
</tr>
<tr>
<td>0008-01FF</td>
<td>504</td>
<td>bit</td>
<td>位图（每个位标识一个块）</td>
</tr>
</tbody></table>

<p>由上表可知，包含一个Bitmap块的PBL文件最多可使用504 * 8 = 4032个块。当文件空间超过4032个块时，就需要使用第二个Bitmap块，它的偏移地址由当前Bitmap块块内偏移0004-0007处的值表示。如果是最后一个Bitmap块，则对应的字节处为00 00 00 00，即偏移地址为0。这样就形成了Bitmap块的单向链表。</p>

<p><img src="http://codemany.com/uploads/bitmap-block-chain.png" title="bitmap-block-chain" ></p>

<p>位图用于标识块的使用/空闲情况。在位图中为1的位，表示与该位序号对应的块已被使用；反之，表示对应块未使用。例如FF FF 40 00还原为位图则为11111111 11111111 01000000 00000000，该位图表示PBL文件共有18个块，其中的第16号块空闲未使用。</p>

<p><strong>注意：在实际分析多个PBL文件后发现，位图中的位并不能真实反映对应块的空闲/使用情况，只是记录PBL文件使用了多少个块。</strong></p>

<h3 id="node块解析">Node块解析</h3>

<p>Node块是目录块，主要用于存放Entry目录表项。下表是Node块的数据结构：</p>

<table><thead>
<tr>
<th>块内地址范围</th>
<th>所占字节</th>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>0000-0003</td>
<td>4</td>
<td>char</td>
<td>&#39;NOD*&#39;</td>
</tr>
<tr>
<td>0004-0007</td>
<td>4</td>
<td>long</td>
<td>左Node块的偏移地址或0</td>
</tr>
<tr>
<td>0008-001B</td>
<td>4</td>
<td>long</td>
<td>父Node块的偏移地址或0</td>
</tr>
<tr>
<td>000C-000F</td>
<td>4</td>
<td>long</td>
<td>右Node块的偏移地址或0</td>
</tr>
<tr>
<td>0010-0011</td>
<td>2</td>
<td>short</td>
<td>块内可用空间（初始值3040）</td>
</tr>
<tr>
<td>0012-0013</td>
<td>2</td>
<td>short</td>
<td>按字母顺序最后一个对象名的位置</td>
</tr>
<tr>
<td>0014-0015</td>
<td>2</td>
<td>short</td>
<td>该Node块中的Entry表项数</td>
</tr>
<tr>
<td>0016-0017</td>
<td>2</td>
<td>short</td>
<td>按字母顺序第一个对象名的位置</td>
</tr>
<tr>
<td>0018-001F</td>
<td>8</td>
<td>char</td>
<td>保留</td>
</tr>
<tr>
<td>0020-00BF</td>
<td>3040</td>
<td>chunks</td>
<td>Entry目录表</td>
</tr>
</tbody></table>

<p>其中Entry目录表是顺序表。当一个Node块的空间不足以存储所有Entry表项时，可以再使用一个Node块来存储，并且Entry表项不能跨Node块存储，因此Node块中的空间不能完全利用，会有一定的剩余，这个值记录在块内偏移0010-0011处。</p>

<p>Node块的链接方式有些复杂，它使用一种称之为三叉链表（节点包含四个域：数据域、左指针域、右指针域、父指针域）的链式存储结构把所有Node块组织成为一颗二叉树，这可能是PowerBuilder为了提高查找速度而做的一些优化吧。</p>

<p><img src="http://codemany.com/uploads/node-block-tree.png" title="node-block-tree" ></p>

<h3 id="entry表项解析">Entry表项解析</h3>

<p>每个Entry表项对应于一个对象的源代码或PCODE的描述信息，因此Entry目录表就是整个库中各个对象的索引表，存储了各对象的索引信息。例如，在编程中创建一个名为“pbltest”的Window对象类型，那么在Entry目录表中要存放该对象的两个索引表项，分别为“pbltest.srw”用于存储源代码，“pbltest.win”用于存储PCODE。在Entry目录表中存储的对象有以下这些：</p>

<table><thead>
<tr>
<th>对象类型</th>
<th>源代码后缀</th>
<th>PCODE后辍</th>
</tr>
</thead><tbody>
<tr>
<td>Application</td>
<td>sra</td>
<td>apl</td>
</tr>
<tr>
<td>Window</td>
<td>srw</td>
<td>win</td>
</tr>
<tr>
<td>DataWindow</td>
<td>srd</td>
<td>dwo</td>
</tr>
<tr>
<td>Menu</td>
<td>srm</td>
<td>men</td>
</tr>
<tr>
<td>Function</td>
<td>srf</td>
<td>fun</td>
</tr>
<tr>
<td>Query</td>
<td>srq</td>
<td>-</td>
</tr>
<tr>
<td>Structure</td>
<td>srs</td>
<td>str</td>
</tr>
<tr>
<td>User object</td>
<td>sru</td>
<td>udo</td>
</tr>
<tr>
<td>Pipeline</td>
<td>srp</td>
<td>-</td>
</tr>
<tr>
<td>Project</td>
<td>srj</td>
<td>-</td>
</tr>
<tr>
<td>?</td>
<td>-</td>
<td>pra</td>
</tr>
<tr>
<td>?</td>
<td>-</td>
<td>prp</td>
</tr>
</tbody></table>

<p>Entry表项的具体数据结构如下表所示：</p>

<table><thead>
<tr>
<th>块内地址范围</th>
<th>所占字节</th>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>0000-0003</td>
<td>4</td>
<td>char</td>
<td>&#39;ENT*&#39;</td>
</tr>
<tr>
<td>0004-0007</td>
<td>4</td>
<td>char</td>
<td>PBL格式版本（如0900表示9.0版本）</td>
</tr>
<tr>
<td>0008-000B</td>
<td>4</td>
<td>long</td>
<td>首个Data块的偏移地址</td>
</tr>
<tr>
<td>000C-000F</td>
<td>4</td>
<td>long</td>
<td>对象的实际大小</td>
</tr>
<tr>
<td>0010-0013</td>
<td>4</td>
<td>long</td>
<td>对象的创建/修改日期时间</td>
</tr>
<tr>
<td>0014-0015</td>
<td>2</td>
<td>short</td>
<td>对象的注释长度</td>
</tr>
<tr>
<td>0016-0017</td>
<td>2</td>
<td>short</td>
<td>对象名的长度</td>
</tr>
<tr>
<td>0018-????</td>
<td>?</td>
<td>char</td>
<td>对象名 + 0x00</td>
</tr>
</tbody></table>

<p>这里需要说明的是，每个Entry表项的长度并不是固定的，它随着对象名的长度变化而变化，所以要读取下一个Entry表项，只能通过计算上一个Entry表项的长度即24 + 对象名长度来得
到，或者通过搜索下一个ENT*得到。</p>

<h3 id="data块解析">Data块解析</h3>

<p>在Entry目录表中的各对象的实际数据内容是存储在Data块中的。Data块的数据结构如下表所示：</p>

<table><thead>
<tr>
<th>块内地址范围</th>
<th>所占字节</th>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>0000-0003</td>
<td>4</td>
<td>char</td>
<td>&#39;DAT*&#39;</td>
</tr>
<tr>
<td>0004-0007</td>
<td>4</td>
<td>char</td>
<td>下一个Data块的偏移地址或0</td>
</tr>
<tr>
<td>0008-0009</td>
<td>2</td>
<td>short</td>
<td>本块内存储的数据的实际长度</td>
</tr>
<tr>
<td>0010-01FF</td>
<td>502</td>
<td>char</td>
<td>对象的实际数据</td>
</tr>
</tbody></table>

<p>由上表可知，若对象的数据内容在502字节以上时，就需用多个Data块存放，这些Data块形成一个单向链表。链表的最后一个Data块的0004-0007中存储的偏移地址为00 00 00 00，表示链表结束。0010-01FF处存放的是对象的实际数据，只有最后一个Data块的长度有可能小于502，且以0x00字节表示结束。</p>

<p>根据上面对PBL文件格式的解析，使用Ruby开发了一个小工具，用来输出PBL文件中存储的各种信息。源代码被放在Github上面，供大家参考。</p>

<p>代码下载：<a href="https://github.com/dohkoos/pblanalyzer">https://github.com/dohkoos/pblanalyzer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[带权随机函数]]></title>
    <link href="http://codemany.com/blog/random-with-weight-function/"/>
    <updated>2015-11-18T18:51:05+08:00</updated>
    <id>http://codemany.com/blog/random-with-weight-function</id>
    <content type="html"><![CDATA[<ul>
<li>设计抽奖活动时，我们总是要控制抽奖物品出现的概率，让好的东西很难被抽到；</li>
<li>设计游戏打怪时，我们要控制打怪时的命中概率，要控制宝物掉出的概率；</li>
<li>网站的置顶广告，我们也要根据广告主的广告费用控制广告的出现时间；</li>
<li>设计负载均衡算法时，我们要根据服务器的性能控制服务器被选中的可能。</li>
</ul>

<p>深入思考这些需求，你会发现它们都有相通的概念：每次从多个候选项中随机选取其中一项，要求每个候选项的出现都有一定的概率。</p>

<p>假设有这样的候选项和对应概率：a:20%，b:25%，c:40%，d:15%。现在，把每个候选项的概率用一个称之为权重的正整数表示（最简单的方法是把百分符号去掉）。那么，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>实际概率 = 候选项权重 / 权重总和 * 100%</span></code></pre></td></tr></table></div></figure>

<p>事实上，权重的总和不一定要等于100，可以是任意大小。</p>

<h3 id="算法描述">算法描述</h3>

<p>依次将各候选项的权重从原点开始放在x轴坐标上首尾相连。这样，每个候选项对应一个取值区间，在总区间范围内随机选取一个值，该值所在区间就对应了选中的项。</p>

<p><img src="http://codemany.com/uploads/random-with-weight.png" title="random-with-weight" ></p>

<h3 id="ruby代码实现">Ruby代码实现</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def random(weight)
</span><span class='line'>  # 获取所有候选项的权重总和
</span><span class='line'>  total_weight = weight.inject { |r, e| r + e }
</span><span class='line'>
</span><span class='line'>  # 随机选取一个介于0到权重总和之间的整数
</span><span class='line'>  rand_value = rand(total_weight)  # [0, total_weight)
</span><span class='line'>
</span><span class='line'>  # 扫描所有候选项，并且保留候选项权重的累积数。
</span><span class='line'>  # 每当随机数小于累积数时，就停止并选出当前项。
</span><span class='line'>  weight_barrier = 0
</span><span class='line'>  weight.each_index do |i|
</span><span class='line'>    weight_barrier += weight[i]
</span><span class='line'>
</span><span class='line'>    break i if rand_value &lt; weight_barrier
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

<p>该实现不能保证每个候选项都恰好按正确的比例被选中，但当次数足够多时，应该会十分接近预先设定的比例。</p>

<h3 id="实际案例">实际案例</h3>

<p>要求写int[] get_weight(int[] weight)函数，返回的是权重的索引。其中weight是权重的数字数组，最终的结果是要大概保证按照给定的比例。</p>

<ul>
<li>比如weight为[1, 2, 2]，那么权重比例为1:2:2，执行10次后，大概的输出是0 1 1 0 1 1 2 2 2 2；</li>
<li>比如weight为[100, 0]，那么权重比例为100:0，执行10次后，大概的输出是0 0 0 0 0 0 0 0 0 0；</li>
<li>比如weight为[1, 1]，那么权重比例为1:1，执行10次后，大概的输出是0 1 0 1 0 0 1 1 0 1。</li>
</ul>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def get_weight(weight)
</span><span class='line'>  10.times.map { random(weight) }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>weight = [1, 2, 2]
</span><span class='line'>puts get_weight(weight).join(' ')
</span><span class='line'>
</span><span class='line'>weight = [100, 0]
</span><span class='line'>puts get_weight(weight).join(' ')
</span><span class='line'>
</span><span class='line'>weight = [1, 1]
</span><span class='line'>puts get_weight(weight).join(' ')</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逻辑题-共打了多少鱼]]></title>
    <link href="http://codemany.com/blog/logic-problems-how-many-fish/"/>
    <updated>2015-11-03T15:07:14+08:00</updated>
    <id>http://codemany.com/blog/logic-problems-how-many-fish</id>
    <content type="html"><![CDATA[<p>abcde五人打渔，打完睡觉，a先醒来，扔掉1条鱼，把剩下的分成5份，拿1份走了；b再醒来，也扔掉1条，把剩下的分成5份，拿1份走了；然后cde都按上面的方法取鱼。问他们最少打了多少条鱼？</p>

<table><thead>
<tr>
<th>渔民</th>
<th>醒来时鱼的总数</th>
<th>取走的鱼数</th>
</tr>
</thead><tbody>
<tr>
<td>a</td>
<td>x1 = x</td>
<td>(x1 - 1) / 5</td>
</tr>
<tr>
<td>b</td>
<td>x2 = 4 * (x1 - 1) / 5</td>
<td>(x2 - 1) / 5</td>
</tr>
<tr>
<td>c</td>
<td>x3 = 4 * (x2 - 1) / 5</td>
<td>(x3 - 1) / 5</td>
</tr>
<tr>
<td>d</td>
<td>x4 = 4 * (x3 - 1) / 5</td>
<td>(x4 - 1) / 5</td>
</tr>
<tr>
<td>e</td>
<td>x5 = 4 * (x4 - 1) / 5</td>
<td>(x5 - 1) / 5</td>
</tr>
</tbody></table>

<p>由于扔掉1条鱼后，还能被分成5份，设渔民醒来时鱼的总数为remain，那么(remain - 1) % 5的值为0，即remain % 5的值为1。</p>

<p>最简单的方法就是枚举，最小值从1开始：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fishmen = [0, 0, 0, 0, 0]  # 渔民取走的鱼数
</span><span class='line'>total = 1
</span><span class='line'>
</span><span class='line'>while true do
</span><span class='line'>  remain = total  # 渔民a醒来时鱼的总数
</span><span class='line'>  5.times do |i|  # 5个渔民轮流取鱼
</span><span class='line'>    break if remain % 5 != 1  # 如果不符合扔掉1条鱼后还能分成5份的条件，就枚举下个值
</span><span class='line'>    fishmen[i] = (remain - 1) / 5  # 渔民取走的鱼数
</span><span class='line'>    remain = 4 * fishmen[i]  # 渔民取走鱼后剩下的鱼数
</span><span class='line'>  end
</span><span class='line'>  break if fishmen[4] != 0  # 如果渔民e也取到了鱼，那么就得到了鱼的总数
</span><span class='line'>  total += 1
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>puts total  # 结果是3121条鱼</span></code></pre></td></tr></table></div></figure>

<p>上面的代码总过做了3901次循环，下面来做进一步的优化。</p>

<p>从表格可以看出，因为(x5 - 1) % 5 == 0，推导出x5 &gt;= 6；又x1 % 5 == 1，因此x1的个位数必须是1或者6。所以，枚举的最小值可以从11开始，每次步进为5。优化后的代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fishmen = Array.new(n, 0)
</span><span class='line'>total = 11
</span><span class='line'>
</span><span class='line'>while true do
</span><span class='line'>  remain = total
</span><span class='line'>  5.times do |i|
</span><span class='line'>    break if remain % 5 != 1
</span><span class='line'>    fishmen[i] = (remain - 1) / 5
</span><span class='line'>    remain = 4 * fishmen[i]
</span><span class='line'>  end
</span><span class='line'>  break if fishmen[4] != 0
</span><span class='line'>  total += 5
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>puts total</span></code></pre></td></tr></table></div></figure>

<p>总的循环次数减少到1401次，减少了整整64%的循环。</p>

<p>推而广之：n个渔民打渔，每个渔民依次扔掉1条鱼后，把鱼分成n份，然后拿走其中一份，求最少打了多少条鱼？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fishmen = Array.new(n, 0)
</span><span class='line'>total = 2 * n + 1
</span><span class='line'>
</span><span class='line'>while true do
</span><span class='line'>  remain = total
</span><span class='line'>  n.times do |i|
</span><span class='line'>    break if remain % n != 1
</span><span class='line'>    fishmen[i] = (remain - 1) / n
</span><span class='line'>    remain = remain - 1 - fishmen[i]
</span><span class='line'>  end
</span><span class='line'>  break if fishmen[n - 1] != 0
</span><span class='line'>  total += n
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>puts total</span></code></pre></td></tr></table></div></figure>

<p>这下子无论多少个渔民打渔都可以用这段代码搞定了。我试了试9个渔民，发现竟然可以打近3.9亿条鱼，那得有多少鱼啊！另外，计算时间也明显开始变长了。不知道还能不能做更进一步的优化。如果你有更好的算法，请快点告诉我吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写出受欢迎的编程文章的10个技巧]]></title>
    <link href="http://codemany.com/blog/10-tips-for-writing-consistently-popular-programming-articles/"/>
    <updated>2015-10-30T15:16:29+08:00</updated>
    <id>http://codemany.com/blog/10-tips-for-writing-consistently-popular-programming-articles</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.devx.com/blog/2009/01/10-tips-for-writing-consistent.html">http://www.devx.com/blog/2009/01/10-tips-for-writing-consistent.html</a></p>

<p>对于作者，这是一个可悲的事实当谈到受大众欢迎时，不是所有的文章都是平等的，一些文章被证明比其它的更受欢迎。事实是，不管你选的主题有多好，或你写的有多好，你都无法每次都打出一个本垒打。尽管如此，如果你已经在写编程的文章（或者你正在考虑写），这里列出的技巧被证明能帮助文章从沉闷乏味的堆里跃升至最多查看次数的列表的顶部。</p>

<h3 id="1-选择一个简练的话题">1. 选择一个简练的话题</h3>

<p>挑选一个简练的话题是艰难的，因为很多有趣的话题一点也不简洁，它们是冗长的和复杂的。有时候你可以协同创建很好的、完备的、独特的文章作为一个较长的话题，但通常不要这样做。相反你可能需要写一个系列或一本书。要么选择别的，要么把这个话题分成简练的块。</p>

<p>接下来的几个技巧可以帮助你满足技巧#1的要求：</p>

<h3 id="2-增强现有的文档">2. 增强现有的文档</h3>

<p>一些最受欢迎的文章本质上是增强文档。那并没有什么错，因为技术文档经常是匆忙产生的，是不完整的，不是由开发者编写的，或缺乏相关的例子。在几乎所有情况下，文档（或文档的缺乏）给作者提供了丰富的话题。</p>

<h3 id="3-比较事物">3. 比较事物</h3>

<p>另一个经常受欢迎的策略是写一个比较两个或多个受欢迎的项目。这些可能是语言，语言版本，APIs，数据库，操作系统，框架，编程方法，模式——在快速变化的开发者世界中，这里有无数的机会。挑两个或多个开发者使用的技术，并且写那种最好能帮助开发者转型或选择它们的文章。</p>

<h3 id="4-列个清单">4. 列个清单</h3>

<p>你可能会认为它是厌烦的，但“10 for/about”类型的文章往往会做的很好。（如果这篇博文做的很好，我会认为它是这个观点的验证，如果没有的话，或许我会减少成“9个技巧……”）。编辑们和出版商们喜欢这些文章，因为读者喜欢它们。我怀疑读者喜欢它们是因为包含很多东西的文章增加了概率，这些文章至少有一个包含需要或至少有有趣的材料，但也许人们只是喜欢列表。无论如何……</p>

<p>在你有一个坚实的话题后，你准备开始写作，请记住这些点：</p>

<h3 id="5-忽视历史">5. 忽视历史</h3>

<p>是的，我知道你认为每个人在切入正题前都需要了解你的特定的主题的历史背景，但事实是，他们很少这样做。比起你在高中学习代数时想让你的父亲解释数学的历史，你的读者不再想沉思你的历史评论。这里有个读者行为分析的内部技巧：大部分读者从来没有读完过第一页。所以，如果你没有回答他们的问题，或立即抓住他们的兴趣，不管你文章的其余部分有多么正确，他们不会看它。链接到历史，切入正题。</p>

<h3 id="6-避免“helloworld”例子">6. 避免“HelloWorld”例子</h3>

<p>你在你读过的文章和书里看到过一千个“HelloWorld”的代码例子，但这并不意味着它们是好的！它们不是。没有人喜欢它们。对于学习编程的任何事它们是完全无用的。它们也不是娱乐。完全有可能写出清晰而简单的既可以教又不烦闷的例子。</p>

<h3 id="7-说明你的观点">7. 说明你的观点</h3>

<p>开发者喜欢代码，的确，但你也可以通过包含插图和截图帮他们节省时间和精力。这是因为他们中的许多人可能不会运行你那迷人的示例代码，但如果他们正在阅读你的文章，他们很可能对结果感兴趣。显示输入或输出无论何时都很重要。</p>

<h3 id="8-显示有趣的代码">8. 显示有趣的代码</h3>

<p>许多技术作者似乎认为，提供一个简短的解释之后大量的示例代码（或者更糟的是，只是显示代码没有解释）将刺激他们的读者研究代码获得启示。我向你保证那不是真的。最好的文章解释了话题，只显示代码片断，然后解释或说明（或两者）代码做了什么，它如何与周围的代码或整体的话题适应，什么时候你该使用它，什么时候你不该使用它，也只有到那时——仅且当它是真正有用的——他们会向你打听更长的代码块。相反，只放有趣的代码在你的文章里，并提供其余部分为可运行的，完整的项目下载。</p>

<h3 id="9-化繁为简">9. 化繁为简</h3>

<p>避免冲动去告诉人们你的主题是多么复杂。他们知道它是复杂的，或者他们很可能不会读你的文章。相反，想办法去让你的复杂的主题显得更简单。</p>

<p>也许是所有中最重要的一点：</p>

<h3 id="10-简明扼要">10. 简明扼要</h3>

<p>最受欢迎的技术文章只给读者他们需要的——没有更多。</p>

<p>最后，这是真的，有些文章很受欢迎，尽管很少有或者没有在这里列出的特性——但这并不是你可以控制的东西。尝试去写那种文章很像博顺子，你会浪费大部分的时间。专注于基础知识，写很多文章，然后其中一些人将成为赢家。</p>

<p>快乐写作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Application对象里存储数据的陷阱]]></title>
    <link href="http://codemany.com/blog/trap-for-storing-data-in-the-application-object/"/>
    <updated>2015-10-27T20:57:41+08:00</updated>
    <id>http://codemany.com/blog/trap-for-storing-data-in-the-application-object</id>
    <content type="html"><![CDATA[<p>看到<a href="http://www.developerphil.com/dont-store-data-in-the-application-object/">Don&#39;t Store Data in the Application Object</a>讲，在Application对象中存储共享数据会引起NullPointerException。顿时心里就咯噔了一下，用了四分之三秒，想起自己有个业余项目就干了这样的事。赶紧地测试看看。</p>

<p>打开应用，从MainActivity进入TxtViewerActivity界面（这里MainActivity主要是读取目录数据，然后保存在继承自Application的MainApp中，供TxtViewerActivity调用）。按手机Home键退出应用，这时你按菜单键可以看到该应用的缩图。然后在Eclipse中打开Window -&gt; Show View -&gt; Other -&gt; Android -&gt; Devices视图，双击窗口内的设备，然后点击设备下对应的进程，点击右上方红色的“Stop Process”图标。</p>

<p><img src="http://codemany.com/uploads/android-devices.png" title="android-devices" ></p>

<p>重新按菜单键打开应用，然后……然后果然在LogCat中看到了有NullPointerException的大段红色警告文字。</p>

<h3 id="为什么会crash的？">为什么会Crash的？</h3>

<p>根本原因在于：当应用被kill掉后，通过菜单键重新打开时，应用不会开始重新启动。Android系统会新建一个Application对象，然后启动上次离开时的TxtViewerActivity以造成这个应用从来没有被kill掉的假象。因为没有经过MainActivity的数据读取，所以在TxtViewerActivity中读取数据当然要抛出异常了。</p>

<h3 id="有没有替代方法呢？">有没有替代方法呢？</h3>

<ul>
<li>直接将数据通过Intent传递给TxtViewerActivity？当然也会碰到上述同样的问题。</li>
<li>使用SharedPreferences？可惜只能存储boolean、int、long、float和String五种数据类型，不支持List的存储；</li>
<li>使用持久化存储？也不支持List的存储，而且太笨重了；</li>
<li>使用Singleton对象保存共享数据，然后通过Intent传递呢？这个想法不错，还可以将读取assets资源等操作移到该对象中，做到单一职责原则，改善设计。不过这样一来Singleton对象会对MainActivity的context有长期引用，容易造成内存泄露。如果不把读取操作放进去……那根本就不可能，你能让一个追求完美的程序猿忍受糟糕的代码设计吗！</li>
</ul>

<p>幸好早就有人总结出来经验了：使用Application的context代替Activity的context。</p>

<p>创建Singleton对象，在Application对该对象保持引用，把原来存储在Application中共享的数据全部移到Singleton对象中，将Activity中读取assets资源等操作也放入该对象，Activity中原来对Application对象的访问改成通过Application对象对Singleton对象的访问。</p>

<p>这样修改后，不光解决了应用的崩溃，还预防了内存泄漏，更改进代码的设计。</p>

<p>代码下载：<a href="https://github.com/dohkoos/txtReader">https://github.com/dohkoos/txtReader</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一开始就编写优质的OO代码]]></title>
    <link href="http://codemany.com/blog/writing-great-oo-code-day-one/"/>
    <updated>2015-10-23T13:50:44+08:00</updated>
    <id>http://codemany.com/blog/writing-great-oo-code-day-one</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://weblogs.java.net/blog/2008/10/03/writing-great-oo-code-day-one">https://weblogs.java.net/blog/2008/10/03/writing-great-oo-code-day-one</a></p>

<p>没有获取经验的捷径。编写良好的面向对象代码需要经验。尽管如此，这里有三个实践可以帮助你一开始就有个良好的开端：</p>

<ol>
<li>使用测试驱动开发（TDD）编写你所有的代码</li>
<li>遵循<a href="http://xp.c2.com/XpSimplicityRules.html">简单的规则</a></li>
<li>命令代替询问（Tell Don&#39;t Ask）</li>
</ol>

<h3 id="使用tdd编写你所有的代码">使用TDD编写你所有的代码</h3>

<p><a href="http://ponderingobjectorienteddesign.blogspot.com/2008/09/tdd-is-design-activity.html">测试先行</a>编写的代码和测试后行编写的代码是非常非常不同的代码。测试先行编写的代码是松耦合和高内聚的。测试后行编写的代码往往会破坏封装，当一些属性或私有方法需要被暴露给测试的时候，因为这些类没有被设计成要被测试的。如果你编写的代码测试先行，代码的依赖性会更好，你的代码将是松耦合和高内聚的。稍后详细讨论测试如何帮助你设计更好的代码。</p>

<h3 id="遵循简单的规则">遵循简单的规则</h3>

<p>代码是简洁的，当它：</p>

<ol>
<li>通过所有的测试</li>
<li>不包含重复代码</li>
<li>表达了所有的意图</li>
<li>使用了最少的类和方法</li>
</ol>

<p>重要的是注意到我使用了一个有序列表。顺序很重要。带有单一main()方法的单一GodClass并不简单。它可以通过所有的测试，但在比“Hello, world!”更复杂的任何程序里它一定会包含重复代码和没有表达所有的意图。</p>

<p>我与简单的规则的斗争重点围绕在<a href="http://ponderingobjectorienteddesign.blogspot.com/2008/09/if-bugs.html">If Bug</a> 。我不明白遵循简单的规则如何阻止某人编写大量的if代码。有人会说，我试过了，大量的if代码不会表达意图。但是，当你读到这样的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (mobile.getType() == MobileTypes.STANDARD) {
</span><span class='line'>    alert();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>它实在是太容易看出意图了。无论该代码是在哪个方法的上下文中，如果mobile是STANDARD类型，那么警报。你还需要多少意图？</p>

<p>然后我灵光小闪。如果有那样的代码，那么在代码的其它地方肯定还有更多。可能是这样的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (mobile.getType() == MobileTypes.GAS) {
</span><span class='line'>    registerGasReading();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>和</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (mobile.getType() == MobileTypes.TEXT) {
</span><span class='line'>    sendTextMessage();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>和</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (mobile.getType() == MobileTypes.LOCATION) {
</span><span class='line'>    notifyLocation();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>你看见了吗？我当然知道。违反规则2。许多许多违反规则2。并且是违反规则2的最糟糕的那种。重复代码在许多不同的代码片段中。重复代码将非常非常难被找到。所以为了帮助防止这个，我列出来了。</p>

<h3 id="命令代替询问">命令代替询问</h3>

<p>命令代替询问意味着不要询问一个对象的状态然后做些什么。应该命令那个对象去做些什么。这意味着所有这些if例子变成了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mobile.alert();</span></code></pre></td></tr></table></div></figure>

<p>和</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mobile.registerGasReading();</span></code></pre></td></tr></table></div></figure>

<p>和</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mobile.sendTextMessage();</span></code></pre></td></tr></table></div></figure>

<p>和</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mobile.notifyLocation();</span></code></pre></td></tr></table></div></figure>

<p>现在假设有一些if子句散落在有重复实现的整个代码中。在那个大量if代码的版本中，它们将非常难被找到，但在命令代替询问版本中，所有的实现都在Mobile类中。所有的都在一个地方寻找和消除。</p>

<p>聆听你的测试也将帮助你保持代码简单。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface Alarm {
</span><span class='line'>    void alert(Mobile mobile);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public class Siren implements Alarm {
</span><span class='line'>    public void alert(Mobile mobile) {
</span><span class='line'>    if (mobile.getType == MobileTypes.STANDARD) {
</span><span class='line'>        soundSiren();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public class SirenTest extends TestCase {
</span><span class='line'>    public void testAlert() {
</span><span class='line'>        LocationMobile mobile = new LocationMobile();
</span><span class='line'>        Siren siren = new Siren();
</span><span class='line'>        siren.alert(mobile);
</span><span class='line'>        assert(sirenSounded());
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>如果你仔细聆听你的测试，它会问你，“你为什么需要LocationMobile去测试Siren？”是呀，为什么呢？似乎Siren甚至不应该知道LocationMobile。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class LocationMobile {
</span><span class='line'>    private Alarm alarm;
</span><span class='line'>    public LocationMobile(Alarm alarm) {
</span><span class='line'>        this.alarm = alarm;
</span><span class='line'>    }
</span><span class='line'>    public void alert() {
</span><span class='line'>        alarm.alert();    // alert on Alarm no longer needs a mobile
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public class LocationMobileTest extends TestCase {
</span><span class='line'>    public void testAlert() {
</span><span class='line'>        Alarm alarm = EasyMock.createMock(Alarm.class);
</span><span class='line'>        alarm.alert();
</span><span class='line'>        EasyMock.replay(alarm);
</span><span class='line'>        Mobile mobile = new LocationMobile(alarm);
</span><span class='line'>        mobile.alert();
</span><span class='line'>        EasyMock.verify(alarm);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>看上去我仅仅互换了依赖。作为Alarm依赖Mobile的替换，现在有了Mobile依赖Alarm。如果你仔细看第一个测试，真正的依赖是Siren知道LocationMobile。一个具体类依赖于另一个具体类。这违反了<a href="http://c2.com/cgi/wiki?DependencyInversionPrinciple">依赖倒置原则 （DIP）</a>。第二个例子是LocationMobile依赖接口Alarm。一个具体类依赖一个抽象。这满足了DIP。</p>

<p>如果你使用TDD编写你所有的代码，遵循简单的规则，以及命令代替询问，那么你会在那条成为一个更好的OO程序员的路上。良好的OO代码容易阅读和维护，但是可能难于编写。至少开始是这样。你写得越多，你将会变得更好，你将得到的经验也越多。与此同时，这些实践会让你在你的路上走得更好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby调试工具概览]]></title>
    <link href="http://codemany.com/blog/ruby-debugger-overview/"/>
    <updated>2015-10-19T10:50:09+08:00</updated>
    <id>http://codemany.com/blog/ruby-debugger-overview</id>
    <content type="html"><![CDATA[<p>调试Ruby代码最简单的方式就是使用puts或p方法。当有很多变量需要查看时，到处添加puts或p方法就可能变的不那么实际。幸好，Ruby社区提供了许多强大的调试工具。</p>

<h3 id="ruby-1-8-时代">Ruby 1.8+时代</h3>

<p>调试Ruby代码使用<a href="https://github.com/ruby-debug/ruby-debug">ruby-debug</a>。调试Rails代码则是<a href="https://github.com/nixme/pry-nav">pry-nav</a>。不过在Ruby 1.9出来后ruby-debug就有问题了，于是就有了<a href="https://github.com/mark-moseley/ruby-debug">ruby-debug19</a>，一个针对Ruby 1.9的ruby-debug移植版本。</p>

<h3 id="ruby-1-9-2-时代">Ruby 1.9.2+时代</h3>

<p>等到Ruby 1.9.2发布，ruby-debug彻底歇菜，然后<a href="https://github.com/cldwalker/debugger">debugger</a>就出现了。pry-nav也不好使了，还好有<a href="https://github.com/nixme/pry-debugger">pry-debugger</a>。</p>

<h3 id="ruby-2-时代">Ruby 2+时代</h3>

<p>新的Ruby调试工具<a href="https://github.com/deivid-rodriguez/byebug">byebug</a>来了。虽然byebug也能调试Rails应用，但它不提供语法高亮，所以使用<a href="https://github.com/deivid-rodriguez/pry-byebug">pry-byebug</a>是个更好的选择。</p>

<table><thead>
<tr>
<th></th>
<th>Ruby 1.8+</th>
<th>Ruby 1.9</th>
<th>Ruby 1.9.2+</th>
<th>Ruby 2+</th>
</tr>
</thead><tbody>
<tr>
<td>Ruby</td>
<td>ruby-debug</td>
<td>ruby-debug19</td>
<td>debugger</td>
<td>byebug</td>
</tr>
<tr>
<td>Rails</td>
<td>pry-nav</td>
<td>pry-nav</td>
<td>pry-debugger</td>
<td>pry-byebug</td>
</tr>
</tbody></table>

<h3 id="其它">其它</h3>

<p><a href="https://github.com/pry/pry">Pry</a>其实不是纯粹的调试工具，它只是IRB的替代品，所以缺乏必要的调试指令。pry-nav、pry-debugger和pry-byebug做的只是分别把ruby-debug、debugger和byebug中的step、next、continue等指令添加到Pry中。</p>

<ul>
<li>pry-nav = Pry + ruby-debug</li>
<li>pry-debugger = Pry + debugger</li>
<li>pry-byebug = Pry + byebug</li>
</ul>

<p>如果要调试view怎么办？可以使用<a href="https://github.com/rails/web-console">Web Console</a>。在view里面加上&lt;%= console %&gt;，当view出现异常时，就会在异常界面下方，出现一个网页版的IRB，方便调试。Web Console默认只接受localhost的请求，假如需要让别的IP也能访问的话，可以这样做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Application &lt; Rails::Application
</span><span class='line'>  config.web_console.whitelisted_ips = '192.168.0.100'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用VisualVM检测Java内存泄漏]]></title>
    <link href="http://codemany.com/blog/how-to-detect-java-memory-leak-using-visualvm/"/>
    <updated>2015-10-12T13:08:19+08:00</updated>
    <id>http://codemany.com/blog/how-to-detect-java-memory-leak-using-visualvm</id>
    <content type="html"><![CDATA[<p>Java的一个重要优点是通过垃圾收集器（Garbage Collection）自动管理内存的回收，程序员不需要关注它。程序员真的不需要关注内存管理吗？只要你碰到过OutOfMemoryError你就知道它不是真的。</p>

<p>这里我会展示如何使用VisualVM快速定位内存泄漏。先看下面这段代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.util.List;
</span><span class='line'>import java.util.ArrayList;
</span><span class='line'>
</span><span class='line'>public class MemoryLeakDemo {
</span><span class='line'>    public static void main(String[] args) {
</span><span class='line'>        new Thread(new MemoryLeak(), "MemoryLeak").start();
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class MemoryLeak implements Runnable {
</span><span class='line'>    public static List&lt;Integer&gt; leakList = new ArrayList&lt;Integer&gt;();
</span><span class='line'>
</span><span class='line'>    public void run() {
</span><span class='line'>        int count = 0;
</span><span class='line'>        while (true) {
</span><span class='line'>            try {
</span><span class='line'>                Thread.sleep(3);
</span><span class='line'>            } catch (InterruptedException e) {
</span><span class='line'>            }
</span><span class='line'>            count++;
</span><span class='line'>            Integer i = new Integer(count);
</span><span class='line'>            leakList.add(i);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>执行下列命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -verbose:gc -XX:+PrintGCDetails -Xmx20m MemoryLeakDemo</span></code></pre></td></tr></table></div></figure>

<p>等待一段时间后，你会看到：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Exception in thread "MemoryLeak" java.lang.OutOfMemoryError: Java heap space
</span><span class='line'>        at java.util.Arrays.copyOf(Arrays.java:3181)
</span><span class='line'>        at java.util.ArrayList.grow(ArrayList.java:261)
</span><span class='line'>        at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
</span><span class='line'>        at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)
</span><span class='line'>        at java.util.ArrayList.add(ArrayList.java:458)
</span><span class='line'>        at MemoryLeak.run(MemoryLeakDemo.java:22)
</span><span class='line'>        at java.lang.Thread.run(Thread.java:745)
</span><span class='line'>Heap
</span><span class='line'> PSYoungGen      total 3584K, used 298K [0x00000000ff980000, 0x00000000ffe80000, 0x0000000100000000)
</span><span class='line'>  eden space 3072K, 9% used [0x00000000ff980000,0x00000000ff9ca908,0x00000000ffc80000)
</span><span class='line'>  from space 512K, 0% used [0x00000000ffc80000,0x00000000ffc80000,0x00000000ffd00000)
</span><span class='line'>  to   space 512K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000ffe80000)
</span><span class='line'> ParOldGen       total 13824K, used 12156K [0x00000000fec00000, 0x00000000ff980000, 0x00000000ff980000)
</span><span class='line'>  object space 13824K, 87% used [0x00000000fec00000,0x00000000ff7df3e8,0x00000000ff980000)
</span><span class='line'> Metaspace       used 7993K, capacity 8164K, committed 8448K, reserved 1056768K
</span><span class='line'>  class space    used 912K, capacity 954K, committed 1024K, reserved 1048576K</span></code></pre></td></tr></table></div></figure>

<p>打开VisualVM开始监测MemoryLeakDemo，在Monitor标签页我们可以看到实时的程序内存堆的使用情况：</p>

<p><img src="http://codemany.com/uploads/visualvm-heap.png" title="visualvm-heap" ></p>

<p>波峰到波谷处是执行了GC的，明显可以看到执行GC后内存曲线仍旧呈上扬趋势，也就是说，内存占用是只升不降。到底是什么原因导致的呢？</p>

<p>打开Sampler标签页，点击Memory按钮启动一个内存分析会话，VisualVM会定期获取所有执行线程的转储，分析栈跟踪信息，实时显示成堆直方图。通过堆直方图，我们就可以知道哪个对象占用了较多的内存，以便做进一步的优化。</p>

<p><img src="http://codemany.com/uploads/visualvm-sampler.png" title="visualvm-sampler" ></p>

<p>如上图所示，第1行的Integer对象占用内存最大，已经有41万多实例了，并且还在持续增加中。很显然，罪魁祸首就是它了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对抗完美]]></title>
    <link href="http://codemany.com/blog/fighting-perfection/"/>
    <updated>2015-10-11T07:43:24+08:00</updated>
    <id>http://codemany.com/blog/fighting-perfection</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://usabilitypost.com/2008/10/08/fighting-perfection/">http://usabilitypost.com/2008/10/08/fighting-perfection/</a></p>

<p>如果你像我一样，你可能经常会发现自己从来没有完全满意你的工作——总是做出调整和修改，总是找到你不太喜欢的事情然后改进他们。这适用于很多创造性的努力——或许你正在为你的博客加工一篇文章，整理一份报告或者写一封重要的电子邮件。</p>

<p>问题是，即使在作出修改后，仍然有一些事情你可以调整，事情仍然不是相当完美。</p>

<p>这当然是很好的，你给自己设置了一个高标准。如果你不满意你的工作，那么为什么你的访客或客户就要满意呢？</p>

<h3 id="追求完美是件好事">追求完美是件好事</h3>

<blockquote>
<p>一个建筑师拥有的两个最重要的工具是绘图室的橡皮擦和工地的大铁锤。</p>

<p>Frank Lloyd Wright</p>
</blockquote>

<p>Steve Jobs不满意iPhone的第一个版本。他做了一个艰难的决定去放弃最初的设计，因为他不喜欢它；他觉得这不是Apple能做到的最好的。这引起了很多问题给开发团队，因为他们必须在很短的时间范围内整理出一份全新的设计。</p>

<p>新版本获得了成功，要是他没有做出这个艰难的决定，iPhone将不会成为手机行业的大标志，这在一定程度上要归功于它的标志性设计。</p>

<p>但是……</p>

<h3 id="完美是困难的和费时的">完美是困难的和费时的</h3>

<p>完美可以是危险的和误导的。什么时候足够好？什么时候你可以前进，释放你应用的新版本或发布你的新文章？完美是太高的一个目标，因为它简直太难和太费时去实现。</p>

<p>如果你成了完美的奴隶，你会发现你所有的时间被耗尽。你会不停地做修改调整调整修改——事情却没有按时做完。</p>

<h3 id="如何对抗完美">如何对抗完美?</h3>

<p>考虑优先级——什么是真正要紧的事？对于一个非常大的公司，类似iPhone的东西是一个关键的产品；如果你搞砸了，它能造成严重损失。把产品做正确是至关重要的。设定一个非常高的标准在这里将是一个不错的主意。</p>

<p>那么更小的事情像是博客的设计呢？最终，它通常并不重要，除非这个博客是你的主要业务。在这里简单是你的盟友。简单的东西很难被搞砸，因此创建简单的事情然后把工作做完。</p>

<p>你最宝贵的资源是你的时间。为了对抗完美你必须将时间排出优先次序，并专注于那些要紧的事情。如果你正在做的和改进的事情没有那么重要，那么这些事情就不应该去做。</p>

<h3 id="把事情做完">把事情做完</h3>

<blockquote>
<p>做完。开始把它当作一个咒语。当你去做完它时意味着某些事情已经被完成。决定已经做出，你可以继续前进。做完意味着你正在累积动力。</p>

<p>37signals, <a href="http://gettingreal.37signals.com/ch06_Done.php">Getting Real</a></p>
</blockquote>

<p>执行比想法更重要。把足够好的东西释放出来比做完美但从未完成的东西更好。不要在你做的每件事情上寻求完美——除了那些真正要紧的事情。驯服完美——更快地做完其它的每件事情，把节省下来的时间用在你最重要的项目上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch的RESTful API]]></title>
    <link href="http://codemany.com/blog/elasticsearch-restful-api/"/>
    <updated>2015-02-14T09:31:14+08:00</updated>
    <id>http://codemany.com/blog/elasticsearch-restful-api</id>
    <content type="html"><![CDATA[<p>CURD的URL格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:9200/&lt;index&gt;/&lt;type&gt;/[&lt;id&gt;]</span></code></pre></td></tr></table></div></figure>

<p>id是可选的，不提供的话Elasticsearch会自动生成。index和type将信息进行分层，便于管理。可以将index理解为数据库，type理解为数据表。</p>

<p>创建</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 使用自动生成ID的方式新建纪录
</span><span class='line'>curl -XPOST localhost:9200/&lt;index&gt;/&lt;type&gt; -d '{ "tag" : "bad" }'
</span><span class='line'>
</span><span class='line'># 使用指定的ID新建记录
</span><span class='line'>curl -XPOST localhost:9200/&lt;index&gt;/&lt;type&gt;/3 -d '{ "tag" : "bad" }'</span></code></pre></td></tr></table></div></figure>

<p>查询</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 查询所有的index和type的记录
</span><span class='line'>curl -XGET localhost:9200/_search?pretty
</span><span class='line'>
</span><span class='line'># 查询某个index下所有type的记录
</span><span class='line'>curl -XGET localhost:9200/&lt;index&gt;/_search?pretty
</span><span class='line'>
</span><span class='line'># 查询某个index下某个type下所有的记录
</span><span class='line'>curl -XGET localhost:9200/&lt;index&gt;/&lt;type&gt;/_search?pretty
</span><span class='line'>
</span><span class='line'># 使用参数查询所有的记录
</span><span class='line'>curl -XGET localhost:9200/_search?q=tag:bad&pretty
</span><span class='line'>
</span><span class='line'># 使用参数查询某个index下的所有记录
</span><span class='line'>curl -XGET localhost:9200/&lt;index&gt;/_search?q=tag:bad&pretty
</span><span class='line'>
</span><span class='line'># 使用参数查询某个index下某个type下所有的记录
</span><span class='line'>curl -XGET localhost:9200/&lt;index&gt;/&lt;type&gt;/_search?q=tag:bad&pretty
</span><span class='line'>
</span><span class='line'># 使用JSON参数查询所有的记录，-d代表一个JSON格式的对象
</span><span class='line'>curl -XGET localhost:9200/_search?pretty -d '{ "query" : { "term" : { "tag" : "bad" } } }'
</span><span class='line'>
</span><span class='line'># 使用JSON参数查询某个index下的所有记录
</span><span class='line'>curl -XGET localhost:9200/&lt;index&gt;/_search?pretty -d '{ "query" : { "term" : { "tag" : "bad" } } }'
</span><span class='line'>
</span><span class='line'># 使用JSON参数查询某个index下某个type下所有的记录
</span><span class='line'>curl -XGET localhost:9200/&lt;index&gt;/&lt;type&gt;/_search?pretty -d '{ "query" : { "term" : { "tag" : "bad" } } }'</span></code></pre></td></tr></table></div></figure>

<p>更新</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPUT localhost:9200/&lt;index&gt;/&lt;type&gt;/3 -d '{ "tag" : "good" }'</span></code></pre></td></tr></table></div></figure>

<p>删除</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XDELETE localhost:9200/&lt;index&gt;</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch安装]]></title>
    <link href="http://codemany.com/blog/elasticsearch-installation/"/>
    <updated>2015-02-10T23:50:34+08:00</updated>
    <id>http://codemany.com/blog/elasticsearch-installation</id>
    <content type="html"><![CDATA[<p><a href="http://elastic.co/">Elasticsearch</a>是一款基于<a href="http://lucene.apache.org/">Lucene</a>构建的开源分布式全文检索服务器。提供RESTful API，采用多shard的方式保证数据安全，提供自动resharding的功能，能够很轻松地进行大规模的横向扩展，以支撑PB级的结构化和非结构化海量数据的处理。</p>

<p>安装Java 1.7</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /usr/java
</span><span class='line'>cd /usr/java
</span><span class='line'>wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/7u67-b01/jdk-7u67-linux-x64.rpm
</span><span class='line'>rpm -ivh jdk-7u67-linux-x64.rpm
</span><span class='line'>java -version
</span><span class='line'>echo $JAVA_HOME</span></code></pre></td></tr></table></div></figure>

<p>安装Elasticsearch 1.4.1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /usr/elasticsearch
</span><span class='line'>cd /usr/elasticsearch
</span><span class='line'>wget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.4.1.tar.gz
</span><span class='line'>tar -xvf elasticsearch-1.4.1.tar.gz
</span><span class='line'>cd elasticsearch-1.4.1
</span><span class='line'>./bin/elasticsearch</span></code></pre></td></tr></table></div></figure>

<p>然后访问<code>http://localhost:9200/?pretty</code>就可以看到类似下面的返回：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "status" : 200,
</span><span class='line'>  "name" : "Powerpax",
</span><span class='line'>  "cluster_name" : "elasticsearch",
</span><span class='line'>  "version" : {
</span><span class='line'>    "number" : "1.4.1",
</span><span class='line'>    "lucene_version" : "4.10.2"
</span><span class='line'>  },
</span><span class='line'>  "tagline" : "You Know, for Search"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>只是运行起来是不够的，通常我们需要将Elasticsearch安装成服务，设置成开机自启动什么的。这要用到<a href="https://github.com/elasticsearch/elasticsearch-servicewrapper">elasticsearch-servicewrapper</a>了。下载解压后把service文件夹拷贝到elasticsearch-1.4.1/bin目录下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./bin/service/elasticsearch install  # 安装服务
</span><span class='line'>./bin/service/elasticsearch start  # 运行服务</span></code></pre></td></tr></table></div></figure>

<p>其它选项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>console 以前台方式运行Elasticsearch
</span><span class='line'>stop 停止Elasticsearch
</span><span class='line'>remove 移除系统启动中的Elasticsearch服务（init.d/service）</span></code></pre></td></tr></table></div></figure>

<p>需要注意的是，在小内存机器上运行时，需要限制下内存大小，否则服务会无法启动，出现如下警告信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting Elasticsearch...
</span><span class='line'>Waiting for Elasticsearch......................
</span><span class='line'>WARNING: Elasticsearch may have failed to start.</span></code></pre></td></tr></table></div></figure>

<p>打开bin/service/elasticsearch.conf文件，设置Elasticsearch能够分配的JVM内存大小。一般情况下，设置成总内存的50%比较好。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set.default.ES_HEAP_SIZE=512</span></code></pre></td></tr></table></div></figure>

<p>如果要限制ES_MIN_MEM和ES_MAX_MEM，建议设置成一样大，避免出现频繁的内存分配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么我们不能用估算房屋同样的方法估算软件项目]]></title>
    <link href="http://codemany.com/blog/why-we-cant-estimate-software-project-the-same-way-we-estimate-houses/"/>
    <updated>2015-01-10T09:33:48+08:00</updated>
    <id>http://codemany.com/blog/why-we-cant-estimate-software-project-the-same-way-we-estimate-houses</id>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://www.summa-tech.com/blog/2009/01/28/why-we-cant-estimate-software-project-the-same-way-we-estimate-houses">http://www.summa-tech.com/blog/2009/01/28/why-we-cant-estimate-software-project-the-same-way-we-estimate-houses</a></p>

<p>把构造软件类比成建造房屋是非常有用的，但也有缺陷。</p>

<p>尽管软件建设和住宅建设都是工程实践，但比起软件，我们在估算建造房屋的成本和精力方面更成功。</p>

<h3 id="词汇障碍">词汇障碍</h3>

<p>因为我们大多数人一生都住在房子里，我们开发了一套定义良好的、可以理解的、几乎通用的词汇来描述和讨论关于我们称之为家的地方。当被问及我们的房子是什么样子的，我们可以很容易地回答。当计划一所新房子时，我们可以极其肯定地讨论我们想要什么，并确信建筑师和工程师会明白我们谈论的，反之亦然。我们可能不明白水管设施和电气细节，但我们知道电源插座要放在哪里，知道房间的大小，知道要有多少车库门。</p>

<p>当我们谈论软件时，就不是那么有效了。有太多来自业务和技术方面的新术语，我们需要依赖于现实世界中的类比去解释他们。不仅发生在业务和技术人员之间，甚至还发生在业务人员和业务人员，技术人员和技术人员之间。我们不习惯于去描述软件需求因为所有软件的抽象，在估算时沟通经常受到噪音、误解、缺乏眼界的影响，增加了真正需要构建的不确定性。</p>

<h3 id="物理">物理</h3>

<p>现实世界有非常强大和稳定的规则，比如重力，这些规则会在盖房子的时候施加约束。我们知道我们必须在构建二楼前先完成地下室。我们不能在地基完成后增加层的数量。在水管设施铺设后更改浴室的位置将会是非常非常昂贵的。</p>

<p>在软件项目中，我们生活在一个较少规则的世界里，就像《黑客帝国》。从技术上讲，我们可以在同一时间构造所有的应用层。它可以被设计成使用不同的数据库，运行在不同的服务器，或支持不同的语言。它可以通过浏览器、手机、或其它无线设备访问。选项几乎是无穷无尽的。</p>

<p>正是这种自由和灵活性，在过去的40年里驱动了软件的巨大的进步，但在同时，它也是无数软件项目失败的原因。至关重要的是需求要面对现实，让它们遵守一些基本规则，即使它们不受宇宙物理规律的约束。</p>

<h3 id="程序">程序</h3>

<p>物理和几千年建设的结合已经带来了如何去建造一座房子的一套可靠的程序，虽然总是会有新的材料和改进的技术，核心概念都是相同的。油漆房子的过程几百年来几乎没有变化。</p>

<p>我们仍然处于软件工程的早期阶段。大量的“直觉”仍在估算软件时使用，实际情况是直觉还没有被证明非常有效。</p>

<h3 id="材料和标准">材料和标准</h3>

<p>只有数量有限的材料能被实际地用在建造房屋上。从技术上来讲，可能有成千上百的选项去建造一堵墙：夹板、混凝土、钢铁、沙子、玻璃，但在家具建材零售店里这些选项是非常有限的。涂料的类型，门窗的模型很多但有限。当购买一个水槽时，它很容易兼容已有的水管设施的几率非常高。电器有着相同的电压，灯泡也是兼容的。计划建造一所房子的一切都是兼容的，材料更是普及的，把不确定性降低到了非常小的水平，提高了估算的准确性。</p>

<p>软件行业确实有一些标准，但是它们处于层的最低水平，例如网络协议和文件系统。服务器和产品的集成仍处于布线阶段，XML和Web Service还有很长的路要走，在它们和建筑业达到相同级别的兼容性前，如果这是可能的。</p>

<p>各种各样连接到数据库和构建软件的选项和方法增加了复杂性，提高了每个人参与软件构建工作的学习曲线。我不是说所有这些选项都是不好的，但它确实给估算阶段增加了不确定性，所以产生了复杂性。</p>

<h3 id="角色">角色</h3>

<p>每次我路过建筑工地，都会看到很多帽子，一些在积极工作，一些在等待时机采取行动。但最好的部分是我从来没有见过有人同时戴两顶帽子。角色界定的很明确，工人们专业从事于非常具体的领域。</p>

<p>在大型软件项目中也有一些角色被定义，但还远远没有达到建筑业相同级别的专业化。通常团队成员需要戴上很多帽子，结果是，有时候他们会执行那些他们不是专家的任务，这就增加了他们提供的估算的不确定性。</p>

<p>“很多帽子”现象的一个很好例子是“Webmaster”，该角色用于描述那个做网页设计、创建动画图片、编写HTML和Perl代码、配置数据库、管理网络和邮件服务器的家伙。幸运的是现在Webmaster是个很少使用的术语，因为所有这些活动现在都分配给了不同的角色，像网页设计师、DBA，程序员和系统管理员。我们确实在走向专业化，但还是有很长的路要走。</p>

<p>我并不是建议我们停止使用“让我们像建造房屋那样构造软件”的类比，但我们必须意识到这个比喻的局限性。一旦我们知道局限性我们将能更好地定位讨论这一差异，以及提供建议如何解决它们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TabActivity is deprecated]]></title>
    <link href="http://codemany.com/blog/tabactivity-is-deprecated/"/>
    <updated>2014-12-05T19:29:10+08:00</updated>
    <id>http://codemany.com/blog/tabactivity-is-deprecated</id>
    <content type="html"><![CDATA[<p>最近在整理<a href="http://codemany.com/blog/summary-of-android-tab-navigation/">Android Tab导航总结</a>的代码时发现
TabActivity在API 13中被标记为过期了，所以就去寻找它的替换类，能尽量满足最小修改的要求。发现可以使用FragmentActivity来替代，Fragment组件作为标签页添加。</p>

<p>Fragment是Android 3.0引入的一个新概念，主要是为了适应各种不同的屏幕大小，它非常类似于Activity，可以像Activity一样包含布局，但是不能单独存在，只能存在于Activity中。下图是Fragment在不同屏幕上的显示以及Fragment与所在Activity的关系：</p>

<p><img src="http://codemany.com/uploads/android-fragments.png" title="android-fragments" ></p>

<p>重构前的布局：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MainActivity extends TabActivity
</span><span class='line'>    TabHost - tabhost
</span><span class='line'>        LinearLayout
</span><span class='line'>            TabWidget - tabs
</span><span class='line'>            FrameLayout - tabcontent
</span><span class='line'>                TabSpec (Activity)
</span><span class='line'>                ...
</span><span class='line'>                TabSpec (Activity)</span></code></pre></td></tr></table></div></figure>

<p>重构后的布局：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MainActivity extends FragmentActivity
</span><span class='line'>    TabHost - tabhost
</span><span class='line'>        LinearLayout
</span><span class='line'>            TabWidget - tabs
</span><span class='line'>            FrameLayout - tabcontent
</span><span class='line'>                TabSpec (Fragment)
</span><span class='line'>                ...
</span><span class='line'>                TabSpec (Fragment)</span></code></pre></td></tr></table></div></figure>

<p>把TabLeftActivity和TabRightActivity分别改成LeftFragment和RightFragment：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class LeftFragment extends Fragment {
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public View onCreateView(LayoutInflater inflater, ViewGroup container,
</span><span class='line'>            Bundle savedInstanceState) {
</span><span class='line'>        rootView = inflater.inflate(R.layout.tab_left, container, false);
</span><span class='line'>
</span><span class='line'>        // do something
</span><span class='line'>        // 不能直接使用findViewById()方法，必须加上rootView前缀
</span><span class='line'>        // 如果要引用当前绑定的Activity实例，使用getActivity()方法
</span><span class='line'>
</span><span class='line'>        return rootView;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

<p>然后在main.xml中的FrameLayout里添加两个Fragment组件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;fragment android:name="com.example.fragments.LeftFragment"
</span><span class='line'>    android:id="@+id/fragment_left"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent" /&gt;
</span><span class='line'>
</span><span class='line'>&lt;fragment android:name="com.example.fragments.RightFragment"
</span><span class='line'>    android:id="@+id/fragment_right"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent" /&gt;</span></code></pre></td></tr></table></div></figure>

<p>把MainActivity改成从FragmentActivity继承。这里不能像TabActivity一样直接用getTabHost()，需要改成如下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TabHost tabHost = (TabHost)findViewById(android.R.id.tabhost);
</span><span class='line'>tabHost.setup();</span></code></pre></td></tr></table></div></figure>

<p>到这边就已经完成了，其它tabHost.addTab的使用方式一模一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据Exif时间信息归类照片]]></title>
    <link href="http://codemany.com/blog/move-photos-to-folders-based-on-exif-date/"/>
    <updated>2014-11-20T22:52:37+08:00</updated>
    <id>http://codemany.com/blog/move-photos-to-folders-based-on-exif-date</id>
    <content type="html"><![CDATA[<p>先要把Exif中的信息解析出来，得到其中的时间，有个<a href="https://github.com/remvee/exifr">exif</a>的gem很不错。然后再根据时间创建目录，把照片移动到对应的目录中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rubygems'
</span><span class='line'>require 'exifr'
</span><span class='line'>require 'fileutils'
</span><span class='line'>
</span><span class='line'>root = ARGV[0] || Dir.pwd
</span><span class='line'>
</span><span class='line'>Dir.foreach(root) do |file|
</span><span class='line'>  next if File.extname(file) != '.jpg'
</span><span class='line'>
</span><span class='line'>  obj = EXIFR::JPEG.new(file)
</span><span class='line'>  date_time_original = obj.exif.date_time_original if obj.exif?
</span><span class='line'>  next if date_time_original.nil?
</span><span class='line'>
</span><span class='line'>  dir = date_time_original.year.to_s
</span><span class='line'>  Dir.mkdir(dir) unless Dir.exist?(dir)
</span><span class='line'>  FileUtils.move(file, dir)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
</feed>
